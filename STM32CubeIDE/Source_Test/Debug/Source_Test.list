
Source_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001abf0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c90  0801add0  0801add0  0001bdd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ba60  0801ba60  0001d194  2**0
                  CONTENTS
  4 .ARM          00000008  0801ba60  0801ba60  0001ca60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ba68  0801ba68  0001d194  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ba68  0801ba68  0001ca68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801ba6c  0801ba6c  0001ca6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000194  20000000  0801ba70  0001d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002f28  20000194  0801bc04  0001d194  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200030bc  0801bc04  0001e0bc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  0001d194  2**0
                  CONTENTS, READONLY
 12 .debug_info   00031381  00000000  00000000  0001d1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007d7f  00000000  00000000  0004e549  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002cb8  00000000  00000000  000562c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002315  00000000  00000000  00058f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e3ec  00000000  00000000  0005b295  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034445  00000000  00000000  00069681  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00112c61  00000000  00000000  0009dac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000351b  00000000  00000000  001b0727  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000033c  00000000  00000000  001b3c42  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000024  00000000  00000000  001b3f80  2**2
                  CONTENTS, READONLY
 22 .iar.debug_frame 000003bf  00000000  00000000  001b3fa4  2**0
                  CONTENTS, READONLY
 23 .debug_frame  0000dbf0  00000000  00000000  001b4364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line_str 00000072  00000000  00000000  001c1f54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000194 	.word	0x20000194
 80001fc:	00000000 	.word	0x00000000
 8000200:	0801adb8 	.word	0x0801adb8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000198 	.word	0x20000198
 800021c:	0801adb8 	.word	0x0801adb8

08000220 <USBPD_CAD_Init>:
 8000220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000224:	2600      	movs	r6, #0
 8000226:	2803      	cmp	r0, #3
 8000228:	4681      	mov	r9, r0
 800022a:	460c      	mov	r4, r1
 800022c:	4690      	mov	r8, r2
 800022e:	461f      	mov	r7, r3
 8000230:	bf28      	it	cs
 8000232:	2601      	movcs	r6, #1
 8000234:	d219      	bcs.n	800026a <USBPD_CAD_Init+0x4a>
 8000236:	b90c      	cbnz	r4, 800023c <USBPD_CAD_Init+0x1c>
 8000238:	2602      	movs	r6, #2
 800023a:	e016      	b.n	800026a <USBPD_CAD_Init+0x4a>
 800023c:	200c      	movs	r0, #12
 800023e:	f01a f8d9 	bl	801a3f4 <malloc>
 8000242:	0005      	movs	r5, r0
 8000244:	bf08      	it	eq
 8000246:	2603      	moveq	r6, #3
 8000248:	d00f      	beq.n	800026a <USBPD_CAD_Init+0x4a>
 800024a:	210c      	movs	r1, #12
 800024c:	f01a fa22 	bl	801a694 <__aeabi_memclr>
 8000250:	602f      	str	r7, [r5, #0]
 8000252:	722e      	strb	r6, [r5, #8]
 8000254:	606c      	str	r4, [r5, #4]
 8000256:	464a      	mov	r2, r9
 8000258:	4947      	ldr	r1, [pc, #284]	@ (8000378 <.text_6>)
 800025a:	f841 5022 	str.w	r5, [r1, r2, lsl #2]
 800025e:	463a      	mov	r2, r7
 8000260:	6863      	ldr	r3, [r4, #4]
 8000262:	4641      	mov	r1, r8
 8000264:	4648      	mov	r0, r9
 8000266:	f00e fbf1 	bl	800ea4c <CAD_Init>
 800026a:	4630      	mov	r0, r6
 800026c:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08000270 <USBPD_CAD_PortEnable>:
 8000270:	2803      	cmp	r0, #3
 8000272:	d203      	bcs.n	800027c <USBPD_CAD_PortEnable+0xc>
 8000274:	4a40      	ldr	r2, [pc, #256]	@ (8000378 <.text_6>)
 8000276:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800027a:	7201      	strb	r1, [r0, #8]
 800027c:	4770      	bx	lr

0800027e <USBPD_CAD_Process>:
 800027e:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000280:	2100      	movs	r1, #0
 8000282:	f88d 1000 	strb.w	r1, [sp]
 8000286:	9101      	str	r1, [sp, #4]
 8000288:	f04f 35ff 	mov.w	r5, #4294967295
 800028c:	2600      	movs	r6, #0
 800028e:	4c3a      	ldr	r4, [pc, #232]	@ (8000378 <.text_6>)
 8000290:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000294:	2800      	cmp	r0, #0
 8000296:	d069      	beq.n	800036c <USBPD_CAD_Process+0xee>
 8000298:	7a00      	ldrb	r0, [r0, #8]
 800029a:	2801      	cmp	r0, #1
 800029c:	d166      	bne.n	800036c <USBPD_CAD_Process+0xee>
 800029e:	aa01      	add	r2, sp, #4
 80002a0:	4669      	mov	r1, sp
 80002a2:	b2f0      	uxtb	r0, r6
 80002a4:	f00e fdb4 	bl	800ee10 <CAD_StateMachine>
 80002a8:	42a8      	cmp	r0, r5
 80002aa:	bf98      	it	ls
 80002ac:	4605      	movls	r5, r0
 80002ae:	f89d 0000 	ldrb.w	r0, [sp]
 80002b2:	2801      	cmp	r0, #1
 80002b4:	d004      	beq.n	80002c0 <USBPD_CAD_Process+0x42>
 80002b6:	2802      	cmp	r0, #2
 80002b8:	bf18      	it	ne
 80002ba:	2804      	cmpne	r0, #4
 80002bc:	d012      	beq.n	80002e4 <USBPD_CAD_Process+0x66>
 80002be:	e03e      	b.n	800033e <USBPD_CAD_Process+0xc0>
 80002c0:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002c4:	6801      	ldr	r1, [r0, #0]
 80002c6:	680a      	ldr	r2, [r1, #0]
 80002c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6801      	ldr	r1, [r0, #0]
 80002d0:	680b      	ldr	r3, [r1, #0]
 80002d2:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80002d6:	600b      	str	r3, [r1, #0]
 80002d8:	6800      	ldr	r0, [r0, #0]
 80002da:	6801      	ldr	r1, [r0, #0]
 80002dc:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 80002e0:	6001      	str	r1, [r0, #0]
 80002e2:	e02f      	b.n	8000344 <USBPD_CAD_Process+0xc6>
 80002e4:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 80002e8:	6802      	ldr	r2, [r0, #0]
 80002ea:	9901      	ldr	r1, [sp, #4]
 80002ec:	6813      	ldr	r3, [r2, #0]
 80002ee:	2901      	cmp	r1, #1
 80002f0:	bf0c      	ite	eq
 80002f2:	2102      	moveq	r1, #2
 80002f4:	2101      	movne	r1, #1
 80002f6:	f361 334e 	bfi	r3, r1, #13, #2
 80002fa:	6013      	str	r3, [r2, #0]
 80002fc:	6800      	ldr	r0, [r0, #0]
 80002fe:	f854 1026 	ldr.w	r1, [r4, r6, lsl #2]
 8000302:	9a01      	ldr	r2, [sp, #4]
 8000304:	6803      	ldr	r3, [r0, #0]
 8000306:	f362 1387 	bfi	r3, r2, #6, #2
 800030a:	680a      	ldr	r2, [r1, #0]
 800030c:	6013      	str	r3, [r2, #0]
 800030e:	6808      	ldr	r0, [r1, #0]
 8000310:	6803      	ldr	r3, [r0, #0]
 8000312:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000316:	6003      	str	r3, [r0, #0]
 8000318:	6808      	ldr	r0, [r1, #0]
 800031a:	6801      	ldr	r1, [r0, #0]
 800031c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000320:	2800      	cmp	r0, #0
 8000322:	f854 0026 	ldr.w	r0, [r4, r6, lsl #2]
 8000326:	6800      	ldr	r0, [r0, #0]
 8000328:	6801      	ldr	r1, [r0, #0]
 800032a:	bf0c      	ite	eq
 800032c:	f021 0108 	biceq.w	r1, r1, #8
 8000330:	f041 0108 	orrne.w	r1, r1, #8
 8000334:	6001      	str	r1, [r0, #0]
 8000336:	b2f0      	uxtb	r0, r6
 8000338:	2168      	movs	r1, #104	@ 0x68
 800033a:	f000 f90c 	bl	8000556 <USBPD_PE_Notification>
 800033e:	f89d 0000 	ldrb.w	r0, [sp]
 8000342:	b198      	cbz	r0, 800036c <USBPD_CAD_Process+0xee>
 8000344:	f854 3026 	ldr.w	r3, [r4, r6, lsl #2]
 8000348:	685f      	ldr	r7, [r3, #4]
 800034a:	9a01      	ldr	r2, [sp, #4]
 800034c:	f89d 1000 	ldrb.w	r1, [sp]
 8000350:	f8d7 c000 	ldr.w	ip, [r7]
 8000354:	b2f0      	uxtb	r0, r6
 8000356:	47e0      	blx	ip
 8000358:	f89d 0000 	ldrb.w	r0, [sp]
 800035c:	2801      	cmp	r0, #1
 800035e:	bf18      	it	ne
 8000360:	2803      	cmpne	r0, #3
 8000362:	d103      	bne.n	800036c <USBPD_CAD_Process+0xee>
 8000364:	2169      	movs	r1, #105	@ 0x69
 8000366:	b2f0      	uxtb	r0, r6
 8000368:	f000 f8f5 	bl	8000556 <USBPD_PE_Notification>
 800036c:	1c76      	adds	r6, r6, #1
 800036e:	2e02      	cmp	r6, #2
 8000370:	d98e      	bls.n	8000290 <USBPD_CAD_Process+0x12>
 8000372:	4628      	mov	r0, r5
 8000374:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08000378 <.text_6>:
 8000378:	200001b0 	.word	0x200001b0

0800037c <USBPD_CAD_AssertRd>:
 800037c:	b510      	push	{r4, lr}
 800037e:	4604      	mov	r4, r0
 8000380:	f010 fa08 	bl	8010794 <USBPDM1_DeAssertRp>
 8000384:	4620      	mov	r0, r4
 8000386:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800038a:	f010 ba0f 	b.w	80107ac <USBPDM1_AssertRd>

0800038e <USBPD_CAD_AssertRp>:
 800038e:	b510      	push	{r4, lr}
 8000390:	4604      	mov	r4, r0
 8000392:	f010 fa95 	bl	80108c0 <USBPDM1_DeAssertRd>
 8000396:	4620      	mov	r0, r4
 8000398:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800039c:	f010 b95e 	b.w	801065c <USBPDM1_AssertRp>

080003a0 <USBPD_CAD_EnterErrorRecovery>:
 80003a0:	f00e bc60 	b.w	800ec64 <CAD_Enter_ErrorRecovery>

080003a4 <USBPD_CAD_SRC_SetRpResistor>:
 80003a4:	b510      	push	{r4, lr}
 80003a6:	f00e fcb9 	bl	800ed1c <CAD_Set_ResistorRp>
 80003aa:	2404      	movs	r4, #4
 80003ac:	b900      	cbnz	r0, 80003b0 <USBPD_CAD_SRC_SetRpResistor+0xc>
 80003ae:	2400      	movs	r4, #0
 80003b0:	4620      	mov	r0, r4
 80003b2:	bd10      	pop	{r4, pc}

080003b4 <USBPD_CAD_SetRpResistor>:
 80003b4:	e7f6      	b.n	80003a4 <USBPD_CAD_SRC_SetRpResistor>

080003b6 <USBPD_CAD_GetMemoryConsumption>:
 80003b6:	2024      	movs	r0, #36	@ 0x24
 80003b8:	4770      	bx	lr
	...

080003bc <USBPD_PE_Init>:
 80003bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80003c0:	460e      	mov	r6, r1
 80003c2:	4680      	mov	r8, r0
 80003c4:	6870      	ldr	r0, [r6, #4]
 80003c6:	4617      	mov	r7, r2
 80003c8:	461d      	mov	r5, r3
 80003ca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 80003ce:	b108      	cbz	r0, 80003d4 <USBPD_PE_Init+0x18>
 80003d0:	6a68      	ldr	r0, [r5, #36]	@ 0x24
 80003d2:	b108      	cbz	r0, 80003d8 <USBPD_PE_Init+0x1c>
 80003d4:	6be8      	ldr	r0, [r5, #60]	@ 0x3c
 80003d6:	b908      	cbnz	r0, 80003dc <USBPD_PE_Init+0x20>
 80003d8:	271b      	movs	r7, #27
 80003da:	e042      	b.n	8000462 <USBPD_PE_Init+0xa6>
 80003dc:	f1b8 0f03 	cmp.w	r8, #3
 80003e0:	bf28      	it	cs
 80003e2:	2717      	movcs	r7, #23
 80003e4:	d23d      	bcs.n	8000462 <USBPD_PE_Init+0xa6>
 80003e6:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 80003ea:	f01a f803 	bl	801a3f4 <malloc>
 80003ee:	0004      	movs	r4, r0
 80003f0:	bf08      	it	eq
 80003f2:	2716      	moveq	r7, #22
 80003f4:	d035      	beq.n	8000462 <USBPD_PE_Init+0xa6>
 80003f6:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 80003fa:	f01a f94b 	bl	801a694 <__aeabi_memclr>
 80003fe:	f8df 09ac 	ldr.w	r0, [pc, #2476]	@ 8000dac <.text_47>
 8000402:	4641      	mov	r1, r8
 8000404:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8000408:	6026      	str	r6, [r4, #0]
 800040a:	6067      	str	r7, [r4, #4]
 800040c:	f884 8010 	strb.w	r8, [r4, #16]
 8000410:	60a5      	str	r5, [r4, #8]
 8000412:	f204 438e 	addw	r3, r4, #1166	@ 0x48e
 8000416:	f204 2281 	addw	r2, r4, #641	@ 0x281
 800041a:	4631      	mov	r1, r6
 800041c:	4640      	mov	r0, r8
 800041e:	f004 fd92 	bl	8004f46 <USBPD_PRL_Init>
 8000422:	0007      	movs	r7, r0
 8000424:	d11d      	bne.n	8000462 <USBPD_PE_Init+0xa6>
 8000426:	6820      	ldr	r0, [r4, #0]
 8000428:	6841      	ldr	r1, [r0, #4]
 800042a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 800042e:	2800      	cmp	r0, #0
 8000430:	6860      	ldr	r0, [r4, #4]
 8000432:	6801      	ldr	r1, [r0, #0]
 8000434:	d004      	beq.n	8000440 <USBPD_PE_Init+0x84>
 8000436:	f041 0108 	orr.w	r1, r1, #8
 800043a:	6001      	str	r1, [r0, #0]
 800043c:	2201      	movs	r2, #1
 800043e:	e003      	b.n	8000448 <USBPD_PE_Init+0x8c>
 8000440:	f021 0108 	bic.w	r1, r1, #8
 8000444:	6001      	str	r1, [r0, #0]
 8000446:	2200      	movs	r2, #0
 8000448:	7933      	ldrb	r3, [r6, #4]
 800044a:	f003 0303 	and.w	r3, r3, #3
 800044e:	4611      	mov	r1, r2
 8000450:	4640      	mov	r0, r8
 8000452:	f004 fda6 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000456:	7931      	ldrb	r1, [r6, #4]
 8000458:	f001 0103 	and.w	r1, r1, #3
 800045c:	4640      	mov	r0, r8
 800045e:	f004 fdd1 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000462:	4638      	mov	r0, r7
 8000464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000468 <USBPD_PE_TimerCounter>:
 8000468:	f8df 1940 	ldr.w	r1, [pc, #2368]	@ 8000dac <.text_47>
 800046c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000470:	8bc1      	ldrh	r1, [r0, #30]
 8000472:	044a      	lsls	r2, r1, #17
 8000474:	d002      	beq.n	800047c <USBPD_PE_TimerCounter+0x14>
 8000476:	8bc1      	ldrh	r1, [r0, #30]
 8000478:	1e4a      	subs	r2, r1, #1
 800047a:	83c2      	strh	r2, [r0, #30]
 800047c:	8c01      	ldrh	r1, [r0, #32]
 800047e:	044a      	lsls	r2, r1, #17
 8000480:	d002      	beq.n	8000488 <USBPD_PE_TimerCounter+0x20>
 8000482:	8c01      	ldrh	r1, [r0, #32]
 8000484:	1e4a      	subs	r2, r1, #1
 8000486:	8402      	strh	r2, [r0, #32]
 8000488:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 800048a:	044a      	lsls	r2, r1, #17
 800048c:	d002      	beq.n	8000494 <USBPD_PE_TimerCounter+0x2c>
 800048e:	8cc1      	ldrh	r1, [r0, #38]	@ 0x26
 8000490:	1e4a      	subs	r2, r1, #1
 8000492:	84c2      	strh	r2, [r0, #38]	@ 0x26
 8000494:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 8000496:	044a      	lsls	r2, r1, #17
 8000498:	d002      	beq.n	80004a0 <USBPD_PE_TimerCounter+0x38>
 800049a:	8c41      	ldrh	r1, [r0, #34]	@ 0x22
 800049c:	1e4a      	subs	r2, r1, #1
 800049e:	8442      	strh	r2, [r0, #34]	@ 0x22
 80004a0:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80004a2:	044a      	lsls	r2, r1, #17
 80004a4:	d002      	beq.n	80004ac <USBPD_PE_TimerCounter+0x44>
 80004a6:	8c81      	ldrh	r1, [r0, #36]	@ 0x24
 80004a8:	1e4a      	subs	r2, r1, #1
 80004aa:	8482      	strh	r2, [r0, #36]	@ 0x24
 80004ac:	4770      	bx	lr

080004ae <USBPD_PE_TimerCounteUpdate>:
 80004ae:	b538      	push	{r3, r4, r5, lr}
 80004b0:	460c      	mov	r4, r1
 80004b2:	f8df 18f8 	ldr.w	r1, [pc, #2296]	@ 8000dac <.text_47>
 80004b6:	f851 5020 	ldr.w	r5, [r1, r0, lsl #2]
 80004ba:	f5b4 4f00 	cmp.w	r4, #32768	@ 0x8000
 80004be:	da22      	bge.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004c0:	8be8      	ldrh	r0, [r5, #30]
 80004c2:	0441      	lsls	r1, r0, #17
 80004c4:	d003      	beq.n	80004ce <USBPD_PE_TimerCounteUpdate+0x20>
 80004c6:	8be8      	ldrh	r0, [r5, #30]
 80004c8:	f000 f81e 	bl	8000508 <.text_8>
 80004cc:	83e8      	strh	r0, [r5, #30]
 80004ce:	8c28      	ldrh	r0, [r5, #32]
 80004d0:	0441      	lsls	r1, r0, #17
 80004d2:	d003      	beq.n	80004dc <USBPD_PE_TimerCounteUpdate+0x2e>
 80004d4:	8c28      	ldrh	r0, [r5, #32]
 80004d6:	f000 f817 	bl	8000508 <.text_8>
 80004da:	8428      	strh	r0, [r5, #32]
 80004dc:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004de:	0441      	lsls	r1, r0, #17
 80004e0:	d003      	beq.n	80004ea <USBPD_PE_TimerCounteUpdate+0x3c>
 80004e2:	8ce8      	ldrh	r0, [r5, #38]	@ 0x26
 80004e4:	f000 f810 	bl	8000508 <.text_8>
 80004e8:	84e8      	strh	r0, [r5, #38]	@ 0x26
 80004ea:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004ec:	0441      	lsls	r1, r0, #17
 80004ee:	d003      	beq.n	80004f8 <USBPD_PE_TimerCounteUpdate+0x4a>
 80004f0:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 80004f2:	f000 f809 	bl	8000508 <.text_8>
 80004f6:	8468      	strh	r0, [r5, #34]	@ 0x22
 80004f8:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 80004fa:	0441      	lsls	r1, r0, #17
 80004fc:	d003      	beq.n	8000506 <USBPD_PE_TimerCounteUpdate+0x58>
 80004fe:	8ca8      	ldrh	r0, [r5, #36]	@ 0x24
 8000500:	f000 f802 	bl	8000508 <.text_8>
 8000504:	84a8      	strh	r0, [r5, #36]	@ 0x24
 8000506:	bd31      	pop	{r0, r4, r5, pc}

08000508 <.text_8>:
 8000508:	4621      	mov	r1, r4
 800050a:	f000 bef9 	b.w	8001300 <PE_UpdateTimer>

0800050e <USBPD_PE_IsCableConnected>:
 800050e:	f8df 289c 	ldr.w	r2, [pc, #2204]	@ 8000dac <.text_47>
 8000512:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000516:	6842      	ldr	r2, [r0, #4]
 8000518:	6813      	ldr	r3, [r2, #0]
 800051a:	f361 330c 	bfi	r3, r1, #12, #1
 800051e:	6013      	str	r3, [r2, #0]
 8000520:	2248      	movs	r2, #72	@ 0x48
 8000522:	7442      	strb	r2, [r0, #17]
 8000524:	4770      	bx	lr

08000526 <USBPD_PE_StateMachine_Reset>:
 8000526:	f8df 2884 	ldr.w	r2, [pc, #2180]	@ 8000dac <.text_47>
 800052a:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 800052e:	2148      	movs	r1, #72	@ 0x48
 8000530:	7441      	strb	r1, [r0, #17]
 8000532:	4770      	bx	lr

08000534 <USBPD_PE_StateMachine_Stop>:
 8000534:	f005 b81f 	b.w	8005576 <USBPD_PRL_Stop>

08000538 <USBPD_PE_StateMachine_DRP>:
 8000538:	f8df 1870 	ldr.w	r1, [pc, #2160]	@ 8000dac <.text_47>
 800053c:	4602      	mov	r2, r0
 800053e:	f851 3022 	ldr.w	r3, [r1, r2, lsl #2]
 8000542:	6859      	ldr	r1, [r3, #4]
 8000544:	680a      	ldr	r2, [r1, #0]
 8000546:	f3c2 0180 	ubfx	r1, r2, #2, #1
 800054a:	2900      	cmp	r1, #0
 800054c:	bf18      	it	ne
 800054e:	f002 b9ed 	bne.w	800292c <USBPD_PE_StateMachine_SRC>
 8000552:	f001 bbcd 	b.w	8001cf0 <USBPD_PE_StateMachine_SNK>

08000556 <USBPD_PE_Notification>:
 8000556:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000558:	2803      	cmp	r0, #3
 800055a:	4604      	mov	r4, r0
 800055c:	460d      	mov	r5, r1
 800055e:	d214      	bcs.n	800058a <__iar_annotation$$tailcall+0x2>
 8000560:	2600      	movs	r6, #0
 8000562:	9600      	str	r6, [sp, #0]
 8000564:	2300      	movs	r3, #0
 8000566:	f8df 7848 	ldr.w	r7, [pc, #2120]	@ 8000db0 <.text_48>
 800056a:	683e      	ldr	r6, [r7, #0]
 800056c:	462a      	mov	r2, r5
 800056e:	4621      	mov	r1, r4
 8000570:	2009      	movs	r0, #9
 8000572:	47b0      	blx	r6
 8000574:	f8df 2834 	ldr.w	r2, [pc, #2100]	@ 8000dac <.text_47>
 8000578:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 800057c:	689a      	ldr	r2, [r3, #8]
 800057e:	68d3      	ldr	r3, [r2, #12]
 8000580:	4629      	mov	r1, r5
 8000582:	4620      	mov	r0, r4
 8000584:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}

08000588 <__iar_annotation$$tailcall>:
 8000588:	4718      	bx	r3
 800058a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800058c <USBPD_PE_InitVDM_Callback>:
 800058c:	f8df 281c 	ldr.w	r2, [pc, #2076]	@ 8000dac <.text_47>
 8000590:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000594:	60c1      	str	r1, [r0, #12]
 8000596:	4770      	bx	lr

08000598 <USBPD_PE_Request_HardReset>:
 8000598:	b580      	push	{r7, lr}
 800059a:	f8df 1810 	ldr.w	r1, [pc, #2064]	@ 8000dac <.text_47>
 800059e:	4602      	mov	r2, r0
 80005a0:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 80005a4:	230f      	movs	r3, #15
 80005a6:	f881 3032 	strb.w	r3, [r1, #50]	@ 0x32
 80005aa:	6889      	ldr	r1, [r1, #8]
 80005ac:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005ae:	4790      	blx	r2
 80005b0:	2000      	movs	r0, #0
 80005b2:	bd02      	pop	{r1, pc}

080005b4 <USBPD_PE_Request_CableReset>:
 80005b4:	b538      	push	{r3, r4, r5, lr}
 80005b6:	f000 fbe8 	bl	8000d8a <.text_45>
 80005ba:	6853      	ldr	r3, [r2, #4]
 80005bc:	681c      	ldr	r4, [r3, #0]
 80005be:	f248 7108 	movw	r1, #34568	@ 0x8708
 80005c2:	400c      	ands	r4, r1
 80005c4:	f248 3508 	movw	r5, #33544	@ 0x8308
 80005c8:	42ac      	cmp	r4, r5
 80005ca:	d105      	bne.n	80005d8 <USBPD_PE_Request_CableReset+0x24>
 80005cc:	6891      	ldr	r1, [r2, #8]
 80005ce:	2399      	movs	r3, #153	@ 0x99
 80005d0:	f882 3032 	strb.w	r3, [r2, #50]	@ 0x32
 80005d4:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80005d6:	4790      	blx	r2
 80005d8:	2010      	movs	r0, #16
 80005da:	bd32      	pop	{r1, r4, r5, pc}

080005dc <USBPD_PE_Request_CtrlMessage>:
 80005dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80005e0:	4680      	mov	r8, r0
 80005e2:	460c      	mov	r4, r1
 80005e4:	f8df 07c4 	ldr.w	r0, [pc, #1988]	@ 8000dac <.text_47>
 80005e8:	b093      	sub	sp, #76	@ 0x4c
 80005ea:	4641      	mov	r1, r8
 80005ec:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 80005f0:	f8df 17c0 	ldr.w	r1, [pc, #1984]	@ 8000db4 <.text_49>
 80005f4:	4617      	mov	r7, r2
 80005f6:	4668      	mov	r0, sp
 80005f8:	224c      	movs	r2, #76	@ 0x4c
 80005fa:	f01a f849 	bl	801a690 <__aeabi_memcpy>
 80005fe:	f105 0132 	add.w	r1, r5, #50	@ 0x32
 8000602:	2600      	movs	r6, #0
 8000604:	7808      	ldrb	r0, [r1, #0]
 8000606:	b920      	cbnz	r0, 8000612 <USBPD_PE_Request_CtrlMessage+0x36>
 8000608:	6868      	ldr	r0, [r5, #4]
 800060a:	6802      	ldr	r2, [r0, #0]
 800060c:	f3c2 3000 	ubfx	r0, r2, #12, #1
 8000610:	b908      	cbnz	r0, 8000616 <USBPD_PE_Request_CtrlMessage+0x3a>
 8000612:	2603      	movs	r6, #3
 8000614:	e07f      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 8000616:	f8d5 c004 	ldr.w	ip, [r5, #4]
 800061a:	6828      	ldr	r0, [r5, #0]
 800061c:	f8dc e000 	ldr.w	lr, [ip]
 8000620:	6842      	ldr	r2, [r0, #4]
 8000622:	6868      	ldr	r0, [r5, #4]
 8000624:	6803      	ldr	r3, [r0, #0]
 8000626:	f3c3 0080 	ubfx	r0, r3, #2, #1
 800062a:	f3ce 2c02 	ubfx	ip, lr, #8, #3
 800062e:	f8d5 e004 	ldr.w	lr, [r5, #4]
 8000632:	f89e 9000 	ldrb.w	r9, [lr]
 8000636:	f009 0903 	and.w	r9, r9, #3
 800063a:	08d2      	lsrs	r2, r2, #3
 800063c:	2800      	cmp	r0, #0
 800063e:	bf07      	ittee	eq
 8000640:	2002      	moveq	r0, #2
 8000642:	2300      	moveq	r3, #0
 8000644:	2000      	movne	r0, #0
 8000646:	2304      	movne	r3, #4
 8000648:	f1bc 0f03 	cmp.w	ip, #3
 800064c:	bf0c      	ite	eq
 800064e:	f04f 0c08 	moveq.w	ip, #8
 8000652:	46b4      	movne	ip, r6
 8000654:	f1b9 0f02 	cmp.w	r9, #2
 8000658:	f002 0201 	and.w	r2, r2, #1
 800065c:	bf0c      	ite	eq
 800065e:	f04f 0e40 	moveq.w	lr, #64	@ 0x40
 8000662:	46b6      	movne	lr, r6
 8000664:	4302      	orrs	r2, r0
 8000666:	431a      	orrs	r2, r3
 8000668:	ea4c 0202 	orr.w	r2, ip, r2
 800066c:	ea4e 0202 	orr.w	r2, lr, r2
 8000670:	f012 0f03 	tst.w	r2, #3
 8000674:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 8000678:	bf18      	it	ne
 800067a:	f042 0210 	orrne.w	r2, r2, #16
 800067e:	f012 0f05 	tst.w	r2, #5
 8000682:	f81d 0003 	ldrb.w	r0, [sp, r3]
 8000686:	bf18      	it	ne
 8000688:	f042 0220 	orrne.w	r2, r2, #32
 800068c:	4002      	ands	r2, r0
 800068e:	4282      	cmp	r2, r0
 8000690:	d118      	bne.n	80006c4 <USBPD_PE_Request_CtrlMessage+0xe8>
 8000692:	2c05      	cmp	r4, #5
 8000694:	704e      	strb	r6, [r1, #1]
 8000696:	f205 225e 	addw	r2, r5, #606	@ 0x25e
 800069a:	d02e      	beq.n	80006fa <USBPD_PE_Request_CtrlMessage+0x11e>
 800069c:	2c0b      	cmp	r4, #11
 800069e:	d00e      	beq.n	80006be <USBPD_PE_Request_CtrlMessage+0xe2>
 80006a0:	2c0d      	cmp	r4, #13
 80006a2:	d028      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006a4:	2c11      	cmp	r4, #17
 80006a6:	d00f      	beq.n	80006c8 <USBPD_PE_Request_CtrlMessage+0xec>
 80006a8:	2c12      	cmp	r4, #18
 80006aa:	d012      	beq.n	80006d2 <USBPD_PE_Request_CtrlMessage+0xf6>
 80006ac:	2c14      	cmp	r4, #20
 80006ae:	d012      	beq.n	80006d6 <USBPD_PE_Request_CtrlMessage+0xfa>
 80006b0:	2c15      	cmp	r4, #21
 80006b2:	d017      	beq.n	80006e4 <USBPD_PE_Request_CtrlMessage+0x108>
 80006b4:	2c16      	cmp	r4, #22
 80006b6:	d009      	beq.n	80006cc <USBPD_PE_Request_CtrlMessage+0xf0>
 80006b8:	2c18      	cmp	r4, #24
 80006ba:	d01c      	beq.n	80006f6 <USBPD_PE_Request_CtrlMessage+0x11a>
 80006bc:	e01f      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006be:	68af      	ldr	r7, [r5, #8]
 80006c0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80006c2:	b9e0      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006c4:	2602      	movs	r6, #2
 80006c6:	e026      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006c8:	2011      	movs	r0, #17
 80006ca:	e017      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006cc:	2716      	movs	r7, #22
 80006ce:	7017      	strb	r7, [r2, #0]
 80006d0:	e015      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006d2:	2012      	movs	r0, #18
 80006d4:	e012      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006d6:	6828      	ldr	r0, [r5, #0]
 80006d8:	8907      	ldrh	r7, [r0, #8]
 80006da:	f3c7 0080 	ubfx	r0, r7, #2, #1
 80006de:	b970      	cbnz	r0, 80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006e0:	2610      	movs	r6, #16
 80006e2:	e018      	b.n	8000716 <USBPD_PE_Request_CtrlMessage+0x13a>
 80006e4:	6828      	ldr	r0, [r5, #0]
 80006e6:	8907      	ldrh	r7, [r0, #8]
 80006e8:	f3c7 10c0 	ubfx	r0, r7, #7, #1
 80006ec:	b908      	cbnz	r0, 80006f2 <USBPD_PE_Request_CtrlMessage+0x116>
 80006ee:	2010      	movs	r0, #16
 80006f0:	e012      	b.n	8000718 <USBPD_PE_Request_CtrlMessage+0x13c>
 80006f2:	2015      	movs	r0, #21
 80006f4:	e002      	b.n	80006fc <USBPD_PE_Request_CtrlMessage+0x120>
 80006f6:	704f      	strb	r7, [r1, #1]
 80006f8:	e001      	b.n	80006fe <USBPD_PE_Request_CtrlMessage+0x122>
 80006fa:	2005      	movs	r0, #5
 80006fc:	7010      	strb	r0, [r2, #0]
 80006fe:	eb0d 0703 	add.w	r7, sp, r3
 8000702:	7878      	ldrb	r0, [r7, #1]
 8000704:	7050      	strb	r0, [r2, #1]
 8000706:	eb0d 0203 	add.w	r2, sp, r3
 800070a:	7890      	ldrb	r0, [r2, #2]
 800070c:	7008      	strb	r0, [r1, #0]
 800070e:	4640      	mov	r0, r8
 8000710:	68a9      	ldr	r1, [r5, #8]
 8000712:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000714:	4790      	blx	r2
 8000716:	4630      	mov	r0, r6
 8000718:	b013      	add	sp, #76	@ 0x4c
 800071a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0800071e <USBPD_PE_Request_DataMessage>:
 800071e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000720:	f000 f85f 	bl	80007e2 <.text_20>
 8000724:	b923      	cbnz	r3, 8000730 <USBPD_PE_Request_DataMessage+0x12>
 8000726:	686b      	ldr	r3, [r5, #4]
 8000728:	681f      	ldr	r7, [r3, #0]
 800072a:	f3c7 3300 	ubfx	r3, r7, #12, #1
 800072e:	b90b      	cbnz	r3, 8000734 <USBPD_PE_Request_DataMessage+0x16>
 8000730:	2403      	movs	r4, #3
 8000732:	e01a      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000734:	2300      	movs	r3, #0
 8000736:	7073      	strb	r3, [r6, #1]
 8000738:	2901      	cmp	r1, #1
 800073a:	f240 3302 	movw	r3, #770	@ 0x302
 800073e:	f240 7703 	movw	r7, #1795	@ 0x703
 8000742:	d004      	beq.n	800074e <USBPD_PE_Request_DataMessage+0x30>
 8000744:	2906      	cmp	r1, #6
 8000746:	d012      	beq.n	800076e <USBPD_PE_Request_DataMessage+0x50>
 8000748:	2907      	cmp	r1, #7
 800074a:	d01a      	beq.n	8000782 <USBPD_PE_Request_DataMessage+0x64>
 800074c:	e025      	b.n	800079a <USBPD_PE_Request_DataMessage+0x7c>
 800074e:	6869      	ldr	r1, [r5, #4]
 8000750:	680a      	ldr	r2, [r1, #0]
 8000752:	f3c2 0180 	ubfx	r1, r2, #2, #1
 8000756:	b141      	cbz	r1, 800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000758:	2101      	movs	r1, #1
 800075a:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 800075e:	2207      	movs	r2, #7
 8000760:	7032      	strb	r2, [r6, #0]
 8000762:	68a9      	ldr	r1, [r5, #8]
 8000764:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000766:	4790      	blx	r2
 8000768:	2400      	movs	r4, #0
 800076a:	4620      	mov	r0, r4
 800076c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800076e:	6869      	ldr	r1, [r5, #4]
 8000770:	6809      	ldr	r1, [r1, #0]
 8000772:	400f      	ands	r7, r1
 8000774:	429f      	cmp	r7, r3
 8000776:	d1f8      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 8000778:	6812      	ldr	r2, [r2, #0]
 800077a:	62aa      	str	r2, [r5, #40]	@ 0x28
 800077c:	212b      	movs	r1, #43	@ 0x2b
 800077e:	7031      	strb	r1, [r6, #0]
 8000780:	e7ef      	b.n	8000762 <USBPD_PE_Request_DataMessage+0x44>
 8000782:	6869      	ldr	r1, [r5, #4]
 8000784:	6809      	ldr	r1, [r1, #0]
 8000786:	400f      	ands	r7, r1
 8000788:	429f      	cmp	r7, r3
 800078a:	d1ee      	bne.n	800076a <USBPD_PE_Request_DataMessage+0x4c>
 800078c:	6812      	ldr	r2, [r2, #0]
 800078e:	62aa      	str	r2, [r5, #40]	@ 0x28
 8000790:	215d      	movs	r1, #93	@ 0x5d
 8000792:	f885 125f 	strb.w	r1, [r5, #607]	@ 0x25f
 8000796:	2262      	movs	r2, #98	@ 0x62
 8000798:	e7e2      	b.n	8000760 <USBPD_PE_Request_DataMessage+0x42>
 800079a:	2410      	movs	r4, #16
 800079c:	e7e5      	b.n	800076a <USBPD_PE_Request_DataMessage+0x4c>

0800079e <USBPD_PE_Send_Request>:
 800079e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007a0:	f000 f81f 	bl	80007e2 <.text_20>
 80007a4:	b923      	cbnz	r3, 80007b0 <USBPD_PE_Send_Request+0x12>
 80007a6:	686b      	ldr	r3, [r5, #4]
 80007a8:	681f      	ldr	r7, [r3, #0]
 80007aa:	f3c7 3300 	ubfx	r3, r7, #12, #1
 80007ae:	b90b      	cbnz	r3, 80007b4 <USBPD_PE_Send_Request+0x16>
 80007b0:	2403      	movs	r4, #3
 80007b2:	e014      	b.n	80007de <USBPD_PE_Send_Request+0x40>
 80007b4:	686f      	ldr	r7, [r5, #4]
 80007b6:	683f      	ldr	r7, [r7, #0]
 80007b8:	f240 7304 	movw	r3, #1796	@ 0x704
 80007bc:	403b      	ands	r3, r7
 80007be:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80007c2:	d10c      	bne.n	80007de <USBPD_PE_Send_Request+0x40>
 80007c4:	2445      	movs	r4, #69	@ 0x45
 80007c6:	7034      	strb	r4, [r6, #0]
 80007c8:	61a9      	str	r1, [r5, #24]
 80007ca:	2400      	movs	r4, #0
 80007cc:	6969      	ldr	r1, [r5, #20]
 80007ce:	f362 01c4 	bfi	r1, r2, #3, #2
 80007d2:	6169      	str	r1, [r5, #20]
 80007d4:	2200      	movs	r2, #0
 80007d6:	7072      	strb	r2, [r6, #1]
 80007d8:	68a9      	ldr	r1, [r5, #8]
 80007da:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80007dc:	4790      	blx	r2
 80007de:	4620      	mov	r0, r4
 80007e0:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080007e2 <.text_20>:
 80007e2:	f8df 3be4 	ldr.w	r3, [pc, #3044]	@ 80013c8 <.text_70>
 80007e6:	4604      	mov	r4, r0
 80007e8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 80007ec:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 80007f0:	2402      	movs	r4, #2
 80007f2:	7833      	ldrb	r3, [r6, #0]
 80007f4:	4770      	bx	lr

080007f6 <USBPD_PE_SendExtendedMessage>:
 80007f6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80007fa:	4681      	mov	r9, r0
 80007fc:	468a      	mov	sl, r1
 80007fe:	f8df 0bc8 	ldr.w	r0, [pc, #3016]	@ 80013c8 <.text_70>
 8000802:	4649      	mov	r1, r9
 8000804:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8000808:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 800080c:	469b      	mov	fp, r3
 800080e:	2500      	movs	r5, #0
 8000810:	b920      	cbnz	r0, 800081c <USBPD_PE_SendExtendedMessage+0x26>
 8000812:	6860      	ldr	r0, [r4, #4]
 8000814:	6801      	ldr	r1, [r0, #0]
 8000816:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800081a:	b908      	cbnz	r0, 8000820 <USBPD_PE_SendExtendedMessage+0x2a>
 800081c:	2503      	movs	r5, #3
 800081e:	e066      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000820:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8000824:	2803      	cmp	r0, #3
 8000826:	d10d      	bne.n	8000844 <USBPD_PE_SendExtendedMessage+0x4e>
 8000828:	6860      	ldr	r0, [r4, #4]
 800082a:	7801      	ldrb	r1, [r0, #0]
 800082c:	f001 0103 	and.w	r1, r1, #3
 8000830:	2901      	cmp	r1, #1
 8000832:	bf98      	it	ls
 8000834:	2501      	movls	r5, #1
 8000836:	d95a      	bls.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000838:	f8dd 8028 	ldr.w	r8, [sp, #40]	@ 0x28
 800083c:	f240 1105 	movw	r1, #261	@ 0x105
 8000840:	4588      	cmp	r8, r1
 8000842:	d301      	bcc.n	8000848 <USBPD_PE_SendExtendedMessage+0x52>
 8000844:	2502      	movs	r5, #2
 8000846:	e052      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 8000848:	f88d 2000 	strb.w	r2, [sp]
 800084c:	f204 265d 	addw	r6, r4, #605	@ 0x25d
 8000850:	6960      	ldr	r0, [r4, #20]
 8000852:	f020 0020 	bic.w	r0, r0, #32
 8000856:	6160      	str	r0, [r4, #20]
 8000858:	f89d 0000 	ldrb.w	r0, [sp]
 800085c:	2803      	cmp	r0, #3
 800085e:	d008      	beq.n	8000872 <USBPD_PE_SendExtendedMessage+0x7c>
 8000860:	2804      	cmp	r0, #4
 8000862:	d018      	beq.n	8000896 <USBPD_PE_SendExtendedMessage+0xa0>
 8000864:	2806      	cmp	r0, #6
 8000866:	d01d      	beq.n	80008a4 <USBPD_PE_SendExtendedMessage+0xae>
 8000868:	2808      	cmp	r0, #8
 800086a:	d01d      	beq.n	80008a8 <USBPD_PE_SendExtendedMessage+0xb2>
 800086c:	280a      	cmp	r0, #10
 800086e:	d01e      	beq.n	80008ae <USBPD_PE_SendExtendedMessage+0xb8>
 8000870:	e020      	b.n	80008b4 <USBPD_PE_SendExtendedMessage+0xbe>
 8000872:	210c      	movs	r1, #12
 8000874:	70b1      	strb	r1, [r6, #2]
 8000876:	6960      	ldr	r0, [r4, #20]
 8000878:	f040 0020 	orr.w	r0, r0, #32
 800087c:	6160      	str	r0, [r4, #20]
 800087e:	ea5f 0008 	movs.w	r0, r8
 8000882:	d025      	beq.n	80008d0 <USBPD_PE_SendExtendedMessage+0xda>
 8000884:	4648      	mov	r0, r9
 8000886:	f000 fa86 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800088a:	2700      	movs	r7, #0
 800088c:	2801      	cmp	r0, #1
 800088e:	bf08      	it	eq
 8000890:	2704      	moveq	r7, #4
 8000892:	2000      	movs	r0, #0
 8000894:	e017      	b.n	80008c6 <USBPD_PE_SendExtendedMessage+0xd0>
 8000896:	200d      	movs	r0, #13
 8000898:	70b0      	strb	r0, [r6, #2]
 800089a:	6961      	ldr	r1, [r4, #20]
 800089c:	f041 0120 	orr.w	r1, r1, #32
 80008a0:	6161      	str	r1, [r4, #20]
 80008a2:	e7ec      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008a4:	200e      	movs	r0, #14
 80008a6:	e7f7      	b.n	8000898 <USBPD_PE_SendExtendedMessage+0xa2>
 80008a8:	205b      	movs	r0, #91	@ 0x5b
 80008aa:	70b0      	strb	r0, [r6, #2]
 80008ac:	e7e7      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008ae:	215c      	movs	r1, #92	@ 0x5c
 80008b0:	70b1      	strb	r1, [r6, #2]
 80008b2:	e7e4      	b.n	800087e <USBPD_PE_SendExtendedMessage+0x88>
 80008b4:	2510      	movs	r5, #16
 80008b6:	e01a      	b.n	80008ee <USBPD_PE_SendExtendedMessage+0xf8>
 80008b8:	183a      	adds	r2, r7, r0
 80008ba:	f81b 1000 	ldrb.w	r1, [fp, r0]
 80008be:	4422      	add	r2, r4
 80008c0:	1c40      	adds	r0, r0, #1
 80008c2:	f882 1385 	strb.w	r1, [r2, #901]	@ 0x385
 80008c6:	4540      	cmp	r0, r8
 80008c8:	d3f6      	bcc.n	80008b8 <USBPD_PE_SendExtendedMessage+0xc2>
 80008ca:	f8a4 8490 	strh.w	r8, [r4, #1168]	@ 0x490
 80008ce:	e001      	b.n	80008d4 <USBPD_PE_SendExtendedMessage+0xde>
 80008d0:	f8a4 5490 	strh.w	r5, [r4, #1168]	@ 0x490
 80008d4:	f104 0032 	add.w	r0, r4, #50	@ 0x32
 80008d8:	2231      	movs	r2, #49	@ 0x31
 80008da:	f880 a001 	strb.w	sl, [r0, #1]
 80008de:	f89d 1000 	ldrb.w	r1, [sp]
 80008e2:	7031      	strb	r1, [r6, #0]
 80008e4:	7002      	strb	r2, [r0, #0]
 80008e6:	4648      	mov	r0, r9
 80008e8:	68a3      	ldr	r3, [r4, #8]
 80008ea:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80008ec:	4788      	blx	r1
 80008ee:	4628      	mov	r0, r5
 80008f0:	e8bd 8ff2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080008f4 <PE_Send_RESET>:
 80008f4:	b538      	push	{r3, r4, r5, lr}
 80008f6:	4604      	mov	r4, r0
 80008f8:	460d      	mov	r5, r1
 80008fa:	2d05      	cmp	r5, #5
 80008fc:	7c20      	ldrb	r0, [r4, #16]
 80008fe:	bf0c      	ite	eq
 8000900:	211f      	moveq	r1, #31
 8000902:	215e      	movne	r1, #94	@ 0x5e
 8000904:	f7ff fe27 	bl	8000556 <USBPD_PE_Notification>
 8000908:	7c20      	ldrb	r0, [r4, #16]
 800090a:	4629      	mov	r1, r5
 800090c:	f004 fdd9 	bl	80054c2 <USBPD_PRL_ResetRequestProcess>
 8000910:	f3ef 8010 	mrs	r0, PRIMASK
 8000914:	b672      	cpsid	i
 8000916:	2100      	movs	r1, #0
 8000918:	f884 103c 	strb.w	r1, [r4, #60]	@ 0x3c
 800091c:	f380 8810 	msr	PRIMASK, r0
 8000920:	bd31      	pop	{r0, r4, r5, pc}

08000922 <PE_Get_SpecRevision>:
 8000922:	f8df 1aa4 	ldr.w	r1, [pc, #2724]	@ 80013c8 <.text_70>
 8000926:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 800092a:	6841      	ldr	r1, [r0, #4]
 800092c:	7808      	ldrb	r0, [r1, #0]
 800092e:	f000 0003 	and.w	r0, r0, #3
 8000932:	4770      	bx	lr

08000934 <PE_ChangePowerRole>:
 8000934:	6842      	ldr	r2, [r0, #4]
 8000936:	6813      	ldr	r3, [r2, #0]
 8000938:	f361 0382 	bfi	r3, r1, #2, #1
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	7c00      	ldrb	r0, [r0, #16]
 8000940:	f004 bb45 	b.w	8004fce <USBPD_PRL_SetHeaderPowerRole>

08000944 <PE_Get_RxEvent>:
 8000944:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000946:	2114      	movs	r1, #20
 8000948:	f3ef 8410 	mrs	r4, PRIMASK
 800094c:	b672      	cpsid	i
 800094e:	f100 0530 	add.w	r5, r0, #48	@ 0x30
 8000952:	7b2a      	ldrb	r2, [r5, #12]
 8000954:	b332      	cbz	r2, 80009a4 <PE_Get_RxEvent+0x60>
 8000956:	f500 7613 	add.w	r6, r0, #588	@ 0x24c
 800095a:	5cb3      	ldrb	r3, [r6, r2]
 800095c:	065f      	lsls	r7, r3, #25
 800095e:	bf58      	it	pl
 8000960:	2103      	movpl	r1, #3
 8000962:	d51f      	bpl.n	80009a4 <PE_Get_RxEvent+0x60>
 8000964:	f44f 7384 	mov.w	r3, #264	@ 0x108
 8000968:	435a      	muls	r2, r3
 800096a:	4410      	add	r0, r2
 800096c:	38cb      	subs	r0, #203	@ 0xcb
 800096e:	60a8      	str	r0, [r5, #8]
 8000970:	7802      	ldrb	r2, [r0, #0]
 8000972:	7840      	ldrb	r0, [r0, #1]
 8000974:	eb02 2300 	add.w	r3, r2, r0, lsl #8
 8000978:	7b28      	ldrb	r0, [r5, #12]
 800097a:	80ab      	strh	r3, [r5, #4]
 800097c:	5c32      	ldrb	r2, [r6, r0]
 800097e:	f002 021f 	and.w	r2, r2, #31
 8000982:	2a01      	cmp	r2, #1
 8000984:	d004      	beq.n	8000990 <PE_Get_RxEvent+0x4c>
 8000986:	2a02      	cmp	r2, #2
 8000988:	d005      	beq.n	8000996 <PE_Get_RxEvent+0x52>
 800098a:	2a04      	cmp	r2, #4
 800098c:	d007      	beq.n	800099e <PE_Get_RxEvent+0x5a>
 800098e:	e009      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 8000990:	2111      	movs	r1, #17
 8000992:	2000      	movs	r0, #0
 8000994:	e005      	b.n	80009a2 <PE_Get_RxEvent+0x5e>
 8000996:	2201      	movs	r2, #1
 8000998:	2112      	movs	r1, #18
 800099a:	702a      	strb	r2, [r5, #0]
 800099c:	e002      	b.n	80009a4 <PE_Get_RxEvent+0x60>
 800099e:	2113      	movs	r1, #19
 80009a0:	2002      	movs	r0, #2
 80009a2:	7028      	strb	r0, [r5, #0]
 80009a4:	f384 8810 	msr	PRIMASK, r4
 80009a8:	4608      	mov	r0, r1
 80009aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080009ac <PE_Clear_RxEvent>:
 80009ac:	b510      	push	{r4, lr}
 80009ae:	4601      	mov	r1, r0
 80009b0:	f3ef 8210 	mrs	r2, PRIMASK
 80009b4:	b672      	cpsid	i
 80009b6:	f891 003c 	ldrb.w	r0, [r1, #60]	@ 0x3c
 80009ba:	b1c8      	cbz	r0, 80009f0 <__iar_annotation$$tailcall+0x8>
 80009bc:	1e40      	subs	r0, r0, #1
 80009be:	b2c0      	uxtb	r0, r0
 80009c0:	f201 234d 	addw	r3, r1, #589	@ 0x24d
 80009c4:	2400      	movs	r4, #0
 80009c6:	541c      	strb	r4, [r3, r0]
 80009c8:	1e40      	subs	r0, r0, #1
 80009ca:	4180      	sbcs	r0, r0
 80009cc:	0fc0      	lsrs	r0, r0, #31
 80009ce:	5c1b      	ldrb	r3, [r3, r0]
 80009d0:	065c      	lsls	r4, r3, #25
 80009d2:	d50a      	bpl.n	80009ea <__iar_annotation$$tailcall+0x2>
 80009d4:	1c40      	adds	r0, r0, #1
 80009d6:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009da:	f382 8810 	msr	PRIMASK, r2
 80009de:	7c08      	ldrb	r0, [r1, #16]
 80009e0:	6889      	ldr	r1, [r1, #8]
 80009e2:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 80009e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

080009e8 <__iar_annotation$$tailcall>:
 80009e8:	4710      	bx	r2
 80009ea:	2000      	movs	r0, #0
 80009ec:	f881 003c 	strb.w	r0, [r1, #60]	@ 0x3c
 80009f0:	f382 8810 	msr	PRIMASK, r2
 80009f4:	bd10      	pop	{r4, pc}

080009f6 <PE_PRL_Control_RxEvent>:
 80009f6:	f8df 19d0 	ldr.w	r1, [pc, #2512]	@ 80013c8 <.text_70>
 80009fa:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80009fe:	2000      	movs	r0, #0
 8000a00:	f3ef 8210 	mrs	r2, PRIMASK
 8000a04:	b672      	cpsid	i
 8000a06:	f891 103c 	ldrb.w	r1, [r1, #60]	@ 0x3c
 8000a0a:	b101      	cbz	r1, 8000a0e <PE_PRL_Control_RxEvent+0x18>
 8000a0c:	2001      	movs	r0, #1
 8000a0e:	f382 8810 	msr	PRIMASK, r2
 8000a12:	4770      	bx	lr

08000a14 <PE_Convert_SOPRxEvent>:
 8000a14:	b118      	cbz	r0, 8000a1e <PE_Convert_SOPRxEvent+0xa>
 8000a16:	2802      	cmp	r0, #2
 8000a18:	d005      	beq.n	8000a26 <PE_Convert_SOPRxEvent+0x12>
 8000a1a:	d302      	bcc.n	8000a22 <PE_Convert_SOPRxEvent+0xe>
 8000a1c:	e005      	b.n	8000a2a <PE_Convert_SOPRxEvent+0x16>
 8000a1e:	2011      	movs	r0, #17
 8000a20:	4770      	bx	lr
 8000a22:	2012      	movs	r0, #18
 8000a24:	4770      	bx	lr
 8000a26:	2013      	movs	r0, #19
 8000a28:	4770      	bx	lr
 8000a2a:	2014      	movs	r0, #20
 8000a2c:	4770      	bx	lr

08000a2e <PE_Check_AMSConflict>:
 8000a2e:	b538      	push	{r3, r4, r5, lr}
 8000a30:	4605      	mov	r5, r0
 8000a32:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8000a36:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8000a38:	2400      	movs	r4, #0
 8000a3a:	4001      	ands	r1, r0
 8000a3c:	290d      	cmp	r1, #13
 8000a3e:	d102      	bne.n	8000a46 <PE_Check_AMSConflict+0x18>
 8000a40:	2110      	movs	r1, #16
 8000a42:	7469      	strb	r1, [r5, #17]
 8000a44:	e02c      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a46:	7f28      	ldrb	r0, [r5, #28]
 8000a48:	b188      	cbz	r0, 8000a6e <PE_Check_AMSConflict+0x40>
 8000a4a:	1e40      	subs	r0, r0, #1
 8000a4c:	2801      	cmp	r0, #1
 8000a4e:	d914      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a50:	1e80      	subs	r0, r0, #2
 8000a52:	d014      	beq.n	8000a7e <PE_Check_AMSConflict+0x50>
 8000a54:	1e40      	subs	r0, r0, #1
 8000a56:	d023      	beq.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a58:	1e40      	subs	r0, r0, #1
 8000a5a:	2809      	cmp	r0, #9
 8000a5c:	bf84      	itt	hi
 8000a5e:	380b      	subhi	r0, #11
 8000a60:	2801      	cmphi	r0, #1
 8000a62:	d90a      	bls.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a64:	1e80      	subs	r0, r0, #2
 8000a66:	d005      	beq.n	8000a74 <PE_Check_AMSConflict+0x46>
 8000a68:	384d      	subs	r0, #77	@ 0x4d
 8000a6a:	d006      	beq.n	8000a7a <PE_Check_AMSConflict+0x4c>
 8000a6c:	e00a      	b.n	8000a84 <PE_Check_AMSConflict+0x56>
 8000a6e:	2203      	movs	r2, #3
 8000a70:	746a      	strb	r2, [r5, #17]
 8000a72:	e016      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a74:	200f      	movs	r0, #15
 8000a76:	7468      	strb	r0, [r5, #17]
 8000a78:	e013      	b.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000a7a:	2011      	movs	r0, #17
 8000a7c:	e000      	b.n	8000a80 <PE_Check_AMSConflict+0x52>
 8000a7e:	200f      	movs	r0, #15
 8000a80:	7468      	strb	r0, [r5, #17]
 8000a82:	e00d      	b.n	8000aa0 <PE_Check_AMSConflict+0x72>
 8000a84:	7c28      	ldrb	r0, [r5, #16]
 8000a86:	215c      	movs	r1, #92	@ 0x5c
 8000a88:	f7ff fd65 	bl	8000556 <USBPD_PE_Notification>
 8000a8c:	2103      	movs	r1, #3
 8000a8e:	686a      	ldr	r2, [r5, #4]
 8000a90:	7469      	strb	r1, [r5, #17]
 8000a92:	f240 7004 	movw	r0, #1796	@ 0x704
 8000a96:	6811      	ldr	r1, [r2, #0]
 8000a98:	4001      	ands	r1, r0
 8000a9a:	f5b1 7f40 	cmp.w	r1, #768	@ 0x300
 8000a9e:	d000      	beq.n	8000aa2 <PE_Check_AMSConflict+0x74>
 8000aa0:	2415      	movs	r4, #21
 8000aa2:	4620      	mov	r0, r4
 8000aa4:	bd32      	pop	{r1, r4, r5, pc}

08000aa6 <PE_PRL_ResetReceived>:
 8000aa6:	b538      	push	{r3, r4, r5, lr}
 8000aa8:	4604      	mov	r4, r0
 8000aaa:	f8df 091c 	ldr.w	r0, [pc, #2332]	@ 80013c8 <.text_70>
 8000aae:	4622      	mov	r2, r4
 8000ab0:	f850 5022 	ldr.w	r5, [r0, r2, lsl #2]
 8000ab4:	2905      	cmp	r1, #5
 8000ab6:	d114      	bne.n	8000ae2 <PE_PRL_ResetReceived+0x3c>
 8000ab8:	6868      	ldr	r0, [r5, #4]
 8000aba:	6801      	ldr	r1, [r0, #0]
 8000abc:	f021 0110 	bic.w	r1, r1, #16
 8000ac0:	6001      	str	r1, [r0, #0]
 8000ac2:	2001      	movs	r0, #1
 8000ac4:	6969      	ldr	r1, [r5, #20]
 8000ac6:	f360 214a 	bfi	r1, r0, #9, #2
 8000aca:	f105 0032 	add.w	r0, r5, #50	@ 0x32
 8000ace:	6169      	str	r1, [r5, #20]
 8000ad0:	2214      	movs	r2, #20
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	7002      	strb	r2, [r0, #0]
 8000ad6:	7283      	strb	r3, [r0, #10]
 8000ad8:	211e      	movs	r1, #30
 8000ada:	7c28      	ldrb	r0, [r5, #16]
 8000adc:	f7ff fd3b 	bl	8000556 <USBPD_PE_Notification>
 8000ae0:	e003      	b.n	8000aea <PE_PRL_ResetReceived+0x44>
 8000ae2:	6968      	ldr	r0, [r5, #20]
 8000ae4:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8000ae8:	6168      	str	r0, [r5, #20]
 8000aea:	4620      	mov	r0, r4
 8000aec:	68a9      	ldr	r1, [r5, #8]
 8000aee:	e148      	b.n	8000d82 <.text_44>

08000af0 <PE_PRL_BistCompleted>:
 8000af0:	4770      	bx	lr

08000af2 <PE_Reset_HardReset>:
 8000af2:	b510      	push	{r4, lr}
 8000af4:	4604      	mov	r4, r0
 8000af6:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000afa:	b118      	cbz	r0, 8000b04 <PE_Reset_HardReset+0x12>
 8000afc:	7c20      	ldrb	r0, [r4, #16]
 8000afe:	215b      	movs	r1, #91	@ 0x5b
 8000b00:	f7ff fd29 	bl	8000556 <USBPD_PE_Notification>
 8000b04:	4620      	mov	r0, r4
 8000b06:	f000 f82a 	bl	8000b5e <PE_Reset_ZI>
 8000b0a:	f000 f88e 	bl	8000c2a <.text_37>
 8000b0e:	6820      	ldr	r0, [r4, #0]
 8000b10:	7903      	ldrb	r3, [r0, #4]
 8000b12:	f003 0303 	and.w	r3, r3, #3
 8000b16:	d009      	beq.n	8000b2c <PE_Reset_HardReset+0x3a>
 8000b18:	7c20      	ldrb	r0, [r4, #16]
 8000b1a:	2201      	movs	r2, #1
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	f004 fa40 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b22:	6860      	ldr	r0, [r4, #4]
 8000b24:	6801      	ldr	r1, [r0, #0]
 8000b26:	f041 0108 	orr.w	r1, r1, #8
 8000b2a:	e008      	b.n	8000b3e <PE_Reset_HardReset+0x4c>
 8000b2c:	7c20      	ldrb	r0, [r4, #16]
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	f004 fa36 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000b36:	6860      	ldr	r0, [r4, #4]
 8000b38:	6801      	ldr	r1, [r0, #0]
 8000b3a:	f021 0108 	bic.w	r1, r1, #8
 8000b3e:	6001      	str	r1, [r0, #0]
 8000b40:	f000 f840 	bl	8000bc4 <.text_34>
 8000b44:	0892      	lsrs	r2, r2, #2
 8000b46:	ea40 0082 	orr.w	r0, r0, r2, lsl #2
 8000b4a:	6008      	str	r0, [r1, #0]
 8000b4c:	2101      	movs	r1, #1
 8000b4e:	7c20      	ldrb	r0, [r4, #16]
 8000b50:	f004 fa7e 	bl	8005050 <USBPD_PRL_SOPCapability>
 8000b54:	7c20      	ldrb	r0, [r4, #16]
 8000b56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000b5a:	f004 bcee 	b.w	800553a <USBPD_PRL_Reset>

08000b5e <PE_Reset_ZI>:
 8000b5e:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 8000b60:	4604      	mov	r4, r0
 8000b62:	2000      	movs	r0, #0
 8000b64:	9001      	str	r0, [sp, #4]
 8000b66:	2100      	movs	r1, #0
 8000b68:	6860      	ldr	r0, [r4, #4]
 8000b6a:	6802      	ldr	r2, [r0, #0]
 8000b6c:	f022 0210 	bic.w	r2, r2, #16
 8000b70:	6002      	str	r2, [r0, #0]
 8000b72:	4620      	mov	r0, r4
 8000b74:	f000 fbd6 	bl	8001324 <PE_SetPowerNegotiation>
 8000b78:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8000b7c:	f104 0014 	add.w	r0, r4, #20
 8000b80:	f019 fd88 	bl	801a694 <__aeabi_memclr>
 8000b84:	68a5      	ldr	r5, [r4, #8]
 8000b86:	7c20      	ldrb	r0, [r4, #16]
 8000b88:	69ae      	ldr	r6, [r5, #24]
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	aa01      	add	r2, sp, #4
 8000b8e:	2102      	movs	r1, #2
 8000b90:	47b0      	blx	r6
 8000b92:	f04f 7080 	mov.w	r0, #16777216	@ 0x1000000
 8000b96:	9000      	str	r0, [sp, #0]
 8000b98:	2304      	movs	r3, #4
 8000b9a:	68a5      	ldr	r5, [r4, #8]
 8000b9c:	7c20      	ldrb	r0, [r4, #16]
 8000b9e:	69ae      	ldr	r6, [r5, #24]
 8000ba0:	466a      	mov	r2, sp
 8000ba2:	2106      	movs	r1, #6
 8000ba4:	47b0      	blx	r6
 8000ba6:	6820      	ldr	r0, [r4, #0]
 8000ba8:	7901      	ldrb	r1, [r0, #4]
 8000baa:	7c20      	ldrb	r0, [r4, #16]
 8000bac:	f001 0103 	and.w	r1, r1, #3
 8000bb0:	f004 fa28 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8000bb4:	f000 f806 	bl	8000bc4 <.text_34>
 8000bb8:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8000bbc:	ea42 6280 	orr.w	r2, r2, r0, lsl #26
 8000bc0:	600a      	str	r2, [r1, #0]
 8000bc2:	bd73      	pop	{r0, r1, r4, r5, r6, pc}

08000bc4 <.text_34>:
 8000bc4:	6820      	ldr	r0, [r4, #0]
 8000bc6:	6861      	ldr	r1, [r4, #4]
 8000bc8:	7900      	ldrb	r0, [r0, #4]
 8000bca:	680a      	ldr	r2, [r1, #0]
 8000bcc:	f000 0003 	and.w	r0, r0, #3
 8000bd0:	4770      	bx	lr

08000bd2 <PE_Reset_Counter>:
 8000bd2:	2103      	movs	r1, #3
 8000bd4:	f500 7018 	add.w	r0, r0, #608	@ 0x260
 8000bd8:	f019 bd5c 	b.w	801a694 <__aeabi_memclr>

08000bdc <PE_Reset_StateMachine>:
 8000bdc:	b510      	push	{r4, lr}
 8000bde:	4604      	mov	r4, r0
 8000be0:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 8000be4:	b118      	cbz	r0, 8000bee <PE_Reset_StateMachine+0x12>
 8000be6:	7c20      	ldrb	r0, [r4, #16]
 8000be8:	215b      	movs	r1, #91	@ 0x5b
 8000bea:	f7ff fcb4 	bl	8000556 <USBPD_PE_Notification>
 8000bee:	4620      	mov	r0, r4
 8000bf0:	f7ff ffb5 	bl	8000b5e <PE_Reset_ZI>
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	4620      	mov	r0, r4
 8000bf8:	f000 fb94 	bl	8001324 <PE_SetPowerNegotiation>
 8000bfc:	7c20      	ldrb	r0, [r4, #16]
 8000bfe:	f004 fc9c 	bl	800553a <USBPD_PRL_Reset>
 8000c02:	f000 f812 	bl	8000c2a <.text_37>
 8000c06:	f001 0303 	and.w	r3, r1, #3
 8000c0a:	f3c1 02c0 	ubfx	r2, r1, #3, #1
 8000c0e:	d005      	beq.n	8000c1c <PE_Reset_StateMachine+0x40>
 8000c10:	7c20      	ldrb	r0, [r4, #16]
 8000c12:	2101      	movs	r1, #1
 8000c14:	f004 f9c5 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c18:	2002      	movs	r0, #2
 8000c1a:	e004      	b.n	8000c26 <PE_Reset_StateMachine+0x4a>
 8000c1c:	7c20      	ldrb	r0, [r4, #16]
 8000c1e:	2100      	movs	r1, #0
 8000c20:	f004 f9bf 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8000c24:	203e      	movs	r0, #62	@ 0x3e
 8000c26:	7460      	strb	r0, [r4, #17]
 8000c28:	bd10      	pop	{r4, pc}

08000c2a <.text_37>:
 8000c2a:	6860      	ldr	r0, [r4, #4]
 8000c2c:	6801      	ldr	r1, [r0, #0]
 8000c2e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8000c32:	2800      	cmp	r0, #0
 8000c34:	4770      	bx	lr

08000c36 <PE_ExtRevisionInteroperability>:
 8000c36:	b538      	push	{r3, r4, r5, lr}
 8000c38:	f8df 378c 	ldr.w	r3, [pc, #1932]	@ 80013c8 <.text_70>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8000c42:	6865      	ldr	r5, [r4, #4]
 8000c44:	682c      	ldr	r4, [r5, #0]
 8000c46:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000c4a:	f004 0503 	and.w	r5, r4, #3
 8000c4e:	42a9      	cmp	r1, r5
 8000c50:	bfa8      	it	ge
 8000c52:	4629      	movge	r1, r5
 8000c54:	f361 0401 	bfi	r4, r1, #0, #2
 8000c58:	6851      	ldr	r1, [r2, #4]
 8000c5a:	600c      	str	r4, [r1, #0]
 8000c5c:	6851      	ldr	r1, [r2, #4]
 8000c5e:	680b      	ldr	r3, [r1, #0]
 8000c60:	f003 0403 	and.w	r4, r3, #3
 8000c64:	2c01      	cmp	r4, #1
 8000c66:	bf0c      	ite	eq
 8000c68:	2400      	moveq	r4, #0
 8000c6a:	2420      	movne	r4, #32
 8000c6c:	f023 0320 	bic.w	r3, r3, #32
 8000c70:	4323      	orrs	r3, r4
 8000c72:	600b      	str	r3, [r1, #0]
 8000c74:	6852      	ldr	r2, [r2, #4]
 8000c76:	7811      	ldrb	r1, [r2, #0]
 8000c78:	e8bd 4034 	ldmia.w	sp!, {r2, r4, r5, lr}
 8000c7c:	f001 0103 	and.w	r1, r1, #3
 8000c80:	f004 b9b9 	b.w	8004ff6 <USBPD_PRL_SetHeaderSpecification>

08000c84 <PE_PRL_FastRoleSwapReception>:
 8000c84:	f8df 1740 	ldr.w	r1, [pc, #1856]	@ 80013c8 <.text_70>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8000c8e:	7f0a      	ldrb	r2, [r1, #28]
 8000c90:	2a09      	cmp	r2, #9
 8000c92:	d005      	beq.n	8000ca0 <PE_PRL_FastRoleSwapReception+0x1c>
 8000c94:	684a      	ldr	r2, [r1, #4]
 8000c96:	6813      	ldr	r3, [r2, #0]
 8000c98:	f043 0310 	orr.w	r3, r3, #16
 8000c9c:	6013      	str	r3, [r2, #0]
 8000c9e:	e354      	b.n	800134a <.text_66>
 8000ca0:	4770      	bx	lr

08000ca2 <PE_PRL_PostReceiveEvent>:
 8000ca2:	b570      	push	{r4, r5, r6, lr}
 8000ca4:	f8df 2720 	ldr.w	r2, [pc, #1824]	@ 80013c8 <.text_70>
 8000ca8:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8000cac:	2000      	movs	r0, #0
 8000cae:	2400      	movs	r4, #0
 8000cb0:	191a      	adds	r2, r3, r4
 8000cb2:	f892 224d 	ldrb.w	r2, [r2, #589]	@ 0x24d
 8000cb6:	b122      	cbz	r2, 8000cc2 <PE_PRL_PostReceiveEvent+0x20>
 8000cb8:	1c64      	adds	r4, r4, #1
 8000cba:	b2e4      	uxtb	r4, r4
 8000cbc:	2c01      	cmp	r4, #1
 8000cbe:	d9f7      	bls.n	8000cb0 <PE_PRL_PostReceiveEvent+0xe>
 8000cc0:	bd70      	pop	{r4, r5, r6, pc}
 8000cc2:	191a      	adds	r2, r3, r4
 8000cc4:	2020      	movs	r0, #32
 8000cc6:	191d      	adds	r5, r3, r4
 8000cc8:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f895 624d 	ldrb.w	r6, [r5, #589]	@ 0x24d
 8000cd2:	fa00 f101 	lsl.w	r1, r0, r1
 8000cd6:	1918      	adds	r0, r3, r4
 8000cd8:	4331      	orrs	r1, r6
 8000cda:	f880 124d 	strb.w	r1, [r0, #589]	@ 0x24d
 8000cde:	2001      	movs	r0, #1
 8000ce0:	bd70      	pop	{r4, r5, r6, pc}

08000ce2 <PE_PRL_PostReceiveEventError>:
 8000ce2:	f8df 16e4 	ldr.w	r1, [pc, #1764]	@ 80013c8 <.text_70>
 8000ce6:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000cea:	2100      	movs	r1, #0
 8000cec:	b2ca      	uxtb	r2, r1
 8000cee:	4402      	add	r2, r0
 8000cf0:	f892 324d 	ldrb.w	r3, [r2, #589]	@ 0x24d
 8000cf4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8000cf8:	2b20      	cmp	r3, #32
 8000cfa:	d004      	beq.n	8000d06 <PE_PRL_PostReceiveEventError+0x24>
 8000cfc:	1c49      	adds	r1, r1, #1
 8000cfe:	b2ca      	uxtb	r2, r1
 8000d00:	2a02      	cmp	r2, #2
 8000d02:	d3f3      	bcc.n	8000cec <PE_PRL_PostReceiveEventError+0xa>
 8000d04:	4770      	bx	lr
 8000d06:	2000      	movs	r0, #0
 8000d08:	f882 024d 	strb.w	r0, [r2, #589]	@ 0x24d
 8000d0c:	4770      	bx	lr

08000d0e <PE_PRL_PostReceiveEventCopy>:
 8000d0e:	b510      	push	{r4, lr}
 8000d10:	f8df 26b4 	ldr.w	r2, [pc, #1716]	@ 80013c8 <.text_70>
 8000d14:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8000d18:	2200      	movs	r2, #0
 8000d1a:	b2d3      	uxtb	r3, r2
 8000d1c:	18c4      	adds	r4, r0, r3
 8000d1e:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d22:	f004 0460 	and.w	r4, r4, #96	@ 0x60
 8000d26:	2c20      	cmp	r4, #32
 8000d28:	d004      	beq.n	8000d34 <PE_PRL_PostReceiveEventCopy+0x26>
 8000d2a:	1c52      	adds	r2, r2, #1
 8000d2c:	b2d3      	uxtb	r3, r2
 8000d2e:	2b02      	cmp	r3, #2
 8000d30:	d3f3      	bcc.n	8000d1a <PE_PRL_PostReceiveEventCopy+0xc>
 8000d32:	bd10      	pop	{r4, pc}
 8000d34:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8000d38:	4353      	muls	r3, r2
 8000d3a:	18c4      	adds	r4, r0, r3
 8000d3c:	f104 003d 	add.w	r0, r4, #61	@ 0x3d
 8000d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d44:	f019 bca4 	b.w	801a690 <__aeabi_memcpy>

08000d48 <PE_PRL_PostReceiveEventComplete>:
 8000d48:	b538      	push	{r3, r4, r5, lr}
 8000d4a:	f000 f81e 	bl	8000d8a <.text_45>
 8000d4e:	2100      	movs	r1, #0
 8000d50:	1854      	adds	r4, r2, r1
 8000d52:	1c4b      	adds	r3, r1, #1
 8000d54:	f894 524d 	ldrb.w	r5, [r4, #589]	@ 0x24d
 8000d58:	f005 0560 	and.w	r5, r5, #96	@ 0x60
 8000d5c:	2d20      	cmp	r5, #32
 8000d5e:	d003      	beq.n	8000d68 <PE_PRL_PostReceiveEventComplete+0x20>
 8000d60:	b2d9      	uxtb	r1, r3
 8000d62:	2902      	cmp	r1, #2
 8000d64:	d3f4      	bcc.n	8000d50 <PE_PRL_PostReceiveEventComplete+0x8>
 8000d66:	bd31      	pop	{r0, r4, r5, pc}
 8000d68:	f894 424d 	ldrb.w	r4, [r4, #589]	@ 0x24d
 8000d6c:	1855      	adds	r5, r2, r1
 8000d6e:	f044 0440 	orr.w	r4, r4, #64	@ 0x40
 8000d72:	f885 424d 	strb.w	r4, [r5, #589]	@ 0x24d
 8000d76:	f892 103c 	ldrb.w	r1, [r2, #60]	@ 0x3c
 8000d7a:	b909      	cbnz	r1, 8000d80 <PE_PRL_PostReceiveEventComplete+0x38>
 8000d7c:	f882 303c 	strb.w	r3, [r2, #60]	@ 0x3c
 8000d80:	6891      	ldr	r1, [r2, #8]

08000d82 <.text_44>:
 8000d82:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8000d84:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}

08000d88 <__iar_annotation$$tailcall>:
 8000d88:	4710      	bx	r2

08000d8a <.text_45>:
 8000d8a:	f8df 163c 	ldr.w	r1, [pc, #1596]	@ 80013c8 <.text_70>
 8000d8e:	4602      	mov	r2, r0
 8000d90:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8000d94:	4770      	bx	lr

08000d96 <PE_Get_UnchunkedSupport>:
 8000d96:	f8df 1630 	ldr.w	r1, [pc, #1584]	@ 80013c8 <.text_70>
 8000d9a:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
 8000d9e:	6841      	ldr	r1, [r0, #4]
 8000da0:	6808      	ldr	r0, [r1, #0]
 8000da2:	0e40      	lsrs	r0, r0, #25
 8000da4:	f000 0001 	and.w	r0, r0, #1
 8000da8:	4770      	bx	lr
	...

08000dac <.text_47>:
 8000dac:	200001bc 	.word	0x200001bc

08000db0 <.text_48>:
 8000db0:	20000000 	.word	0x20000000

08000db4 <.text_49>:
 8000db4:	0801b830 	.word	0x0801b830

08000db8 <PE_SubStateMachine_Generic>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	b08c      	sub	sp, #48	@ 0x30
 8000dbe:	4604      	mov	r4, r0
 8000dc0:	2000      	movs	r0, #0
 8000dc2:	9003      	str	r0, [sp, #12]
 8000dc4:	460e      	mov	r6, r1
 8000dc6:	7c63      	ldrb	r3, [r4, #17]
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	f04f 0a02 	mov.w	sl, #2
 8000dce:	f104 0730 	add.w	r7, r4, #48	@ 0x30
 8000dd2:	f204 2963 	addw	r9, r4, #611	@ 0x263
 8000dd6:	f204 2565 	addw	r5, r4, #613	@ 0x265
 8000dda:	f204 2267 	addw	r2, r4, #615	@ 0x267
 8000dde:	f248 081b 	movw	r8, #32795	@ 0x801b
 8000de2:	f000 8163 	beq.w	80010ac <PE_SubStateMachine_Generic+0x2f4>
 8000de6:	2b18      	cmp	r3, #24
 8000de8:	d03f      	beq.n	8000e6a <PE_SubStateMachine_Generic+0xb2>
 8000dea:	2b19      	cmp	r3, #25
 8000dec:	d04e      	beq.n	8000e8c <PE_SubStateMachine_Generic+0xd4>
 8000dee:	2b1d      	cmp	r3, #29
 8000df0:	f000 808e 	beq.w	8000f10 <PE_SubStateMachine_Generic+0x158>
 8000df4:	2b27      	cmp	r3, #39	@ 0x27
 8000df6:	f000 80aa 	beq.w	8000f4e <PE_SubStateMachine_Generic+0x196>
 8000dfa:	2b28      	cmp	r3, #40	@ 0x28
 8000dfc:	f000 80b5 	beq.w	8000f6a <PE_SubStateMachine_Generic+0x1b2>
 8000e00:	2b29      	cmp	r3, #41	@ 0x29
 8000e02:	f000 80bc 	beq.w	8000f7e <PE_SubStateMachine_Generic+0x1c6>
 8000e06:	2b2c      	cmp	r3, #44	@ 0x2c
 8000e08:	f000 8205 	beq.w	8001216 <PE_SubStateMachine_Generic+0x45e>
 8000e0c:	2b30      	cmp	r3, #48	@ 0x30
 8000e0e:	f000 8179 	beq.w	8001104 <PE_SubStateMachine_Generic+0x34c>
 8000e12:	2b3a      	cmp	r3, #58	@ 0x3a
 8000e14:	f000 81ee 	beq.w	80011f4 <PE_SubStateMachine_Generic+0x43c>
 8000e18:	2b3b      	cmp	r3, #59	@ 0x3b
 8000e1a:	f000 81d1 	beq.w	80011c0 <PE_SubStateMachine_Generic+0x408>
 8000e1e:	2b3c      	cmp	r3, #60	@ 0x3c
 8000e20:	f000 81be 	beq.w	80011a0 <PE_SubStateMachine_Generic+0x3e8>
 8000e24:	2b4b      	cmp	r3, #75	@ 0x4b
 8000e26:	f000 80f8 	beq.w	800101a <PE_SubStateMachine_Generic+0x262>
 8000e2a:	2b63      	cmp	r3, #99	@ 0x63
 8000e2c:	f000 8144 	beq.w	80010b8 <PE_SubStateMachine_Generic+0x300>
 8000e30:	2b64      	cmp	r3, #100	@ 0x64
 8000e32:	f000 8154 	beq.w	80010de <PE_SubStateMachine_Generic+0x326>
 8000e36:	2b67      	cmp	r3, #103	@ 0x67
 8000e38:	f000 8102 	beq.w	8001040 <PE_SubStateMachine_Generic+0x288>
 8000e3c:	2b68      	cmp	r3, #104	@ 0x68
 8000e3e:	f000 8111 	beq.w	8001064 <PE_SubStateMachine_Generic+0x2ac>
 8000e42:	2b74      	cmp	r3, #116	@ 0x74
 8000e44:	f000 8174 	beq.w	8001130 <PE_SubStateMachine_Generic+0x378>
 8000e48:	2b93      	cmp	r3, #147	@ 0x93
 8000e4a:	f000 809e 	beq.w	8000f8a <PE_SubStateMachine_Generic+0x1d2>
 8000e4e:	2b94      	cmp	r3, #148	@ 0x94
 8000e50:	f000 809f 	beq.w	8000f92 <PE_SubStateMachine_Generic+0x1da>
 8000e54:	2b95      	cmp	r3, #149	@ 0x95
 8000e56:	f000 80b0 	beq.w	8000fba <PE_SubStateMachine_Generic+0x202>
 8000e5a:	2b99      	cmp	r3, #153	@ 0x99
 8000e5c:	f040 81e0 	bne.w	8001220 <PE_SubStateMachine_Generic+0x468>
 8000e60:	2106      	movs	r1, #6
 8000e62:	4620      	mov	r0, r4
 8000e64:	f7ff fd46 	bl	80008f4 <PE_Send_RESET>
 8000e68:	e195      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000e6a:	f7ff fede 	bl	8000c2a <.text_37>
 8000e6e:	bf1d      	ittte	ne
 8000e70:	6960      	ldrne	r0, [r4, #20]
 8000e72:	0880      	lsrne	r0, r0, #2
 8000e74:	f000 0001 	andne.w	r0, r0, #1
 8000e78:	2002      	moveq	r0, #2
 8000e7a:	9000      	str	r0, [sp, #0]
 8000e7c:	2319      	movs	r3, #25
 8000e7e:	2208      	movs	r2, #8
 8000e80:	f000 fa3a 	bl	80012f8 <.text_61>
 8000e84:	2800      	cmp	r0, #0
 8000e86:	d16f      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000e88:	2007      	movs	r0, #7
 8000e8a:	e0e8      	b.n	800105e <PE_SubStateMachine_Generic+0x2a6>
 8000e8c:	7830      	ldrb	r0, [r6, #0]
 8000e8e:	2811      	cmp	r0, #17
 8000e90:	d13d      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000e92:	88b9      	ldrh	r1, [r7, #4]
 8000e94:	0bc8      	lsrs	r0, r1, #15
 8000e96:	d121      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000e98:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8000e9c:	b1f0      	cbz	r0, 8000edc <PE_SubStateMachine_Generic+0x124>
 8000e9e:	4608      	mov	r0, r1
 8000ea0:	f000 011f 	and.w	r1, r0, #31
 8000ea4:	2904      	cmp	r1, #4
 8000ea6:	d119      	bne.n	8000edc <PE_SubStateMachine_Generic+0x124>
 8000ea8:	68a5      	ldr	r5, [r4, #8]
 8000eaa:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8000eae:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8000eb2:	68b8      	ldr	r0, [r7, #8]
 8000eb4:	1c82      	adds	r2, r0, #2
 8000eb6:	7c20      	ldrb	r0, [r4, #16]
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	2105      	movs	r1, #5
 8000ebc:	47e0      	blx	ip
 8000ebe:	7830      	ldrb	r0, [r6, #0]
 8000ec0:	2814      	cmp	r0, #20
 8000ec2:	d003      	beq.n	8000ecc <PE_SubStateMachine_Generic+0x114>
 8000ec4:	2114      	movs	r1, #20
 8000ec6:	7031      	strb	r1, [r6, #0]
 8000ec8:	f000 f9d1 	bl	800126e <.text_57+0x4>
 8000ecc:	2003      	movs	r0, #3
 8000ece:	7460      	strb	r0, [r4, #17]
 8000ed0:	2107      	movs	r1, #7
 8000ed2:	7c20      	ldrb	r0, [r4, #16]
 8000ed4:	f7ff fb3f 	bl	8000556 <USBPD_PE_Notification>
 8000ed8:	f04f 0a00 	mov.w	sl, #0
 8000edc:	88b8      	ldrh	r0, [r7, #4]
 8000ede:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000ee2:	d114      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ee4:	f000 001f 	and.w	r0, r0, #31
 8000ee8:	2804      	cmp	r0, #4
 8000eea:	bf18      	it	ne
 8000eec:	2810      	cmpne	r0, #16
 8000eee:	d10e      	bne.n	8000f0e <PE_SubStateMachine_Generic+0x156>
 8000ef0:	7830      	ldrb	r0, [r6, #0]
 8000ef2:	2814      	cmp	r0, #20
 8000ef4:	d003      	beq.n	8000efe <PE_SubStateMachine_Generic+0x146>
 8000ef6:	2114      	movs	r1, #20
 8000ef8:	7031      	strb	r1, [r6, #0]
 8000efa:	f000 f9b8 	bl	800126e <.text_57+0x4>
 8000efe:	2003      	movs	r0, #3
 8000f00:	7460      	strb	r0, [r4, #17]
 8000f02:	2108      	movs	r1, #8
 8000f04:	7c20      	ldrb	r0, [r4, #16]
 8000f06:	f7ff fb26 	bl	8000556 <USBPD_PE_Notification>
 8000f0a:	f04f 0a00 	mov.w	sl, #0
 8000f0e:	e080      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000f10:	9004      	str	r0, [sp, #16]
 8000f12:	ab04      	add	r3, sp, #16
 8000f14:	68a6      	ldr	r6, [r4, #8]
 8000f16:	7c20      	ldrb	r0, [r4, #16]
 8000f18:	6977      	ldr	r7, [r6, #20]
 8000f1a:	aa05      	add	r2, sp, #20
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	47b8      	blx	r7
 8000f20:	9804      	ldr	r0, [sp, #16]
 8000f22:	2104      	movs	r1, #4
 8000f24:	f000 fa40 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8000f28:	b108      	cbz	r0, 8000f2e <PE_SubStateMachine_Generic+0x176>
 8000f2a:	2003      	movs	r0, #3
 8000f2c:	e179      	b.n	8001222 <PE_SubStateMachine_Generic+0x46a>
 8000f2e:	9a04      	ldr	r2, [sp, #16]
 8000f30:	2003      	movs	r0, #3
 8000f32:	0892      	lsrs	r2, r2, #2
 8000f34:	2100      	movs	r1, #0
 8000f36:	9001      	str	r0, [sp, #4]
 8000f38:	9200      	str	r2, [sp, #0]
 8000f3a:	9102      	str	r1, [sp, #8]
 8000f3c:	ab05      	add	r3, sp, #20
 8000f3e:	2204      	movs	r2, #4
 8000f40:	4620      	mov	r0, r4
 8000f42:	f000 fabe 	bl	80014c2 <PE_Send_DataMessage>
 8000f46:	2800      	cmp	r0, #0
 8000f48:	d10e      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f4a:	210a      	movs	r1, #10
 8000f4c:	e0ec      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000f4e:	2012      	movs	r0, #18
 8000f50:	7720      	strb	r0, [r4, #28]
 8000f52:	2105      	movs	r1, #5
 8000f54:	7c20      	ldrb	r0, [r4, #16]
 8000f56:	f004 fae3 	bl	8005520 <USBDPD_PRL_BistCarrierEyeMode>
 8000f5a:	2028      	movs	r0, #40	@ 0x28
 8000f5c:	7460      	strb	r0, [r4, #17]
 8000f5e:	f248 012d 	movw	r1, #32813	@ 0x802d
 8000f62:	83e1      	strh	r1, [r4, #30]
 8000f64:	f04f 0a2d 	mov.w	sl, #45	@ 0x2d
 8000f68:	e15c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f6a:	f000 f95f 	bl	800122c <.text_51>
 8000f6e:	d1fb      	bne.n	8000f68 <PE_SubStateMachine_Generic+0x1b0>
 8000f70:	7c20      	ldrb	r0, [r4, #16]
 8000f72:	2105      	movs	r1, #5
 8000f74:	f004 fada 	bl	800552c <USBDPD_PRL_BistCarrierEyeModeExit>
 8000f78:	2000      	movs	r0, #0
 8000f7a:	83e0      	strh	r0, [r4, #30]
 8000f7c:	e10b      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8000f7e:	7831      	ldrb	r1, [r6, #0]
 8000f80:	2914      	cmp	r1, #20
 8000f82:	d001      	beq.n	8000f88 <PE_SubStateMachine_Generic+0x1d0>
 8000f84:	f000 f971 	bl	800126a <.text_57>
 8000f88:	e14c      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f8a:	4620      	mov	r0, r4
 8000f8c:	f000 f990 	bl	80012b0 <PE_SubStateMachine_ReceiveDRS>
 8000f90:	e148      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8000f92:	f7ff fe4a 	bl	8000c2a <.text_37>
 8000f96:	bf1d      	ittte	ne
 8000f98:	6960      	ldrne	r0, [r4, #20]
 8000f9a:	0880      	lsrne	r0, r0, #2
 8000f9c:	f000 0001 	andne.w	r0, r0, #1
 8000fa0:	2002      	moveq	r0, #2
 8000fa2:	9000      	str	r0, [sp, #0]
 8000fa4:	2395      	movs	r3, #149	@ 0x95
 8000fa6:	2209      	movs	r2, #9
 8000fa8:	f000 f9a6 	bl	80012f8 <.text_61>
 8000fac:	2800      	cmp	r0, #0
 8000fae:	d1ef      	bne.n	8000f90 <PE_SubStateMachine_Generic+0x1d8>
 8000fb0:	2010      	movs	r0, #16
 8000fb2:	f000 f93f 	bl	8001234 <.text_52>
 8000fb6:	2122      	movs	r1, #34	@ 0x22
 8000fb8:	e0b6      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8000fba:	7830      	ldrb	r0, [r6, #0]
 8000fbc:	2814      	cmp	r0, #20
 8000fbe:	d028      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc0:	88b8      	ldrh	r0, [r7, #4]
 8000fc2:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8000fc6:	d124      	bne.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fc8:	f000 011f 	and.w	r1, r0, #31
 8000fcc:	2903      	cmp	r1, #3
 8000fce:	d006      	beq.n	8000fde <PE_SubStateMachine_Generic+0x226>
 8000fd0:	2904      	cmp	r1, #4
 8000fd2:	bf18      	it	ne
 8000fd4:	290c      	cmpne	r1, #12
 8000fd6:	d006      	beq.n	8000fe6 <PE_SubStateMachine_Generic+0x22e>
 8000fd8:	2910      	cmp	r1, #16
 8000fda:	d011      	beq.n	8001000 <PE_SubStateMachine_Generic+0x248>
 8000fdc:	e019      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8000fde:	4620      	mov	r0, r4
 8000fe0:	f000 f9f6 	bl	80013d0 <PE_SwitchDataRole>
 8000fe4:	e008      	b.n	8000ff8 <PE_SubStateMachine_Generic+0x240>
 8000fe6:	f000 001f 	and.w	r0, r0, #31
 8000fea:	280c      	cmp	r0, #12
 8000fec:	7c20      	ldrb	r0, [r4, #16]
 8000fee:	bf0c      	ite	eq
 8000ff0:	2126      	moveq	r1, #38	@ 0x26
 8000ff2:	2127      	movne	r1, #39	@ 0x27
 8000ff4:	f7ff faaf 	bl	8000556 <USBPD_PE_Notification>
 8000ff8:	f000 f922 	bl	8001240 <.text_53>
 8000ffc:	d107      	bne.n	800100e <PE_SubStateMachine_Generic+0x256>
 8000ffe:	e008      	b.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 8001000:	7c20      	ldrb	r0, [r4, #16]
 8001002:	2128      	movs	r1, #40	@ 0x28
 8001004:	f7ff faa7 	bl	8000556 <USBPD_PE_Notification>
 8001008:	f000 f91a 	bl	8001240 <.text_53>
 800100c:	d001      	beq.n	8001012 <PE_SubStateMachine_Generic+0x25a>
 800100e:	f000 f92c 	bl	800126a <.text_57>
 8001012:	f000 f90b 	bl	800122c <.text_51>
 8001016:	d124      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 8001018:	e0bd      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 800101a:	f000 f918 	bl	800124e <.text_54>
 800101e:	aa04      	add	r2, sp, #16
 8001020:	2114      	movs	r1, #20
 8001022:	47b8      	blx	r7
 8001024:	9803      	ldr	r0, [sp, #12]
 8001026:	2800      	cmp	r0, #0
 8001028:	f000 80fa 	beq.w	8001220 <PE_SubStateMachine_Generic+0x468>
 800102c:	9a03      	ldr	r2, [sp, #12]
 800102e:	0892      	lsrs	r2, r2, #2
 8001030:	9200      	str	r2, [sp, #0]
 8001032:	2100      	movs	r1, #0
 8001034:	2003      	movs	r0, #3
 8001036:	9102      	str	r1, [sp, #8]
 8001038:	9001      	str	r0, [sp, #4]
 800103a:	ab04      	add	r3, sp, #16
 800103c:	220c      	movs	r2, #12
 800103e:	e0d5      	b.n	80011ec <PE_SubStateMachine_Generic+0x434>
 8001040:	6860      	ldr	r0, [r4, #4]
 8001042:	6801      	ldr	r1, [r0, #0]
 8001044:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001048:	b900      	cbnz	r0, 800104c <PE_SubStateMachine_Generic+0x294>
 800104a:	2002      	movs	r0, #2
 800104c:	9000      	str	r0, [sp, #0]
 800104e:	2368      	movs	r3, #104	@ 0x68
 8001050:	7879      	ldrb	r1, [r7, #1]
 8001052:	2218      	movs	r2, #24
 8001054:	f000 f951 	bl	80012fa <.text_61+0x2>
 8001058:	2800      	cmp	r0, #0
 800105a:	d102      	bne.n	8001062 <PE_SubStateMachine_Generic+0x2aa>
 800105c:	200f      	movs	r0, #15
 800105e:	f000 f8e9 	bl	8001234 <.text_52>
 8001062:	e0df      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001064:	7830      	ldrb	r0, [r6, #0]
 8001066:	2814      	cmp	r0, #20
 8001068:	d01b      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800106a:	7839      	ldrb	r1, [r7, #0]
 800106c:	7878      	ldrb	r0, [r7, #1]
 800106e:	4281      	cmp	r1, r0
 8001070:	d117      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001072:	88b9      	ldrh	r1, [r7, #4]
 8001074:	0bc8      	lsrs	r0, r1, #15
 8001076:	d114      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001078:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800107c:	b188      	cbz	r0, 80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800107e:	7938      	ldrb	r0, [r7, #4]
 8001080:	f000 001f 	and.w	r0, r0, #31
 8001084:	280c      	cmp	r0, #12
 8001086:	d10c      	bne.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 8001088:	68b8      	ldr	r0, [r7, #8]
 800108a:	68a5      	ldr	r5, [r4, #8]
 800108c:	69af      	ldr	r7, [r5, #24]
 800108e:	1c82      	adds	r2, r0, #2
 8001090:	7c20      	ldrb	r0, [r4, #16]
 8001092:	2304      	movs	r3, #4
 8001094:	2114      	movs	r1, #20
 8001096:	47b8      	blx	r7
 8001098:	f000 f8d2 	bl	8001240 <.text_53>
 800109c:	d001      	beq.n	80010a2 <PE_SubStateMachine_Generic+0x2ea>
 800109e:	f000 f8e4 	bl	800126a <.text_57>
 80010a2:	f000 f8c3 	bl	800122c <.text_51>
 80010a6:	d106      	bne.n	80010b6 <PE_SubStateMachine_Generic+0x2fe>
 80010a8:	2111      	movs	r1, #17
 80010aa:	e075      	b.n	8001198 <PE_SubStateMachine_Generic+0x3e0>
 80010ac:	9000      	str	r0, [sp, #0]
 80010ae:	2303      	movs	r3, #3
 80010b0:	2210      	movs	r2, #16
 80010b2:	f000 f921 	bl	80012f8 <.text_61>
 80010b6:	e0b5      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80010b8:	f000 f8c9 	bl	800124e <.text_54>
 80010bc:	2108      	movs	r1, #8
 80010be:	47b8      	blx	r7
 80010c0:	9803      	ldr	r0, [sp, #12]
 80010c2:	2119      	movs	r1, #25
 80010c4:	f000 f970 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010c8:	2800      	cmp	r0, #0
 80010ca:	d172      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010cc:	f000 f8c4 	bl	8001258 <.text_55>
 80010d0:	f000 f8df 	bl	8001292 <.text_59>
 80010d4:	2201      	movs	r2, #1
 80010d6:	f000 f8c4 	bl	8001262 <.text_56>
 80010da:	2148      	movs	r1, #72	@ 0x48
 80010dc:	e024      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 80010de:	f000 f8b6 	bl	800124e <.text_54>
 80010e2:	2113      	movs	r1, #19
 80010e4:	47b8      	blx	r7
 80010e6:	9803      	ldr	r0, [sp, #12]
 80010e8:	2118      	movs	r1, #24
 80010ea:	f000 f95d 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80010ee:	2800      	cmp	r0, #0
 80010f0:	d15f      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 80010f2:	f000 f8b1 	bl	8001258 <.text_55>
 80010f6:	f000 f8cc 	bl	8001292 <.text_59>
 80010fa:	220f      	movs	r2, #15
 80010fc:	f000 f8b1 	bl	8001262 <.text_56>
 8001100:	2161      	movs	r1, #97	@ 0x61
 8001102:	e011      	b.n	8001128 <PE_SubStateMachine_Generic+0x370>
 8001104:	f000 f8a3 	bl	800124e <.text_54>
 8001108:	2109      	movs	r1, #9
 800110a:	47b8      	blx	r7
 800110c:	9803      	ldr	r0, [sp, #12]
 800110e:	2107      	movs	r1, #7
 8001110:	f000 f94a 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001114:	2800      	cmp	r0, #0
 8001116:	d14c      	bne.n	80011b2 <PE_SubStateMachine_Generic+0x3fa>
 8001118:	f000 f89e 	bl	8001258 <.text_55>
 800111c:	f000 f8b9 	bl	8001292 <.text_59>
 8001120:	2202      	movs	r2, #2
 8001122:	f000 f89e 	bl	8001262 <.text_56>
 8001126:	214f      	movs	r1, #79	@ 0x4f
 8001128:	7c20      	ldrb	r0, [r4, #16]
 800112a:	f7ff fa14 	bl	8000556 <USBPD_PE_Notification>
 800112e:	e079      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001130:	7831      	ldrb	r1, [r6, #0]
 8001132:	2914      	cmp	r1, #20
 8001134:	d02c      	beq.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001136:	88b9      	ldrh	r1, [r7, #4]
 8001138:	0bc8      	lsrs	r0, r1, #15
 800113a:	d115      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800113c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8001140:	b190      	cbz	r0, 8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001142:	7938      	ldrb	r0, [r7, #4]
 8001144:	f000 001f 	and.w	r0, r0, #31
 8001148:	2805      	cmp	r0, #5
 800114a:	d10d      	bne.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 800114c:	68b8      	ldr	r0, [r7, #8]
 800114e:	68a5      	ldr	r5, [r4, #8]
 8001150:	f8d5 c018 	ldr.w	ip, [r5, #24]
 8001154:	1d02      	adds	r2, r0, #4
 8001156:	7c20      	ldrb	r0, [r4, #16]
 8001158:	2304      	movs	r3, #4
 800115a:	210f      	movs	r1, #15
 800115c:	47e0      	blx	ip
 800115e:	f000 f86f 	bl	8001240 <.text_53>
 8001162:	d001      	beq.n	8001168 <PE_SubStateMachine_Generic+0x3b0>
 8001164:	f000 f881 	bl	800126a <.text_57>
 8001168:	7938      	ldrb	r0, [r7, #4]
 800116a:	f000 001f 	and.w	r0, r0, #31
 800116e:	2810      	cmp	r0, #16
 8001170:	d10e      	bne.n	8001190 <PE_SubStateMachine_Generic+0x3d8>
 8001172:	7c20      	ldrb	r0, [r4, #16]
 8001174:	2159      	movs	r1, #89	@ 0x59
 8001176:	f7ff f9ee 	bl	8000556 <USBPD_PE_Notification>
 800117a:	2000      	movs	r0, #0
 800117c:	83e0      	strh	r0, [r4, #30]
 800117e:	7831      	ldrb	r1, [r6, #0]
 8001180:	2914      	cmp	r1, #20
 8001182:	d001      	beq.n	8001188 <PE_SubStateMachine_Generic+0x3d0>
 8001184:	f000 f871 	bl	800126a <.text_57>
 8001188:	2103      	movs	r1, #3
 800118a:	7461      	strb	r1, [r4, #17]
 800118c:	f04f 0a00 	mov.w	sl, #0
 8001190:	f000 f84c 	bl	800122c <.text_51>
 8001194:	d146      	bne.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001196:	2103      	movs	r1, #3
 8001198:	7461      	strb	r1, [r4, #17]
 800119a:	f04f 0a00 	mov.w	sl, #0
 800119e:	e041      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011a0:	f000 f855 	bl	800124e <.text_54>
 80011a4:	210d      	movs	r1, #13
 80011a6:	47b8      	blx	r7
 80011a8:	9803      	ldr	r0, [sp, #12]
 80011aa:	2104      	movs	r1, #4
 80011ac:	f000 f8fc 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011b0:	2800      	cmp	r0, #0
 80011b2:	d135      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011b4:	f000 f850 	bl	8001258 <.text_55>
 80011b8:	f000 f85c 	bl	8001274 <.text_58>
 80011bc:	2207      	movs	r2, #7
 80011be:	e027      	b.n	8001210 <PE_SubStateMachine_Generic+0x458>
 80011c0:	9004      	str	r0, [sp, #16]
 80011c2:	ab03      	add	r3, sp, #12
 80011c4:	68a6      	ldr	r6, [r4, #8]
 80011c6:	7c20      	ldrb	r0, [r4, #16]
 80011c8:	6977      	ldr	r7, [r6, #20]
 80011ca:	aa04      	add	r2, sp, #16
 80011cc:	210f      	movs	r1, #15
 80011ce:	47b8      	blx	r7
 80011d0:	9803      	ldr	r0, [sp, #12]
 80011d2:	2104      	movs	r1, #4
 80011d4:	f000 f8e8 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80011d8:	2800      	cmp	r0, #0
 80011da:	d121      	bne.n	8001220 <PE_SubStateMachine_Generic+0x468>
 80011dc:	2103      	movs	r1, #3
 80011de:	2201      	movs	r2, #1
 80011e0:	9101      	str	r1, [sp, #4]
 80011e2:	9200      	str	r2, [sp, #0]
 80011e4:	9002      	str	r0, [sp, #8]
 80011e6:	ab04      	add	r3, sp, #16
 80011e8:	2205      	movs	r2, #5
 80011ea:	2100      	movs	r1, #0
 80011ec:	4620      	mov	r0, r4
 80011ee:	f000 f968 	bl	80014c2 <PE_Send_DataMessage>
 80011f2:	e017      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 80011f4:	f000 f82b 	bl	800124e <.text_54>
 80011f8:	2111      	movs	r1, #17
 80011fa:	47b8      	blx	r7
 80011fc:	9803      	ldr	r0, [sp, #12]
 80011fe:	2109      	movs	r1, #9
 8001200:	f000 f8d2 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001204:	b960      	cbnz	r0, 8001220 <PE_SubStateMachine_Generic+0x468>
 8001206:	f000 f827 	bl	8001258 <.text_55>
 800120a:	f000 f833 	bl	8001274 <.text_58>
 800120e:	2205      	movs	r2, #5
 8001210:	f000 f827 	bl	8001262 <.text_56>
 8001214:	e006      	b.n	8001224 <PE_SubStateMachine_Generic+0x46c>
 8001216:	7c20      	ldrb	r0, [r4, #16]
 8001218:	2150      	movs	r1, #80	@ 0x50
 800121a:	f7ff f99c 	bl	8000556 <USBPD_PE_Notification>
 800121e:	e7ba      	b.n	8001196 <PE_SubStateMachine_Generic+0x3de>
 8001220:	2001      	movs	r0, #1
 8001222:	7460      	strb	r0, [r4, #17]
 8001224:	4650      	mov	r0, sl
 8001226:	b00c      	add	sp, #48	@ 0x30
 8001228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800122c <.text_51>:
 800122c:	8be0      	ldrh	r0, [r4, #30]
 800122e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8001232:	4770      	bx	lr

08001234 <.text_52>:
 8001234:	7720      	strb	r0, [r4, #28]
 8001236:	f8a4 801e 	strh.w	r8, [r4, #30]
 800123a:	f04f 0a1b 	mov.w	sl, #27
 800123e:	4770      	bx	lr

08001240 <.text_53>:
 8001240:	2003      	movs	r0, #3
 8001242:	7460      	strb	r0, [r4, #17]
 8001244:	f04f 0a00 	mov.w	sl, #0
 8001248:	7831      	ldrb	r1, [r6, #0]
 800124a:	2914      	cmp	r1, #20
 800124c:	4770      	bx	lr

0800124e <.text_54>:
 800124e:	68a6      	ldr	r6, [r4, #8]
 8001250:	7c20      	ldrb	r0, [r4, #16]
 8001252:	6977      	ldr	r7, [r6, #20]
 8001254:	ab03      	add	r3, sp, #12
 8001256:	4770      	bx	lr

08001258 <.text_55>:
 8001258:	7028      	strb	r0, [r5, #0]
 800125a:	2100      	movs	r1, #0
 800125c:	7069      	strb	r1, [r5, #1]
 800125e:	7c20      	ldrb	r0, [r4, #16]
 8001260:	e599      	b.n	8000d96 <PE_Get_UnchunkedSupport>

08001262 <.text_56>:
 8001262:	2100      	movs	r1, #0
 8001264:	4620      	mov	r0, r4
 8001266:	f000 ba4b 	b.w	8001700 <PE_Send_ExtendedMessage>

0800126a <.text_57>:
 800126a:	2014      	movs	r0, #20
 800126c:	7030      	strb	r0, [r6, #0]
 800126e:	4620      	mov	r0, r4
 8001270:	f7ff bb9c 	b.w	80009ac <PE_Clear_RxEvent>

08001274 <.text_58>:
 8001274:	b918      	cbnz	r0, 800127e <.text_58+0xa>
 8001276:	7868      	ldrb	r0, [r5, #1]
 8001278:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800127c:	7068      	strb	r0, [r5, #1]
 800127e:	2000      	movs	r0, #0
 8001280:	9a03      	ldr	r2, [sp, #12]
 8001282:	9002      	str	r0, [sp, #8]
 8001284:	1d12      	adds	r2, r2, #4
 8001286:	b292      	uxth	r2, r2
 8001288:	9200      	str	r2, [sp, #0]
 800128a:	2103      	movs	r1, #3
 800128c:	9101      	str	r1, [sp, #4]
 800128e:	464b      	mov	r3, r9
 8001290:	4770      	bx	lr

08001292 <.text_59>:
 8001292:	b918      	cbnz	r0, 800129c <.text_59+0xa>
 8001294:	7868      	ldrb	r0, [r5, #1]
 8001296:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 800129a:	7068      	strb	r0, [r5, #1]
 800129c:	2000      	movs	r0, #0
 800129e:	9a03      	ldr	r2, [sp, #12]
 80012a0:	9002      	str	r0, [sp, #8]
 80012a2:	1d12      	adds	r2, r2, #4
 80012a4:	2103      	movs	r1, #3
 80012a6:	b292      	uxth	r2, r2
 80012a8:	9101      	str	r1, [sp, #4]
 80012aa:	9200      	str	r2, [sp, #0]
 80012ac:	464b      	mov	r3, r9
 80012ae:	4770      	bx	lr

080012b0 <PE_SubStateMachine_ReceiveDRS>:
 80012b0:	b51c      	push	{r2, r3, r4, lr}
 80012b2:	4604      	mov	r4, r0
 80012b4:	68a1      	ldr	r1, [r4, #8]
 80012b6:	7c20      	ldrb	r0, [r4, #16]
 80012b8:	6b8a      	ldr	r2, [r1, #56]	@ 0x38
 80012ba:	4790      	blx	r2
 80012bc:	280a      	cmp	r0, #10
 80012be:	d002      	beq.n	80012c6 <PE_SubStateMachine_ReceiveDRS+0x16>
 80012c0:	280c      	cmp	r0, #12
 80012c2:	d00b      	beq.n	80012dc <PE_SubStateMachine_ReceiveDRS+0x2c>
 80012c4:	e00c      	b.n	80012e0 <PE_SubStateMachine_ReceiveDRS+0x30>
 80012c6:	2000      	movs	r0, #0
 80012c8:	9000      	str	r0, [sp, #0]
 80012ca:	2303      	movs	r3, #3
 80012cc:	2203      	movs	r2, #3
 80012ce:	f000 f813 	bl	80012f8 <.text_61>
 80012d2:	b980      	cbnz	r0, 80012f6 <PE_SubStateMachine_ReceiveDRS+0x46>
 80012d4:	4620      	mov	r0, r4
 80012d6:	e8bd 4016 	ldmia.w	sp!, {r1, r2, r4, lr}
 80012da:	e079      	b.n	80013d0 <PE_SwitchDataRole>
 80012dc:	202a      	movs	r0, #42	@ 0x2a
 80012de:	e006      	b.n	80012ee <PE_SubStateMachine_ReceiveDRS+0x3e>
 80012e0:	6860      	ldr	r0, [r4, #4]
 80012e2:	7801      	ldrb	r1, [r0, #0]
 80012e4:	f001 0103 	and.w	r1, r1, #3
 80012e8:	2902      	cmp	r1, #2
 80012ea:	d102      	bne.n	80012f2 <PE_SubStateMachine_ReceiveDRS+0x42>
 80012ec:	2001      	movs	r0, #1
 80012ee:	7460      	strb	r0, [r4, #17]
 80012f0:	bd13      	pop	{r0, r1, r4, pc}
 80012f2:	212a      	movs	r1, #42	@ 0x2a
 80012f4:	7461      	strb	r1, [r4, #17]
 80012f6:	bd13      	pop	{r0, r1, r4, pc}

080012f8 <.text_61>:
 80012f8:	2100      	movs	r1, #0
 80012fa:	4620      	mov	r0, r4
 80012fc:	f000 b8b4 	b.w	8001468 <PE_Send_CtrlMessage>

08001300 <PE_UpdateTimer>:
 8001300:	b510      	push	{r4, lr}
 8001302:	4602      	mov	r2, r0
 8001304:	f3c2 040e 	ubfx	r4, r2, #0, #15
 8001308:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800130c:	42a1      	cmp	r1, r4
 800130e:	bfb8      	it	lt
 8001310:	1a50      	sublt	r0, r2, r1
 8001312:	b280      	uxth	r0, r0
 8001314:	bd10      	pop	{r4, pc}

08001316 <PE_CallHardResetCallback>:
 8001316:	6883      	ldr	r3, [r0, #8]
 8001318:	685b      	ldr	r3, [r3, #4]
 800131a:	2b00      	cmp	r3, #0
 800131c:	bf1c      	itt	ne
 800131e:	7c00      	ldrbne	r0, [r0, #16]

08001320 <__iar_annotation$$tailcall>:
 8001320:	4718      	bxne	r3
 8001322:	4770      	bx	lr

08001324 <PE_SetPowerNegotiation>:
 8001324:	6842      	ldr	r2, [r0, #4]
 8001326:	6813      	ldr	r3, [r2, #0]
 8001328:	f3c3 2202 	ubfx	r2, r3, #8, #3
 800132c:	4291      	cmp	r1, r2
 800132e:	d007      	beq.n	8001340 <PE_SetPowerNegotiation+0x1c>
 8001330:	6842      	ldr	r2, [r0, #4]
 8001332:	f361 230a 	bfi	r3, r1, #8, #3
 8001336:	6013      	str	r3, [r2, #0]
 8001338:	215a      	movs	r1, #90	@ 0x5a
 800133a:	7c00      	ldrb	r0, [r0, #16]
 800133c:	f7ff b90b 	b.w	8000556 <USBPD_PE_Notification>
 8001340:	4770      	bx	lr

08001342 <USBPD_PE_ExecFastRoleSwapSignalling>:
 8001342:	4921      	ldr	r1, [pc, #132]	@ (80013c8 <.text_70>)
 8001344:	4602      	mov	r2, r0
 8001346:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]

0800134a <.text_66>:
 800134a:	694a      	ldr	r2, [r1, #20]
 800134c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8001350:	614a      	str	r2, [r1, #20]
 8001352:	6889      	ldr	r1, [r1, #8]
 8001354:	6a8a      	ldr	r2, [r1, #40]	@ 0x28

08001356 <__iar_annotation$$tailcall>:
 8001356:	4710      	bx	r2

08001358 <PE_CalculateMinTiming>:
 8001358:	4601      	mov	r1, r0
 800135a:	f04f 30ff 	mov.w	r0, #4294967295
 800135e:	8c8a      	ldrh	r2, [r1, #36]	@ 0x24
 8001360:	0453      	lsls	r3, r2, #17
 8001362:	bf1c      	itt	ne
 8001364:	8c88      	ldrhne	r0, [r1, #36]	@ 0x24
 8001366:	f3c0 000e 	ubfxne	r0, r0, #0, #15
 800136a:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 800136c:	0453      	lsls	r3, r2, #17
 800136e:	d007      	beq.n	8001380 <PE_CalculateMinTiming+0x28>
 8001370:	8c4a      	ldrh	r2, [r1, #34]	@ 0x22
 8001372:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8001376:	4290      	cmp	r0, r2
 8001378:	bf24      	itt	cs
 800137a:	8c48      	ldrhcs	r0, [r1, #34]	@ 0x22
 800137c:	f3c0 000e 	ubfxcs	r0, r0, #0, #15
 8001380:	4770      	bx	lr

08001382 <PE_SetPowerNegociation>:
 8001382:	b538      	push	{r3, r4, r5, lr}
 8001384:	4604      	mov	r4, r0
 8001386:	460d      	mov	r5, r1
 8001388:	6860      	ldr	r0, [r4, #4]
 800138a:	6802      	ldr	r2, [r0, #0]
 800138c:	f3c2 2002 	ubfx	r0, r2, #8, #3
 8001390:	4285      	cmp	r5, r0
 8001392:	d003      	beq.n	800139c <PE_SetPowerNegociation+0x1a>
 8001394:	7c20      	ldrb	r0, [r4, #16]
 8001396:	215a      	movs	r1, #90	@ 0x5a
 8001398:	f7ff f8dd 	bl	8000556 <USBPD_PE_Notification>
 800139c:	6860      	ldr	r0, [r4, #4]
 800139e:	6801      	ldr	r1, [r0, #0]
 80013a0:	f365 210a 	bfi	r1, r5, #8, #3
 80013a4:	6001      	str	r1, [r0, #0]
 80013a6:	bd31      	pop	{r0, r4, r5, pc}

080013a8 <PE_CheckDataSizeFromGetDataInfo>:
 80013a8:	b538      	push	{r3, r4, r5, lr}
 80013aa:	2200      	movs	r2, #0
 80013ac:	4288      	cmp	r0, r1
 80013ae:	d208      	bcs.n	80013c2 <PE_CheckDataSizeFromGetDataInfo+0x1a>
 80013b0:	2018      	movs	r0, #24
 80013b2:	4c06      	ldr	r4, [pc, #24]	@ (80013cc <.text_71>)
 80013b4:	a316      	add	r3, pc, #88	@ (adr r3, 8001410 <.text_73>)
 80013b6:	6825      	ldr	r5, [r4, #0]
 80013b8:	9000      	str	r0, [sp, #0]
 80013ba:	2100      	movs	r1, #0
 80013bc:	2006      	movs	r0, #6
 80013be:	47a8      	blx	r5
 80013c0:	2202      	movs	r2, #2
 80013c2:	4610      	mov	r0, r2
 80013c4:	bd32      	pop	{r1, r4, r5, pc}
	...

080013c8 <.text_70>:
 80013c8:	200001bc 	.word	0x200001bc

080013cc <.text_71>:
 80013cc:	20000000 	.word	0x20000000

080013d0 <PE_SwitchDataRole>:
 80013d0:	b510      	push	{r4, lr}
 80013d2:	4604      	mov	r4, r0
 80013d4:	6860      	ldr	r0, [r4, #4]
 80013d6:	6801      	ldr	r1, [r0, #0]
 80013d8:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 80013dc:	2800      	cmp	r0, #0
 80013de:	6860      	ldr	r0, [r4, #4]
 80013e0:	d109      	bne.n	80013f6 <PE_SwitchDataRole+0x26>
 80013e2:	f041 0108 	orr.w	r1, r1, #8
 80013e6:	6001      	str	r1, [r0, #0]
 80013e8:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 80013ec:	7c20      	ldrb	r0, [r4, #16]
 80013ee:	f003 fdf5 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 80013f2:	2125      	movs	r1, #37	@ 0x25
 80013f4:	e007      	b.n	8001406 <PE_SwitchDataRole+0x36>
 80013f6:	f021 0108 	bic.w	r1, r1, #8
 80013fa:	6001      	str	r1, [r0, #0]
 80013fc:	2100      	movs	r1, #0
 80013fe:	7c20      	ldrb	r0, [r4, #16]
 8001400:	f003 fdec 	bl	8004fdc <USBPD_PRL_SetHeaderDataRole>
 8001404:	2124      	movs	r1, #36	@ 0x24
 8001406:	7c20      	ldrb	r0, [r4, #16]
 8001408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800140c:	f7ff b8a3 	b.w	8000556 <USBPD_PE_Notification>

08001410 <.text_73>:
 8001410:	61746144 	.word	0x61746144
 8001414:	7a695320 	.word	0x7a695320
 8001418:	73692065 	.word	0x73692065
 800141c:	746f6e20 	.word	0x746f6e20
 8001420:	726f6320 	.word	0x726f6320
 8001424:	74636572 	.word	0x74636572
 8001428:	00          	.byte	0x00
 8001429:	00          	.byte	0x00
	...

0800142c <USBPD_PE_SetTrace>:
 800142c:	0001      	movs	r1, r0
 800142e:	4906      	ldr	r1, [pc, #24]	@ (8001448 <.text_5>)
 8001430:	bf08      	it	eq
 8001432:	f20f 0031 	addweq	r0, pc, #49	@ 0x31
 8001436:	6008      	str	r0, [r1, #0]
 8001438:	4770      	bx	lr

0800143a <USBPD_PE_CheckLIB>:
 800143a:	4601      	mov	r1, r0
 800143c:	2000      	movs	r0, #0
 800143e:	4a03      	ldr	r2, [pc, #12]	@ (800144c <.text_6>)
 8001440:	4291      	cmp	r1, r2
 8001442:	bf08      	it	eq
 8001444:	2001      	moveq	r0, #1
 8001446:	4770      	bx	lr

08001448 <.text_5>:
 8001448:	20000000 	.word	0x20000000

0800144c <.text_6>:
 800144c:	30410000 	.word	0x30410000

08001450 <USBPD_PE_GetMemoryConsumption>:
 8001450:	b510      	push	{r4, lr}
 8001452:	f003 fda3 	bl	8004f9c <USBPD_PRL_GetMemoryConsumption>
 8001456:	4604      	mov	r4, r0
 8001458:	f7fe ffad 	bl	80003b6 <USBPD_CAD_GetMemoryConsumption>
 800145c:	1904      	adds	r4, r0, r4
 800145e:	f504 6061 	add.w	r0, r4, #3600	@ 0xe10
 8001462:	bd10      	pop	{r4, pc}

08001464 <PE_Trace_Empty>:
 8001464:	4770      	bx	lr
	...

08001468 <PE_Send_CtrlMessage>:
 8001468:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800146c:	9c08      	ldr	r4, [sp, #32]
 800146e:	4606      	mov	r6, r0
 8001470:	4688      	mov	r8, r1
 8001472:	4617      	mov	r7, r2
 8001474:	461d      	mov	r5, r3
 8001476:	f000 f81f 	bl	80014b8 <.text_3>
 800147a:	b190      	cbz	r0, 80014a2 <PE_Send_CtrlMessage+0x3a>
 800147c:	9401      	str	r4, [sp, #4]
 800147e:	2002      	movs	r0, #2
 8001480:	9000      	str	r0, [sp, #0]
 8001482:	f206 2363 	addw	r3, r6, #611	@ 0x263
 8001486:	7c30      	ldrb	r0, [r6, #16]
 8001488:	463a      	mov	r2, r7
 800148a:	4641      	mov	r1, r8
 800148c:	f003 fde2 	bl	8005054 <USBPD_PRL_SendMessage>
 8001490:	2803      	cmp	r0, #3
 8001492:	d0f0      	beq.n	8001476 <PE_Send_CtrlMessage+0xe>
 8001494:	2810      	cmp	r0, #16
 8001496:	d00d      	beq.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 8001498:	2f0d      	cmp	r7, #13
 800149a:	bf0c      	ite	eq
 800149c:	2201      	moveq	r2, #1
 800149e:	2200      	movne	r2, #0
 80014a0:	e002      	b.n	80014a8 <PE_Send_CtrlMessage+0x40>
 80014a2:	7470      	strb	r0, [r6, #17]
 80014a4:	2010      	movs	r0, #16
 80014a6:	e005      	b.n	80014b4 <PE_Send_CtrlMessage+0x4c>
 80014a8:	4603      	mov	r3, r0
 80014aa:	9500      	str	r5, [sp, #0]
 80014ac:	4641      	mov	r1, r8
 80014ae:	4630      	mov	r0, r6
 80014b0:	f000 fbe8 	bl	8001c84 <PE_CheckSendMessageStatus>
 80014b4:	e8bd 81f6 	ldmia.w	sp!, {r1, r2, r4, r5, r6, r7, r8, pc}

080014b8 <.text_3>:
 80014b8:	6870      	ldr	r0, [r6, #4]
 80014ba:	6801      	ldr	r1, [r0, #0]
 80014bc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80014c0:	4770      	bx	lr

080014c2 <PE_Send_DataMessage>:
 80014c2:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 80014c4:	4604      	mov	r4, r0
 80014c6:	9f08      	ldr	r7, [sp, #32]
 80014c8:	460d      	mov	r5, r1
 80014ca:	4616      	mov	r6, r2
 80014cc:	2000      	movs	r0, #0
 80014ce:	e010      	b.n	80014f2 <PE_Send_DataMessage+0x30>
 80014d0:	2100      	movs	r1, #0
 80014d2:	eb04 0280 	add.w	r2, r4, r0, lsl #2
 80014d6:	f8d3 c000 	ldr.w	ip, [r3]
 80014da:	440a      	add	r2, r1
 80014dc:	ea4f 0ec1 	mov.w	lr, r1, lsl #3
 80014e0:	1c49      	adds	r1, r1, #1
 80014e2:	fa2c fc0e 	lsr.w	ip, ip, lr
 80014e6:	2904      	cmp	r1, #4
 80014e8:	f882 c265 	strb.w	ip, [r2, #613]	@ 0x265
 80014ec:	d3f1      	bcc.n	80014d2 <PE_Send_DataMessage+0x10>
 80014ee:	1d1b      	adds	r3, r3, #4
 80014f0:	1c40      	adds	r0, r0, #1
 80014f2:	42b8      	cmp	r0, r7
 80014f4:	d3ec      	bcc.n	80014d0 <PE_Send_DataMessage+0xe>
 80014f6:	6860      	ldr	r0, [r4, #4]
 80014f8:	f7ff ffdf 	bl	80014ba <.text_3+0x2>
 80014fc:	b1d8      	cbz	r0, 8001536 <PE_Send_DataMessage+0x74>
 80014fe:	f89d 0028 	ldrb.w	r0, [sp, #40]	@ 0x28
 8001502:	9001      	str	r0, [sp, #4]
 8001504:	f204 2363 	addw	r3, r4, #611	@ 0x263
 8001508:	00b8      	lsls	r0, r7, #2
 800150a:	1c80      	adds	r0, r0, #2
 800150c:	b280      	uxth	r0, r0
 800150e:	9000      	str	r0, [sp, #0]
 8001510:	4632      	mov	r2, r6
 8001512:	7c20      	ldrb	r0, [r4, #16]
 8001514:	4629      	mov	r1, r5
 8001516:	f003 fd9d 	bl	8005054 <USBPD_PRL_SendMessage>
 800151a:	2803      	cmp	r0, #3
 800151c:	d0eb      	beq.n	80014f6 <PE_Send_DataMessage+0x34>
 800151e:	2810      	cmp	r0, #16
 8001520:	d008      	beq.n	8001534 <PE_Send_DataMessage+0x72>
 8001522:	f89d 1024 	ldrb.w	r1, [sp, #36]	@ 0x24
 8001526:	9100      	str	r1, [sp, #0]
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	4629      	mov	r1, r5
 800152e:	4620      	mov	r0, r4
 8001530:	f000 fba8 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001534:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001536:	2010      	movs	r0, #16
 8001538:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

0800153c <PE_Check_ExtendedMessage>:
 800153c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800153e:	4604      	mov	r4, r0
 8001540:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 8001544:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001546:	7881      	ldrb	r1, [r0, #2]
 8001548:	78c0      	ldrb	r0, [r0, #3]
 800154a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 800154e:	8031      	strh	r1, [r6, #0]
 8001550:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8001554:	f000 001f 	and.w	r0, r0, #31
 8001558:	70b0      	strb	r0, [r6, #2]
 800155a:	f3c1 20c3 	ubfx	r0, r1, #11, #4
 800155e:	2800      	cmp	r0, #0
 8001560:	bf1e      	ittt	ne
 8001562:	f3c1 2080 	ubfxne	r0, r1, #10, #1
 8001566:	2800      	cmpne	r0, #0
 8001568:	2034      	movne	r0, #52	@ 0x34
 800156a:	d126      	bne.n	80015ba <PE_Check_ExtendedMessage+0x7e>
 800156c:	0408      	lsls	r0, r1, #16
 800156e:	0fc0      	lsrs	r0, r0, #31
 8001570:	f204 2281 	addw	r2, r4, #641	@ 0x281
 8001574:	f3c1 0308 	ubfx	r3, r1, #0, #9
 8001578:	d10b      	bne.n	8001592 <PE_Check_ExtendedMessage+0x56>
 800157a:	f8a4 348e 	strh.w	r3, [r4, #1166]	@ 0x48e
 800157e:	f8b4 148e 	ldrh.w	r1, [r4, #1166]	@ 0x48e
 8001582:	4288      	cmp	r0, r1
 8001584:	d21a      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 8001586:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8001588:	1d19      	adds	r1, r3, #4
 800158a:	5c0d      	ldrb	r5, [r1, r0]
 800158c:	5415      	strb	r5, [r2, r0]
 800158e:	1c40      	adds	r0, r0, #1
 8001590:	e7f5      	b.n	800157e <PE_Check_ExtendedMessage+0x42>
 8001592:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 8001596:	d106      	bne.n	80015a6 <PE_Check_ExtendedMessage+0x6a>
 8001598:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 800159a:	f3c0 3002 	ubfx	r0, r0, #12, #3
 800159e:	2807      	cmp	r0, #7
 80015a0:	d30c      	bcc.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a2:	2b1a      	cmp	r3, #26
 80015a4:	d90a      	bls.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015a6:	f3c1 2080 	ubfx	r0, r1, #10, #1
 80015aa:	b938      	cbnz	r0, 80015bc <PE_Check_ExtendedMessage+0x80>
 80015ac:	f8b4 048e 	ldrh.w	r0, [r4, #1166]	@ 0x48e
 80015b0:	4298      	cmp	r0, r3
 80015b2:	d203      	bcs.n	80015bc <PE_Check_ExtendedMessage+0x80>
 80015b4:	2100      	movs	r1, #0
 80015b6:	83e1      	strh	r1, [r4, #30]
 80015b8:	2037      	movs	r0, #55	@ 0x37
 80015ba:	e089      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 80015bc:	7f20      	ldrb	r0, [r4, #28]
 80015be:	78b1      	ldrb	r1, [r6, #2]
 80015c0:	2800      	cmp	r0, #0
 80015c2:	d034      	beq.n	800162e <PE_Check_ExtendedMessage+0xf2>
 80015c4:	2901      	cmp	r1, #1
 80015c6:	d008      	beq.n	80015da <PE_Check_ExtendedMessage+0x9e>
 80015c8:	2902      	cmp	r1, #2
 80015ca:	d018      	beq.n	80015fe <PE_Check_ExtendedMessage+0xc2>
 80015cc:	2905      	cmp	r1, #5
 80015ce:	d028      	beq.n	8001622 <PE_Check_ExtendedMessage+0xe6>
 80015d0:	2907      	cmp	r1, #7
 80015d2:	d021      	beq.n	8001618 <PE_Check_ExtendedMessage+0xdc>
 80015d4:	290f      	cmp	r1, #15
 80015d6:	d009      	beq.n	80015ec <PE_Check_ExtendedMessage+0xb0>
 80015d8:	e07c      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80015da:	f000 f884 	bl	80016e6 <.text_7>
 80015de:	2319      	movs	r3, #25
 80015e0:	2108      	movs	r1, #8
 80015e2:	47b8      	blx	r7
 80015e4:	2003      	movs	r0, #3
 80015e6:	7460      	strb	r0, [r4, #17]
 80015e8:	2147      	movs	r1, #71	@ 0x47
 80015ea:	e010      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015ec:	f000 f87b 	bl	80016e6 <.text_7>
 80015f0:	2318      	movs	r3, #24
 80015f2:	2113      	movs	r1, #19
 80015f4:	47b8      	blx	r7
 80015f6:	2003      	movs	r0, #3
 80015f8:	7460      	strb	r0, [r4, #17]
 80015fa:	2162      	movs	r1, #98	@ 0x62
 80015fc:	e007      	b.n	800160e <PE_Check_ExtendedMessage+0xd2>
 80015fe:	f000 f872 	bl	80016e6 <.text_7>
 8001602:	2307      	movs	r3, #7
 8001604:	2109      	movs	r1, #9
 8001606:	47b8      	blx	r7
 8001608:	2003      	movs	r0, #3
 800160a:	7460      	strb	r0, [r4, #17]
 800160c:	214e      	movs	r1, #78	@ 0x4e
 800160e:	7c20      	ldrb	r0, [r4, #16]
 8001610:	e8bd 40f4 	ldmia.w	sp!, {r2, r4, r5, r6, r7, lr}
 8001614:	f7fe bf9f 	b.w	8000556 <USBPD_PE_Notification>
 8001618:	f000 f865 	bl	80016e6 <.text_7>
 800161c:	231a      	movs	r3, #26
 800161e:	210d      	movs	r1, #13
 8001620:	e003      	b.n	800162a <PE_Check_ExtendedMessage+0xee>
 8001622:	f000 f860 	bl	80016e6 <.text_7>
 8001626:	2309      	movs	r3, #9
 8001628:	2111      	movs	r1, #17
 800162a:	47b8      	blx	r7
 800162c:	e04f      	b.n	80016ce <PE_Check_ExtendedMessage+0x192>
 800162e:	1ecb      	subs	r3, r1, #3
 8001630:	2b08      	cmp	r3, #8
 8001632:	d84f      	bhi.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001634:	e8df f003 	tbb	[pc, r3]
 8001638:	174e0e05 	.word	0x174e0e05
 800163c:	243a314e 	.word	0x243a314e
 8001640:	0029      	.short	0x0029
 8001642:	f000 f84a 	bl	80016da <.text_6>
 8001646:	d045      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001648:	f000 f853 	bl	80016f2 <.text_8>
 800164c:	2110      	movs	r1, #16
 800164e:	47b8      	blx	r7
 8001650:	203a      	movs	r0, #58	@ 0x3a
 8001652:	e03d      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001654:	f000 f841 	bl	80016da <.text_6>
 8001658:	d03c      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 800165a:	f000 f84a 	bl	80016f2 <.text_8>
 800165e:	210e      	movs	r1, #14
 8001660:	47b8      	blx	r7
 8001662:	203b      	movs	r0, #59	@ 0x3b
 8001664:	e034      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001666:	6820      	ldr	r0, [r4, #0]
 8001668:	8901      	ldrh	r1, [r0, #8]
 800166a:	f3c1 1080 	ubfx	r0, r1, #6, #1
 800166e:	2800      	cmp	r0, #0
 8001670:	d030      	beq.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 8001672:	f000 f838 	bl	80016e6 <.text_7>
 8001676:	2302      	movs	r3, #2
 8001678:	210c      	movs	r1, #12
 800167a:	47b8      	blx	r7
 800167c:	203c      	movs	r0, #60	@ 0x3c
 800167e:	e027      	b.n	80016d0 <PE_Check_ExtendedMessage+0x194>
 8001680:	6820      	ldr	r0, [r4, #0]
 8001682:	8901      	ldrh	r1, [r0, #8]
 8001684:	f3c1 2080 	ubfx	r0, r1, #10, #1
 8001688:	e00b      	b.n	80016a2 <PE_Check_ExtendedMessage+0x166>
 800168a:	68a0      	ldr	r0, [r4, #8]
 800168c:	6905      	ldr	r5, [r0, #16]
 800168e:	b31d      	cbz	r5, 80016d8 <PE_Check_ExtendedMessage+0x19c>
 8001690:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 8001694:	7c20      	ldrb	r0, [r4, #16]
 8001696:	47a8      	blx	r5
 8001698:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 800169a:	6820      	ldr	r0, [r4, #0]
 800169c:	8901      	ldrh	r1, [r0, #8]
 800169e:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016a2:	b1b8      	cbz	r0, 80016d4 <PE_Check_ExtendedMessage+0x198>
 80016a4:	68a1      	ldr	r1, [r4, #8]
 80016a6:	6908      	ldr	r0, [r1, #16]
 80016a8:	b950      	cbnz	r0, 80016c0 <PE_Check_ExtendedMessage+0x184>
 80016aa:	e013      	b.n	80016d4 <PE_Check_ExtendedMessage+0x198>
 80016ac:	6820      	ldr	r0, [r4, #0]
 80016ae:	8901      	ldrh	r1, [r0, #8]
 80016b0:	f3c1 2040 	ubfx	r0, r1, #9, #1
 80016b4:	2800      	cmp	r0, #0
 80016b6:	bf1e      	ittt	ne
 80016b8:	68a1      	ldrne	r1, [r4, #8]
 80016ba:	6908      	ldrne	r0, [r1, #16]
 80016bc:	2800      	cmpne	r0, #0
 80016be:	d00b      	beq.n	80016d8 <PE_Check_ExtendedMessage+0x19c>
 80016c0:	68a5      	ldr	r5, [r4, #8]
 80016c2:	78b1      	ldrb	r1, [r6, #2]
 80016c4:	f8b4 348e 	ldrh.w	r3, [r4, #1166]	@ 0x48e
 80016c8:	7c20      	ldrb	r0, [r4, #16]
 80016ca:	692e      	ldr	r6, [r5, #16]
 80016cc:	47b0      	blx	r6
 80016ce:	2003      	movs	r0, #3
 80016d0:	7460      	strb	r0, [r4, #17]
 80016d2:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 80016d4:	2101      	movs	r1, #1
 80016d6:	7461      	strb	r1, [r4, #17]
 80016d8:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

080016da <.text_6>:
 80016da:	6820      	ldr	r0, [r4, #0]
 80016dc:	8901      	ldrh	r1, [r0, #8]
 80016de:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80016e2:	2800      	cmp	r0, #0
 80016e4:	4770      	bx	lr

080016e6 <.text_7>:
 80016e6:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016e8:	68a5      	ldr	r5, [r4, #8]
 80016ea:	69af      	ldr	r7, [r5, #24]
 80016ec:	1d02      	adds	r2, r0, #4
 80016ee:	7c20      	ldrb	r0, [r4, #16]
 80016f0:	4770      	bx	lr

080016f2 <.text_8>:
 80016f2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 80016f4:	68a5      	ldr	r5, [r4, #8]
 80016f6:	69af      	ldr	r7, [r5, #24]
 80016f8:	1d02      	adds	r2, r0, #4
 80016fa:	7c20      	ldrb	r0, [r4, #16]
 80016fc:	2301      	movs	r3, #1
 80016fe:	4770      	bx	lr

08001700 <PE_Send_ExtendedMessage>:
 8001700:	e92d 43fe 	stmdb	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, lr}
 8001704:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8001706:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8001708:	4606      	mov	r6, r0
 800170a:	460f      	mov	r7, r1
 800170c:	4690      	mov	r8, r2
 800170e:	4699      	mov	r9, r3
 8001710:	f7ff fed2 	bl	80014b8 <.text_3>
 8001714:	b1b8      	cbz	r0, 8001746 <PE_Send_ExtendedMessage+0x46>
 8001716:	9501      	str	r5, [sp, #4]
 8001718:	9400      	str	r4, [sp, #0]
 800171a:	464b      	mov	r3, r9
 800171c:	7c30      	ldrb	r0, [r6, #16]
 800171e:	f048 0280 	orr.w	r2, r8, #128	@ 0x80
 8001722:	4639      	mov	r1, r7
 8001724:	f003 fc96 	bl	8005054 <USBPD_PRL_SendMessage>
 8001728:	2803      	cmp	r0, #3
 800172a:	d0f1      	beq.n	8001710 <PE_Send_ExtendedMessage+0x10>
 800172c:	2810      	cmp	r0, #16
 800172e:	d008      	beq.n	8001742 <PE_Send_ExtendedMessage+0x42>
 8001730:	f89d 102c 	ldrb.w	r1, [sp, #44]	@ 0x2c
 8001734:	9100      	str	r1, [sp, #0]
 8001736:	4603      	mov	r3, r0
 8001738:	2200      	movs	r2, #0
 800173a:	4639      	mov	r1, r7
 800173c:	4630      	mov	r0, r6
 800173e:	f000 faa1 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001742:	e8bd 83fe 	ldmia.w	sp!, {r1, r2, r3, r4, r5, r6, r7, r8, r9, pc}
 8001746:	2011      	movs	r0, #17
 8001748:	7470      	strb	r0, [r6, #17]
 800174a:	2010      	movs	r0, #16
 800174c:	e7f9      	b.n	8001742 <PE_Send_ExtendedMessage+0x42>

0800174e <PE_SubStateMachine_ExtendedMessages>:
 800174e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	4604      	mov	r4, r0
 8001756:	f04f 0802 	mov.w	r8, #2
 800175a:	7c61      	ldrb	r1, [r4, #17]
 800175c:	2931      	cmp	r1, #49	@ 0x31
 800175e:	f204 2a67 	addw	sl, r4, #615	@ 0x267
 8001762:	f204 3b85 	addw	fp, r4, #901	@ 0x385
 8001766:	f204 265a 	addw	r6, r4, #602	@ 0x25a
 800176a:	f104 0930 	add.w	r9, r4, #48	@ 0x30
 800176e:	f204 2563 	addw	r5, r4, #611	@ 0x263
 8001772:	f204 478e 	addw	r7, r4, #1166	@ 0x48e
 8001776:	f248 001b 	movw	r0, #32795	@ 0x801b
 800177a:	d015      	beq.n	80017a8 <PE_SubStateMachine_ExtendedMessages+0x5a>
 800177c:	2933      	cmp	r1, #51	@ 0x33
 800177e:	d058      	beq.n	8001832 <PE_SubStateMachine_ExtendedMessages+0xe4>
 8001780:	2934      	cmp	r1, #52	@ 0x34
 8001782:	d05f      	beq.n	8001844 <PE_SubStateMachine_ExtendedMessages+0xf6>
 8001784:	2935      	cmp	r1, #53	@ 0x35
 8001786:	f000 808a 	beq.w	800189e <PE_SubStateMachine_ExtendedMessages+0x150>
 800178a:	2936      	cmp	r1, #54	@ 0x36
 800178c:	f000 809d 	beq.w	80018ca <PE_SubStateMachine_ExtendedMessages+0x17c>
 8001790:	2937      	cmp	r1, #55	@ 0x37
 8001792:	f000 809f 	beq.w	80018d4 <PE_SubStateMachine_ExtendedMessages+0x186>
 8001796:	2938      	cmp	r1, #56	@ 0x38
 8001798:	bf01      	itttt	eq
 800179a:	2003      	moveq	r0, #3
 800179c:	7460      	strbeq	r0, [r4, #17]
 800179e:	f04f 0800 	moveq.w	r8, #0
 80017a2:	f8a7 8000 	strheq.w	r8, [r7]
 80017a6:	e0c3      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80017a8:	9503      	str	r5, [sp, #12]
 80017aa:	2500      	movs	r5, #0
 80017ac:	803d      	strh	r5, [r7, #0]
 80017ae:	7c20      	ldrb	r0, [r4, #16]
 80017b0:	f7ff faf1 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017b4:	2801      	cmp	r0, #1
 80017b6:	d106      	bne.n	80017c6 <PE_SubStateMachine_ExtendedMessages+0x78>
 80017b8:	f204 3087 	addw	r0, r4, #903	@ 0x387
 80017bc:	7005      	strb	r5, [r0, #0]
 80017be:	7045      	strb	r5, [r0, #1]
 80017c0:	f8cd b00c 	str.w	fp, [sp, #12]
 80017c4:	e017      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017c6:	72f5      	strb	r5, [r6, #11]
 80017c8:	7335      	strb	r5, [r6, #12]
 80017ca:	7c20      	ldrb	r0, [r4, #16]
 80017cc:	f7ff fae3 	bl	8000d96 <PE_Get_UnchunkedSupport>
 80017d0:	b918      	cbnz	r0, 80017da <PE_SubStateMachine_ExtendedMessages+0x8c>
 80017d2:	7b30      	ldrb	r0, [r6, #12]
 80017d4:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 80017d8:	7330      	strb	r0, [r6, #12]
 80017da:	8878      	ldrh	r0, [r7, #2]
 80017dc:	281b      	cmp	r0, #27
 80017de:	4628      	mov	r0, r5
 80017e0:	d306      	bcc.n	80017f0 <PE_SubStateMachine_ExtendedMessages+0xa2>
 80017e2:	f000 f8a9 	bl	8001938 <.text_11>
 80017e6:	281a      	cmp	r0, #26
 80017e8:	d3fb      	bcc.n	80017e2 <PE_SubStateMachine_ExtendedMessages+0x94>
 80017ea:	e004      	b.n	80017f6 <PE_SubStateMachine_ExtendedMessages+0xa8>
 80017ec:	f000 f8a4 	bl	8001938 <.text_11>
 80017f0:	8879      	ldrh	r1, [r7, #2]
 80017f2:	4288      	cmp	r0, r1
 80017f4:	d3fa      	bcc.n	80017ec <PE_SubStateMachine_ExtendedMessages+0x9e>
 80017f6:	6960      	ldr	r0, [r4, #20]
 80017f8:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80017fc:	b130      	cbz	r0, 800180c <PE_SubStateMachine_ExtendedMessages+0xbe>
 80017fe:	f000 f98f 	bl	8001b20 <.text_16>
 8001802:	bf14      	ite	ne
 8001804:	2501      	movne	r5, #1
 8001806:	2502      	moveq	r5, #2
 8001808:	2033      	movs	r0, #51	@ 0x33
 800180a:	e000      	b.n	800180e <PE_SubStateMachine_ExtendedMessages+0xc0>
 800180c:	2003      	movs	r0, #3
 800180e:	9502      	str	r5, [sp, #8]
 8001810:	9001      	str	r0, [sp, #4]
 8001812:	8878      	ldrh	r0, [r7, #2]
 8001814:	9b03      	ldr	r3, [sp, #12]
 8001816:	1d00      	adds	r0, r0, #4
 8001818:	b280      	uxth	r0, r0
 800181a:	9000      	str	r0, [sp, #0]
 800181c:	78f2      	ldrb	r2, [r6, #3]
 800181e:	f899 1003 	ldrb.w	r1, [r9, #3]
 8001822:	4620      	mov	r0, r4
 8001824:	f7ff ff6c 	bl	8001700 <PE_Send_ExtendedMessage>
 8001828:	2800      	cmp	r0, #0
 800182a:	d101      	bne.n	8001830 <PE_SubStateMachine_ExtendedMessages+0xe2>
 800182c:	7970      	ldrb	r0, [r6, #5]
 800182e:	7720      	strb	r0, [r4, #28]
 8001830:	e07e      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001832:	83e0      	strh	r0, [r4, #30]
 8001834:	f04f 081b 	mov.w	r8, #27
 8001838:	78f0      	ldrb	r0, [r6, #3]
 800183a:	2804      	cmp	r0, #4
 800183c:	d148      	bne.n	80018d0 <PE_SubStateMachine_ExtendedMessages+0x182>
 800183e:	2174      	movs	r1, #116	@ 0x74
 8001840:	7461      	strb	r1, [r4, #17]
 8001842:	e075      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 8001844:	8831      	ldrh	r1, [r6, #0]
 8001846:	887a      	ldrh	r2, [r7, #2]
 8001848:	f3c1 21c3 	ubfx	r1, r1, #11, #4
 800184c:	201a      	movs	r0, #26
 800184e:	4341      	muls	r1, r0
 8001850:	4291      	cmp	r1, r2
 8001852:	da04      	bge.n	800185e <PE_SubStateMachine_ExtendedMessages+0x110>
 8001854:	8830      	ldrh	r0, [r6, #0]
 8001856:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800185a:	280a      	cmp	r0, #10
 800185c:	d301      	bcc.n	8001862 <PE_SubStateMachine_ExtendedMessages+0x114>
 800185e:	2003      	movs	r0, #3
 8001860:	e019      	b.n	8001896 <PE_SubStateMachine_ExtendedMessages+0x148>
 8001862:	1a50      	subs	r0, r2, r1
 8001864:	281a      	cmp	r0, #26
 8001866:	bf3a      	itte	cc
 8001868:	1a52      	subcc	r2, r2, r1
 800186a:	b2d2      	uxtbcc	r2, r2
 800186c:	221a      	movcs	r2, #26
 800186e:	2000      	movs	r0, #0
 8001870:	e005      	b.n	800187e <PE_SubStateMachine_ExtendedMessages+0x130>
 8001872:	1843      	adds	r3, r0, r1
 8001874:	f81b 3003 	ldrb.w	r3, [fp, r3]
 8001878:	f80a 3000 	strb.w	r3, [sl, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	4290      	cmp	r0, r2
 8001880:	d3f7      	bcc.n	8001872 <PE_SubStateMachine_ExtendedMessages+0x124>
 8001882:	8831      	ldrh	r1, [r6, #0]
 8001884:	887a      	ldrh	r2, [r7, #2]
 8001886:	7c20      	ldrb	r0, [r4, #16]
 8001888:	0ac9      	lsrs	r1, r1, #11
 800188a:	462b      	mov	r3, r5
 800188c:	f001 010f 	and.w	r1, r1, #15
 8001890:	f004 f86d 	bl	800596e <USBPD_PRL_PrepareExtendedTxChunkSending>
 8001894:	2035      	movs	r0, #53	@ 0x35
 8001896:	7460      	strb	r0, [r4, #17]
 8001898:	f04f 0800 	mov.w	r8, #0
 800189c:	e048      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 800189e:	6960      	ldr	r0, [r4, #20]
 80018a0:	f3c0 1040 	ubfx	r0, r0, #5, #1
 80018a4:	2800      	cmp	r0, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2036      	movne	r0, #54	@ 0x36
 80018aa:	2003      	moveq	r0, #3
 80018ac:	2100      	movs	r1, #0
 80018ae:	9001      	str	r0, [sp, #4]
 80018b0:	9102      	str	r1, [sp, #8]
 80018b2:	462b      	mov	r3, r5
 80018b4:	8878      	ldrh	r0, [r7, #2]
 80018b6:	9000      	str	r0, [sp, #0]
 80018b8:	78f2      	ldrb	r2, [r6, #3]
 80018ba:	f899 1000 	ldrb.w	r1, [r9]
 80018be:	4620      	mov	r0, r4
 80018c0:	f7ff ff1e 	bl	8001700 <PE_Send_ExtendedMessage>
 80018c4:	2000      	movs	r0, #0
 80018c6:	8038      	strh	r0, [r7, #0]
 80018c8:	e032      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018ca:	83e0      	strh	r0, [r4, #30]
 80018cc:	f04f 081b 	mov.w	r8, #27
 80018d0:	2039      	movs	r0, #57	@ 0x39
 80018d2:	e004      	b.n	80018de <PE_SubStateMachine_ExtendedMessages+0x190>
 80018d4:	8be1      	ldrh	r1, [r4, #30]
 80018d6:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80018da:	d102      	bne.n	80018e2 <PE_SubStateMachine_ExtendedMessages+0x194>
 80018dc:	200f      	movs	r0, #15
 80018de:	7460      	strb	r0, [r4, #17]
 80018e0:	e026      	b.n	8001930 <PE_SubStateMachine_ExtendedMessages+0x1e2>
 80018e2:	83e0      	strh	r0, [r4, #30]
 80018e4:	4629      	mov	r1, r5
 80018e6:	7c20      	ldrb	r0, [r4, #16]
 80018e8:	f004 f86a 	bl	80059c0 <USBPD_PRL_PrepareChunkRequest>
 80018ec:	f04f 081b 	mov.w	r8, #27
 80018f0:	6860      	ldr	r0, [r4, #4]
 80018f2:	f7ff fde2 	bl	80014ba <.text_3+0x2>
 80018f6:	b180      	cbz	r0, 800191a <PE_SubStateMachine_ExtendedMessages+0x1cc>
 80018f8:	2000      	movs	r0, #0
 80018fa:	2106      	movs	r1, #6
 80018fc:	9001      	str	r0, [sp, #4]
 80018fe:	9100      	str	r1, [sp, #0]
 8001900:	462b      	mov	r3, r5
 8001902:	78b2      	ldrb	r2, [r6, #2]
 8001904:	f899 1000 	ldrb.w	r1, [r9]
 8001908:	7c20      	ldrb	r0, [r4, #16]
 800190a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800190e:	f003 fba1 	bl	8005054 <USBPD_PRL_SendMessage>
 8001912:	2803      	cmp	r0, #3
 8001914:	4603      	mov	r3, r0
 8001916:	d0eb      	beq.n	80018f0 <PE_SubStateMachine_ExtendedMessages+0x1a2>
 8001918:	e002      	b.n	8001920 <PE_SubStateMachine_ExtendedMessages+0x1d2>
 800191a:	2011      	movs	r0, #17
 800191c:	7460      	strb	r0, [r4, #17]
 800191e:	2310      	movs	r3, #16
 8001920:	2039      	movs	r0, #57	@ 0x39
 8001922:	9000      	str	r0, [sp, #0]
 8001924:	2200      	movs	r2, #0
 8001926:	f899 1000 	ldrb.w	r1, [r9]
 800192a:	4620      	mov	r0, r4
 800192c:	f000 f9aa 	bl	8001c84 <PE_CheckSendMessageStatus>
 8001930:	4640      	mov	r0, r8
 8001932:	b005      	add	sp, #20
 8001934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001938 <.text_11>:
 8001938:	f81b 1000 	ldrb.w	r1, [fp, r0]
 800193c:	f80a 1000 	strb.w	r1, [sl, r0]
 8001940:	1c40      	adds	r0, r0, #1
 8001942:	4770      	bx	lr

08001944 <PE_ManageRXEvent>:
 8001944:	f100 0130 	add.w	r1, r0, #48	@ 0x30
 8001948:	780a      	ldrb	r2, [r1, #0]
 800194a:	704a      	strb	r2, [r1, #1]
 800194c:	888a      	ldrh	r2, [r1, #4]
 800194e:	0bd1      	lsrs	r1, r2, #15
 8001950:	bf18      	it	ne
 8001952:	f7ff bdf3 	bne.w	800153c <PE_Check_ExtendedMessage>
 8001956:	f412 4f70 	tst.w	r2, #61440	@ 0xf000
 800195a:	bf08      	it	eq
 800195c:	f000 b802 	beq.w	8001964 <PE_Check_ControlMessage>
 8001960:	e0e4      	b.n	8001b2c <PE_Check_DataMessage>
	...

08001964 <PE_Check_ControlMessage>:
 8001964:	b510      	push	{r4, lr}
 8001966:	f000 f987 	bl	8001c78 <.text_18>
 800196a:	1e40      	subs	r0, r0, #1
 800196c:	2817      	cmp	r0, #23
 800196e:	d85b      	bhi.n	8001a28 <PE_Check_ControlMessage+0xc4>
 8001970:	e8df f000 	tbb	[pc, r0]
 8001974:	bfbf0ccc 	.word	0xbfbf0ccc
 8001978:	5520bf1e 	.word	0x5520bf1e
 800197c:	bf3b3143 	.word	0xbf3b3143
 8001980:	b9c1c117 	.word	0xb9c1c117
 8001984:	96b18a67 	.word	0x96b18a67
 8001988:	b5c17caa 	.word	0xb5c17caa
 800198c:	f000 f8c8 	bl	8001b20 <.text_16>
 8001990:	f040 80bc 	bne.w	8001b0c <PE_Check_ControlMessage+0x1a8>
 8001994:	2002      	movs	r0, #2
 8001996:	7720      	strb	r0, [r4, #28]
 8001998:	212b      	movs	r1, #43	@ 0x2b
 800199a:	f000 f8be 	bl	8001b1a <.text_15>
 800199e:	2198      	movs	r1, #152	@ 0x98
 80019a0:	e0b3      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 80019a2:	2003      	movs	r0, #3
 80019a4:	7720      	strb	r0, [r4, #28]
 80019a6:	2132      	movs	r1, #50	@ 0x32
 80019a8:	f000 f8b7 	bl	8001b1a <.text_15>
 80019ac:	2010      	movs	r0, #16
 80019ae:	e0a9      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019b0:	2133      	movs	r1, #51	@ 0x33
 80019b2:	e099      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 80019b4:	2006      	movs	r0, #6
 80019b6:	7720      	strb	r0, [r4, #28]
 80019b8:	f000 f8b2 	bl	8001b20 <.text_16>
 80019bc:	bf01      	itttt	eq
 80019be:	6820      	ldreq	r0, [r4, #0]
 80019c0:	6841      	ldreq	r1, [r0, #4]
 80019c2:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 80019c6:	2800      	cmpeq	r0, #0
 80019c8:	d024      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019ca:	7c20      	ldrb	r0, [r4, #16]
 80019cc:	210c      	movs	r1, #12
 80019ce:	f7fe fdc2 	bl	8000556 <USBPD_PE_Notification>
 80019d2:	204c      	movs	r0, #76	@ 0x4c
 80019d4:	e096      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019d6:	f000 f89a 	bl	8001b0e <.text_14>
 80019da:	d01b      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019dc:	2008      	movs	r0, #8
 80019de:	7720      	strb	r0, [r4, #28]
 80019e0:	213c      	movs	r1, #60	@ 0x3c
 80019e2:	f000 f89a 	bl	8001b1a <.text_15>
 80019e6:	2022      	movs	r0, #34	@ 0x22
 80019e8:	e08c      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019ea:	68a1      	ldr	r1, [r4, #8]
 80019ec:	6ac8      	ldr	r0, [r1, #44]	@ 0x2c
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d010      	beq.n	8001a14 <PE_Check_ControlMessage+0xb0>
 80019f2:	2111      	movs	r1, #17
 80019f4:	7721      	strb	r1, [r4, #28]
 80019f6:	209d      	movs	r0, #157	@ 0x9d
 80019f8:	e084      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 80019fa:	7c20      	ldrb	r0, [r4, #16]
 80019fc:	2123      	movs	r1, #35	@ 0x23
 80019fe:	f7fe fdaa 	bl	8000556 <USBPD_PE_Notification>
 8001a02:	6960      	ldr	r0, [r4, #20]
 8001a04:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8001a08:	b108      	cbz	r0, 8001a0e <PE_Check_ControlMessage+0xaa>
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	e07a      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001a0e:	68a1      	ldr	r1, [r4, #8]
 8001a10:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8001a12:	2800      	cmp	r0, #0
 8001a14:	d06f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a16:	2010      	movs	r0, #16
 8001a18:	7720      	strb	r0, [r4, #28]
 8001a1a:	2193      	movs	r1, #147	@ 0x93
 8001a1c:	e075      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001a1e:	6860      	ldr	r0, [r4, #4]
 8001a20:	6801      	ldr	r1, [r0, #0]
 8001a22:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8001a26:	2803      	cmp	r0, #3
 8001a28:	d165      	bne.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a2a:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a2e:	b110      	cbz	r0, 8001a36 <PE_Check_ControlMessage+0xd2>
 8001a30:	f000 f86d 	bl	8001b0e <.text_14>
 8001a34:	d05f      	beq.n	8001af6 <PE_Check_ControlMessage+0x192>
 8001a36:	211d      	movs	r1, #29
 8001a38:	7461      	strb	r1, [r4, #17]
 8001a3a:	2007      	movs	r0, #7
 8001a3c:	7720      	strb	r0, [r4, #28]
 8001a3e:	2106      	movs	r1, #6
 8001a40:	e052      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a42:	6820      	ldr	r0, [r4, #0]
 8001a44:	8901      	ldrh	r1, [r0, #8]
 8001a46:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001a4a:	2800      	cmp	r0, #0
 8001a4c:	d059      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a4e:	f000 f867 	bl	8001b20 <.text_16>
 8001a52:	bf01      	itttt	eq
 8001a54:	6820      	ldreq	r0, [r4, #0]
 8001a56:	6841      	ldreq	r1, [r0, #4]
 8001a58:	f3c1 00c0 	ubfxeq	r0, r1, #3, #1
 8001a5c:	2800      	cmpeq	r0, #0
 8001a5e:	d050      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a60:	2163      	movs	r1, #99	@ 0x63
 8001a62:	7461      	strb	r1, [r4, #17]
 8001a64:	200a      	movs	r0, #10
 8001a66:	7720      	strb	r0, [r4, #28]
 8001a68:	2146      	movs	r1, #70	@ 0x46
 8001a6a:	e03d      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a6c:	6860      	ldr	r0, [r4, #4]
 8001a6e:	6801      	ldr	r1, [r0, #0]
 8001a70:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001a74:	b110      	cbz	r0, 8001a7c <PE_Check_ControlMessage+0x118>
 8001a76:	f000 f84a 	bl	8001b0e <.text_14>
 8001a7a:	d042      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001a7c:	2164      	movs	r1, #100	@ 0x64
 8001a7e:	7461      	strb	r1, [r4, #17]
 8001a80:	205f      	movs	r0, #95	@ 0x5f
 8001a82:	7720      	strb	r0, [r4, #28]
 8001a84:	2160      	movs	r1, #96	@ 0x60
 8001a86:	e02f      	b.n	8001ae8 <PE_Check_ControlMessage+0x184>
 8001a88:	6820      	ldr	r0, [r4, #0]
 8001a8a:	8901      	ldrh	r1, [r0, #8]
 8001a8c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8001a90:	b318      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001a92:	200b      	movs	r0, #11
 8001a94:	7720      	strb	r0, [r4, #28]
 8001a96:	214d      	movs	r1, #77	@ 0x4d
 8001a98:	f000 f83f 	bl	8001b1a <.text_15>
 8001a9c:	2030      	movs	r0, #48	@ 0x30
 8001a9e:	e031      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001aa0:	6820      	ldr	r0, [r4, #0]
 8001aa2:	8901      	ldrh	r1, [r0, #8]
 8001aa4:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001aa8:	2800      	cmp	r0, #0
 8001aaa:	d02a      	beq.n	8001b02 <PE_Check_ControlMessage+0x19e>
 8001aac:	200b      	movs	r0, #11
 8001aae:	7720      	strb	r0, [r4, #28]
 8001ab0:	2149      	movs	r1, #73	@ 0x49
 8001ab2:	f000 f832 	bl	8001b1a <.text_15>
 8001ab6:	6860      	ldr	r0, [r4, #4]
 8001ab8:	6801      	ldr	r1, [r0, #0]
 8001aba:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001abe:	b108      	cbz	r0, 8001ac4 <PE_Check_ControlMessage+0x160>
 8001ac0:	202d      	movs	r0, #45	@ 0x2d
 8001ac2:	e01f      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ac4:	2111      	movs	r1, #17
 8001ac6:	e020      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ac8:	6820      	ldr	r0, [r4, #0]
 8001aca:	8901      	ldrh	r1, [r0, #8]
 8001acc:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8001ad0:	b118      	cbz	r0, 8001ada <PE_Check_ControlMessage+0x176>
 8001ad2:	202f      	movs	r0, #47	@ 0x2f
 8001ad4:	e016      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001ad6:	2009      	movs	r0, #9
 8001ad8:	7720      	strb	r0, [r4, #28]
 8001ada:	2101      	movs	r1, #1
 8001adc:	e015      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ade:	200f      	movs	r0, #15
 8001ae0:	7720      	strb	r0, [r4, #28]
 8001ae2:	214b      	movs	r1, #75	@ 0x4b
 8001ae4:	e011      	b.n	8001b0a <PE_Check_ControlMessage+0x1a6>
 8001ae6:	2159      	movs	r1, #89	@ 0x59
 8001ae8:	7c20      	ldrb	r0, [r4, #16]
 8001aea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001aee:	f7fe bd32 	b.w	8000556 <USBPD_PE_Notification>
 8001af2:	2011      	movs	r0, #17
 8001af4:	e006      	b.n	8001b04 <PE_Check_ControlMessage+0x1a0>
 8001af6:	6860      	ldr	r0, [r4, #4]
 8001af8:	7801      	ldrb	r1, [r0, #0]
 8001afa:	f001 0103 	and.w	r1, r1, #3
 8001afe:	2902      	cmp	r1, #2
 8001b00:	d102      	bne.n	8001b08 <PE_Check_ControlMessage+0x1a4>
 8001b02:	2001      	movs	r0, #1
 8001b04:	7460      	strb	r0, [r4, #17]
 8001b06:	bd10      	pop	{r4, pc}
 8001b08:	212a      	movs	r1, #42	@ 0x2a
 8001b0a:	7461      	strb	r1, [r4, #17]
 8001b0c:	bd10      	pop	{r4, pc}

08001b0e <.text_14>:
 8001b0e:	6820      	ldr	r0, [r4, #0]
 8001b10:	6841      	ldr	r1, [r0, #4]
 8001b12:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001b16:	2800      	cmp	r0, #0
 8001b18:	4770      	bx	lr

08001b1a <.text_15>:
 8001b1a:	7c20      	ldrb	r0, [r4, #16]
 8001b1c:	f7fe bd1b 	b.w	8000556 <USBPD_PE_Notification>

08001b20 <.text_16>:
 8001b20:	6860      	ldr	r0, [r4, #4]
 8001b22:	6801      	ldr	r1, [r0, #0]
 8001b24:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8001b28:	2800      	cmp	r0, #0
 8001b2a:	4770      	bx	lr

08001b2c <PE_Check_DataMessage>:
 8001b2c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8001b2e:	f000 f8a3 	bl	8001c78 <.text_18>
 8001b32:	2801      	cmp	r0, #1
 8001b34:	d02a      	beq.n	8001b8c <PE_Check_DataMessage+0x60>
 8001b36:	2802      	cmp	r0, #2
 8001b38:	d00c      	beq.n	8001b54 <PE_Check_DataMessage+0x28>
 8001b3a:	2803      	cmp	r0, #3
 8001b3c:	d03c      	beq.n	8001bb8 <PE_Check_DataMessage+0x8c>
 8001b3e:	2806      	cmp	r0, #6
 8001b40:	d07c      	beq.n	8001c3c <PE_Check_DataMessage+0x110>
 8001b42:	2807      	cmp	r0, #7
 8001b44:	f000 8089 	beq.w	8001c5a <PE_Check_DataMessage+0x12e>
 8001b48:	280a      	cmp	r0, #10
 8001b4a:	f000 808f 	beq.w	8001c6c <PE_Check_DataMessage+0x140>
 8001b4e:	280f      	cmp	r0, #15
 8001b50:	d070      	beq.n	8001c34 <PE_Check_DataMessage+0x108>
 8001b52:	e08e      	b.n	8001c72 <PE_Check_DataMessage+0x146>
 8001b54:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001b56:	7881      	ldrb	r1, [r0, #2]
 8001b58:	78c2      	ldrb	r2, [r0, #3]
 8001b5a:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8001b5e:	7901      	ldrb	r1, [r0, #4]
 8001b60:	7940      	ldrb	r0, [r0, #5]
 8001b62:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8001b66:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8001b6a:	9300      	str	r3, [sp, #0]
 8001b6c:	f7ff ffd8 	bl	8001b20 <.text_16>
 8001b70:	d063      	beq.n	8001c3a <PE_Check_DataMessage+0x10e>
 8001b72:	68a5      	ldr	r5, [r4, #8]
 8001b74:	7c20      	ldrb	r0, [r4, #16]
 8001b76:	69ae      	ldr	r6, [r5, #24]
 8001b78:	2304      	movs	r3, #4
 8001b7a:	466a      	mov	r2, sp
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	47b0      	blx	r6
 8001b80:	2001      	movs	r0, #1
 8001b82:	7720      	strb	r0, [r4, #28]
 8001b84:	2100      	movs	r1, #0
 8001b86:	84a1      	strh	r1, [r4, #36]	@ 0x24
 8001b88:	2009      	movs	r0, #9
 8001b8a:	e070      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001b8c:	f7ff ffc8 	bl	8001b20 <.text_16>
 8001b90:	d171      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001b92:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001b94:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8001b98:	7c20      	ldrb	r0, [r4, #16]
 8001b9a:	f7ff f84c 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8001b9e:	68a5      	ldr	r5, [r4, #8]
 8001ba0:	8ea0      	ldrh	r0, [r4, #52]	@ 0x34
 8001ba2:	69ae      	ldr	r6, [r5, #24]
 8001ba4:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8001ba8:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001baa:	1c82      	adds	r2, r0, #2
 8001bac:	7c20      	ldrb	r0, [r4, #16]
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	2104      	movs	r1, #4
 8001bb2:	47b0      	blx	r6
 8001bb4:	2044      	movs	r0, #68	@ 0x44
 8001bb6:	e05a      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001bb8:	2100      	movs	r1, #0
 8001bba:	9101      	str	r1, [sp, #4]
 8001bbc:	9100      	str	r1, [sp, #0]
 8001bbe:	466b      	mov	r3, sp
 8001bc0:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001bc2:	7881      	ldrb	r1, [r0, #2]
 8001bc4:	78c2      	ldrb	r2, [r0, #3]
 8001bc6:	68a6      	ldr	r6, [r4, #8]
 8001bc8:	6977      	ldr	r7, [r6, #20]
 8001bca:	eb01 2502 	add.w	r5, r1, r2, lsl #8
 8001bce:	7901      	ldrb	r1, [r0, #4]
 8001bd0:	7940      	ldrb	r0, [r0, #5]
 8001bd2:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8001bd6:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8001bda:	7c20      	ldrb	r0, [r4, #16]
 8001bdc:	aa01      	add	r2, sp, #4
 8001bde:	2103      	movs	r1, #3
 8001be0:	47b8      	blx	r7
 8001be2:	9800      	ldr	r0, [sp, #0]
 8001be4:	2104      	movs	r1, #4
 8001be6:	f7ff fbdf 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8001bea:	2800      	cmp	r0, #0
 8001bec:	bf01      	itttt	eq
 8001bee:	6860      	ldreq	r0, [r4, #4]
 8001bf0:	6801      	ldreq	r1, [r0, #0]
 8001bf2:	f3c1 2002 	ubfxeq	r0, r1, #8, #3
 8001bf6:	2803      	cmpeq	r0, #3
 8001bf8:	d11a      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001bfa:	9801      	ldr	r0, [sp, #4]
 8001bfc:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001c00:	4288      	cmp	r0, r1
 8001c02:	d115      	bne.n	8001c30 <PE_Check_DataMessage+0x104>
 8001c04:	0f2d      	lsrs	r5, r5, #28
 8001c06:	2d05      	cmp	r5, #5
 8001c08:	d010      	beq.n	8001c2c <PE_Check_DataMessage+0x100>
 8001c0a:	2d08      	cmp	r5, #8
 8001c0c:	d00c      	beq.n	8001c28 <PE_Check_DataMessage+0xfc>
 8001c0e:	2d09      	cmp	r5, #9
 8001c10:	d004      	beq.n	8001c1c <PE_Check_DataMessage+0xf0>
 8001c12:	2d0a      	cmp	r5, #10
 8001c14:	d12f      	bne.n	8001c76 <PE_Check_DataMessage+0x14a>
 8001c16:	7c20      	ldrb	r0, [r4, #16]
 8001c18:	2166      	movs	r1, #102	@ 0x66
 8001c1a:	e001      	b.n	8001c20 <PE_Check_DataMessage+0xf4>
 8001c1c:	7c20      	ldrb	r0, [r4, #16]
 8001c1e:	2165      	movs	r1, #101	@ 0x65
 8001c20:	f7fe fc99 	bl	8000556 <USBPD_PE_Notification>
 8001c24:	2003      	movs	r0, #3
 8001c26:	e022      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c28:	2129      	movs	r1, #41	@ 0x29
 8001c2a:	e023      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c2c:	2027      	movs	r0, #39	@ 0x27
 8001c2e:	e01e      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c30:	2103      	movs	r1, #3
 8001c32:	e01f      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c34:	4620      	mov	r0, r4
 8001c36:	f003 f816 	bl	8004c66 <PE_Check_DataMessageVDM>
 8001c3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c3c:	6820      	ldr	r0, [r4, #0]
 8001c3e:	8901      	ldrh	r1, [r0, #8]
 8001c40:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8001c44:	b180      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c46:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
 8001c48:	68a5      	ldr	r5, [r4, #8]
 8001c4a:	69ae      	ldr	r6, [r5, #24]
 8001c4c:	1c82      	adds	r2, r0, #2
 8001c4e:	7c20      	ldrb	r0, [r4, #16]
 8001c50:	2304      	movs	r3, #4
 8001c52:	210b      	movs	r1, #11
 8001c54:	47b0      	blx	r6
 8001c56:	202c      	movs	r0, #44	@ 0x2c
 8001c58:	e009      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c5a:	6820      	ldr	r0, [r4, #0]
 8001c5c:	8901      	ldrh	r1, [r0, #8]
 8001c5e:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8001c62:	b108      	cbz	r0, 8001c68 <PE_Check_DataMessage+0x13c>
 8001c64:	203d      	movs	r0, #61	@ 0x3d
 8001c66:	e002      	b.n	8001c6e <PE_Check_DataMessage+0x142>
 8001c68:	2101      	movs	r1, #1
 8001c6a:	e003      	b.n	8001c74 <PE_Check_DataMessage+0x148>
 8001c6c:	2001      	movs	r0, #1
 8001c6e:	7460      	strb	r0, [r4, #17]
 8001c70:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001c72:	2111      	movs	r1, #17
 8001c74:	7461      	strb	r1, [r4, #17]
 8001c76:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001c78 <.text_18>:
 8001c78:	4604      	mov	r4, r0
 8001c7a:	f894 0034 	ldrb.w	r0, [r4, #52]	@ 0x34
 8001c7e:	f000 001f 	and.w	r0, r0, #31
 8001c82:	4770      	bx	lr

08001c84 <PE_CheckSendMessageStatus>:
 8001c84:	b510      	push	{r4, lr}
 8001c86:	2410      	movs	r4, #16
 8001c88:	2b05      	cmp	r3, #5
 8001c8a:	d007      	beq.n	8001c9c <PE_CheckSendMessageStatus+0x18>
 8001c8c:	2b06      	cmp	r3, #6
 8001c8e:	d00c      	beq.n	8001caa <PE_CheckSendMessageStatus+0x26>
 8001c90:	2b07      	cmp	r3, #7
 8001c92:	d00f      	beq.n	8001cb4 <PE_CheckSendMessageStatus+0x30>
 8001c94:	2b09      	cmp	r3, #9
 8001c96:	bf08      	it	eq
 8001c98:	2409      	moveq	r4, #9
 8001c9a:	e027      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001c9c:	9902      	ldr	r1, [sp, #8]
 8001c9e:	7441      	strb	r1, [r0, #17]
 8001ca0:	2400      	movs	r4, #0
 8001ca2:	6941      	ldr	r1, [r0, #20]
 8001ca4:	f421 4180 	bic.w	r1, r1, #16384	@ 0x4000
 8001ca8:	e002      	b.n	8001cb0 <PE_CheckSendMessageStatus+0x2c>
 8001caa:	6941      	ldr	r1, [r0, #20]
 8001cac:	f441 5100 	orr.w	r1, r1, #8192	@ 0x2000
 8001cb0:	6141      	str	r1, [r0, #20]
 8001cb2:	e01b      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cb4:	b129      	cbz	r1, 8001cc2 <PE_CheckSendMessageStatus+0x3e>
 8001cb6:	2a01      	cmp	r2, #1
 8001cb8:	bf08      	it	eq
 8001cba:	2199      	moveq	r1, #153	@ 0x99
 8001cbc:	d015      	beq.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cbe:	2407      	movs	r4, #7
 8001cc0:	e014      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001cc2:	6841      	ldr	r1, [r0, #4]
 8001cc4:	680b      	ldr	r3, [r1, #0]
 8001cc6:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8001cca:	2904      	cmp	r1, #4
 8001ccc:	d003      	beq.n	8001cd6 <PE_CheckSendMessageStatus+0x52>
 8001cce:	2a01      	cmp	r2, #1
 8001cd0:	d10a      	bne.n	8001ce8 <PE_CheckSendMessageStatus+0x64>
 8001cd2:	210f      	movs	r1, #15
 8001cd4:	e009      	b.n	8001cea <PE_CheckSendMessageStatus+0x66>
 8001cd6:	2a00      	cmp	r2, #0
 8001cd8:	d1fb      	bne.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001cda:	6882      	ldr	r2, [r0, #8]
 8001cdc:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8001cde:	2900      	cmp	r1, #0
 8001ce0:	d0f7      	beq.n	8001cd2 <PE_CheckSendMessageStatus+0x4e>
 8001ce2:	2292      	movs	r2, #146	@ 0x92
 8001ce4:	7442      	strb	r2, [r0, #17]
 8001ce6:	e001      	b.n	8001cec <PE_CheckSendMessageStatus+0x68>
 8001ce8:	2111      	movs	r1, #17
 8001cea:	7441      	strb	r1, [r0, #17]
 8001cec:	4620      	mov	r0, r4
 8001cee:	bd10      	pop	{r4, pc}

08001cf0 <USBPD_PE_StateMachine_SNK>:
 8001cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	f8df 0c2c 	ldr.w	r0, [pc, #3116]	@ 8002924 <.text_22>
 8001cfa:	b08c      	sub	sp, #48	@ 0x30
 8001cfc:	4621      	mov	r1, r4
 8001cfe:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8001d02:	7c68      	ldrb	r0, [r5, #17]
 8001d04:	2848      	cmp	r0, #72	@ 0x48
 8001d06:	d12c      	bne.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d08:	4628      	mov	r0, r5
 8001d0a:	f7fe ff28 	bl	8000b5e <PE_Reset_ZI>
 8001d0e:	4628      	mov	r0, r5
 8001d10:	f7fe ff5f 	bl	8000bd2 <PE_Reset_Counter>
 8001d14:	6828      	ldr	r0, [r5, #0]
 8001d16:	7903      	ldrb	r3, [r0, #4]
 8001d18:	7c28      	ldrb	r0, [r5, #16]
 8001d1a:	f003 0303 	and.w	r3, r3, #3
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2100      	movs	r1, #0
 8001d22:	f003 f93e 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8001d26:	6868      	ldr	r0, [r5, #4]
 8001d28:	6801      	ldr	r1, [r0, #0]
 8001d2a:	f021 0108 	bic.w	r1, r1, #8
 8001d2e:	6001      	str	r1, [r0, #0]
 8001d30:	6828      	ldr	r0, [r5, #0]
 8001d32:	6841      	ldr	r1, [r0, #4]
 8001d34:	6868      	ldr	r0, [r5, #4]
 8001d36:	6802      	ldr	r2, [r0, #0]
 8001d38:	f361 0201 	bfi	r2, r1, #0, #2
 8001d3c:	6002      	str	r2, [r0, #0]
 8001d3e:	2101      	movs	r1, #1
 8001d40:	7c28      	ldrb	r0, [r5, #16]
 8001d42:	f003 f985 	bl	8005050 <USBPD_PRL_SOPCapability>
 8001d46:	7c28      	ldrb	r0, [r5, #16]
 8001d48:	f003 fbf7 	bl	800553a <USBPD_PRL_Reset>
 8001d4c:	7ca9      	ldrb	r1, [r5, #18]
 8001d4e:	203e      	movs	r0, #62	@ 0x3e
 8001d50:	293e      	cmp	r1, #62	@ 0x3e
 8001d52:	7468      	strb	r0, [r5, #17]
 8001d54:	d005      	beq.n	8001d62 <USBPD_PE_StateMachine_SNK+0x72>
 8001d56:	74a8      	strb	r0, [r5, #18]
 8001d58:	f000 fd25 	bl	80027a6 <.text_12>
 8001d5c:	223e      	movs	r2, #62	@ 0x3e
 8001d5e:	2004      	movs	r0, #4
 8001d60:	47b8      	blx	r7
 8001d62:	6968      	ldr	r0, [r5, #20]
 8001d64:	f3c0 4080 	ubfx	r0, r0, #18, #1
 8001d68:	b130      	cbz	r0, 8001d78 <USBPD_PE_StateMachine_SNK+0x88>
 8001d6a:	6968      	ldr	r0, [r5, #20]
 8001d6c:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 8001d70:	6168      	str	r0, [r5, #20]
 8001d72:	2164      	movs	r1, #100	@ 0x64
 8001d74:	f000 fd3b 	bl	80027ee <.text_18>
 8001d78:	4628      	mov	r0, r5
 8001d7a:	f7fe fde3 	bl	8000944 <PE_Get_RxEvent>
 8001d7e:	2803      	cmp	r0, #3
 8001d80:	f88d 000c 	strb.w	r0, [sp, #12]
 8001d84:	d103      	bne.n	8001d8e <USBPD_PE_StateMachine_SNK+0x9e>
 8001d86:	2001      	movs	r0, #1
 8001d88:	b00d      	add	sp, #52	@ 0x34
 8001d8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d8e:	f88d 400d 	strb.w	r4, [sp, #13]
 8001d92:	f44f 78fa 	mov.w	r8, #500	@ 0x1f4
 8001d96:	f248 19f4 	movw	r9, #33268	@ 0x81f4
 8001d9a:	f248 0b1b 	movw	fp, #32795	@ 0x801b
 8001d9e:	6868      	ldr	r0, [r5, #4]
 8001da0:	6801      	ldr	r1, [r0, #0]
 8001da2:	2402      	movs	r4, #2
 8001da4:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8001da8:	2800      	cmp	r0, #0
 8001daa:	f000 8110 	beq.w	8001fce <USBPD_PE_StateMachine_SNK+0x2de>
 8001dae:	6968      	ldr	r0, [r5, #20]
 8001db0:	f105 0630 	add.w	r6, r5, #48	@ 0x30
 8001db4:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8001db8:	b180      	cbz	r0, 8001ddc <USBPD_PE_StateMachine_SNK+0xec>
 8001dba:	20a7      	movs	r0, #167	@ 0xa7
 8001dbc:	6969      	ldr	r1, [r5, #20]
 8001dbe:	7468      	strb	r0, [r5, #17]
 8001dc0:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8001dc4:	6169      	str	r1, [r5, #20]
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	70b0      	strb	r0, [r6, #2]
 8001dca:	7ca9      	ldrb	r1, [r5, #18]
 8001dcc:	29a7      	cmp	r1, #167	@ 0xa7
 8001dce:	d020      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dd0:	20a7      	movs	r0, #167	@ 0xa7
 8001dd2:	f000 fcef 	bl	80027b4 <.text_13>
 8001dd6:	22a7      	movs	r2, #167	@ 0xa7
 8001dd8:	2004      	movs	r0, #4
 8001dda:	47e0      	blx	ip
 8001ddc:	78b0      	ldrb	r0, [r6, #2]
 8001dde:	280f      	cmp	r0, #15
 8001de0:	bf18      	it	ne
 8001de2:	2814      	cmpne	r0, #20
 8001de4:	d115      	bne.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001de6:	f000 fcce 	bl	8002786 <.text_9+0x2>
 8001dea:	d001      	beq.n	8001df0 <USBPD_PE_StateMachine_SNK+0x100>
 8001dec:	f000 fd06 	bl	80027fc <.text_20>
 8001df0:	78b2      	ldrb	r2, [r6, #2]
 8001df2:	746a      	strb	r2, [r5, #17]
 8001df4:	2000      	movs	r0, #0
 8001df6:	70b0      	strb	r0, [r6, #2]
 8001df8:	7ca9      	ldrb	r1, [r5, #18]
 8001dfa:	4291      	cmp	r1, r2
 8001dfc:	d009      	beq.n	8001e12 <USBPD_PE_StateMachine_SNK+0x122>
 8001dfe:	74aa      	strb	r2, [r5, #18]
 8001e00:	9000      	str	r0, [sp, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	f8df 7b20 	ldr.w	r7, [pc, #2848]	@ 8002928 <.text_23>
 8001e08:	7c29      	ldrb	r1, [r5, #16]
 8001e0a:	f8d7 c000 	ldr.w	ip, [r7]
 8001e0e:	2004      	movs	r0, #4
 8001e10:	47e0      	blx	ip
 8001e12:	f000 fcb3 	bl	800277c <.text_8>
 8001e16:	d117      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e18:	6868      	ldr	r0, [r5, #4]
 8001e1a:	6801      	ldr	r1, [r0, #0]
 8001e1c:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8001e20:	88b1      	ldrh	r1, [r6, #4]
 8001e22:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8001e26:	4288      	cmp	r0, r1
 8001e28:	d10e      	bne.n	8001e48 <USBPD_PE_StateMachine_SNK+0x158>
 8001e2a:	f000 fca3 	bl	8002774 <.text_7>
 8001e2e:	f000 fce8 	bl	8002802 <.text_20+0x6>
 8001e32:	7ca9      	ldrb	r1, [r5, #18]
 8001e34:	2092      	movs	r0, #146	@ 0x92
 8001e36:	2992      	cmp	r1, #146	@ 0x92
 8001e38:	7468      	strb	r0, [r5, #17]
 8001e3a:	f000 80d4 	beq.w	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001e3e:	f000 fcb9 	bl	80027b4 <.text_13>
 8001e42:	2292      	movs	r2, #146	@ 0x92
 8001e44:	2004      	movs	r0, #4
 8001e46:	47e0      	blx	ip
 8001e48:	7c68      	ldrb	r0, [r5, #17]
 8001e4a:	0001      	movs	r1, r0
 8001e4c:	f205 275e 	addw	r7, r5, #606	@ 0x25e
 8001e50:	f24f 0a1f 	movw	sl, #61471	@ 0xf01f
 8001e54:	f000 80bf 	beq.w	8001fd6 <USBPD_PE_StateMachine_SNK+0x2e6>
 8001e58:	1e41      	subs	r1, r0, #1
 8001e5a:	d070      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e5c:	1e89      	subs	r1, r1, #2
 8001e5e:	2901      	cmp	r1, #1
 8001e60:	f240 82aa 	bls.w	80023b8 <USBPD_PE_StateMachine_SNK+0x6c8>
 8001e64:	1e89      	subs	r1, r1, #2
 8001e66:	f000 81bb 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001e6a:	390a      	subs	r1, #10
 8001e6c:	f000 81bd 	beq.w	80021ea <USBPD_PE_StateMachine_SNK+0x4fa>
 8001e70:	1e49      	subs	r1, r1, #1
 8001e72:	f000 8242 	beq.w	80022fa <USBPD_PE_StateMachine_SNK+0x60a>
 8001e76:	1e49      	subs	r1, r1, #1
 8001e78:	f000 8248 	beq.w	800230c <USBPD_PE_StateMachine_SNK+0x61c>
 8001e7c:	1ec9      	subs	r1, r1, #3
 8001e7e:	f000 81e0 	beq.w	8002242 <USBPD_PE_StateMachine_SNK+0x552>
 8001e82:	1f09      	subs	r1, r1, #4
 8001e84:	2901      	cmp	r1, #1
 8001e86:	d95a      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e88:	1e89      	subs	r1, r1, #2
 8001e8a:	f000 826e 	beq.w	800236a <USBPD_PE_StateMachine_SNK+0x67a>
 8001e8e:	1ec9      	subs	r1, r1, #3
 8001e90:	d055      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001e92:	1e49      	subs	r1, r1, #1
 8001e94:	f000 8333 	beq.w	80024fe <USBPD_PE_StateMachine_SNK+0x80e>
 8001e98:	1f09      	subs	r1, r1, #4
 8001e9a:	f000 829b 	beq.w	80023d4 <USBPD_PE_StateMachine_SNK+0x6e4>
 8001e9e:	1f49      	subs	r1, r1, #5
 8001ea0:	2902      	cmp	r1, #2
 8001ea2:	d94c      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ea4:	1ec9      	subs	r1, r1, #3
 8001ea6:	f000 8280 	beq.w	80023aa <USBPD_PE_StateMachine_SNK+0x6ba>
 8001eaa:	1e49      	subs	r1, r1, #1
 8001eac:	f000 838f 	beq.w	80025ce <USBPD_PE_StateMachine_SNK+0x8de>
 8001eb0:	1e49      	subs	r1, r1, #1
 8001eb2:	d044      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001eb4:	1e89      	subs	r1, r1, #2
 8001eb6:	f000 83cd 	beq.w	8002654 <USBPD_PE_StateMachine_SNK+0x964>
 8001eba:	1e49      	subs	r1, r1, #1
 8001ebc:	2901      	cmp	r1, #1
 8001ebe:	d93e      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ec0:	1e89      	subs	r1, r1, #2
 8001ec2:	d001      	beq.n	8001ec8 <USBPD_PE_StateMachine_SNK+0x1d8>
 8001ec4:	1e89      	subs	r1, r1, #2
 8001ec6:	2905      	cmp	r1, #5
 8001ec8:	f240 83f3 	bls.w	80026b2 <USBPD_PE_StateMachine_SNK+0x9c2>
 8001ecc:	1f89      	subs	r1, r1, #6
 8001ece:	f000 83ce 	beq.w	800266e <USBPD_PE_StateMachine_SNK+0x97e>
 8001ed2:	1e49      	subs	r1, r1, #1
 8001ed4:	2903      	cmp	r1, #3
 8001ed6:	d932      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001ed8:	1f09      	subs	r1, r1, #4
 8001eda:	f000 808d 	beq.w	8001ff8 <USBPD_PE_StateMachine_SNK+0x308>
 8001ede:	1e89      	subs	r1, r1, #2
 8001ee0:	f000 81da 	beq.w	8002298 <USBPD_PE_StateMachine_SNK+0x5a8>
 8001ee4:	1ec9      	subs	r1, r1, #3
 8001ee6:	f000 80a0 	beq.w	800202a <USBPD_PE_StateMachine_SNK+0x33a>
 8001eea:	1e49      	subs	r1, r1, #1
 8001eec:	f000 80d7 	beq.w	800209e <USBPD_PE_StateMachine_SNK+0x3ae>
 8001ef0:	1e49      	subs	r1, r1, #1
 8001ef2:	f000 80e3 	beq.w	80020bc <USBPD_PE_StateMachine_SNK+0x3cc>
 8001ef6:	1e49      	subs	r1, r1, #1
 8001ef8:	f000 80fb 	beq.w	80020f2 <USBPD_PE_StateMachine_SNK+0x402>
 8001efc:	1e49      	subs	r1, r1, #1
 8001efe:	f000 8146 	beq.w	800218e <USBPD_PE_StateMachine_SNK+0x49e>
 8001f02:	1e89      	subs	r1, r1, #2
 8001f04:	d0ac      	beq.n	8001e60 <USBPD_PE_StateMachine_SNK+0x170>
 8001f06:	1e89      	subs	r1, r1, #2
 8001f08:	d019      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f0a:	1e49      	subs	r1, r1, #1
 8001f0c:	f000 8343 	beq.w	8002596 <USBPD_PE_StateMachine_SNK+0x8a6>
 8001f10:	1f09      	subs	r1, r1, #4
 8001f12:	f000 8212 	beq.w	800233a <USBPD_PE_StateMachine_SNK+0x64a>
 8001f16:	1ec9      	subs	r1, r1, #3
 8001f18:	f000 82b2 	beq.w	8002480 <USBPD_PE_StateMachine_SNK+0x790>
 8001f1c:	1f49      	subs	r1, r1, #5
 8001f1e:	f000 82fb 	beq.w	8002518 <USBPD_PE_StateMachine_SNK+0x828>
 8001f22:	1e49      	subs	r1, r1, #1
 8001f24:	f000 8283 	beq.w	800242e <USBPD_PE_StateMachine_SNK+0x73e>
 8001f28:	3909      	subs	r1, #9
 8001f2a:	2902      	cmp	r1, #2
 8001f2c:	d907      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f2e:	1ec9      	subs	r1, r1, #3
 8001f30:	f000 835e 	beq.w	80025f0 <USBPD_PE_StateMachine_SNK+0x900>
 8001f34:	1e49      	subs	r1, r1, #1
 8001f36:	f000 836b 	beq.w	8002610 <USBPD_PE_StateMachine_SNK+0x920>
 8001f3a:	1e49      	subs	r1, r1, #1
 8001f3c:	2901      	cmp	r1, #1
 8001f3e:	f240 83bc 	bls.w	80026ba <USBPD_PE_StateMachine_SNK+0x9ca>
 8001f42:	390d      	subs	r1, #13
 8001f44:	d0fb      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f46:	3912      	subs	r1, #18
 8001f48:	f000 83cc 	beq.w	80026e4 <USBPD_PE_StateMachine_SNK+0x9f4>
 8001f4c:	390c      	subs	r1, #12
 8001f4e:	d04a      	beq.n	8001fe6 <USBPD_PE_StateMachine_SNK+0x2f6>
 8001f50:	1e49      	subs	r1, r1, #1
 8001f52:	2902      	cmp	r1, #2
 8001f54:	d9f3      	bls.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f56:	1f49      	subs	r1, r1, #5
 8001f58:	f000 8213 	beq.w	8002382 <USBPD_PE_StateMachine_SNK+0x692>
 8001f5c:	1e49      	subs	r1, r1, #1
 8001f5e:	d0ee      	beq.n	8001f3e <USBPD_PE_StateMachine_SNK+0x24e>
 8001f60:	1e49      	subs	r1, r1, #1
 8001f62:	f000 813d 	beq.w	80021e0 <USBPD_PE_StateMachine_SNK+0x4f0>
 8001f66:	1e49      	subs	r1, r1, #1
 8001f68:	f000 817d 	beq.w	8002266 <USBPD_PE_StateMachine_SNK+0x576>
 8001f6c:	1e49      	subs	r1, r1, #1
 8001f6e:	2908      	cmp	r1, #8
 8001f70:	f240 83a8 	bls.w	80026c4 <USBPD_PE_StateMachine_SNK+0x9d4>
 8001f74:	390b      	subs	r1, #11
 8001f76:	f000 83bb 	beq.w	80026f0 <USBPD_PE_StateMachine_SNK+0xa00>
 8001f7a:	a903      	add	r1, sp, #12
 8001f7c:	4628      	mov	r0, r5
 8001f7e:	f002 f859 	bl	8004034 <PE_StateMachine_VDM>
 8001f82:	4604      	mov	r4, r0
 8001f84:	7c6a      	ldrb	r2, [r5, #17]
 8001f86:	7ca8      	ldrb	r0, [r5, #18]
 8001f88:	4290      	cmp	r0, r2
 8001f8a:	d004      	beq.n	8001f96 <USBPD_PE_StateMachine_SNK+0x2a6>
 8001f8c:	74aa      	strb	r2, [r5, #18]
 8001f8e:	f000 fc0a 	bl	80027a6 <.text_12>
 8001f92:	2004      	movs	r0, #4
 8001f94:	47b8      	blx	r7
 8001f96:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8001f9a:	f8df 698c 	ldr.w	r6, [pc, #2444]	@ 8002928 <.text_23>
 8001f9e:	2814      	cmp	r0, #20
 8001fa0:	f000 83b1 	beq.w	8002706 <USBPD_PE_StateMachine_SNK+0xa16>
 8001fa4:	4628      	mov	r0, r5
 8001fa6:	f7fe fd42 	bl	8000a2e <PE_Check_AMSConflict>
 8001faa:	2815      	cmp	r0, #21
 8001fac:	d104      	bne.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fae:	f000 fbea 	bl	8002786 <.text_9+0x2>
 8001fb2:	d001      	beq.n	8001fb8 <USBPD_PE_StateMachine_SNK+0x2c8>
 8001fb4:	f000 fc22 	bl	80027fc <.text_20>
 8001fb8:	7c6a      	ldrb	r2, [r5, #17]
 8001fba:	7ca8      	ldrb	r0, [r5, #18]
 8001fbc:	4290      	cmp	r0, r2
 8001fbe:	d004      	beq.n	8001fca <USBPD_PE_StateMachine_SNK+0x2da>
 8001fc0:	74aa      	strb	r2, [r5, #18]
 8001fc2:	f000 fbea 	bl	800279a <.text_11>
 8001fc6:	2004      	movs	r0, #4
 8001fc8:	47a0      	blx	r4
 8001fca:	2400      	movs	r4, #0
 8001fcc:	e3b7      	b.n	800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 8001fce:	f04f 34ff 	mov.w	r4, #4294967295
 8001fd2:	4620      	mov	r0, r4
 8001fd4:	e6d8      	b.n	8001d88 <USBPD_PE_StateMachine_SNK+0x98>
 8001fd6:	f000 fbfc 	bl	80027d2 <.text_15>
 8001fda:	215f      	movs	r1, #95	@ 0x5f
 8001fdc:	f000 fc07 	bl	80027ee <.text_18>
 8001fe0:	f04f 34ff 	mov.w	r4, #4294967295
 8001fe4:	e7ce      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8001fe6:	f000 fbf4 	bl	80027d2 <.text_15>
 8001fea:	68a8      	ldr	r0, [r5, #8]
 8001fec:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8001fee:	2900      	cmp	r1, #0
 8001ff0:	d0f6      	beq.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff2:	7c28      	ldrb	r0, [r5, #16]
 8001ff4:	4788      	blx	r1
 8001ff6:	e7f3      	b.n	8001fe0 <USBPD_PE_StateMachine_SNK+0x2f0>
 8001ff8:	6868      	ldr	r0, [r5, #4]
 8001ffa:	6801      	ldr	r1, [r0, #0]
 8001ffc:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002000:	2800      	cmp	r0, #0
 8002002:	d0bf      	beq.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002004:	f001 0203 	and.w	r2, r1, #3
 8002008:	6868      	ldr	r0, [r5, #4]
 800200a:	2a01      	cmp	r2, #1
 800200c:	bf0c      	ite	eq
 800200e:	2200      	moveq	r2, #0
 8002010:	2220      	movne	r2, #32
 8002012:	f021 0120 	bic.w	r1, r1, #32
 8002016:	4311      	orrs	r1, r2
 8002018:	6001      	str	r1, [r0, #0]
 800201a:	2001      	movs	r0, #1
 800201c:	7728      	strb	r0, [r5, #28]
 800201e:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002022:	4644      	mov	r4, r8
 8002024:	2143      	movs	r1, #67	@ 0x43
 8002026:	7469      	strb	r1, [r5, #17]
 8002028:	e7ac      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800202a:	f000 fba7 	bl	800277c <.text_8>
 800202e:	d12f      	bne.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002030:	88b1      	ldrh	r1, [r6, #4]
 8002032:	0bc8      	lsrs	r0, r1, #15
 8002034:	d128      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002036:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800203a:	b328      	cbz	r0, 8002088 <USBPD_PE_StateMachine_SNK+0x398>
 800203c:	4608      	mov	r0, r1
 800203e:	f000 011f 	and.w	r1, r0, #31
 8002042:	2901      	cmp	r1, #1
 8002044:	d120      	bne.n	8002088 <USBPD_PE_StateMachine_SNK+0x398>
 8002046:	2200      	movs	r2, #0
 8002048:	70ba      	strb	r2, [r7, #2]
 800204a:	6969      	ldr	r1, [r5, #20]
 800204c:	f041 0104 	orr.w	r1, r1, #4
 8002050:	6169      	str	r1, [r5, #20]
 8002052:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002056:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800205a:	f7fe fdec 	bl	8000c36 <PE_ExtRevisionInteroperability>
 800205e:	88b0      	ldrh	r0, [r6, #4]
 8002060:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8002064:	68b0      	ldr	r0, [r6, #8]
 8002066:	68ae      	ldr	r6, [r5, #8]
 8002068:	69b7      	ldr	r7, [r6, #24]
 800206a:	1c82      	adds	r2, r0, #2
 800206c:	7c28      	ldrb	r0, [r5, #16]
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	2104      	movs	r1, #4
 8002072:	47b8      	blx	r7
 8002074:	2001      	movs	r0, #1
 8002076:	7728      	strb	r0, [r5, #28]
 8002078:	f000 fbab 	bl	80027d2 <.text_15>
 800207c:	2044      	movs	r0, #68	@ 0x44
 800207e:	7468      	strb	r0, [r5, #17]
 8002080:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002084:	2914      	cmp	r1, #20
 8002086:	d003      	beq.n	8002090 <USBPD_PE_StateMachine_SNK+0x3a0>
 8002088:	f000 fb74 	bl	8002774 <.text_7>
 800208c:	f000 fbb9 	bl	8002802 <.text_20+0x6>
 8002090:	f000 fb6c 	bl	800276c <.text_6>
 8002094:	d102      	bne.n	800209c <USBPD_PE_StateMachine_SNK+0x3ac>
 8002096:	210f      	movs	r1, #15
 8002098:	7469      	strb	r1, [r5, #17]
 800209a:	2400      	movs	r4, #0
 800209c:	e772      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800209e:	68ab      	ldr	r3, [r5, #8]
 80020a0:	7c28      	ldrb	r0, [r5, #16]
 80020a2:	6a1c      	ldr	r4, [r3, #32]
 80020a4:	466a      	mov	r2, sp
 80020a6:	f105 0118 	add.w	r1, r5, #24
 80020aa:	47a0      	blx	r4
 80020ac:	9800      	ldr	r0, [sp, #0]
 80020ae:	6969      	ldr	r1, [r5, #20]
 80020b0:	f360 01c4 	bfi	r1, r0, #3, #2
 80020b4:	2045      	movs	r0, #69	@ 0x45
 80020b6:	6169      	str	r1, [r5, #20]
 80020b8:	7468      	strb	r0, [r5, #17]
 80020ba:	e7ee      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80020bc:	6968      	ldr	r0, [r5, #20]
 80020be:	f3c0 30c0 	ubfx	r0, r0, #15, #1
 80020c2:	b100      	cbz	r0, 80020c6 <USBPD_PE_StateMachine_SNK+0x3d6>
 80020c4:	2002      	movs	r0, #2
 80020c6:	9002      	str	r0, [sp, #8]
 80020c8:	2101      	movs	r1, #1
 80020ca:	2046      	movs	r0, #70	@ 0x46
 80020cc:	9001      	str	r0, [sp, #4]
 80020ce:	9100      	str	r1, [sp, #0]
 80020d0:	f105 0318 	add.w	r3, r5, #24
 80020d4:	2202      	movs	r2, #2
 80020d6:	2100      	movs	r1, #0
 80020d8:	4628      	mov	r0, r5
 80020da:	f7ff f9f2 	bl	80014c2 <PE_Send_DataMessage>
 80020de:	2800      	cmp	r0, #0
 80020e0:	d106      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 80020e2:	6968      	ldr	r0, [r5, #20]
 80020e4:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 80020e8:	6168      	str	r0, [r5, #20]
 80020ea:	f8a5 b01e 	strh.w	fp, [r5, #30]
 80020ee:	241b      	movs	r4, #27
 80020f0:	e748      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80020f2:	f000 fb43 	bl	800277c <.text_8>
 80020f6:	bf04      	itt	eq
 80020f8:	88b0      	ldrheq	r0, [r6, #4]
 80020fa:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80020fe:	d142      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002100:	f000 001f 	and.w	r0, r0, #31
 8002104:	2802      	cmp	r0, #2
 8002106:	bf18      	it	ne
 8002108:	2803      	cmpne	r0, #3
 800210a:	d019      	beq.n	8002140 <USBPD_PE_StateMachine_SNK+0x450>
 800210c:	2804      	cmp	r0, #4
 800210e:	bf18      	it	ne
 8002110:	280c      	cmpne	r0, #12
 8002112:	d124      	bne.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002114:	6868      	ldr	r0, [r5, #4]
 8002116:	6801      	ldr	r1, [r0, #0]
 8002118:	f3c1 2002 	ubfx	r0, r1, #8, #3
 800211c:	2803      	cmp	r0, #3
 800211e:	d005      	beq.n	800212c <USBPD_PE_StateMachine_SNK+0x43c>
 8002120:	2043      	movs	r0, #67	@ 0x43
 8002122:	7468      	strb	r0, [r5, #17]
 8002124:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002128:	4644      	mov	r4, r8
 800212a:	e014      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 800212c:	7930      	ldrb	r0, [r6, #4]
 800212e:	f000 001f 	and.w	r0, r0, #31
 8002132:	280c      	cmp	r0, #12
 8002134:	bf0c      	ite	eq
 8002136:	2049      	moveq	r0, #73	@ 0x49
 8002138:	2003      	movne	r0, #3
 800213a:	7468      	strb	r0, [r5, #17]
 800213c:	2400      	movs	r4, #0
 800213e:	e00a      	b.n	8002156 <USBPD_PE_StateMachine_SNK+0x466>
 8002140:	f8a5 901e 	strh.w	r9, [r5, #30]
 8002144:	f000 fb4f 	bl	80027e6 <.text_17>
 8002148:	2047      	movs	r0, #71	@ 0x47
 800214a:	7468      	strb	r0, [r5, #17]
 800214c:	4644      	mov	r4, r8
 800214e:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002152:	2914      	cmp	r1, #20
 8002154:	d003      	beq.n	800215e <USBPD_PE_StateMachine_SNK+0x46e>
 8002156:	f000 fb0d 	bl	8002774 <.text_7>
 800215a:	f000 fb52 	bl	8002802 <.text_20+0x6>
 800215e:	7930      	ldrb	r0, [r6, #4]
 8002160:	f000 001f 	and.w	r0, r0, #31
 8002164:	2802      	cmp	r0, #2
 8002166:	d009      	beq.n	800217c <USBPD_PE_StateMachine_SNK+0x48c>
 8002168:	2803      	cmp	r0, #3
 800216a:	d009      	beq.n	8002180 <USBPD_PE_StateMachine_SNK+0x490>
 800216c:	2804      	cmp	r0, #4
 800216e:	d003      	beq.n	8002178 <USBPD_PE_StateMachine_SNK+0x488>
 8002170:	280c      	cmp	r0, #12
 8002172:	d108      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 8002174:	2103      	movs	r1, #3
 8002176:	e004      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002178:	2102      	movs	r1, #2
 800217a:	e002      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 800217c:	2104      	movs	r1, #4
 800217e:	e000      	b.n	8002182 <USBPD_PE_StateMachine_SNK+0x492>
 8002180:	2101      	movs	r1, #1
 8002182:	f000 fb34 	bl	80027ee <.text_18>
 8002186:	f000 faf1 	bl	800276c <.text_6>
 800218a:	d1b1      	bne.n	80020f0 <USBPD_PE_StateMachine_SNK+0x400>
 800218c:	e783      	b.n	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800218e:	f000 faf5 	bl	800277c <.text_8>
 8002192:	bf02      	ittt	eq
 8002194:	88b0      	ldrheq	r0, [r6, #4]
 8002196:	ea0a 0000 	andeq.w	r0, sl, r0
 800219a:	2806      	cmpeq	r0, #6
 800219c:	d1f3      	bne.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800219e:	f000 fb2d 	bl	80027fc <.text_20>
 80021a2:	2103      	movs	r1, #3
 80021a4:	f000 fb20 	bl	80027e8 <.text_17+0x2>
 80021a8:	7c28      	ldrb	r0, [r5, #16]
 80021aa:	2110      	movs	r1, #16
 80021ac:	f7fe f9d3 	bl	8000556 <USBPD_PE_Notification>
 80021b0:	f000 fb09 	bl	80027c6 <.text_14>
 80021b4:	bf1a      	itte	ne
 80021b6:	6828      	ldrne	r0, [r5, #0]
 80021b8:	6801      	ldrne	r1, [r0, #0]
 80021ba:	2101      	moveq	r1, #1
 80021bc:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80021c0:	f002 ff46 	bl	8005050 <USBPD_PRL_SOPCapability>
 80021c4:	2000      	movs	r0, #0
 80021c6:	84a8      	strh	r0, [r5, #36]	@ 0x24
 80021c8:	6968      	ldr	r0, [r5, #20]
 80021ca:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 80021ce:	2803      	cmp	r0, #3
 80021d0:	bf04      	itt	eq
 80021d2:	f24a 3028 	movweq	r0, #41768	@ 0xa328
 80021d6:	84a8      	strheq	r0, [r5, #36]	@ 0x24
 80021d8:	2103      	movs	r1, #3
 80021da:	7469      	strb	r1, [r5, #17]
 80021dc:	2400      	movs	r4, #0
 80021de:	e7d2      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 80021e0:	a903      	add	r1, sp, #12
 80021e2:	4628      	mov	r0, r5
 80021e4:	f001 fadc 	bl	80037a0 <PE_StateMachine_VDMCable>
 80021e8:	e6cb      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80021ea:	f000 faec 	bl	80027c6 <.text_14>
 80021ee:	bf1e      	ittt	ne
 80021f0:	68a8      	ldrne	r0, [r5, #8]
 80021f2:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 80021f4:	2a00      	cmpne	r2, #0
 80021f6:	d002      	beq.n	80021fe <USBPD_PE_StateMachine_SNK+0x50e>
 80021f8:	7c28      	ldrb	r0, [r5, #16]
 80021fa:	2100      	movs	r1, #0
 80021fc:	4790      	blx	r2
 80021fe:	f000 fae8 	bl	80027d2 <.text_15>
 8002202:	4628      	mov	r0, r5
 8002204:	2101      	movs	r1, #1
 8002206:	f7ff f88d 	bl	8001324 <PE_SetPowerNegotiation>
 800220a:	78b8      	ldrb	r0, [r7, #2]
 800220c:	2803      	cmp	r0, #3
 800220e:	d30a      	bcc.n	8002226 <USBPD_PE_StateMachine_SNK+0x536>
 8002210:	6968      	ldr	r0, [r5, #20]
 8002212:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002216:	2800      	cmp	r0, #0
 8002218:	bf1e      	ittt	ne
 800221a:	68a9      	ldrne	r1, [r5, #8]
 800221c:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 800221e:	2800      	cmpne	r0, #0
 8002220:	d166      	bne.n	80022f0 <USBPD_PE_StateMachine_SNK+0x600>
 8002222:	2100      	movs	r1, #0
 8002224:	e6ff      	b.n	8002026 <USBPD_PE_StateMachine_SNK+0x336>
 8002226:	1c40      	adds	r0, r0, #1
 8002228:	70b8      	strb	r0, [r7, #2]
 800222a:	2105      	movs	r1, #5
 800222c:	4628      	mov	r0, r5
 800222e:	f7fe fb61 	bl	80008f4 <PE_Send_RESET>
 8002232:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8002236:	83e8      	strh	r0, [r5, #30]
 8002238:	2201      	movs	r2, #1
 800223a:	f000 fad0 	bl	80027de <.text_16>
 800223e:	209b      	movs	r0, #155	@ 0x9b
 8002240:	e73a      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 8002242:	f000 fac0 	bl	80027c6 <.text_14>
 8002246:	bf1e      	ittt	ne
 8002248:	68a8      	ldrne	r0, [r5, #8]
 800224a:	6b02      	ldrne	r2, [r0, #48]	@ 0x30
 800224c:	2a00      	cmpne	r2, #0
 800224e:	d002      	beq.n	8002256 <USBPD_PE_StateMachine_SNK+0x566>
 8002250:	7c28      	ldrb	r0, [r5, #16]
 8002252:	2100      	movs	r1, #0
 8002254:	4790      	blx	r2
 8002256:	2200      	movs	r2, #0
 8002258:	f000 fac1 	bl	80027de <.text_16>
 800225c:	f248 30e8 	movw	r0, #33768	@ 0x83e8
 8002260:	83e8      	strh	r0, [r5, #30]
 8002262:	219b      	movs	r1, #155	@ 0x9b
 8002264:	e718      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002266:	68aa      	ldr	r2, [r5, #8]
 8002268:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800226c:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 800226e:	4798      	blx	r3
 8002270:	2801      	cmp	r0, #1
 8002272:	d10d      	bne.n	8002290 <USBPD_PE_StateMachine_SNK+0x5a0>
 8002274:	f648 00e3 	movw	r0, #35043	@ 0x88e3
 8002278:	83e8      	strh	r0, [r5, #30]
 800227a:	2169      	movs	r1, #105	@ 0x69
 800227c:	f89d 000d 	ldrb.w	r0, [sp, #13]
 8002280:	f7fe f969 	bl	8000556 <USBPD_PE_Notification>
 8002284:	2040      	movs	r0, #64	@ 0x40
 8002286:	7468      	strb	r0, [r5, #17]
 8002288:	2113      	movs	r1, #19
 800228a:	f000 fab0 	bl	80027ee <.text_18>
 800228e:	2400      	movs	r4, #0
 8002290:	f000 fa6c 	bl	800276c <.text_6>
 8002294:	d150      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 8002296:	e01b      	b.n	80022d0 <USBPD_PE_StateMachine_SNK+0x5e0>
 8002298:	68aa      	ldr	r2, [r5, #8]
 800229a:	f89d 000d 	ldrb.w	r0, [sp, #13]
 800229e:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80022a0:	2101      	movs	r1, #1
 80022a2:	4798      	blx	r3
 80022a4:	2801      	cmp	r0, #1
 80022a6:	d110      	bne.n	80022ca <USBPD_PE_StateMachine_SNK+0x5da>
 80022a8:	4628      	mov	r0, r5
 80022aa:	f7fe fc22 	bl	8000af2 <PE_Reset_HardReset>
 80022ae:	2205      	movs	r2, #5
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fa95 	bl	80027e0 <.text_16+0x2>
 80022b6:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80022ba:	2168      	movs	r1, #104	@ 0x68
 80022bc:	f7fe f94b 	bl	8000556 <USBPD_PE_Notification>
 80022c0:	f8a5 901e 	strh.w	r9, [r5, #30]
 80022c4:	2043      	movs	r0, #67	@ 0x43
 80022c6:	4644      	mov	r4, r8
 80022c8:	7468      	strb	r0, [r5, #17]
 80022ca:	f000 fa4f 	bl	800276c <.text_6>
 80022ce:	d133      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 80022d0:	2206      	movs	r2, #6
 80022d2:	2100      	movs	r1, #0
 80022d4:	f000 fa84 	bl	80027e0 <.text_16+0x2>
 80022d8:	78b8      	ldrb	r0, [r7, #2]
 80022da:	2803      	cmp	r0, #3
 80022dc:	f4ff aedb 	bcc.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 80022e0:	6968      	ldr	r0, [r5, #20]
 80022e2:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80022e6:	2800      	cmp	r0, #0
 80022e8:	bf1e      	ittt	ne
 80022ea:	68a9      	ldrne	r1, [r5, #8]
 80022ec:	6b48      	ldrne	r0, [r1, #52]	@ 0x34
 80022ee:	2800      	cmpne	r0, #0
 80022f0:	f040 80c4 	bne.w	800247c <USBPD_PE_StateMachine_SNK+0x78c>
 80022f4:	2100      	movs	r1, #0
 80022f6:	7469      	strb	r1, [r5, #17]
 80022f8:	e6cf      	b.n	800209a <USBPD_PE_StateMachine_SNK+0x3aa>
 80022fa:	2000      	movs	r0, #0
 80022fc:	9000      	str	r0, [sp, #0]
 80022fe:	2303      	movs	r3, #3
 8002300:	2203      	movs	r2, #3
 8002302:	f000 fa78 	bl	80027f6 <.text_19+0x2>
 8002306:	2800      	cmp	r0, #0
 8002308:	d116      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800230a:	e686      	b.n	800201a <USBPD_PE_StateMachine_SNK+0x32a>
 800230c:	6868      	ldr	r0, [r5, #4]
 800230e:	6801      	ldr	r1, [r0, #0]
 8002310:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002314:	2804      	cmp	r0, #4
 8002316:	f43f aebe 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800231a:	2000      	movs	r0, #0
 800231c:	9000      	str	r0, [sp, #0]
 800231e:	2350      	movs	r3, #80	@ 0x50
 8002320:	7871      	ldrb	r1, [r6, #1]
 8002322:	220d      	movs	r2, #13
 8002324:	f000 fa67 	bl	80027f6 <.text_19+0x2>
 8002328:	2800      	cmp	r0, #0
 800232a:	d105      	bne.n	8002338 <USBPD_PE_StateMachine_SNK+0x648>
 800232c:	2003      	movs	r0, #3
 800232e:	f000 fa18 	bl	8002762 <.text_5>
 8002332:	2130      	movs	r1, #48	@ 0x30
 8002334:	f000 fa5b 	bl	80027ee <.text_18>
 8002338:	e624      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800233a:	f000 fa24 	bl	8002786 <.text_9+0x2>
 800233e:	d013      	beq.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002340:	7831      	ldrb	r1, [r6, #0]
 8002342:	7870      	ldrb	r0, [r6, #1]
 8002344:	4281      	cmp	r1, r0
 8002346:	bf02      	ittt	eq
 8002348:	88b1      	ldrheq	r1, [r6, #4]
 800234a:	ea0a 0001 	andeq.w	r0, sl, r1
 800234e:	2803      	cmpeq	r0, #3
 8002350:	d10a      	bne.n	8002368 <USBPD_PE_StateMachine_SNK+0x678>
 8002352:	2001      	movs	r0, #1
 8002354:	7728      	strb	r0, [r5, #28]
 8002356:	f8a5 901e 	strh.w	r9, [r5, #30]
 800235a:	2143      	movs	r1, #67	@ 0x43
 800235c:	7469      	strb	r1, [r5, #17]
 800235e:	f000 fa09 	bl	8002774 <.text_7>
 8002362:	4644      	mov	r4, r8
 8002364:	f000 fa4d 	bl	8002802 <.text_20+0x6>
 8002368:	e70d      	b.n	8002186 <USBPD_PE_StateMachine_SNK+0x496>
 800236a:	9400      	str	r4, [sp, #0]
 800236c:	2343      	movs	r3, #67	@ 0x43
 800236e:	2207      	movs	r2, #7
 8002370:	f000 fa40 	bl	80027f4 <.text_19>
 8002374:	2800      	cmp	r0, #0
 8002376:	d117      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002378:	2006      	movs	r0, #6
 800237a:	f000 f9f2 	bl	8002762 <.text_5>
 800237e:	210b      	movs	r1, #11
 8002380:	e7d8      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 8002382:	f000 f9fb 	bl	800277c <.text_8>
 8002386:	bf02      	ittt	eq
 8002388:	88b0      	ldrheq	r0, [r6, #4]
 800238a:	ea0a 0000 	andeq.w	r0, sl, r0
 800238e:	2806      	cmpeq	r0, #6
 8002390:	d10a      	bne.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 8002392:	7c28      	ldrb	r0, [r5, #16]
 8002394:	212c      	movs	r1, #44	@ 0x2c
 8002396:	f7fe f8de 	bl	8000556 <USBPD_PE_Notification>
 800239a:	2003      	movs	r0, #3
 800239c:	7468      	strb	r0, [r5, #17]
 800239e:	f000 f9f1 	bl	8002784 <.text_9>
 80023a2:	d001      	beq.n	80023a8 <USBPD_PE_StateMachine_SNK+0x6b8>
 80023a4:	f000 fa2a 	bl	80027fc <.text_20>
 80023a8:	e5ec      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023aa:	2000      	movs	r0, #0
 80023ac:	9000      	str	r0, [sp, #0]
 80023ae:	2303      	movs	r3, #3
 80023b0:	2204      	movs	r2, #4
 80023b2:	f000 fa20 	bl	80027f6 <.text_19+0x2>
 80023b6:	e5e5      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80023b8:	2804      	cmp	r0, #4
 80023ba:	d006      	beq.n	80023ca <USBPD_PE_StateMachine_SNK+0x6da>
 80023bc:	2000      	movs	r0, #0
 80023be:	7728      	strb	r0, [r5, #28]
 80023c0:	2104      	movs	r1, #4
 80023c2:	7469      	strb	r1, [r5, #17]
 80023c4:	2120      	movs	r1, #32
 80023c6:	f000 fa12 	bl	80027ee <.text_18>
 80023ca:	a903      	add	r1, sp, #12
 80023cc:	4628      	mov	r0, r5
 80023ce:	f000 fa1b 	bl	8002808 <PE_StateMachine_SNK_ReadyWait>
 80023d2:	e5d6      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80023d4:	68a8      	ldr	r0, [r5, #8]
 80023d6:	6881      	ldr	r1, [r0, #8]
 80023d8:	b339      	cbz	r1, 800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80023de:	4788      	blx	r1
 80023e0:	280a      	cmp	r0, #10
 80023e2:	d002      	beq.n	80023ea <USBPD_PE_StateMachine_SNK+0x6fa>
 80023e4:	280d      	cmp	r0, #13
 80023e6:	d01a      	beq.n	800241e <USBPD_PE_StateMachine_SNK+0x72e>
 80023e8:	e01f      	b.n	800242a <USBPD_PE_StateMachine_SNK+0x73a>
 80023ea:	f000 f9b6 	bl	800275a <.text_4>
 80023ee:	2201      	movs	r2, #1
 80023f0:	2100      	movs	r1, #0
 80023f2:	47b0      	blx	r6
 80023f4:	2000      	movs	r0, #0
 80023f6:	9000      	str	r0, [sp, #0]
 80023f8:	2359      	movs	r3, #89	@ 0x59
 80023fa:	2203      	movs	r2, #3
 80023fc:	f000 f9fa 	bl	80027f4 <.text_19>
 8002400:	2800      	cmp	r0, #0
 8002402:	d10b      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002404:	2008      	movs	r0, #8
 8002406:	7728      	strb	r0, [r5, #28]
 8002408:	2206      	movs	r2, #6
 800240a:	f000 f9c0 	bl	800278e <.text_10>
 800240e:	2100      	movs	r1, #0
 8002410:	68ab      	ldr	r3, [r5, #8]
 8002412:	7c28      	ldrb	r0, [r5, #16]
 8002414:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8002416:	47a0      	blx	r4
 8002418:	f000 f999 	bl	800274e <.text_3>
 800241c:	e5b2      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 800241e:	2000      	movs	r0, #0
 8002420:	9000      	str	r0, [sp, #0]
 8002422:	2303      	movs	r3, #3
 8002424:	220c      	movs	r2, #12
 8002426:	2100      	movs	r1, #0
 8002428:	e7c3      	b.n	80023b2 <USBPD_PE_StateMachine_SNK+0x6c2>
 800242a:	202a      	movs	r0, #42	@ 0x2a
 800242c:	e644      	b.n	80020b8 <USBPD_PE_StateMachine_SNK+0x3c8>
 800242e:	f000 f9a5 	bl	800277c <.text_8>
 8002432:	bf02      	ittt	eq
 8002434:	88b0      	ldrheq	r0, [r6, #4]
 8002436:	ea0a 0000 	andeq.w	r0, sl, r0
 800243a:	2806      	cmpeq	r0, #6
 800243c:	d110      	bne.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 800243e:	7f28      	ldrb	r0, [r5, #28]
 8002440:	2809      	cmp	r0, #9
 8002442:	d003      	beq.n	800244c <USBPD_PE_StateMachine_SNK+0x75c>
 8002444:	f000 f989 	bl	800275a <.text_4>
 8002448:	2209      	movs	r2, #9
 800244a:	47b0      	blx	r6
 800244c:	2053      	movs	r0, #83	@ 0x53
 800244e:	7468      	strb	r0, [r5, #17]
 8002450:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002454:	2914      	cmp	r1, #20
 8002456:	d003      	beq.n	8002460 <USBPD_PE_StateMachine_SNK+0x770>
 8002458:	f000 f98c 	bl	8002774 <.text_7>
 800245c:	f000 f9d1 	bl	8002802 <.text_20+0x6>
 8002460:	f000 f984 	bl	800276c <.text_6>
 8002464:	d1da      	bne.n	800241c <USBPD_PE_StateMachine_SNK+0x72c>
 8002466:	68ab      	ldr	r3, [r5, #8]
 8002468:	7c28      	ldrb	r0, [r5, #16]
 800246a:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800246c:	220f      	movs	r2, #15
 800246e:	2100      	movs	r1, #0
 8002470:	47a0      	blx	r4
 8002472:	68a9      	ldr	r1, [r5, #8]
 8002474:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8002476:	2800      	cmp	r0, #0
 8002478:	f43f ae0d 	beq.w	8002096 <USBPD_PE_StateMachine_SNK+0x3a6>
 800247c:	2192      	movs	r1, #146	@ 0x92
 800247e:	e60b      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 8002480:	f000 f9b1 	bl	80027e6 <.text_17>
 8002484:	f000 f969 	bl	800275a <.text_4>
 8002488:	220a      	movs	r2, #10
 800248a:	2100      	movs	r1, #0
 800248c:	47b0      	blx	r6
 800248e:	6868      	ldr	r0, [r5, #4]
 8002490:	7801      	ldrb	r1, [r0, #0]
 8002492:	f001 0103 	and.w	r1, r1, #3
 8002496:	2902      	cmp	r1, #2
 8002498:	bf04      	itt	eq
 800249a:	7c28      	ldrbeq	r0, [r5, #16]
 800249c:	f002 fdc5 	bleq	800502a <USBPD_PRL_SRCSetSinkNG>
 80024a0:	2101      	movs	r1, #1
 80024a2:	4628      	mov	r0, r5
 80024a4:	f7fe fa46 	bl	8000934 <PE_ChangePowerRole>
 80024a8:	7f28      	ldrb	r0, [r5, #28]
 80024aa:	2809      	cmp	r0, #9
 80024ac:	d004      	beq.n	80024b8 <USBPD_PE_StateMachine_SNK+0x7c8>
 80024ae:	f000 f954 	bl	800275a <.text_4>
 80024b2:	220b      	movs	r2, #11
 80024b4:	2101      	movs	r1, #1
 80024b6:	47b0      	blx	r6
 80024b8:	2000      	movs	r0, #0
 80024ba:	9000      	str	r0, [sp, #0]
 80024bc:	235b      	movs	r3, #91	@ 0x5b
 80024be:	2206      	movs	r2, #6
 80024c0:	f000 f998 	bl	80027f4 <.text_19>
 80024c4:	b948      	cbnz	r0, 80024da <USBPD_PE_StateMachine_SNK+0x7ea>
 80024c6:	68ab      	ldr	r3, [r5, #8]
 80024c8:	7c28      	ldrb	r0, [r5, #16]
 80024ca:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80024cc:	220c      	movs	r2, #12
 80024ce:	2100      	movs	r1, #0
 80024d0:	47a0      	blx	r4
 80024d2:	f248 0014 	movw	r0, #32788	@ 0x8014
 80024d6:	83e8      	strh	r0, [r5, #30]
 80024d8:	2414      	movs	r4, #20
 80024da:	7c68      	ldrb	r0, [r5, #17]
 80024dc:	285b      	cmp	r0, #91	@ 0x5b
 80024de:	d00d      	beq.n	80024fc <USBPD_PE_StateMachine_SNK+0x80c>
 80024e0:	2100      	movs	r1, #0
 80024e2:	4628      	mov	r0, r5
 80024e4:	f7fe fa26 	bl	8000934 <PE_ChangePowerRole>
 80024e8:	f000 f937 	bl	800275a <.text_4>
 80024ec:	2206      	movs	r2, #6
 80024ee:	2101      	movs	r1, #1
 80024f0:	47b0      	blx	r6
 80024f2:	2207      	movs	r2, #7
 80024f4:	f000 f931 	bl	800275a <.text_4>
 80024f8:	2100      	movs	r1, #0
 80024fa:	47b0      	blx	r6
 80024fc:	e542      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80024fe:	9400      	str	r4, [sp, #0]
 8002500:	2358      	movs	r3, #88	@ 0x58
 8002502:	220a      	movs	r2, #10
 8002504:	f000 f977 	bl	80027f6 <.text_19+0x2>
 8002508:	b920      	cbnz	r0, 8002514 <USBPD_PE_StateMachine_SNK+0x824>
 800250a:	2008      	movs	r0, #8
 800250c:	f000 f929 	bl	8002762 <.text_5>
 8002510:	2202      	movs	r2, #2
 8002512:	e7ef      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002514:	220f      	movs	r2, #15
 8002516:	e7ed      	b.n	80024f4 <USBPD_PE_StateMachine_SNK+0x804>
 8002518:	f000 f930 	bl	800277c <.text_8>
 800251c:	bf04      	itt	eq
 800251e:	88b0      	ldrheq	r0, [r6, #4]
 8002520:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8002524:	d109      	bne.n	800253a <USBPD_PE_StateMachine_SNK+0x84a>
 8002526:	f000 001f 	and.w	r0, r0, #31
 800252a:	2803      	cmp	r0, #3
 800252c:	d006      	beq.n	800253c <USBPD_PE_StateMachine_SNK+0x84c>
 800252e:	2804      	cmp	r0, #4
 8002530:	d020      	beq.n	8002574 <USBPD_PE_StateMachine_SNK+0x884>
 8002532:	280c      	cmp	r0, #12
 8002534:	d01c      	beq.n	8002570 <USBPD_PE_StateMachine_SNK+0x880>
 8002536:	2810      	cmp	r0, #16
 8002538:	d023      	beq.n	8002582 <USBPD_PE_StateMachine_SNK+0x892>
 800253a:	e087      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800253c:	f000 f927 	bl	800278e <.text_10>
 8002540:	f000 f905 	bl	800274e <.text_3>
 8002544:	7f28      	ldrb	r0, [r5, #28]
 8002546:	2809      	cmp	r0, #9
 8002548:	d004      	beq.n	8002554 <USBPD_PE_StateMachine_SNK+0x864>
 800254a:	f000 f906 	bl	800275a <.text_4>
 800254e:	2206      	movs	r2, #6
 8002550:	2100      	movs	r1, #0
 8002552:	47b0      	blx	r6
 8002554:	f000 f947 	bl	80027e6 <.text_17>
 8002558:	7c28      	ldrb	r0, [r5, #16]
 800255a:	213a      	movs	r1, #58	@ 0x3a
 800255c:	f7fd fffb 	bl	8000556 <USBPD_PE_Notification>
 8002560:	f000 f911 	bl	8002786 <.text_9+0x2>
 8002564:	d001      	beq.n	800256a <USBPD_PE_StateMachine_SNK+0x87a>
 8002566:	f000 f949 	bl	80027fc <.text_20>
 800256a:	2059      	movs	r0, #89	@ 0x59
 800256c:	7468      	strb	r0, [r5, #17]
 800256e:	e06d      	b.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002570:	213b      	movs	r1, #59	@ 0x3b
 8002572:	e000      	b.n	8002576 <USBPD_PE_StateMachine_SNK+0x886>
 8002574:	2116      	movs	r1, #22
 8002576:	f000 f93a 	bl	80027ee <.text_18>
 800257a:	f000 f904 	bl	8002786 <.text_9+0x2>
 800257e:	d107      	bne.n	8002590 <USBPD_PE_StateMachine_SNK+0x8a0>
 8002580:	e061      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002582:	7c28      	ldrb	r0, [r5, #16]
 8002584:	2117      	movs	r1, #23
 8002586:	f7fd ffe6 	bl	8000556 <USBPD_PE_Notification>
 800258a:	f000 f8fc 	bl	8002786 <.text_9+0x2>
 800258e:	d05a      	beq.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002590:	f000 f934 	bl	80027fc <.text_20>
 8002594:	e057      	b.n	8002646 <USBPD_PE_StateMachine_SNK+0x956>
 8002596:	9104      	str	r1, [sp, #16]
 8002598:	ab04      	add	r3, sp, #16
 800259a:	68ae      	ldr	r6, [r5, #8]
 800259c:	7c28      	ldrb	r0, [r5, #16]
 800259e:	6977      	ldr	r7, [r6, #20]
 80025a0:	aa05      	add	r2, sp, #20
 80025a2:	47b8      	blx	r7
 80025a4:	9804      	ldr	r0, [sp, #16]
 80025a6:	2104      	movs	r1, #4
 80025a8:	f7fe fefe 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 80025ac:	b110      	cbz	r0, 80025b4 <USBPD_PE_StateMachine_SNK+0x8c4>
 80025ae:	2003      	movs	r0, #3
 80025b0:	7468      	strb	r0, [r5, #17]
 80025b2:	e4e7      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025b4:	9a04      	ldr	r2, [sp, #16]
 80025b6:	2003      	movs	r0, #3
 80025b8:	0892      	lsrs	r2, r2, #2
 80025ba:	2100      	movs	r1, #0
 80025bc:	9001      	str	r0, [sp, #4]
 80025be:	9200      	str	r2, [sp, #0]
 80025c0:	9102      	str	r1, [sp, #8]
 80025c2:	ab05      	add	r3, sp, #20
 80025c4:	2201      	movs	r2, #1
 80025c6:	4628      	mov	r0, r5
 80025c8:	f7fe ff7b 	bl	80014c2 <PE_Send_DataMessage>
 80025cc:	e4da      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80025ce:	2000      	movs	r0, #0
 80025d0:	2103      	movs	r1, #3
 80025d2:	2201      	movs	r2, #1
 80025d4:	9002      	str	r0, [sp, #8]
 80025d6:	9101      	str	r1, [sp, #4]
 80025d8:	9200      	str	r2, [sp, #0]
 80025da:	f105 032c 	add.w	r3, r5, #44	@ 0x2c
 80025de:	2206      	movs	r2, #6
 80025e0:	2100      	movs	r1, #0
 80025e2:	4628      	mov	r0, r5
 80025e4:	f7fe ff6d 	bl	80014c2 <PE_Send_DataMessage>
 80025e8:	2800      	cmp	r0, #0
 80025ea:	d1ef      	bne.n	80025cc <USBPD_PE_StateMachine_SNK+0x8dc>
 80025ec:	215d      	movs	r1, #93	@ 0x5d
 80025ee:	e6a1      	b.n	8002334 <USBPD_PE_StateMachine_SNK+0x644>
 80025f0:	9400      	str	r4, [sp, #0]
 80025f2:	2366      	movs	r3, #102	@ 0x66
 80025f4:	2214      	movs	r2, #20
 80025f6:	f000 f8fe 	bl	80027f6 <.text_19+0x2>
 80025fa:	2800      	cmp	r0, #0
 80025fc:	d107      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 80025fe:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002602:	214a      	movs	r1, #74	@ 0x4a
 8002604:	f000 f8f3 	bl	80027ee <.text_18>
 8002608:	200b      	movs	r0, #11
 800260a:	241b      	movs	r4, #27
 800260c:	7728      	strb	r0, [r5, #28]
 800260e:	e4b9      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 8002610:	f000 f8b4 	bl	800277c <.text_8>
 8002614:	d11a      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002616:	88b1      	ldrh	r1, [r6, #4]
 8002618:	0bc8      	lsrs	r0, r1, #15
 800261a:	d017      	beq.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 800261c:	f001 011f 	and.w	r1, r1, #31
 8002620:	290c      	cmp	r1, #12
 8002622:	d113      	bne.n	800264c <USBPD_PE_StateMachine_SNK+0x95c>
 8002624:	68b0      	ldr	r0, [r6, #8]
 8002626:	68ac      	ldr	r4, [r5, #8]
 8002628:	69a6      	ldr	r6, [r4, #24]
 800262a:	1d02      	adds	r2, r0, #4
 800262c:	7c28      	ldrb	r0, [r5, #16]
 800262e:	2304      	movs	r3, #4
 8002630:	210a      	movs	r1, #10
 8002632:	47b0      	blx	r6
 8002634:	f000 f8a7 	bl	8002786 <.text_9+0x2>
 8002638:	d001      	beq.n	800263e <USBPD_PE_StateMachine_SNK+0x94e>
 800263a:	f000 f8df 	bl	80027fc <.text_20>
 800263e:	7c28      	ldrb	r0, [r5, #16]
 8002640:	214b      	movs	r1, #75	@ 0x4b
 8002642:	f7fd ff88 	bl	8000556 <USBPD_PE_Notification>
 8002646:	2003      	movs	r0, #3
 8002648:	7468      	strb	r0, [r5, #17]
 800264a:	2400      	movs	r4, #0
 800264c:	f000 f88e 	bl	800276c <.text_6>
 8002650:	d1dd      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002652:	e02c      	b.n	80026ae <USBPD_PE_StateMachine_SNK+0x9be>
 8002654:	9400      	str	r4, [sp, #0]
 8002656:	2339      	movs	r3, #57	@ 0x39
 8002658:	783a      	ldrb	r2, [r7, #0]
 800265a:	f000 f8cb 	bl	80027f4 <.text_19>
 800265e:	2800      	cmp	r0, #0
 8002660:	d1d5      	bne.n	800260e <USBPD_PE_StateMachine_SNK+0x91e>
 8002662:	7878      	ldrb	r0, [r7, #1]
 8002664:	7728      	strb	r0, [r5, #28]
 8002666:	2144      	movs	r1, #68	@ 0x44
 8002668:	f000 f8c1 	bl	80027ee <.text_18>
 800266c:	e53d      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 800266e:	f000 f88a 	bl	8002786 <.text_9+0x2>
 8002672:	d019      	beq.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002674:	88b0      	ldrh	r0, [r6, #4]
 8002676:	0bc0      	lsrs	r0, r0, #15
 8002678:	d009      	beq.n	800268e <USBPD_PE_StateMachine_SNK+0x99e>
 800267a:	4628      	mov	r0, r5
 800267c:	f7fe ff5e 	bl	800153c <PE_Check_ExtendedMessage>
 8002680:	f000 f881 	bl	8002786 <.text_9+0x2>
 8002684:	d001      	beq.n	800268a <USBPD_PE_StateMachine_SNK+0x99a>
 8002686:	f000 f8b9 	bl	80027fc <.text_20>
 800268a:	2000      	movs	r0, #0
 800268c:	83e8      	strh	r0, [r5, #30]
 800268e:	88b0      	ldrh	r0, [r6, #4]
 8002690:	ea0a 0000 	and.w	r0, sl, r0
 8002694:	2810      	cmp	r0, #16
 8002696:	d107      	bne.n	80026a8 <USBPD_PE_StateMachine_SNK+0x9b8>
 8002698:	2103      	movs	r1, #3
 800269a:	7469      	strb	r1, [r5, #17]
 800269c:	f000 f872 	bl	8002784 <.text_9>
 80026a0:	d001      	beq.n	80026a6 <USBPD_PE_StateMachine_SNK+0x9b6>
 80026a2:	f000 f8ab 	bl	80027fc <.text_20>
 80026a6:	83ec      	strh	r4, [r5, #30]
 80026a8:	f000 f860 	bl	800276c <.text_6>
 80026ac:	d119      	bne.n	80026e2 <USBPD_PE_StateMachine_SNK+0x9f2>
 80026ae:	2103      	movs	r1, #3
 80026b0:	e4f2      	b.n	8002098 <USBPD_PE_StateMachine_SNK+0x3a8>
 80026b2:	4628      	mov	r0, r5
 80026b4:	f7ff f84b 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80026b8:	e463      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026ba:	a903      	add	r1, sp, #12
 80026bc:	4628      	mov	r0, r5
 80026be:	f7fe fb7b 	bl	8000db8 <PE_SubStateMachine_Generic>
 80026c2:	e45e      	b.n	8001f82 <USBPD_PE_StateMachine_SNK+0x292>
 80026c4:	a903      	add	r1, sp, #12
 80026c6:	4628      	mov	r0, r5
 80026c8:	f001 f98b 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80026cc:	4604      	mov	r4, r0
 80026ce:	f000 f87a 	bl	80027c6 <.text_14>
 80026d2:	bf0e      	itee	eq
 80026d4:	2101      	moveq	r1, #1
 80026d6:	6828      	ldrne	r0, [r5, #0]
 80026d8:	6801      	ldrne	r1, [r0, #0]
 80026da:	f89d 000d 	ldrb.w	r0, [sp, #13]
 80026de:	f002 fcb7 	bl	8005050 <USBPD_PRL_SOPCapability>
 80026e2:	e44f      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026e4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80026e8:	4628      	mov	r0, r5
 80026ea:	f002 fa6e 	bl	8004bca <PE_StateMachine_UVDM>
 80026ee:	e449      	b.n	8001f84 <USBPD_PE_StateMachine_SNK+0x294>
 80026f0:	2000      	movs	r0, #0
 80026f2:	9000      	str	r0, [sp, #0]
 80026f4:	2358      	movs	r3, #88	@ 0x58
 80026f6:	2213      	movs	r2, #19
 80026f8:	f000 f87d 	bl	80027f6 <.text_19+0x2>
 80026fc:	2800      	cmp	r0, #0
 80026fe:	d1f6      	bne.n	80026ee <USBPD_PE_StateMachine_SNK+0x9fe>
 8002700:	2009      	movs	r0, #9
 8002702:	7728      	strb	r0, [r5, #28]
 8002704:	e4f1      	b.n	80020ea <USBPD_PE_StateMachine_SNK+0x3fa>
 8002706:	6968      	ldr	r0, [r5, #20]
 8002708:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800270c:	b1b8      	cbz	r0, 800273e <USBPD_PE_StateMachine_SNK+0xa4e>
 800270e:	6968      	ldr	r0, [r5, #20]
 8002710:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8002714:	b138      	cbz	r0, 8002726 <USBPD_PE_StateMachine_SNK+0xa36>
 8002716:	7c28      	ldrb	r0, [r5, #16]
 8002718:	215b      	movs	r1, #91	@ 0x5b
 800271a:	f7fd ff1c 	bl	8000556 <USBPD_PE_Notification>
 800271e:	6968      	ldr	r0, [r5, #20]
 8002720:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8002724:	6168      	str	r0, [r5, #20]
 8002726:	2003      	movs	r0, #3
 8002728:	7ca9      	ldrb	r1, [r5, #18]
 800272a:	7468      	strb	r0, [r5, #17]
 800272c:	2903      	cmp	r1, #3
 800272e:	d005      	beq.n	800273c <USBPD_PE_StateMachine_SNK+0xa4c>
 8002730:	74a8      	strb	r0, [r5, #18]
 8002732:	f000 f832 	bl	800279a <.text_11>
 8002736:	2203      	movs	r2, #3
 8002738:	2004      	movs	r0, #4
 800273a:	47a0      	blx	r4
 800273c:	2401      	movs	r4, #1
 800273e:	6968      	ldr	r0, [r5, #20]
 8002740:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8002744:	2c00      	cmp	r4, #0
 8002746:	6168      	str	r0, [r5, #20]
 8002748:	f43f ab29 	beq.w	8001d9e <USBPD_PE_StateMachine_SNK+0xae>
 800274c:	e441      	b.n	8001fd2 <USBPD_PE_StateMachine_SNK+0x2e2>

0800274e <.text_3>:
 800274e:	f248 3084 	movw	r0, #33668	@ 0x8384
 8002752:	83e8      	strh	r0, [r5, #30]
 8002754:	f44f 7461 	mov.w	r4, #900	@ 0x384
 8002758:	4770      	bx	lr

0800275a <.text_4>:
 800275a:	68ab      	ldr	r3, [r5, #8]
 800275c:	7c28      	ldrb	r0, [r5, #16]
 800275e:	6a5e      	ldr	r6, [r3, #36]	@ 0x24
 8002760:	4770      	bx	lr

08002762 <.text_5>:
 8002762:	7728      	strb	r0, [r5, #28]
 8002764:	f8a5 b01e 	strh.w	fp, [r5, #30]
 8002768:	241b      	movs	r4, #27
 800276a:	4770      	bx	lr

0800276c <.text_6>:
 800276c:	8be8      	ldrh	r0, [r5, #30]
 800276e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002772:	4770      	bx	lr

08002774 <.text_7>:
 8002774:	2014      	movs	r0, #20
 8002776:	f88d 000c 	strb.w	r0, [sp, #12]
 800277a:	4770      	bx	lr

0800277c <.text_8>:
 800277c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002780:	2811      	cmp	r0, #17
 8002782:	4770      	bx	lr

08002784 <.text_9>:
 8002784:	2400      	movs	r4, #0
 8002786:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800278a:	2814      	cmp	r0, #20
 800278c:	4770      	bx	lr

0800278e <.text_10>:
 800278e:	6868      	ldr	r0, [r5, #4]
 8002790:	6801      	ldr	r1, [r0, #0]
 8002792:	f041 0110 	orr.w	r1, r1, #16
 8002796:	6001      	str	r1, [r0, #0]
 8002798:	4770      	bx	lr

0800279a <.text_11>:
 800279a:	2100      	movs	r1, #0
 800279c:	9100      	str	r1, [sp, #0]
 800279e:	2300      	movs	r3, #0
 80027a0:	7c29      	ldrb	r1, [r5, #16]
 80027a2:	6834      	ldr	r4, [r6, #0]
 80027a4:	4770      	bx	lr

080027a6 <.text_12>:
 80027a6:	2100      	movs	r1, #0
 80027a8:	9100      	str	r1, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	4e5e      	ldr	r6, [pc, #376]	@ (8002928 <.text_23>)
 80027ae:	7c29      	ldrb	r1, [r5, #16]
 80027b0:	6837      	ldr	r7, [r6, #0]
 80027b2:	4770      	bx	lr

080027b4 <.text_13>:
 80027b4:	74a8      	strb	r0, [r5, #18]
 80027b6:	2100      	movs	r1, #0
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	4f5a      	ldr	r7, [pc, #360]	@ (8002928 <.text_23>)
 80027be:	7c29      	ldrb	r1, [r5, #16]
 80027c0:	f8d7 c000 	ldr.w	ip, [r7]
 80027c4:	4770      	bx	lr

080027c6 <.text_14>:
 80027c6:	6868      	ldr	r0, [r5, #4]
 80027c8:	6801      	ldr	r1, [r0, #0]
 80027ca:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80027ce:	2800      	cmp	r0, #0
 80027d0:	4770      	bx	lr

080027d2 <.text_15>:
 80027d2:	6868      	ldr	r0, [r5, #4]
 80027d4:	6801      	ldr	r1, [r0, #0]
 80027d6:	f021 0110 	bic.w	r1, r1, #16
 80027da:	6001      	str	r1, [r0, #0]
 80027dc:	4770      	bx	lr

080027de <.text_16>:
 80027de:	2101      	movs	r1, #1
 80027e0:	4628      	mov	r0, r5
 80027e2:	f7fe bd98 	b.w	8001316 <PE_CallHardResetCallback>

080027e6 <.text_17>:
 80027e6:	2104      	movs	r1, #4
 80027e8:	4628      	mov	r0, r5
 80027ea:	f7fe bd9b 	b.w	8001324 <PE_SetPowerNegotiation>

080027ee <.text_18>:
 80027ee:	7c28      	ldrb	r0, [r5, #16]
 80027f0:	f7fd beb1 	b.w	8000556 <USBPD_PE_Notification>

080027f4 <.text_19>:
 80027f4:	2100      	movs	r1, #0
 80027f6:	4628      	mov	r0, r5
 80027f8:	f7fe be36 	b.w	8001468 <PE_Send_CtrlMessage>

080027fc <.text_20>:
 80027fc:	2114      	movs	r1, #20
 80027fe:	f88d 100c 	strb.w	r1, [sp, #12]
 8002802:	4628      	mov	r0, r5
 8002804:	f7fe b8d2 	b.w	80009ac <PE_Clear_RxEvent>

08002808 <PE_StateMachine_SNK_ReadyWait>:
 8002808:	b57c      	push	{r2, r3, r4, r5, r6, lr}
 800280a:	460e      	mov	r6, r1
 800280c:	4604      	mov	r4, r0
 800280e:	7830      	ldrb	r0, [r6, #0]
 8002810:	2502      	movs	r5, #2
 8002812:	2814      	cmp	r0, #20
 8002814:	d00b      	beq.n	800282e <PE_StateMachine_SNK_ReadyWait+0x26>
 8002816:	4620      	mov	r0, r4
 8002818:	f7ff f894 	bl	8001944 <PE_ManageRXEvent>
 800281c:	7830      	ldrb	r0, [r6, #0]
 800281e:	2814      	cmp	r0, #20
 8002820:	d07d      	beq.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002822:	2114      	movs	r1, #20
 8002824:	7031      	strb	r1, [r6, #0]
 8002826:	4620      	mov	r0, r4
 8002828:	f7fe f8c0 	bl	80009ac <PE_Clear_RxEvent>
 800282c:	e077      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800282e:	6961      	ldr	r1, [r4, #20]
 8002830:	0cc8      	lsrs	r0, r1, #19
 8002832:	f504 7518 	add.w	r5, r4, #608	@ 0x260
 8002836:	d027      	beq.n	8002888 <PE_StateMachine_SNK_ReadyWait+0x80>
 8002838:	8c20      	ldrh	r0, [r4, #32]
 800283a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800283e:	d10e      	bne.n	800285e <PE_StateMachine_SNK_ReadyWait+0x56>
 8002840:	210f      	movs	r1, #15
 8002842:	7461      	strb	r1, [r4, #17]
 8002844:	2000      	movs	r0, #0
 8002846:	9000      	str	r0, [sp, #0]
 8002848:	2300      	movs	r3, #0
 800284a:	7c21      	ldrb	r1, [r4, #16]
 800284c:	4c36      	ldr	r4, [pc, #216]	@ (8002928 <.text_23>)
 800284e:	6826      	ldr	r6, [r4, #0]
 8002850:	2270      	movs	r2, #112	@ 0x70
 8002852:	2009      	movs	r0, #9
 8002854:	47b0      	blx	r6
 8002856:	7828      	ldrb	r0, [r5, #0]
 8002858:	1c40      	adds	r0, r0, #1
 800285a:	7028      	strb	r0, [r5, #0]
 800285c:	e054      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 800285e:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002860:	6962      	ldr	r2, [r4, #20]
 8002862:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8002866:	2033      	movs	r0, #51	@ 0x33
 8002868:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 800286c:	fb11 f100 	smulbb	r1, r1, r0
 8002870:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002874:	8421      	strh	r1, [r4, #32]
 8002876:	8ea1      	ldrh	r1, [r4, #52]	@ 0x34
 8002878:	6962      	ldr	r2, [r4, #20]
 800287a:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800287e:	eb01 45d2 	add.w	r5, r1, r2, lsr #19
 8002882:	4345      	muls	r5, r0
 8002884:	b2ad      	uxth	r5, r5
 8002886:	e04a      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002888:	8ca0      	ldrh	r0, [r4, #36]	@ 0x24
 800288a:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800288e:	d106      	bne.n	800289e <PE_StateMachine_SNK_ReadyWait+0x96>
 8002890:	2245      	movs	r2, #69	@ 0x45
 8002892:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8002896:	7462      	strb	r2, [r4, #17]
 8002898:	2500      	movs	r5, #0
 800289a:	6161      	str	r1, [r4, #20]
 800289c:	e03f      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800289e:	7c20      	ldrb	r0, [r4, #16]
 80028a0:	f7fe f8a9 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80028a4:	f104 0631 	add.w	r6, r4, #49	@ 0x31
 80028a8:	bb18      	cbnz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028aa:	7870      	ldrb	r0, [r6, #1]
 80028ac:	b308      	cbz	r0, 80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028ae:	6860      	ldr	r0, [r4, #4]
 80028b0:	6800      	ldr	r0, [r0, #0]
 80028b2:	f000 0103 	and.w	r1, r0, #3
 80028b6:	2901      	cmp	r1, #1
 80028b8:	d008      	beq.n	80028cc <PE_StateMachine_SNK_ReadyWait+0xc4>
 80028ba:	f000 0003 	and.w	r0, r0, #3
 80028be:	2802      	cmp	r0, #2
 80028c0:	d117      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028c2:	7c20      	ldrb	r0, [r4, #16]
 80028c4:	f002 fbbe 	bl	8005044 <USBPD_PRL_IsResistor_SinkTxOK>
 80028c8:	2801      	cmp	r0, #1
 80028ca:	d112      	bne.n	80028f2 <PE_StateMachine_SNK_ReadyWait+0xea>
 80028cc:	78b0      	ldrb	r0, [r6, #2]
 80028ce:	7030      	strb	r0, [r6, #0]
 80028d0:	7870      	ldrb	r0, [r6, #1]
 80028d2:	7460      	strb	r0, [r4, #17]
 80028d4:	2845      	cmp	r0, #69	@ 0x45
 80028d6:	d103      	bne.n	80028e0 <PE_StateMachine_SNK_ReadyWait+0xd8>
 80028d8:	6960      	ldr	r0, [r4, #20]
 80028da:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80028de:	6160      	str	r0, [r4, #20]
 80028e0:	2000      	movs	r0, #0
 80028e2:	7070      	strb	r0, [r6, #1]
 80028e4:	6960      	ldr	r0, [r4, #20]
 80028e6:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80028e8:	62e1      	str	r1, [r4, #44]	@ 0x2c
 80028ea:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80028ee:	6160      	str	r0, [r4, #20]
 80028f0:	e00a      	b.n	8002908 <PE_StateMachine_SNK_ReadyWait+0x100>
 80028f2:	8c60      	ldrh	r0, [r4, #34]	@ 0x22
 80028f4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80028f8:	d108      	bne.n	800290c <PE_StateMachine_SNK_ReadyWait+0x104>
 80028fa:	2100      	movs	r1, #0
 80028fc:	8461      	strh	r1, [r4, #34]	@ 0x22
 80028fe:	2105      	movs	r1, #5
 8002900:	78a8      	ldrb	r0, [r5, #2]
 8002902:	1c40      	adds	r0, r0, #1
 8002904:	70a8      	strb	r0, [r5, #2]
 8002906:	7461      	strb	r1, [r4, #17]
 8002908:	2500      	movs	r5, #0
 800290a:	e008      	b.n	800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 800290c:	4620      	mov	r0, r4
 800290e:	f7fe fd23 	bl	8001358 <PE_CalculateMinTiming>
 8002912:	4605      	mov	r5, r0
 8002914:	7870      	ldrb	r0, [r6, #1]
 8002916:	b110      	cbz	r0, 800291e <PE_StateMachine_SNK_ReadyWait+0x116>
 8002918:	2d02      	cmp	r5, #2
 800291a:	bf28      	it	cs
 800291c:	2502      	movcs	r5, #2
 800291e:	4628      	mov	r0, r5
 8002920:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

08002924 <.text_22>:
 8002924:	200001bc 	.word	0x200001bc

08002928 <.text_23>:
 8002928:	20000000 	.word	0x20000000

0800292c <USBPD_PE_StateMachine_SRC>:
 800292c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	4680      	mov	r8, r0
 8002932:	481a      	ldr	r0, [pc, #104]	@ (800299c <USBPD_PE_StateMachine_SRC+0x70>)
 8002934:	b086      	sub	sp, #24
 8002936:	4641      	mov	r1, r8
 8002938:	f850 6021 	ldr.w	r6, [r0, r1, lsl #2]
 800293c:	7c70      	ldrb	r0, [r6, #17]
 800293e:	2848      	cmp	r0, #72	@ 0x48
 8002940:	d136      	bne.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002942:	4630      	mov	r0, r6
 8002944:	f7fe f90b 	bl	8000b5e <PE_Reset_ZI>
 8002948:	4630      	mov	r0, r6
 800294a:	f7fe f942 	bl	8000bd2 <PE_Reset_Counter>
 800294e:	6830      	ldr	r0, [r6, #0]
 8002950:	7903      	ldrb	r3, [r0, #4]
 8002952:	7c30      	ldrb	r0, [r6, #16]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2201      	movs	r2, #1
 800295a:	2101      	movs	r1, #1
 800295c:	f002 fb21 	bl	8004fa2 <USBPD_PRL_SetHeader>
 8002960:	6870      	ldr	r0, [r6, #4]
 8002962:	6801      	ldr	r1, [r0, #0]
 8002964:	f041 0108 	orr.w	r1, r1, #8
 8002968:	6001      	str	r1, [r0, #0]
 800296a:	6830      	ldr	r0, [r6, #0]
 800296c:	6841      	ldr	r1, [r0, #4]
 800296e:	6870      	ldr	r0, [r6, #4]
 8002970:	6802      	ldr	r2, [r0, #0]
 8002972:	f361 0201 	bfi	r2, r1, #0, #2
 8002976:	6002      	str	r2, [r0, #0]
 8002978:	2101      	movs	r1, #1
 800297a:	7c30      	ldrb	r0, [r6, #16]
 800297c:	f002 fb68 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002980:	7c30      	ldrb	r0, [r6, #16]
 8002982:	f002 fdda 	bl	800553a <USBPD_PRL_Reset>
 8002986:	7cb1      	ldrb	r1, [r6, #18]
 8002988:	2002      	movs	r0, #2
 800298a:	2902      	cmp	r1, #2
 800298c:	7470      	strb	r0, [r6, #17]
 800298e:	d00f      	beq.n	80029b0 <USBPD_PE_StateMachine_SRC+0x84>
 8002990:	74b0      	strb	r0, [r6, #18]
 8002992:	2100      	movs	r1, #0
 8002994:	9100      	str	r1, [sp, #0]
 8002996:	2300      	movs	r3, #0
 8002998:	4c01      	ldr	r4, [pc, #4]	@ (80029a0 <USBPD_PE_StateMachine_SRC+0x74>)
 800299a:	e003      	b.n	80029a4 <USBPD_PE_StateMachine_SRC+0x78>
 800299c:	200001bc 	.word	0x200001bc
 80029a0:	20000000 	.word	0x20000000
 80029a4:	7c31      	ldrb	r1, [r6, #16]
 80029a6:	f8d4 9000 	ldr.w	r9, [r4]
 80029aa:	2202      	movs	r2, #2
 80029ac:	2004      	movs	r0, #4
 80029ae:	47c8      	blx	r9
 80029b0:	6970      	ldr	r0, [r6, #20]
 80029b2:	f3c0 4080 	ubfx	r0, r0, #18, #1
 80029b6:	b130      	cbz	r0, 80029c6 <USBPD_PE_StateMachine_SRC+0x9a>
 80029b8:	6970      	ldr	r0, [r6, #20]
 80029ba:	f420 2080 	bic.w	r0, r0, #262144	@ 0x40000
 80029be:	6170      	str	r0, [r6, #20]
 80029c0:	2164      	movs	r1, #100	@ 0x64
 80029c2:	f000 feab 	bl	800371c <.text_17>
 80029c6:	4630      	mov	r0, r6
 80029c8:	f7fd ffbc 	bl	8000944 <PE_Get_RxEvent>
 80029cc:	2803      	cmp	r0, #3
 80029ce:	f88d 000c 	strb.w	r0, [sp, #12]
 80029d2:	f206 255e 	addw	r5, r6, #606	@ 0x25e
 80029d6:	f8df 9ca8 	ldr.w	r9, [pc, #3240]	@ 8003680 <.text_3>
 80029da:	f248 0a1b 	movw	sl, #32795	@ 0x801b
 80029de:	f248 0b1e 	movw	fp, #32798	@ 0x801e
 80029e2:	d103      	bne.n	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 80029e4:	2001      	movs	r0, #1
 80029e6:	b007      	add	sp, #28
 80029e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80029ec:	6870      	ldr	r0, [r6, #4]
 80029ee:	6801      	ldr	r1, [r0, #0]
 80029f0:	f3c1 3000 	ubfx	r0, r1, #12, #1
 80029f4:	2800      	cmp	r0, #0
 80029f6:	f000 8117 	beq.w	8002c28 <USBPD_PE_StateMachine_SRC+0x2fc>
 80029fa:	6970      	ldr	r0, [r6, #20]
 80029fc:	f3c0 4040 	ubfx	r0, r0, #17, #1
 8002a00:	2800      	cmp	r0, #0
 8002a02:	f106 0730 	add.w	r7, r6, #48	@ 0x30
 8002a06:	f000 8119 	beq.w	8002c3c <USBPD_PE_StateMachine_SRC+0x310>
 8002a0a:	4640      	mov	r0, r8
 8002a0c:	f002 fb1c 	bl	8005048 <USBPD_PRL_FastRoleSwapSignalling>
 8002a10:	20a6      	movs	r0, #166	@ 0xa6
 8002a12:	7470      	strb	r0, [r6, #17]
 8002a14:	2109      	movs	r1, #9
 8002a16:	7731      	strb	r1, [r6, #28]
 8002a18:	2000      	movs	r0, #0
 8002a1a:	70b8      	strb	r0, [r7, #2]
 8002a1c:	f248 0011 	movw	r0, #32785	@ 0x8011
 8002a20:	6971      	ldr	r1, [r6, #20]
 8002a22:	f421 3100 	bic.w	r1, r1, #131072	@ 0x20000
 8002a26:	6171      	str	r1, [r6, #20]
 8002a28:	84f0      	strh	r0, [r6, #38]	@ 0x26
 8002a2a:	7cb1      	ldrb	r1, [r6, #18]
 8002a2c:	29a6      	cmp	r1, #166	@ 0xa6
 8002a2e:	f040 80ff 	bne.w	8002c30 <USBPD_PE_StateMachine_SRC+0x304>
 8002a32:	2402      	movs	r4, #2
 8002a34:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002a38:	2811      	cmp	r0, #17
 8002a3a:	d11c      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a3c:	6870      	ldr	r0, [r6, #4]
 8002a3e:	6801      	ldr	r1, [r0, #0]
 8002a40:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8002a44:	88b9      	ldrh	r1, [r7, #4]
 8002a46:	f3c1 1140 	ubfx	r1, r1, #5, #1
 8002a4a:	4288      	cmp	r0, r1
 8002a4c:	d113      	bne.n	8002a76 <USBPD_PE_StateMachine_SRC+0x14a>
 8002a4e:	f000 fe26 	bl	800369e <.text_7>
 8002a52:	f000 fe72 	bl	800373a <.text_20+0x6>
 8002a56:	7cb1      	ldrb	r1, [r6, #18]
 8002a58:	2092      	movs	r0, #146	@ 0x92
 8002a5a:	2992      	cmp	r1, #146	@ 0x92
 8002a5c:	7470      	strb	r0, [r6, #17]
 8002a5e:	f000 810e 	beq.w	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002a62:	74b0      	strb	r0, [r6, #18]
 8002a64:	2100      	movs	r1, #0
 8002a66:	9100      	str	r1, [sp, #0]
 8002a68:	2300      	movs	r3, #0
 8002a6a:	7c31      	ldrb	r1, [r6, #16]
 8002a6c:	f8d9 c000 	ldr.w	ip, [r9]
 8002a70:	2292      	movs	r2, #146	@ 0x92
 8002a72:	2004      	movs	r0, #4
 8002a74:	47e0      	blx	ip
 8002a76:	7c71      	ldrb	r1, [r6, #17]
 8002a78:	000a      	movs	r2, r1
 8002a7a:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 8002a7e:	f000 80f6 	beq.w	8002c6e <USBPD_PE_StateMachine_SRC+0x342>
 8002a82:	1e4a      	subs	r2, r1, #1
 8002a84:	d06f      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002a86:	1e52      	subs	r2, r2, #1
 8002a88:	f000 8105 	beq.w	8002c96 <USBPD_PE_StateMachine_SRC+0x36a>
 8002a8c:	1e52      	subs	r2, r2, #1
 8002a8e:	2a01      	cmp	r2, #1
 8002a90:	f240 84b2 	bls.w	80033f8 <USBPD_PE_StateMachine_SRC+0xacc>
 8002a94:	1e92      	subs	r2, r2, #2
 8002a96:	f000 8143 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002a9a:	1e52      	subs	r2, r2, #1
 8002a9c:	f000 8145 	beq.w	8002d2a <USBPD_PE_StateMachine_SRC+0x3fe>
 8002aa0:	1e52      	subs	r2, r2, #1
 8002aa2:	f000 814a 	beq.w	8002d3a <USBPD_PE_StateMachine_SRC+0x40e>
 8002aa6:	1e52      	subs	r2, r2, #1
 8002aa8:	f000 819d 	beq.w	8002de6 <USBPD_PE_StateMachine_SRC+0x4ba>
 8002aac:	1e52      	subs	r2, r2, #1
 8002aae:	f000 81e3 	beq.w	8002e78 <USBPD_PE_StateMachine_SRC+0x54c>
 8002ab2:	1ed2      	subs	r2, r2, #3
 8002ab4:	f000 8226 	beq.w	8002f04 <USBPD_PE_StateMachine_SRC+0x5d8>
 8002ab8:	1e52      	subs	r2, r2, #1
 8002aba:	f000 8234 	beq.w	8002f26 <USBPD_PE_StateMachine_SRC+0x5fa>
 8002abe:	1e52      	subs	r2, r2, #1
 8002ac0:	f000 80da 	beq.w	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002ac4:	1e52      	subs	r2, r2, #1
 8002ac6:	f000 82a3 	beq.w	8003010 <USBPD_PE_StateMachine_SRC+0x6e4>
 8002aca:	1e52      	subs	r2, r2, #1
 8002acc:	f000 826a 	beq.w	8002fa4 <USBPD_PE_StateMachine_SRC+0x678>
 8002ad0:	1e52      	subs	r2, r2, #1
 8002ad2:	f000 826c 	beq.w	8002fae <USBPD_PE_StateMachine_SRC+0x682>
 8002ad6:	1e52      	subs	r2, r2, #1
 8002ad8:	f000 8277 	beq.w	8002fca <USBPD_PE_StateMachine_SRC+0x69e>
 8002adc:	1e52      	subs	r2, r2, #1
 8002ade:	f000 8303 	beq.w	80030e8 <USBPD_PE_StateMachine_SRC+0x7bc>
 8002ae2:	1e52      	subs	r2, r2, #1
 8002ae4:	f000 82bb 	beq.w	800305e <USBPD_PE_StateMachine_SRC+0x732>
 8002ae8:	1e52      	subs	r2, r2, #1
 8002aea:	f000 82c2 	beq.w	8003072 <USBPD_PE_StateMachine_SRC+0x746>
 8002aee:	1e52      	subs	r2, r2, #1
 8002af0:	f000 8192 	beq.w	8002e18 <USBPD_PE_StateMachine_SRC+0x4ec>
 8002af4:	1e52      	subs	r2, r2, #1
 8002af6:	f000 82d9 	beq.w	80030ac <USBPD_PE_StateMachine_SRC+0x780>
 8002afa:	1e52      	subs	r2, r2, #1
 8002afc:	2a01      	cmp	r2, #1
 8002afe:	d932      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b00:	1e92      	subs	r2, r2, #2
 8002b02:	f000 8314 	beq.w	800312e <USBPD_PE_StateMachine_SRC+0x802>
 8002b06:	1e52      	subs	r2, r2, #1
 8002b08:	f000 831f 	beq.w	800314a <USBPD_PE_StateMachine_SRC+0x81e>
 8002b0c:	1e92      	subs	r2, r2, #2
 8002b0e:	d02a      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b10:	1e52      	subs	r2, r2, #1
 8002b12:	f000 83ce 	beq.w	80032b2 <USBPD_PE_StateMachine_SRC+0x986>
 8002b16:	1e52      	subs	r2, r2, #1
 8002b18:	f000 83dc 	beq.w	80032d4 <USBPD_PE_StateMachine_SRC+0x9a8>
 8002b1c:	1e52      	subs	r2, r2, #1
 8002b1e:	f000 841a 	beq.w	8003356 <USBPD_PE_StateMachine_SRC+0xa2a>
 8002b22:	1e52      	subs	r2, r2, #1
 8002b24:	f000 843a 	beq.w	800339c <USBPD_PE_StateMachine_SRC+0xa70>
 8002b28:	1e52      	subs	r2, r2, #1
 8002b2a:	f000 834a 	beq.w	80031c2 <USBPD_PE_StateMachine_SRC+0x896>
 8002b2e:	1e92      	subs	r2, r2, #2
 8002b30:	f000 8369 	beq.w	8003206 <USBPD_PE_StateMachine_SRC+0x8da>
 8002b34:	1e52      	subs	r2, r2, #1
 8002b36:	f000 8380 	beq.w	800323a <USBPD_PE_StateMachine_SRC+0x90e>
 8002b3a:	1e52      	subs	r2, r2, #1
 8002b3c:	f000 839a 	beq.w	8003274 <USBPD_PE_StateMachine_SRC+0x948>
 8002b40:	1e52      	subs	r2, r2, #1
 8002b42:	2a02      	cmp	r2, #2
 8002b44:	d90f      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b46:	1ed2      	subs	r2, r2, #3
 8002b48:	f000 8359 	beq.w	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 8002b4c:	1e52      	subs	r2, r2, #1
 8002b4e:	f000 84c5 	beq.w	80034dc <USBPD_PE_StateMachine_SRC+0xbb0>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	d007      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b56:	1e52      	subs	r2, r2, #1
 8002b58:	f000 84d1 	beq.w	80034fe <USBPD_PE_StateMachine_SRC+0xbd2>
 8002b5c:	1e52      	subs	r2, r2, #1
 8002b5e:	f000 8500 	beq.w	8003562 <USBPD_PE_StateMachine_SRC+0xc36>
 8002b62:	1e52      	subs	r2, r2, #1
 8002b64:	2a01      	cmp	r2, #1
 8002b66:	f240 8535 	bls.w	80035d4 <USBPD_PE_StateMachine_SRC+0xca8>
 8002b6a:	1e92      	subs	r2, r2, #2
 8002b6c:	d001      	beq.n	8002b72 <USBPD_PE_StateMachine_SRC+0x246>
 8002b6e:	1e92      	subs	r2, r2, #2
 8002b70:	2a05      	cmp	r2, #5
 8002b72:	f240 852b 	bls.w	80035cc <USBPD_PE_StateMachine_SRC+0xca0>
 8002b76:	1f92      	subs	r2, r2, #6
 8002b78:	f000 8503 	beq.w	8003582 <USBPD_PE_StateMachine_SRC+0xc56>
 8002b7c:	1e52      	subs	r2, r2, #1
 8002b7e:	2a03      	cmp	r2, #3
 8002b80:	d9f1      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b82:	3a11      	subs	r2, #17
 8002b84:	d0ef      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b86:	1e52      	subs	r2, r2, #1
 8002b88:	f000 811b 	beq.w	8002dc2 <USBPD_PE_StateMachine_SRC+0x496>
 8002b8c:	3a0f      	subs	r2, #15
 8002b8e:	f000 841c 	beq.w	80033ca <USBPD_PE_StateMachine_SRC+0xa9e>
 8002b92:	1fd2      	subs	r2, r2, #7
 8002b94:	2a01      	cmp	r2, #1
 8002b96:	bf84      	itt	hi
 8002b98:	1f52      	subhi	r2, r2, #5
 8002b9a:	2a01      	cmphi	r2, #1
 8002b9c:	d9e3      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002b9e:	3a0d      	subs	r2, #13
 8002ba0:	d0e1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002ba2:	3a12      	subs	r2, #18
 8002ba4:	f000 8542 	beq.w	800362c <USBPD_PE_StateMachine_SRC+0xd00>
 8002ba8:	3a0c      	subs	r2, #12
 8002baa:	d068      	beq.n	8002c7e <USBPD_PE_StateMachine_SRC+0x352>
 8002bac:	1e52      	subs	r2, r2, #1
 8002bae:	2a02      	cmp	r2, #2
 8002bb0:	d9d9      	bls.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bb2:	1ed2      	subs	r2, r2, #3
 8002bb4:	f000 81d1 	beq.w	8002f5a <USBPD_PE_StateMachine_SRC+0x62e>
 8002bb8:	1e52      	subs	r2, r2, #1
 8002bba:	f000 81e1 	beq.w	8002f80 <USBPD_PE_StateMachine_SRC+0x654>
 8002bbe:	1e92      	subs	r2, r2, #2
 8002bc0:	d0d1      	beq.n	8002b66 <USBPD_PE_StateMachine_SRC+0x23a>
 8002bc2:	1e52      	subs	r2, r2, #1
 8002bc4:	f000 80ac 	beq.w	8002d20 <USBPD_PE_StateMachine_SRC+0x3f4>
 8002bc8:	1e92      	subs	r2, r2, #2
 8002bca:	2a08      	cmp	r2, #8
 8002bcc:	f240 8508 	bls.w	80035e0 <USBPD_PE_StateMachine_SRC+0xcb4>
 8002bd0:	3a0a      	subs	r2, #10
 8002bd2:	f000 8514 	beq.w	80035fe <USBPD_PE_StateMachine_SRC+0xcd2>
 8002bd6:	a903      	add	r1, sp, #12
 8002bd8:	4630      	mov	r0, r6
 8002bda:	f001 fa2b 	bl	8004034 <PE_StateMachine_VDM>
 8002bde:	4604      	mov	r4, r0
 8002be0:	7c72      	ldrb	r2, [r6, #17]
 8002be2:	7cb0      	ldrb	r0, [r6, #18]
 8002be4:	4290      	cmp	r0, r2
 8002be6:	d003      	beq.n	8002bf0 <USBPD_PE_StateMachine_SRC+0x2c4>
 8002be8:	74b2      	strb	r2, [r6, #18]
 8002bea:	2100      	movs	r1, #0
 8002bec:	f000 fd62 	bl	80036b4 <.text_9>
 8002bf0:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002bf4:	2814      	cmp	r0, #20
 8002bf6:	f000 851f 	beq.w	8003638 <USBPD_PE_StateMachine_SRC+0xd0c>
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f7fd ff17 	bl	8000a2e <PE_Check_AMSConflict>
 8002c00:	2815      	cmp	r0, #21
 8002c02:	d105      	bne.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c04:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c08:	2814      	cmp	r0, #20
 8002c0a:	d001      	beq.n	8002c10 <USBPD_PE_StateMachine_SRC+0x2e4>
 8002c0c:	f000 fd92 	bl	8003734 <.text_20>
 8002c10:	7c72      	ldrb	r2, [r6, #17]
 8002c12:	7cb0      	ldrb	r0, [r6, #18]
 8002c14:	4290      	cmp	r0, r2
 8002c16:	d004      	beq.n	8002c22 <USBPD_PE_StateMachine_SRC+0x2f6>
 8002c18:	74b2      	strb	r2, [r6, #18]
 8002c1a:	f000 fd53 	bl	80036c4 <.text_10+0x2>
 8002c1e:	2004      	movs	r0, #4
 8002c20:	47a0      	blx	r4
 8002c22:	2400      	movs	r4, #0
 8002c24:	f000 bd23 	b.w	800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8002c28:	f04f 34ff 	mov.w	r4, #4294967295
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	e6da      	b.n	80029e6 <USBPD_PE_StateMachine_SRC+0xba>
 8002c30:	20a6      	movs	r0, #166	@ 0xa6
 8002c32:	f000 fd46 	bl	80036c2 <.text_10>
 8002c36:	22a6      	movs	r2, #166	@ 0xa6
 8002c38:	2004      	movs	r0, #4
 8002c3a:	47a0      	blx	r4
 8002c3c:	78b8      	ldrb	r0, [r7, #2]
 8002c3e:	2402      	movs	r4, #2
 8002c40:	280f      	cmp	r0, #15
 8002c42:	bf18      	it	ne
 8002c44:	2814      	cmpne	r0, #20
 8002c46:	d111      	bne.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c48:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002c4c:	2814      	cmp	r0, #20
 8002c4e:	d001      	beq.n	8002c54 <USBPD_PE_StateMachine_SRC+0x328>
 8002c50:	f000 fd70 	bl	8003734 <.text_20>
 8002c54:	78ba      	ldrb	r2, [r7, #2]
 8002c56:	7472      	strb	r2, [r6, #17]
 8002c58:	2000      	movs	r0, #0
 8002c5a:	70b8      	strb	r0, [r7, #2]
 8002c5c:	2100      	movs	r1, #0
 8002c5e:	7cb0      	ldrb	r0, [r6, #18]
 8002c60:	62f1      	str	r1, [r6, #44]	@ 0x2c
 8002c62:	4290      	cmp	r0, r2
 8002c64:	d002      	beq.n	8002c6c <USBPD_PE_StateMachine_SRC+0x340>
 8002c66:	74b2      	strb	r2, [r6, #18]
 8002c68:	f000 fd24 	bl	80036b4 <.text_9>
 8002c6c:	e6e2      	b.n	8002a34 <USBPD_PE_StateMachine_SRC+0x108>
 8002c6e:	f000 fd3c 	bl	80036ea <.text_13>
 8002c72:	215f      	movs	r1, #95	@ 0x5f
 8002c74:	f000 fd52 	bl	800371c <.text_17>
 8002c78:	f04f 34ff 	mov.w	r4, #4294967295
 8002c7c:	e7b0      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002c7e:	6870      	ldr	r0, [r6, #4]
 8002c80:	6801      	ldr	r1, [r0, #0]
 8002c82:	f021 0110 	bic.w	r1, r1, #16
 8002c86:	6001      	str	r1, [r0, #0]
 8002c88:	68b0      	ldr	r0, [r6, #8]
 8002c8a:	6b41      	ldr	r1, [r0, #52]	@ 0x34
 8002c8c:	2900      	cmp	r1, #0
 8002c8e:	d0f3      	beq.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c90:	7c30      	ldrb	r0, [r6, #16]
 8002c92:	4788      	blx	r1
 8002c94:	e7f0      	b.n	8002c78 <USBPD_PE_StateMachine_SRC+0x34c>
 8002c96:	f000 fd22 	bl	80036de <.text_12>
 8002c9a:	bf1a      	itte	ne
 8002c9c:	6830      	ldrne	r0, [r6, #0]
 8002c9e:	6801      	ldrne	r1, [r0, #0]
 8002ca0:	2101      	moveq	r1, #1
 8002ca2:	4640      	mov	r0, r8
 8002ca4:	f002 f9d4 	bl	8005050 <USBPD_PRL_SOPCapability>
 8002ca8:	6870      	ldr	r0, [r6, #4]
 8002caa:	6801      	ldr	r1, [r0, #0]
 8002cac:	f3c1 3000 	ubfx	r0, r1, #12, #1
 8002cb0:	b388      	cbz	r0, 8002d16 <USBPD_PE_StateMachine_SRC+0x3ea>
 8002cb2:	f001 0203 	and.w	r2, r1, #3
 8002cb6:	6870      	ldr	r0, [r6, #4]
 8002cb8:	2a01      	cmp	r2, #1
 8002cba:	bf0c      	ite	eq
 8002cbc:	2200      	moveq	r2, #0
 8002cbe:	2220      	movne	r2, #32
 8002cc0:	f021 0120 	bic.w	r1, r1, #32
 8002cc4:	4311      	orrs	r1, r2
 8002cc6:	6001      	str	r1, [r0, #0]
 8002cc8:	2000      	movs	r0, #0
 8002cca:	70e8      	strb	r0, [r5, #3]
 8002ccc:	2101      	movs	r1, #1
 8002cce:	f000 fd29 	bl	8003724 <.text_18+0x2>
 8002cd2:	6870      	ldr	r0, [r6, #4]
 8002cd4:	6801      	ldr	r1, [r0, #0]
 8002cd6:	f3c1 1000 	ubfx	r0, r1, #4, #1
 8002cda:	b130      	cbz	r0, 8002cea <USBPD_PE_StateMachine_SRC+0x3be>
 8002cdc:	f248 0014 	movw	r0, #32788	@ 0x8014
 8002ce0:	83f0      	strh	r0, [r6, #30]
 8002ce2:	2414      	movs	r4, #20
 8002ce4:	2106      	movs	r1, #6
 8002ce6:	7471      	strb	r1, [r6, #17]
 8002ce8:	e77a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002cea:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8002cee:	2800      	cmp	r0, #0
 8002cf0:	d00a      	beq.n	8002d08 <USBPD_PE_StateMachine_SRC+0x3dc>
 8002cf2:	6830      	ldr	r0, [r6, #0]
 8002cf4:	7801      	ldrb	r1, [r0, #0]
 8002cf6:	078a      	lsls	r2, r1, #30
 8002cf8:	f140 808c 	bpl.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002cfc:	7929      	ldrb	r1, [r5, #4]
 8002cfe:	2914      	cmp	r1, #20
 8002d00:	f080 8088 	bcs.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d04:	68f0      	ldr	r0, [r6, #12]
 8002d06:	2800      	cmp	r0, #0
 8002d08:	f000 8084 	beq.w	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002d0c:	1c49      	adds	r1, r1, #1
 8002d0e:	7129      	strb	r1, [r5, #4]
 8002d10:	2005      	movs	r0, #5
 8002d12:	7470      	strb	r0, [r6, #17]
 8002d14:	e764      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d16:	7c30      	ldrb	r0, [r6, #16]
 8002d18:	2121      	movs	r1, #33	@ 0x21
 8002d1a:	f7fd fc1c 	bl	8000556 <USBPD_PE_Notification>
 8002d1e:	e1e1      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 8002d20:	a903      	add	r1, sp, #12
 8002d22:	4630      	mov	r0, r6
 8002d24:	f000 fd3c 	bl	80037a0 <PE_StateMachine_VDMCable>
 8002d28:	e759      	b.n	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 8002d2a:	8bf0      	ldrh	r0, [r6, #30]
 8002d2c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002d30:	d102      	bne.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d32:	2107      	movs	r1, #7
 8002d34:	7471      	strb	r1, [r6, #17]
 8002d36:	2400      	movs	r4, #0
 8002d38:	e752      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d3a:	6971      	ldr	r1, [r6, #20]
 8002d3c:	0889      	lsrs	r1, r1, #2
 8002d3e:	f001 0101 	and.w	r1, r1, #1
 8002d42:	4630      	mov	r0, r6
 8002d44:	f000 fd01 	bl	800374a <PE_Send_SRCCapabilities>
 8002d48:	2805      	cmp	r0, #5
 8002d4a:	d002      	beq.n	8002d52 <USBPD_PE_StateMachine_SRC+0x426>
 8002d4c:	2809      	cmp	r0, #9
 8002d4e:	d0f3      	beq.n	8002d38 <USBPD_PE_StateMachine_SRC+0x40c>
 8002d50:	e011      	b.n	8002d76 <USBPD_PE_StateMachine_SRC+0x44a>
 8002d52:	2001      	movs	r0, #1
 8002d54:	6971      	ldr	r1, [r6, #20]
 8002d56:	7730      	strb	r0, [r6, #28]
 8002d58:	f041 0104 	orr.w	r1, r1, #4
 8002d5c:	6171      	str	r1, [r6, #20]
 8002d5e:	2000      	movs	r0, #0
 8002d60:	70e8      	strb	r0, [r5, #3]
 8002d62:	70a8      	strb	r0, [r5, #2]
 8002d64:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002d68:	2016      	movs	r0, #22
 8002d6a:	241b      	movs	r4, #27
 8002d6c:	7470      	strb	r0, [r6, #17]
 8002d6e:	210f      	movs	r1, #15
 8002d70:	f000 fcd4 	bl	800371c <.text_17>
 8002d74:	e734      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d76:	6970      	ldr	r0, [r6, #20]
 8002d78:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8002d7c:	b978      	cbnz	r0, 8002d9e <USBPD_PE_StateMachine_SRC+0x472>
 8002d7e:	78e8      	ldrb	r0, [r5, #3]
 8002d80:	2833      	cmp	r0, #51	@ 0x33
 8002d82:	d218      	bcs.n	8002db6 <USBPD_PE_StateMachine_SRC+0x48a>
 8002d84:	f248 0196 	movw	r1, #32918	@ 0x8096
 8002d88:	83f1      	strh	r1, [r6, #30]
 8002d8a:	2008      	movs	r0, #8
 8002d8c:	7470      	strb	r0, [r6, #17]
 8002d8e:	2496      	movs	r4, #150	@ 0x96
 8002d90:	8c71      	ldrh	r1, [r6, #34]	@ 0x22
 8002d92:	0448      	lsls	r0, r1, #17
 8002d94:	d002      	beq.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002d96:	8c74      	ldrh	r4, [r6, #34]	@ 0x22
 8002d98:	f3c4 040e 	ubfx	r4, r4, #0, #15
 8002d9c:	e720      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002d9e:	6870      	ldr	r0, [r6, #4]
 8002da0:	7801      	ldrb	r1, [r0, #0]
 8002da2:	f001 0103 	and.w	r1, r1, #3
 8002da6:	2902      	cmp	r1, #2
 8002da8:	bf04      	itt	eq
 8002daa:	7c30      	ldrbeq	r0, [r6, #16]
 8002dac:	f002 f93f 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8002db0:	2011      	movs	r0, #17
 8002db2:	7470      	strb	r0, [r6, #17]
 8002db4:	e7bf      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8002db6:	7c30      	ldrb	r0, [r6, #16]
 8002db8:	2121      	movs	r1, #33	@ 0x21
 8002dba:	f7fd fbcc 	bl	8000556 <USBPD_PE_Notification>
 8002dbe:	2000      	movs	r0, #0
 8002dc0:	e7a7      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002dc2:	2100      	movs	r1, #0
 8002dc4:	4630      	mov	r0, r6
 8002dc6:	f000 fcc0 	bl	800374a <PE_Send_SRCCapabilities>
 8002dca:	2805      	cmp	r0, #5
 8002dcc:	d107      	bne.n	8002dde <USBPD_PE_StateMachine_SRC+0x4b2>
 8002dce:	f000 fca8 	bl	8003722 <.text_18>
 8002dd2:	2001      	movs	r0, #1
 8002dd4:	f000 fc5f 	bl	8003696 <.text_6>
 8002dd8:	2116      	movs	r1, #22
 8002dda:	7471      	strb	r1, [r6, #17]
 8002ddc:	e7c7      	b.n	8002d6e <USBPD_PE_StateMachine_SRC+0x442>
 8002dde:	2000      	movs	r0, #0
 8002de0:	7730      	strb	r0, [r6, #28]
 8002de2:	2111      	movs	r1, #17
 8002de4:	e77f      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 8002de6:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 8002de8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002dec:	d106      	bne.n	8002dfc <USBPD_PE_StateMachine_SRC+0x4d0>
 8002dee:	2100      	movs	r1, #0
 8002df0:	8471      	strh	r1, [r6, #34]	@ 0x22
 8002df2:	2105      	movs	r1, #5
 8002df4:	7928      	ldrb	r0, [r5, #4]
 8002df6:	1c40      	adds	r0, r0, #1
 8002df8:	7128      	strb	r0, [r5, #4]
 8002dfa:	7471      	strb	r1, [r6, #17]
 8002dfc:	8bf0      	ldrh	r0, [r6, #30]
 8002dfe:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002e02:	d1cb      	bne.n	8002d9c <USBPD_PE_StateMachine_SRC+0x470>
 8002e04:	6830      	ldr	r0, [r6, #0]
 8002e06:	6841      	ldr	r1, [r0, #4]
 8002e08:	f3c1 10c0 	ubfx	r0, r1, #7, #1
 8002e0c:	b110      	cbz	r0, 8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 8002e0e:	78e8      	ldrb	r0, [r5, #3]
 8002e10:	1c40      	adds	r0, r0, #1
 8002e12:	70e8      	strb	r0, [r5, #3]
 8002e14:	2007      	movs	r0, #7
 8002e16:	e77c      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002e18:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002e1c:	2811      	cmp	r0, #17
 8002e1e:	d10b      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e20:	88b9      	ldrh	r1, [r7, #4]
 8002e22:	0bc8      	lsrs	r0, r1, #15
 8002e24:	d108      	bne.n	8002e38 <USBPD_PE_StateMachine_SRC+0x50c>
 8002e26:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8002e2a:	2800      	cmp	r0, #0
 8002e2c:	f000 80eb 	beq.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e30:	7938      	ldrb	r0, [r7, #4]
 8002e32:	f000 001f 	and.w	r0, r0, #31
 8002e36:	2802      	cmp	r0, #2
 8002e38:	f040 80e5 	bne.w	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002e3c:	68b8      	ldr	r0, [r7, #8]
 8002e3e:	7881      	ldrb	r1, [r0, #2]
 8002e40:	78c2      	ldrb	r2, [r0, #3]
 8002e42:	eb01 2302 	add.w	r3, r1, r2, lsl #8
 8002e46:	7901      	ldrb	r1, [r0, #4]
 8002e48:	7940      	ldrb	r0, [r0, #5]
 8002e4a:	eb03 4301 	add.w	r3, r3, r1, lsl #16
 8002e4e:	eb03 6300 	add.w	r3, r3, r0, lsl #24
 8002e52:	9300      	str	r3, [sp, #0]
 8002e54:	88b8      	ldrh	r0, [r7, #4]
 8002e56:	f3c0 1181 	ubfx	r1, r0, #6, #2
 8002e5a:	7c30      	ldrb	r0, [r6, #16]
 8002e5c:	f7fd feeb 	bl	8000c36 <PE_ExtRevisionInteroperability>
 8002e60:	68b4      	ldr	r4, [r6, #8]
 8002e62:	7c30      	ldrb	r0, [r6, #16]
 8002e64:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8002e68:	2304      	movs	r3, #4
 8002e6a:	466a      	mov	r2, sp
 8002e6c:	2106      	movs	r1, #6
 8002e6e:	47e0      	blx	ip
 8002e70:	2009      	movs	r0, #9
 8002e72:	7470      	strb	r0, [r6, #17]
 8002e74:	2400      	movs	r4, #0
 8002e76:	e0c0      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002e78:	68b2      	ldr	r2, [r6, #8]
 8002e7a:	7c30      	ldrb	r0, [r6, #16]
 8002e7c:	69d3      	ldr	r3, [r2, #28]
 8002e7e:	a901      	add	r1, sp, #4
 8002e80:	4798      	blx	r3
 8002e82:	280a      	cmp	r0, #10
 8002e84:	d011      	beq.n	8002eaa <USBPD_PE_StateMachine_SRC+0x57e>
 8002e86:	280b      	cmp	r0, #11
 8002e88:	d02f      	beq.n	8002eea <USBPD_PE_StateMachine_SRC+0x5be>
 8002e8a:	280d      	cmp	r0, #13
 8002e8c:	6870      	ldr	r0, [r6, #4]
 8002e8e:	6801      	ldr	r1, [r0, #0]
 8002e90:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002e94:	d12e      	bne.n	8002ef4 <USBPD_PE_StateMachine_SRC+0x5c8>
 8002e96:	2803      	cmp	r0, #3
 8002e98:	bf0c      	ite	eq
 8002e9a:	2303      	moveq	r3, #3
 8002e9c:	230e      	movne	r3, #14
 8002e9e:	2000      	movs	r0, #0
 8002ea0:	9000      	str	r0, [sp, #0]
 8002ea2:	220c      	movs	r2, #12
 8002ea4:	f000 fc4d 	bl	8003742 <.text_21+0x2>
 8002ea8:	e69a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eaa:	f8a6 b01e 	strh.w	fp, [r6, #30]
 8002eae:	241e      	movs	r4, #30
 8002eb0:	6870      	ldr	r0, [r6, #4]
 8002eb2:	6801      	ldr	r1, [r0, #0]
 8002eb4:	f3c1 2002 	ubfx	r0, r1, #8, #3
 8002eb8:	2801      	cmp	r0, #1
 8002eba:	d00b      	beq.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ebc:	9801      	ldr	r0, [sp, #4]
 8002ebe:	2803      	cmp	r0, #3
 8002ec0:	bf02      	ittt	eq
 8002ec2:	6970      	ldreq	r0, [r6, #20]
 8002ec4:	f3c0 00c1 	ubfxeq	r0, r0, #3, #2
 8002ec8:	2803      	cmpeq	r0, #3
 8002eca:	d103      	bne.n	8002ed4 <USBPD_PE_StateMachine_SRC+0x5a8>
 8002ecc:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 8002ed0:	83f0      	strh	r0, [r6, #30]
 8002ed2:	2400      	movs	r4, #0
 8002ed4:	2000      	movs	r0, #0
 8002ed6:	9000      	str	r0, [sp, #0]
 8002ed8:	230c      	movs	r3, #12
 8002eda:	f000 fc31 	bl	8003740 <.text_21>
 8002ede:	9801      	ldr	r0, [sp, #4]
 8002ee0:	6971      	ldr	r1, [r6, #20]
 8002ee2:	f360 01c4 	bfi	r1, r0, #3, #2
 8002ee6:	6171      	str	r1, [r6, #20]
 8002ee8:	e67a      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002eea:	2000      	movs	r0, #0
 8002eec:	9000      	str	r0, [sp, #0]
 8002eee:	230c      	movs	r3, #12
 8002ef0:	2202      	movs	r2, #2
 8002ef2:	e7d7      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002ef4:	2803      	cmp	r0, #3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2303      	moveq	r3, #3
 8002efa:	230e      	movne	r3, #14
 8002efc:	2000      	movs	r0, #0
 8002efe:	9000      	str	r0, [sp, #0]
 8002f00:	2204      	movs	r2, #4
 8002f02:	e7cf      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002f04:	8bf0      	ldrh	r0, [r6, #30]
 8002f06:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f0a:	d1ed      	bne.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f0c:	f000 fc09 	bl	8003722 <.text_18>
 8002f10:	68b0      	ldr	r0, [r6, #8]
 8002f12:	6801      	ldr	r1, [r0, #0]
 8002f14:	2900      	cmp	r1, #0
 8002f16:	d0e7      	beq.n	8002ee8 <USBPD_PE_StateMachine_SRC+0x5bc>
 8002f18:	7c30      	ldrb	r0, [r6, #16]
 8002f1a:	4788      	blx	r1
 8002f1c:	2800      	cmp	r0, #0
 8002f1e:	f040 8252 	bne.w	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8002f22:	200d      	movs	r0, #13
 8002f24:	e6f5      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 8002f26:	2100      	movs	r1, #0
 8002f28:	9100      	str	r1, [sp, #0]
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	2206      	movs	r2, #6
 8002f2e:	f000 fc09 	bl	8003744 <.text_21+0x4>
 8002f32:	2800      	cmp	r0, #0
 8002f34:	d110      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f36:	2103      	movs	r1, #3
 8002f38:	f000 fbf4 	bl	8003724 <.text_18+0x2>
 8002f3c:	7c30      	ldrb	r0, [r6, #16]
 8002f3e:	2110      	movs	r1, #16
 8002f40:	f7fd fb09 	bl	8000556 <USBPD_PE_Notification>
 8002f44:	2000      	movs	r0, #0
 8002f46:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f48:	6970      	ldr	r0, [r6, #20]
 8002f4a:	f3c0 00c1 	ubfx	r0, r0, #3, #2
 8002f4e:	2803      	cmp	r0, #3
 8002f50:	d102      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f52:	f24b 60b0 	movw	r0, #46768	@ 0xb6b0
 8002f56:	84b0      	strh	r0, [r6, #36]	@ 0x24
 8002f58:	e642      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f5a:	2101      	movs	r1, #1
 8002f5c:	9100      	str	r1, [sp, #0]
 8002f5e:	2397      	movs	r3, #151	@ 0x97
 8002f60:	2202      	movs	r2, #2
 8002f62:	f000 fbee 	bl	8003742 <.text_21+0x2>
 8002f66:	2800      	cmp	r0, #0
 8002f68:	d1f6      	bne.n	8002f58 <USBPD_PE_StateMachine_SRC+0x62c>
 8002f6a:	7c30      	ldrb	r0, [r6, #16]
 8002f6c:	7734      	strb	r4, [r6, #28]
 8002f6e:	2129      	movs	r1, #41	@ 0x29
 8002f70:	f7fd faf1 	bl	8000556 <USBPD_PE_Notification>
 8002f74:	f248 2026 	movw	r0, #33318	@ 0x8226
 8002f78:	83f0      	strh	r0, [r6, #30]
 8002f7a:	f240 2426 	movw	r4, #550	@ 0x226
 8002f7e:	e62f      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8002f80:	8bf0      	ldrh	r0, [r6, #30]
 8002f82:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8002f86:	d1fa      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002f88:	7c30      	ldrb	r0, [r6, #16]
 8002f8a:	212a      	movs	r1, #42	@ 0x2a
 8002f8c:	f7fd fae3 	bl	8000556 <USBPD_PE_Notification>
 8002f90:	2000      	movs	r0, #0
 8002f92:	9000      	str	r0, [sp, #0]
 8002f94:	2303      	movs	r3, #3
 8002f96:	2206      	movs	r2, #6
 8002f98:	f000 fbd3 	bl	8003742 <.text_21+0x2>
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	d1ee      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fa0:	212e      	movs	r1, #46	@ 0x2e
 8002fa2:	e6e5      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fa4:	2000      	movs	r0, #0
 8002fa6:	9000      	str	r0, [sp, #0]
 8002fa8:	2307      	movs	r3, #7
 8002faa:	2203      	movs	r2, #3
 8002fac:	e77a      	b.n	8002ea4 <USBPD_PE_StateMachine_SRC+0x578>
 8002fae:	2000      	movs	r0, #0
 8002fb0:	9000      	str	r0, [sp, #0]
 8002fb2:	2312      	movs	r3, #18
 8002fb4:	7879      	ldrb	r1, [r7, #1]
 8002fb6:	220d      	movs	r2, #13
 8002fb8:	f000 fbc4 	bl	8003744 <.text_21+0x4>
 8002fbc:	2800      	cmp	r0, #0
 8002fbe:	d1de      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 8002fc0:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8002fc4:	241b      	movs	r4, #27
 8002fc6:	2130      	movs	r1, #48	@ 0x30
 8002fc8:	e6d2      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 8002fca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8002fce:	2914      	cmp	r1, #20
 8002fd0:	d019      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fd2:	783a      	ldrb	r2, [r7, #0]
 8002fd4:	7879      	ldrb	r1, [r7, #1]
 8002fd6:	428a      	cmp	r2, r1
 8002fd8:	bf02      	ittt	eq
 8002fda:	88ba      	ldrheq	r2, [r7, #4]
 8002fdc:	4010      	andeq	r0, r2
 8002fde:	2803      	cmpeq	r0, #3
 8002fe0:	d111      	bne.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8002fe2:	7c30      	ldrb	r0, [r6, #16]
 8002fe4:	2131      	movs	r1, #49	@ 0x31
 8002fe6:	f7fd fab6 	bl	8000556 <USBPD_PE_Notification>
 8002fea:	7838      	ldrb	r0, [r7, #0]
 8002fec:	b910      	cbnz	r0, 8002ff4 <USBPD_PE_StateMachine_SRC+0x6c8>
 8002fee:	2107      	movs	r1, #7
 8002ff0:	7471      	strb	r1, [r6, #17]
 8002ff2:	e002      	b.n	8002ffa <USBPD_PE_StateMachine_SRC+0x6ce>
 8002ff4:	2003      	movs	r0, #3
 8002ff6:	7470      	strb	r0, [r6, #17]
 8002ff8:	2400      	movs	r4, #0
 8002ffa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8002ffe:	2814      	cmp	r0, #20
 8003000:	d001      	beq.n	8003006 <USBPD_PE_StateMachine_SRC+0x6da>
 8003002:	f000 fb97 	bl	8003734 <.text_20>
 8003006:	8bf0      	ldrh	r0, [r6, #30]
 8003008:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800300c:	d1b7      	bne.n	8002f7e <USBPD_PE_StateMachine_SRC+0x652>
 800300e:	e1da      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003010:	6870      	ldr	r0, [r6, #4]
 8003012:	7801      	ldrb	r1, [r0, #0]
 8003014:	f001 0103 	and.w	r1, r1, #3
 8003018:	2902      	cmp	r1, #2
 800301a:	bf04      	itt	eq
 800301c:	7c30      	ldrbeq	r0, [r6, #16]
 800301e:	f002 f806 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003022:	2105      	movs	r1, #5
 8003024:	4630      	mov	r0, r6
 8003026:	f7fd fc65 	bl	80008f4 <PE_Send_RESET>
 800302a:	f000 fb5e 	bl	80036ea <.text_13>
 800302e:	2100      	movs	r1, #0
 8003030:	78a8      	ldrb	r0, [r5, #2]
 8003032:	1c40      	adds	r0, r0, #1
 8003034:	70a8      	strb	r0, [r5, #2]
 8003036:	2202      	movs	r2, #2
 8003038:	6970      	ldr	r0, [r6, #20]
 800303a:	f420 60c0 	bic.w	r0, r0, #1536	@ 0x600
 800303e:	6170      	str	r0, [r6, #20]
 8003040:	70b9      	strb	r1, [r7, #2]
 8003042:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 8003046:	6170      	str	r0, [r6, #20]
 8003048:	f000 fb70 	bl	800372c <.text_19+0x2>
 800304c:	2169      	movs	r1, #105	@ 0x69
 800304e:	4640      	mov	r0, r8
 8003050:	f7fd fa81 	bl	8000556 <USBPD_PE_Notification>
 8003054:	f8a6 a01e 	strh.w	sl, [r6, #30]
 8003058:	241b      	movs	r4, #27
 800305a:	2015      	movs	r0, #21
 800305c:	e659      	b.n	8002d12 <USBPD_PE_StateMachine_SRC+0x3e6>
 800305e:	6870      	ldr	r0, [r6, #4]
 8003060:	7801      	ldrb	r1, [r0, #0]
 8003062:	f001 0103 	and.w	r1, r1, #3
 8003066:	2902      	cmp	r1, #2
 8003068:	bf04      	itt	eq
 800306a:	7c30      	ldrbeq	r0, [r6, #16]
 800306c:	f001 ffdf 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003070:	e7ec      	b.n	800304c <USBPD_PE_StateMachine_SRC+0x720>
 8003072:	8bf0      	ldrh	r0, [r6, #30]
 8003074:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003078:	d117      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800307a:	78a9      	ldrb	r1, [r5, #2]
 800307c:	6970      	ldr	r0, [r6, #20]
 800307e:	2903      	cmp	r1, #3
 8003080:	d303      	bcc.n	800308a <USBPD_PE_StateMachine_SRC+0x75e>
 8003082:	f3c0 0080 	ubfx	r0, r0, #2, #1
 8003086:	bb48      	cbnz	r0, 80030dc <USBPD_PE_StateMachine_SRC+0x7b0>
 8003088:	e02c      	b.n	80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 800308a:	f248 218a 	movw	r1, #33418	@ 0x828a
 800308e:	83f1      	strh	r1, [r6, #30]
 8003090:	2217      	movs	r2, #23
 8003092:	7472      	strb	r2, [r6, #17]
 8003094:	2400      	movs	r4, #0
 8003096:	f3c0 2041 	ubfx	r0, r0, #9, #2
 800309a:	1e42      	subs	r2, r0, #1
 800309c:	4192      	sbcs	r2, r2
 800309e:	0fd2      	lsrs	r2, r2, #31
 80030a0:	f000 fb44 	bl	800372c <.text_19+0x2>
 80030a4:	2203      	movs	r2, #3
 80030a6:	f000 fb41 	bl	800372c <.text_19+0x2>
 80030aa:	e599      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80030ac:	68b2      	ldr	r2, [r6, #8]
 80030ae:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80030b0:	2100      	movs	r1, #0
 80030b2:	4640      	mov	r0, r8
 80030b4:	4798      	blx	r3
 80030b6:	2801      	cmp	r0, #1
 80030b8:	d106      	bne.n	80030c8 <USBPD_PE_StateMachine_SRC+0x79c>
 80030ba:	f248 3020 	movw	r0, #33568	@ 0x8320
 80030be:	83f0      	strh	r0, [r6, #30]
 80030c0:	2113      	movs	r1, #19
 80030c2:	f44f 7448 	mov.w	r4, #800	@ 0x320
 80030c6:	7471      	strb	r1, [r6, #17]
 80030c8:	8bf0      	ldrh	r0, [r6, #30]
 80030ca:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030ce:	d1ec      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030d0:	f000 fb2b 	bl	800372a <.text_19>
 80030d4:	6970      	ldr	r0, [r6, #20]
 80030d6:	f3c0 0080 	ubfx	r0, r0, #2, #1
 80030da:	b118      	cbz	r0, 80030e4 <USBPD_PE_StateMachine_SRC+0x7b8>
 80030dc:	68b1      	ldr	r1, [r6, #8]
 80030de:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80030e0:	2800      	cmp	r0, #0
 80030e2:	d11f      	bne.n	8003124 <USBPD_PE_StateMachine_SRC+0x7f8>
 80030e4:	2100      	movs	r1, #0
 80030e6:	e5fe      	b.n	8002ce6 <USBPD_PE_StateMachine_SRC+0x3ba>
 80030e8:	8bf0      	ldrh	r0, [r6, #30]
 80030ea:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80030ee:	d1dc      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 80030f0:	2204      	movs	r2, #4
 80030f2:	f000 fb1b 	bl	800372c <.text_19+0x2>
 80030f6:	68b2      	ldr	r2, [r6, #8]
 80030f8:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 80030fa:	2101      	movs	r1, #1
 80030fc:	4640      	mov	r0, r8
 80030fe:	4798      	blx	r3
 8003100:	2801      	cmp	r0, #1
 8003102:	d10a      	bne.n	800311a <USBPD_PE_StateMachine_SRC+0x7ee>
 8003104:	4630      	mov	r0, r6
 8003106:	f7fd fcf4 	bl	8000af2 <PE_Reset_HardReset>
 800310a:	2168      	movs	r1, #104	@ 0x68
 800310c:	4640      	mov	r0, r8
 800310e:	f7fd fa22 	bl	8000556 <USBPD_PE_Notification>
 8003112:	2205      	movs	r2, #5
 8003114:	f000 fb0a 	bl	800372c <.text_19+0x2>
 8003118:	e67c      	b.n	8002e14 <USBPD_PE_StateMachine_SRC+0x4e8>
 800311a:	f000 fb06 	bl	800372a <.text_19>
 800311e:	68b1      	ldr	r1, [r6, #8]
 8003120:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 8003122:	2800      	cmp	r0, #0
 8003124:	f040 8280 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003128:	2100      	movs	r1, #0
 800312a:	7471      	strb	r1, [r6, #17]
 800312c:	e603      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 800312e:	2001      	movs	r0, #1
 8003130:	9000      	str	r0, [sp, #0]
 8003132:	231b      	movs	r3, #27
 8003134:	2207      	movs	r2, #7
 8003136:	f000 fb04 	bl	8003742 <.text_21+0x2>
 800313a:	2800      	cmp	r0, #0
 800313c:	d1b5      	bne.n	80030aa <USBPD_PE_StateMachine_SRC+0x77e>
 800313e:	2006      	movs	r0, #6
 8003140:	f000 faa9 	bl	8003696 <.text_6>
 8003144:	241b      	movs	r4, #27
 8003146:	210b      	movs	r1, #11
 8003148:	e612      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 800314a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800314e:	2811      	cmp	r0, #17
 8003150:	d131      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003152:	88b9      	ldrh	r1, [r7, #4]
 8003154:	0bc8      	lsrs	r0, r1, #15
 8003156:	d11b      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003158:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800315c:	b1c0      	cbz	r0, 8003190 <USBPD_PE_StateMachine_SRC+0x864>
 800315e:	4608      	mov	r0, r1
 8003160:	f000 011f 	and.w	r1, r0, #31
 8003164:	2901      	cmp	r1, #1
 8003166:	d113      	bne.n	8003190 <USBPD_PE_StateMachine_SRC+0x864>
 8003168:	68b4      	ldr	r4, [r6, #8]
 800316a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 800316e:	f3c0 3302 	ubfx	r3, r0, #12, #3
 8003172:	68b8      	ldr	r0, [r7, #8]
 8003174:	1c82      	adds	r2, r0, #2
 8003176:	7c30      	ldrb	r0, [r6, #16]
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	2104      	movs	r1, #4
 800317c:	47e0      	blx	ip
 800317e:	f000 fa92 	bl	80036a6 <.text_8>
 8003182:	d001      	beq.n	8003188 <USBPD_PE_StateMachine_SRC+0x85c>
 8003184:	f000 fad6 	bl	8003734 <.text_20>
 8003188:	7c30      	ldrb	r0, [r6, #16]
 800318a:	210d      	movs	r1, #13
 800318c:	f7fd f9e3 	bl	8000556 <USBPD_PE_Notification>
 8003190:	88b8      	ldrh	r0, [r7, #4]
 8003192:	f410 4f70 	tst.w	r0, #61440	@ 0xf000
 8003196:	d10e      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 8003198:	f000 001f 	and.w	r0, r0, #31
 800319c:	2804      	cmp	r0, #4
 800319e:	bf18      	it	ne
 80031a0:	2810      	cmpne	r0, #16
 80031a2:	d108      	bne.n	80031b6 <USBPD_PE_StateMachine_SRC+0x88a>
 80031a4:	f000 fa7f 	bl	80036a6 <.text_8>
 80031a8:	d001      	beq.n	80031ae <USBPD_PE_StateMachine_SRC+0x882>
 80031aa:	f000 fac3 	bl	8003734 <.text_20>
 80031ae:	7c30      	ldrb	r0, [r6, #16]
 80031b0:	210e      	movs	r1, #14
 80031b2:	f7fd f9d0 	bl	8000556 <USBPD_PE_Notification>
 80031b6:	8bf0      	ldrh	r0, [r6, #30]
 80031b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80031bc:	d11a      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031be:	2103      	movs	r1, #3
 80031c0:	e5b8      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80031c2:	68b0      	ldr	r0, [r6, #8]
 80031c4:	6881      	ldr	r1, [r0, #8]
 80031c6:	b1d1      	cbz	r1, 80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031c8:	7c30      	ldrb	r0, [r6, #16]
 80031ca:	4788      	blx	r1
 80031cc:	280a      	cmp	r0, #10
 80031ce:	d002      	beq.n	80031d6 <USBPD_PE_StateMachine_SRC+0x8aa>
 80031d0:	280d      	cmp	r0, #13
 80031d2:	d010      	beq.n	80031f6 <USBPD_PE_StateMachine_SRC+0x8ca>
 80031d4:	e013      	b.n	80031fe <USBPD_PE_StateMachine_SRC+0x8d2>
 80031d6:	f8a6 b01e 	strh.w	fp, [r6, #30]
 80031da:	2000      	movs	r0, #0
 80031dc:	9000      	str	r0, [sp, #0]
 80031de:	2324      	movs	r3, #36	@ 0x24
 80031e0:	f000 faae 	bl	8003740 <.text_21>
 80031e4:	241e      	movs	r4, #30
 80031e6:	2800      	cmp	r0, #0
 80031e8:	d104      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80031ea:	f000 fa4f 	bl	800368c <.text_5>
 80031ee:	2201      	movs	r2, #1
 80031f0:	2101      	movs	r1, #1
 80031f2:	47e0      	blx	ip
 80031f4:	e4f4      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 80031f6:	2000      	movs	r0, #0
 80031f8:	9000      	str	r0, [sp, #0]
 80031fa:	2303      	movs	r3, #3
 80031fc:	e651      	b.n	8002ea2 <USBPD_PE_StateMachine_SRC+0x576>
 80031fe:	2000      	movs	r0, #0
 8003200:	9000      	str	r0, [sp, #0]
 8003202:	2303      	movs	r3, #3
 8003204:	e67c      	b.n	8002f00 <USBPD_PE_StateMachine_SRC+0x5d4>
 8003206:	8bf0      	ldrh	r0, [r6, #30]
 8003208:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800320c:	d1f2      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800320e:	f000 fa88 	bl	8003722 <.text_18>
 8003212:	f000 fa5e 	bl	80036d2 <.text_11>
 8003216:	2206      	movs	r2, #6
 8003218:	f000 fa73 	bl	8003702 <.text_15>
 800321c:	f000 fa77 	bl	800370e <.text_16>
 8003220:	7c30      	ldrb	r0, [r6, #16]
 8003222:	2100      	movs	r1, #0
 8003224:	f001 fed3 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003228:	2000      	movs	r0, #0
 800322a:	9000      	str	r0, [sp, #0]
 800322c:	2325      	movs	r3, #37	@ 0x25
 800322e:	2206      	movs	r2, #6
 8003230:	f000 fa87 	bl	8003742 <.text_21+0x2>
 8003234:	2800      	cmp	r0, #0
 8003236:	d1dd      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 8003238:	e0a5      	b.n	8003386 <USBPD_PE_StateMachine_SRC+0xa5a>
 800323a:	f89d 100c 	ldrb.w	r1, [sp, #12]
 800323e:	2911      	cmp	r1, #17
 8003240:	bf02      	ittt	eq
 8003242:	88b9      	ldrheq	r1, [r7, #4]
 8003244:	4008      	andeq	r0, r1
 8003246:	2806      	cmpeq	r0, #6
 8003248:	d105      	bne.n	8003256 <USBPD_PE_StateMachine_SRC+0x92a>
 800324a:	f000 fa28 	bl	800369e <.text_7>
 800324e:	f000 fa74 	bl	800373a <.text_20+0x6>
 8003252:	2026      	movs	r0, #38	@ 0x26
 8003254:	7470      	strb	r0, [r6, #17]
 8003256:	8bf0      	ldrh	r0, [r6, #30]
 8003258:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800325c:	d1ca      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 800325e:	68b3      	ldr	r3, [r6, #8]
 8003260:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8003262:	2800      	cmp	r0, #0
 8003264:	f040 81e0 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 8003268:	7c30      	ldrb	r0, [r6, #16]
 800326a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326c:	220a      	movs	r2, #10
 800326e:	2101      	movs	r1, #1
 8003270:	4798      	blx	r3
 8003272:	e0a8      	b.n	80033c6 <USBPD_PE_StateMachine_SRC+0xa9a>
 8003274:	2100      	movs	r1, #0
 8003276:	4630      	mov	r0, r6
 8003278:	f7fd fb5c 	bl	8000934 <PE_ChangePowerRole>
 800327c:	f000 fa02 	bl	8003684 <.text_4>
 8003280:	220d      	movs	r2, #13
 8003282:	2100      	movs	r1, #0
 8003284:	47a0      	blx	r4
 8003286:	7c30      	ldrb	r0, [r6, #16]
 8003288:	2114      	movs	r1, #20
 800328a:	f7fd f964 	bl	8000556 <USBPD_PE_Notification>
 800328e:	f000 f9f9 	bl	8003684 <.text_4>
 8003292:	220e      	movs	r2, #14
 8003294:	2100      	movs	r1, #0
 8003296:	47a0      	blx	r4
 8003298:	6870      	ldr	r0, [r6, #4]
 800329a:	7801      	ldrb	r1, [r0, #0]
 800329c:	f001 0103 	and.w	r1, r1, #3
 80032a0:	2901      	cmp	r1, #1
 80032a2:	bf04      	itt	eq
 80032a4:	4640      	moveq	r0, r8
 80032a6:	f001 fed3 	bleq	8005050 <USBPD_PRL_SOPCapability>
 80032aa:	4630      	mov	r0, r6
 80032ac:	f7fd fc96 	bl	8000bdc <PE_Reset_StateMachine>
 80032b0:	e541      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80032b2:	2001      	movs	r0, #1
 80032b4:	9000      	str	r0, [sp, #0]
 80032b6:	231f      	movs	r3, #31
 80032b8:	220a      	movs	r2, #10
 80032ba:	f000 fa42 	bl	8003742 <.text_21+0x2>
 80032be:	2800      	cmp	r0, #0
 80032c0:	d198      	bne.n	80031f4 <USBPD_PE_StateMachine_SRC+0x8c8>
 80032c2:	2008      	movs	r0, #8
 80032c4:	f000 f9e7 	bl	8003696 <.text_6>
 80032c8:	2202      	movs	r2, #2
 80032ca:	f000 fa1a 	bl	8003702 <.text_15>
 80032ce:	241b      	movs	r4, #27
 80032d0:	2139      	movs	r1, #57	@ 0x39
 80032d2:	e54d      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80032d4:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80032d8:	2811      	cmp	r0, #17
 80032da:	bf04      	itt	eq
 80032dc:	88b8      	ldrheq	r0, [r7, #4]
 80032de:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 80032e2:	d133      	bne.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032e4:	f000 001f 	and.w	r0, r0, #31
 80032e8:	2803      	cmp	r0, #3
 80032ea:	d006      	beq.n	80032fa <USBPD_PE_StateMachine_SRC+0x9ce>
 80032ec:	2804      	cmp	r0, #4
 80032ee:	d011      	beq.n	8003314 <USBPD_PE_StateMachine_SRC+0x9e8>
 80032f0:	280c      	cmp	r0, #12
 80032f2:	d008      	beq.n	8003306 <USBPD_PE_StateMachine_SRC+0x9da>
 80032f4:	2810      	cmp	r0, #16
 80032f6:	d01a      	beq.n	800332e <USBPD_PE_StateMachine_SRC+0xa02>
 80032f8:	e028      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 80032fa:	7c30      	ldrb	r0, [r6, #16]
 80032fc:	213a      	movs	r1, #58	@ 0x3a
 80032fe:	f7fd f92a 	bl	8000556 <USBPD_PE_Notification>
 8003302:	2020      	movs	r0, #32
 8003304:	e00c      	b.n	8003320 <USBPD_PE_StateMachine_SRC+0x9f4>
 8003306:	f000 f9bd 	bl	8003684 <.text_4>
 800330a:	2205      	movs	r2, #5
 800330c:	2101      	movs	r1, #1
 800330e:	47a0      	blx	r4
 8003310:	213b      	movs	r1, #59	@ 0x3b
 8003312:	e002      	b.n	800331a <USBPD_PE_StateMachine_SRC+0x9ee>
 8003314:	f000 f9ef 	bl	80036f6 <.text_14>
 8003318:	2116      	movs	r1, #22
 800331a:	f000 f9ff 	bl	800371c <.text_17>
 800331e:	2003      	movs	r0, #3
 8003320:	7470      	strb	r0, [r6, #17]
 8003322:	2400      	movs	r4, #0
 8003324:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003328:	2814      	cmp	r0, #20
 800332a:	d10d      	bne.n	8003348 <USBPD_PE_StateMachine_SRC+0xa1c>
 800332c:	e00e      	b.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 800332e:	f000 f9e2 	bl	80036f6 <.text_14>
 8003332:	7c30      	ldrb	r0, [r6, #16]
 8003334:	2117      	movs	r1, #23
 8003336:	f7fd f90e 	bl	8000556 <USBPD_PE_Notification>
 800333a:	2003      	movs	r0, #3
 800333c:	7470      	strb	r0, [r6, #17]
 800333e:	2400      	movs	r4, #0
 8003340:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003344:	2814      	cmp	r0, #20
 8003346:	d001      	beq.n	800334c <USBPD_PE_StateMachine_SRC+0xa20>
 8003348:	f000 f9f4 	bl	8003734 <.text_20>
 800334c:	8bf0      	ldrh	r0, [r6, #30]
 800334e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003352:	d122      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003354:	e733      	b.n	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003356:	f000 f9bc 	bl	80036d2 <.text_11>
 800335a:	7f30      	ldrb	r0, [r6, #28]
 800335c:	2809      	cmp	r0, #9
 800335e:	d004      	beq.n	800336a <USBPD_PE_StateMachine_SRC+0xa3e>
 8003360:	f000 f994 	bl	800368c <.text_5>
 8003364:	2206      	movs	r2, #6
 8003366:	2101      	movs	r1, #1
 8003368:	47e0      	blx	ip
 800336a:	f000 f9d0 	bl	800370e <.text_16>
 800336e:	7c30      	ldrb	r0, [r6, #16]
 8003370:	2100      	movs	r1, #0
 8003372:	f001 fe2c 	bl	8004fce <USBPD_PRL_SetHeaderPowerRole>
 8003376:	2000      	movs	r0, #0
 8003378:	9000      	str	r0, [sp, #0]
 800337a:	2321      	movs	r3, #33	@ 0x21
 800337c:	2206      	movs	r2, #6
 800337e:	f000 f9e0 	bl	8003742 <.text_21+0x2>
 8003382:	2800      	cmp	r0, #0
 8003384:	d109      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003386:	f000 f97d 	bl	8003684 <.text_4>
 800338a:	2208      	movs	r2, #8
 800338c:	2101      	movs	r1, #1
 800338e:	47a0      	blx	r4
 8003390:	f248 10d6 	movw	r0, #33238	@ 0x81d6
 8003394:	83f0      	strh	r0, [r6, #30]
 8003396:	f44f 74eb 	mov.w	r4, #470	@ 0x1d6
 800339a:	e421      	b.n	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800339c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80033a0:	2911      	cmp	r1, #17
 80033a2:	bf02      	ittt	eq
 80033a4:	88b9      	ldrheq	r1, [r7, #4]
 80033a6:	4008      	andeq	r0, r1
 80033a8:	2806      	cmpeq	r0, #6
 80033aa:	d103      	bne.n	80033b4 <USBPD_PE_StateMachine_SRC+0xa88>
 80033ac:	2026      	movs	r0, #38	@ 0x26
 80033ae:	7470      	strb	r0, [r6, #17]
 80033b0:	f000 f9c0 	bl	8003734 <.text_20>
 80033b4:	8bf0      	ldrh	r0, [r6, #30]
 80033b6:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033ba:	d1ee      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033bc:	68b1      	ldr	r1, [r6, #8]
 80033be:	6b48      	ldr	r0, [r1, #52]	@ 0x34
 80033c0:	2800      	cmp	r0, #0
 80033c2:	f040 8131 	bne.w	8003628 <USBPD_PE_StateMachine_SRC+0xcfc>
 80033c6:	210f      	movs	r1, #15
 80033c8:	e4b4      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80033ca:	8bf0      	ldrh	r0, [r6, #30]
 80033cc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80033d0:	d1e3      	bne.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80033d2:	f000 f95b 	bl	800368c <.text_5>
 80033d6:	220e      	movs	r2, #14
 80033d8:	2101      	movs	r1, #1
 80033da:	47e0      	blx	ip
 80033dc:	6870      	ldr	r0, [r6, #4]
 80033de:	7801      	ldrb	r1, [r0, #0]
 80033e0:	f001 0103 	and.w	r1, r1, #3
 80033e4:	2902      	cmp	r1, #2
 80033e6:	bf04      	itt	eq
 80033e8:	7c30      	ldrbeq	r0, [r6, #16]
 80033ea:	f001 fe20 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 80033ee:	4630      	mov	r0, r6
 80033f0:	f7fd fbf4 	bl	8000bdc <PE_Reset_StateMachine>
 80033f4:	2115      	movs	r1, #21
 80033f6:	e4bb      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80033f8:	2903      	cmp	r1, #3
 80033fa:	d10f      	bne.n	800341c <USBPD_PE_StateMachine_SRC+0xaf0>
 80033fc:	2000      	movs	r0, #0
 80033fe:	6871      	ldr	r1, [r6, #4]
 8003400:	7730      	strb	r0, [r6, #28]
 8003402:	7808      	ldrb	r0, [r1, #0]
 8003404:	f000 0003 	and.w	r0, r0, #3
 8003408:	2802      	cmp	r0, #2
 800340a:	bf04      	itt	eq
 800340c:	7c30      	ldrbeq	r0, [r6, #16]
 800340e:	f001 fe0e 	bleq	800502e <USBPD_PRL_SRCReleaseSinkNG>
 8003412:	2004      	movs	r0, #4
 8003414:	7470      	strb	r0, [r6, #17]
 8003416:	2167      	movs	r1, #103	@ 0x67
 8003418:	f000 f980 	bl	800371c <.text_17>
 800341c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003420:	2814      	cmp	r0, #20
 8003422:	d009      	beq.n	8003438 <USBPD_PE_StateMachine_SRC+0xb0c>
 8003424:	4630      	mov	r0, r6
 8003426:	f7fe fa8d 	bl	8001944 <PE_ManageRXEvent>
 800342a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800342e:	2814      	cmp	r0, #20
 8003430:	d0b3      	beq.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003432:	f000 f97f 	bl	8003734 <.text_20>
 8003436:	e7b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003438:	6970      	ldr	r0, [r6, #20]
 800343a:	0cc0      	lsrs	r0, r0, #19
 800343c:	d027      	beq.n	800348e <USBPD_PE_StateMachine_SRC+0xb62>
 800343e:	8c30      	ldrh	r0, [r6, #32]
 8003440:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003444:	d10e      	bne.n	8003464 <USBPD_PE_StateMachine_SRC+0xb38>
 8003446:	210f      	movs	r1, #15
 8003448:	7471      	strb	r1, [r6, #17]
 800344a:	2000      	movs	r0, #0
 800344c:	9000      	str	r0, [sp, #0]
 800344e:	7c31      	ldrb	r1, [r6, #16]
 8003450:	f8d9 4000 	ldr.w	r4, [r9]
 8003454:	2300      	movs	r3, #0
 8003456:	2270      	movs	r2, #112	@ 0x70
 8003458:	2009      	movs	r0, #9
 800345a:	47a0      	blx	r4
 800345c:	78a8      	ldrb	r0, [r5, #2]
 800345e:	1c40      	adds	r0, r0, #1
 8003460:	70a8      	strb	r0, [r5, #2]
 8003462:	e468      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 8003464:	88b9      	ldrh	r1, [r7, #4]
 8003466:	6972      	ldr	r2, [r6, #20]
 8003468:	f3c1 2142 	ubfx	r1, r1, #9, #3
 800346c:	2033      	movs	r0, #51	@ 0x33
 800346e:	eb01 41d2 	add.w	r1, r1, r2, lsr #19
 8003472:	fb11 f100 	smulbb	r1, r1, r0
 8003476:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 800347a:	8431      	strh	r1, [r6, #32]
 800347c:	88b9      	ldrh	r1, [r7, #4]
 800347e:	6972      	ldr	r2, [r6, #20]
 8003480:	f3c1 2142 	ubfx	r1, r1, #9, #3
 8003484:	eb01 44d2 	add.w	r4, r1, r2, lsr #19
 8003488:	4344      	muls	r4, r0
 800348a:	b2a4      	uxth	r4, r4
 800348c:	e785      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 800348e:	8cb0      	ldrh	r0, [r6, #36]	@ 0x24
 8003490:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003494:	bf08      	it	eq
 8003496:	210f      	moveq	r1, #15
 8003498:	d01b      	beq.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800349a:	7c30      	ldrb	r0, [r6, #16]
 800349c:	f7fd faab 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80034a0:	b968      	cbnz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a2:	78b8      	ldrb	r0, [r7, #2]
 80034a4:	b158      	cbz	r0, 80034be <USBPD_PE_StateMachine_SRC+0xb92>
 80034a6:	78f9      	ldrb	r1, [r7, #3]
 80034a8:	7079      	strb	r1, [r7, #1]
 80034aa:	7470      	strb	r0, [r6, #17]
 80034ac:	2000      	movs	r0, #0
 80034ae:	70b8      	strb	r0, [r7, #2]
 80034b0:	6970      	ldr	r0, [r6, #20]
 80034b2:	6ab1      	ldr	r1, [r6, #40]	@ 0x28
 80034b4:	62f1      	str	r1, [r6, #44]	@ 0x2c
 80034b6:	f440 4080 	orr.w	r0, r0, #16384	@ 0x4000
 80034ba:	6170      	str	r0, [r6, #20]
 80034bc:	e43b      	b.n	8002d36 <USBPD_PE_StateMachine_SRC+0x40a>
 80034be:	8c70      	ldrh	r0, [r6, #34]	@ 0x22
 80034c0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80034c4:	d106      	bne.n	80034d4 <USBPD_PE_StateMachine_SRC+0xba8>
 80034c6:	2100      	movs	r1, #0
 80034c8:	8471      	strh	r1, [r6, #34]	@ 0x22
 80034ca:	2105      	movs	r1, #5
 80034cc:	7928      	ldrb	r0, [r5, #4]
 80034ce:	1c40      	adds	r0, r0, #1
 80034d0:	7128      	strb	r0, [r5, #4]
 80034d2:	e42f      	b.n	8002d34 <USBPD_PE_StateMachine_SRC+0x408>
 80034d4:	4630      	mov	r0, r6
 80034d6:	f7fd ff3f 	bl	8001358 <PE_CalculateMinTiming>
 80034da:	e425      	b.n	8002d28 <USBPD_PE_StateMachine_SRC+0x3fc>
 80034dc:	2000      	movs	r0, #0
 80034de:	2103      	movs	r1, #3
 80034e0:	2201      	movs	r2, #1
 80034e2:	9002      	str	r0, [sp, #8]
 80034e4:	9101      	str	r1, [sp, #4]
 80034e6:	9200      	str	r2, [sp, #0]
 80034e8:	f106 032c 	add.w	r3, r6, #44	@ 0x2c
 80034ec:	2206      	movs	r2, #6
 80034ee:	2100      	movs	r1, #0
 80034f0:	4630      	mov	r0, r6
 80034f2:	f7fd ffe6 	bl	80014c2 <PE_Send_DataMessage>
 80034f6:	2800      	cmp	r0, #0
 80034f8:	d13b      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 80034fa:	215d      	movs	r1, #93	@ 0x5d
 80034fc:	e438      	b.n	8002d70 <USBPD_PE_StateMachine_SRC+0x444>
 80034fe:	2000      	movs	r0, #0
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	ab04      	add	r3, sp, #16
 8003504:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8003508:	f8dc 7014 	ldr.w	r7, [ip, #20]
 800350c:	aa05      	add	r2, sp, #20
 800350e:	210a      	movs	r1, #10
 8003510:	4640      	mov	r0, r8
 8003512:	47b8      	blx	r7
 8003514:	9804      	ldr	r0, [sp, #16]
 8003516:	2104      	movs	r1, #4
 8003518:	f7fd ff46 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 800351c:	b9f8      	cbnz	r0, 800355e <USBPD_PE_StateMachine_SRC+0xc32>
 800351e:	71e8      	strb	r0, [r5, #7]
 8003520:	2100      	movs	r1, #0
 8003522:	7229      	strb	r1, [r5, #8]
 8003524:	7c30      	ldrb	r0, [r6, #16]
 8003526:	f7fd fc36 	bl	8000d96 <PE_Get_UnchunkedSupport>
 800352a:	b918      	cbnz	r0, 8003534 <USBPD_PE_StateMachine_SRC+0xc08>
 800352c:	7a28      	ldrb	r0, [r5, #8]
 800352e:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8003532:	7228      	strb	r0, [r5, #8]
 8003534:	a905      	add	r1, sp, #20
 8003536:	9a04      	ldr	r2, [sp, #16]
 8003538:	f206 2067 	addw	r0, r6, #615	@ 0x267
 800353c:	f017 f8a8 	bl	801a690 <__aeabi_memcpy>
 8003540:	2000      	movs	r0, #0
 8003542:	2103      	movs	r1, #3
 8003544:	2208      	movs	r2, #8
 8003546:	9002      	str	r0, [sp, #8]
 8003548:	9101      	str	r1, [sp, #4]
 800354a:	9200      	str	r2, [sp, #0]
 800354c:	f206 2363 	addw	r3, r6, #611	@ 0x263
 8003550:	220c      	movs	r2, #12
 8003552:	2100      	movs	r1, #0
 8003554:	4630      	mov	r0, r6
 8003556:	f7fe f8d3 	bl	8001700 <PE_Send_ExtendedMessage>
 800355a:	214c      	movs	r1, #76	@ 0x4c
 800355c:	e7ce      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 800355e:	2001      	movs	r0, #1
 8003560:	e57c      	b.n	800305c <USBPD_PE_StateMachine_SRC+0x730>
 8003562:	2101      	movs	r1, #1
 8003564:	9100      	str	r1, [sp, #0]
 8003566:	2339      	movs	r3, #57	@ 0x39
 8003568:	782a      	ldrb	r2, [r5, #0]
 800356a:	78f9      	ldrb	r1, [r7, #3]
 800356c:	f000 f8ea 	bl	8003744 <.text_21+0x4>
 8003570:	2800      	cmp	r0, #0
 8003572:	f47f ab35 	bne.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 8003576:	7868      	ldrb	r0, [r5, #1]
 8003578:	f000 f88d 	bl	8003696 <.text_6>
 800357c:	241b      	movs	r4, #27
 800357e:	2144      	movs	r1, #68	@ 0x44
 8003580:	e7bc      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 8003582:	8bf0      	ldrh	r0, [r6, #30]
 8003584:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003588:	bf04      	itt	eq
 800358a:	f89d 000c 	ldrbeq.w	r0, [sp, #12]
 800358e:	2814      	cmpeq	r0, #20
 8003590:	f43f ae15 	beq.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 8003594:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8003598:	2814      	cmp	r0, #20
 800359a:	f43f ab21 	beq.w	8002be0 <USBPD_PE_StateMachine_SRC+0x2b4>
 800359e:	88b9      	ldrh	r1, [r7, #4]
 80035a0:	0bc8      	lsrs	r0, r1, #15
 80035a2:	d003      	beq.n	80035ac <USBPD_PE_StateMachine_SRC+0xc80>
 80035a4:	4630      	mov	r0, r6
 80035a6:	f7fd ffc9 	bl	800153c <PE_Check_ExtendedMessage>
 80035aa:	e73e      	b.n	800342a <USBPD_PE_StateMachine_SRC+0xafe>
 80035ac:	f001 011f 	and.w	r1, r1, #31
 80035b0:	2910      	cmp	r1, #16
 80035b2:	f47f ae04 	bne.w	80031be <USBPD_PE_StateMachine_SRC+0x892>
 80035b6:	f000 f872 	bl	800369e <.text_7>
 80035ba:	2400      	movs	r4, #0
 80035bc:	f000 f8bd 	bl	800373a <.text_20+0x6>
 80035c0:	2000      	movs	r0, #0
 80035c2:	83f0      	strh	r0, [r6, #30]
 80035c4:	2103      	movs	r1, #3
 80035c6:	7471      	strb	r1, [r6, #17]
 80035c8:	2159      	movs	r1, #89	@ 0x59
 80035ca:	e797      	b.n	80034fc <USBPD_PE_StateMachine_SRC+0xbd0>
 80035cc:	4630      	mov	r0, r6
 80035ce:	f7fe f8be 	bl	800174e <PE_SubStateMachine_ExtendedMessages>
 80035d2:	e003      	b.n	80035dc <USBPD_PE_StateMachine_SRC+0xcb0>
 80035d4:	a903      	add	r1, sp, #12
 80035d6:	4630      	mov	r0, r6
 80035d8:	f7fd fbee 	bl	8000db8 <PE_SubStateMachine_Generic>
 80035dc:	f7ff baff 	b.w	8002bde <USBPD_PE_StateMachine_SRC+0x2b2>
 80035e0:	a903      	add	r1, sp, #12
 80035e2:	4630      	mov	r0, r6
 80035e4:	f000 f9fd 	bl	80039e2 <PE_SubStateMachine_VconnSwap>
 80035e8:	4604      	mov	r4, r0
 80035ea:	f000 f878 	bl	80036de <.text_12>
 80035ee:	bf0e      	itee	eq
 80035f0:	2101      	moveq	r1, #1
 80035f2:	6830      	ldrne	r0, [r6, #0]
 80035f4:	6801      	ldrne	r1, [r0, #0]
 80035f6:	4640      	mov	r0, r8
 80035f8:	f001 fd2a 	bl	8005050 <USBPD_PRL_SOPCapability>
 80035fc:	e6cd      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 80035fe:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003602:	2911      	cmp	r1, #17
 8003604:	bf02      	ittt	eq
 8003606:	88b9      	ldrheq	r1, [r7, #4]
 8003608:	4008      	andeq	r0, r1
 800360a:	2813      	cmpeq	r0, #19
 800360c:	d108      	bne.n	8003620 <USBPD_PE_StateMachine_SRC+0xcf4>
 800360e:	f000 f846 	bl	800369e <.text_7>
 8003612:	f000 f892 	bl	800373a <.text_20+0x6>
 8003616:	2000      	movs	r0, #0
 8003618:	9000      	str	r0, [sp, #0]
 800361a:	2320      	movs	r3, #32
 800361c:	f000 f890 	bl	8003740 <.text_21>
 8003620:	8cf0      	ldrh	r0, [r6, #38]	@ 0x26
 8003622:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003626:	d1a4      	bne.n	8003572 <USBPD_PE_StateMachine_SRC+0xc46>
 8003628:	2192      	movs	r1, #146	@ 0x92
 800362a:	e752      	b.n	80034d2 <USBPD_PE_StateMachine_SRC+0xba6>
 800362c:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8003630:	4630      	mov	r0, r6
 8003632:	f001 faca 	bl	8004bca <PE_StateMachine_UVDM>
 8003636:	e6b0      	b.n	800339a <USBPD_PE_StateMachine_SRC+0xa6e>
 8003638:	6970      	ldr	r0, [r6, #20]
 800363a:	f3c0 3040 	ubfx	r0, r0, #13, #1
 800363e:	b1b0      	cbz	r0, 800366e <USBPD_PE_StateMachine_SRC+0xd42>
 8003640:	6970      	ldr	r0, [r6, #20]
 8003642:	f3c0 3080 	ubfx	r0, r0, #14, #1
 8003646:	b138      	cbz	r0, 8003658 <USBPD_PE_StateMachine_SRC+0xd2c>
 8003648:	7c30      	ldrb	r0, [r6, #16]
 800364a:	215b      	movs	r1, #91	@ 0x5b
 800364c:	f7fc ff83 	bl	8000556 <USBPD_PE_Notification>
 8003650:	6970      	ldr	r0, [r6, #20]
 8003652:	f420 4080 	bic.w	r0, r0, #16384	@ 0x4000
 8003656:	6170      	str	r0, [r6, #20]
 8003658:	2003      	movs	r0, #3
 800365a:	7cb1      	ldrb	r1, [r6, #18]
 800365c:	7470      	strb	r0, [r6, #17]
 800365e:	2903      	cmp	r1, #3
 8003660:	d004      	beq.n	800366c <USBPD_PE_StateMachine_SRC+0xd40>
 8003662:	f000 f82e 	bl	80036c2 <.text_10>
 8003666:	2203      	movs	r2, #3
 8003668:	2004      	movs	r0, #4
 800366a:	47a0      	blx	r4
 800366c:	2401      	movs	r4, #1
 800366e:	6970      	ldr	r0, [r6, #20]
 8003670:	f420 5000 	bic.w	r0, r0, #8192	@ 0x2000
 8003674:	2c00      	cmp	r4, #0
 8003676:	6170      	str	r0, [r6, #20]
 8003678:	f43f a9b8 	beq.w	80029ec <USBPD_PE_StateMachine_SRC+0xc0>
 800367c:	f7ff bad6 	b.w	8002c2c <USBPD_PE_StateMachine_SRC+0x300>

08003680 <.text_3>:
 8003680:	20000000 	.word	0x20000000

08003684 <.text_4>:
 8003684:	68b3      	ldr	r3, [r6, #8]
 8003686:	7c30      	ldrb	r0, [r6, #16]
 8003688:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800368a:	4770      	bx	lr

0800368c <.text_5>:
 800368c:	68b3      	ldr	r3, [r6, #8]
 800368e:	7c30      	ldrb	r0, [r6, #16]
 8003690:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 8003694:	4770      	bx	lr

08003696 <.text_6>:
 8003696:	7730      	strb	r0, [r6, #28]
 8003698:	f8a6 a01e 	strh.w	sl, [r6, #30]
 800369c:	4770      	bx	lr

0800369e <.text_7>:
 800369e:	2014      	movs	r0, #20
 80036a0:	f88d 000c 	strb.w	r0, [sp, #12]
 80036a4:	4770      	bx	lr

080036a6 <.text_8>:
 80036a6:	2003      	movs	r0, #3
 80036a8:	7470      	strb	r0, [r6, #17]
 80036aa:	2400      	movs	r4, #0
 80036ac:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80036b0:	2814      	cmp	r0, #20
 80036b2:	4770      	bx	lr

080036b4 <.text_9>:
 80036b4:	9100      	str	r1, [sp, #0]
 80036b6:	2300      	movs	r3, #0
 80036b8:	7c31      	ldrb	r1, [r6, #16]
 80036ba:	f8d9 c000 	ldr.w	ip, [r9]
 80036be:	2004      	movs	r0, #4

080036c0 <__iar_annotation$$tailcall>:
 80036c0:	4760      	bx	ip

080036c2 <.text_10>:
 80036c2:	74b0      	strb	r0, [r6, #18]
 80036c4:	2100      	movs	r1, #0
 80036c6:	9100      	str	r1, [sp, #0]
 80036c8:	2300      	movs	r3, #0
 80036ca:	7c31      	ldrb	r1, [r6, #16]
 80036cc:	f8d9 4000 	ldr.w	r4, [r9]
 80036d0:	4770      	bx	lr

080036d2 <.text_11>:
 80036d2:	6870      	ldr	r0, [r6, #4]
 80036d4:	6801      	ldr	r1, [r0, #0]
 80036d6:	f041 0110 	orr.w	r1, r1, #16
 80036da:	6001      	str	r1, [r0, #0]
 80036dc:	4770      	bx	lr

080036de <.text_12>:
 80036de:	6870      	ldr	r0, [r6, #4]
 80036e0:	6801      	ldr	r1, [r0, #0]
 80036e2:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 80036e6:	2800      	cmp	r0, #0
 80036e8:	4770      	bx	lr

080036ea <.text_13>:
 80036ea:	6870      	ldr	r0, [r6, #4]
 80036ec:	6801      	ldr	r1, [r0, #0]
 80036ee:	f021 0110 	bic.w	r1, r1, #16
 80036f2:	6001      	str	r1, [r0, #0]
 80036f4:	4770      	bx	lr

080036f6 <.text_14>:
 80036f6:	68b3      	ldr	r3, [r6, #8]
 80036f8:	7c30      	ldrb	r0, [r6, #16]
 80036fa:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80036fc:	2204      	movs	r2, #4
 80036fe:	2101      	movs	r1, #1

08003700 <__iar_annotation$$tailcall>:
 8003700:	4720      	bx	r4

08003702 <.text_15>:
 8003702:	68b3      	ldr	r3, [r6, #8]
 8003704:	7c30      	ldrb	r0, [r6, #16]
 8003706:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 800370a:	2101      	movs	r1, #1

0800370c <__iar_annotation$$tailcall>:
 800370c:	4760      	bx	ip

0800370e <.text_16>:
 800370e:	68b3      	ldr	r3, [r6, #8]
 8003710:	7c30      	ldrb	r0, [r6, #16]
 8003712:	f8d3 c024 	ldr.w	ip, [r3, #36]	@ 0x24
 8003716:	2207      	movs	r2, #7
 8003718:	2101      	movs	r1, #1

0800371a <__iar_annotation$$tailcall>:
 800371a:	4760      	bx	ip

0800371c <.text_17>:
 800371c:	7c30      	ldrb	r0, [r6, #16]
 800371e:	f7fc bf1a 	b.w	8000556 <USBPD_PE_Notification>

08003722 <.text_18>:
 8003722:	2104      	movs	r1, #4
 8003724:	4630      	mov	r0, r6
 8003726:	f7fd bdfd 	b.w	8001324 <PE_SetPowerNegotiation>

0800372a <.text_19>:
 800372a:	2206      	movs	r2, #6
 800372c:	2101      	movs	r1, #1
 800372e:	4630      	mov	r0, r6
 8003730:	f7fd bdf1 	b.w	8001316 <PE_CallHardResetCallback>

08003734 <.text_20>:
 8003734:	2114      	movs	r1, #20
 8003736:	f88d 100c 	strb.w	r1, [sp, #12]
 800373a:	4630      	mov	r0, r6
 800373c:	f7fd b936 	b.w	80009ac <PE_Clear_RxEvent>

08003740 <.text_21>:
 8003740:	2203      	movs	r2, #3
 8003742:	2100      	movs	r1, #0
 8003744:	4630      	mov	r0, r6
 8003746:	f7fd be8f 	b.w	8001468 <PE_Send_CtrlMessage>

0800374a <PE_Send_SRCCapabilities>:
 800374a:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800374c:	4604      	mov	r4, r0
 800374e:	2000      	movs	r0, #0
 8003750:	9002      	str	r0, [sp, #8]
 8003752:	460d      	mov	r5, r1
 8003754:	68a6      	ldr	r6, [r4, #8]
 8003756:	7c20      	ldrb	r0, [r4, #16]
 8003758:	6977      	ldr	r7, [r6, #20]
 800375a:	ab02      	add	r3, sp, #8
 800375c:	f204 2265 	addw	r2, r4, #613	@ 0x265
 8003760:	2100      	movs	r1, #0
 8003762:	47b8      	blx	r7
 8003764:	9802      	ldr	r0, [sp, #8]
 8003766:	1c80      	adds	r0, r0, #2
 8003768:	9002      	str	r0, [sp, #8]
 800376a:	9802      	ldr	r0, [sp, #8]
 800376c:	2104      	movs	r1, #4
 800376e:	f7fd fe1b 	bl	80013a8 <PE_CheckDataSizeFromGetDataInfo>
 8003772:	b998      	cbnz	r0, 800379c <PE_Send_SRCCapabilities+0x52>
 8003774:	6860      	ldr	r0, [r4, #4]
 8003776:	6801      	ldr	r1, [r0, #0]
 8003778:	f3c1 3000 	ubfx	r0, r1, #12, #1
 800377c:	2800      	cmp	r0, #0
 800377e:	d00d      	beq.n	800379c <PE_Send_SRCCapabilities+0x52>
 8003780:	9802      	ldr	r0, [sp, #8]
 8003782:	9501      	str	r5, [sp, #4]
 8003784:	b280      	uxth	r0, r0
 8003786:	9000      	str	r0, [sp, #0]
 8003788:	f204 2363 	addw	r3, r4, #611	@ 0x263
 800378c:	7c20      	ldrb	r0, [r4, #16]
 800378e:	2201      	movs	r2, #1
 8003790:	2100      	movs	r1, #0
 8003792:	f001 fc5f 	bl	8005054 <USBPD_PRL_SendMessage>
 8003796:	2803      	cmp	r0, #3
 8003798:	d0e7      	beq.n	800376a <PE_Send_SRCCapabilities+0x20>
 800379a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800379c:	2010      	movs	r0, #16
 800379e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080037a0 <PE_StateMachine_VDMCable>:
 80037a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037a4:	b08c      	sub	sp, #48	@ 0x30
 80037a6:	2602      	movs	r6, #2
 80037a8:	4605      	mov	r5, r0
 80037aa:	4688      	mov	r8, r1
 80037ac:	7c68      	ldrb	r0, [r5, #17]
 80037ae:	2805      	cmp	r0, #5
 80037b0:	f505 7414 	add.w	r4, r5, #592	@ 0x250
 80037b4:	f248 072d 	movw	r7, #32813	@ 0x802d
 80037b8:	d002      	beq.n	80037c0 <PE_StateMachine_VDMCable+0x20>
 80037ba:	289a      	cmp	r0, #154	@ 0x9a
 80037bc:	d061      	beq.n	8003882 <PE_StateMachine_VDMCable+0xe2>
 80037be:	e0f1      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 80037c0:	686a      	ldr	r2, [r5, #4]
 80037c2:	7811      	ldrb	r1, [r2, #0]
 80037c4:	f001 0103 	and.w	r1, r1, #3
 80037c8:	4628      	mov	r0, r5
 80037ca:	f000 fa36 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80037ce:	6822      	ldr	r2, [r4, #0]
 80037d0:	0952      	lsrs	r2, r2, #5
 80037d2:	0152      	lsls	r2, r2, #5
 80037d4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037d8:	f042 0201 	orr.w	r2, r2, #1
 80037dc:	6022      	str	r2, [r4, #0]
 80037de:	4623      	mov	r3, r4
 80037e0:	6868      	ldr	r0, [r5, #4]
 80037e2:	6801      	ldr	r1, [r0, #0]
 80037e4:	f649 003f 	movw	r0, #38975	@ 0x983f
 80037e8:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80037ec:	4002      	ands	r2, r0
 80037ee:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80037f2:	f042 427f 	orr.w	r2, r2, #4278190080	@ 0xff000000
 80037f6:	6022      	str	r2, [r4, #0]
 80037f8:	6868      	ldr	r0, [r5, #4]
 80037fa:	6801      	ldr	r1, [r0, #0]
 80037fc:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8003800:	2800      	cmp	r0, #0
 8003802:	bf1d      	ittte	ne
 8003804:	6968      	ldrne	r0, [r5, #20]
 8003806:	0880      	lsrne	r0, r0, #2
 8003808:	f000 0001 	andne.w	r0, r0, #1
 800380c:	2002      	moveq	r0, #2
 800380e:	9002      	str	r0, [sp, #8]
 8003810:	2101      	movs	r1, #1
 8003812:	209a      	movs	r0, #154	@ 0x9a
 8003814:	9001      	str	r0, [sp, #4]
 8003816:	9100      	str	r1, [sp, #0]
 8003818:	220f      	movs	r2, #15
 800381a:	4628      	mov	r0, r5
 800381c:	f7fd fe51 	bl	80014c2 <PE_Send_DataMessage>
 8003820:	b950      	cbnz	r0, 8003838 <PE_StateMachine_VDMCable+0x98>
 8003822:	6968      	ldr	r0, [r5, #20]
 8003824:	f440 3080 	orr.w	r0, r0, #65536	@ 0x10000
 8003828:	6168      	str	r0, [r5, #20]
 800382a:	2151      	movs	r1, #81	@ 0x51
 800382c:	7729      	strb	r1, [r5, #28]
 800382e:	f248 001e 	movw	r0, #32798	@ 0x801e
 8003832:	8468      	strh	r0, [r5, #34]	@ 0x22
 8003834:	261e      	movs	r6, #30
 8003836:	e0b5      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003838:	2809      	cmp	r0, #9
 800383a:	d0fc      	beq.n	8003836 <PE_StateMachine_VDMCable+0x96>
 800383c:	7ca0      	ldrb	r0, [r4, #18]
 800383e:	2815      	cmp	r0, #21
 8003840:	bf38      	it	cc
 8003842:	846f      	strhcc	r7, [r5, #34]	@ 0x22
 8003844:	d307      	bcc.n	8003856 <PE_StateMachine_VDMCable+0xb6>
 8003846:	68e8      	ldr	r0, [r5, #12]
 8003848:	6944      	ldr	r4, [r0, #20]
 800384a:	b124      	cbz	r4, 8003856 <PE_StateMachine_VDMCable+0xb6>
 800384c:	7c28      	ldrb	r0, [r5, #16]
 800384e:	2300      	movs	r3, #0
 8003850:	2205      	movs	r2, #5
 8003852:	2101      	movs	r1, #1
 8003854:	47a0      	blx	r4
 8003856:	f000 f8ae 	bl	80039b6 <.text_4>
 800385a:	f000 8080 	beq.w	800395e <PE_StateMachine_VDMCable+0x1be>
 800385e:	8be8      	ldrh	r0, [r5, #30]
 8003860:	0441      	lsls	r1, r0, #17
 8003862:	d00b      	beq.n	800387c <PE_StateMachine_VDMCable+0xdc>
 8003864:	2008      	movs	r0, #8
 8003866:	7468      	strb	r0, [r5, #17]
 8003868:	8be9      	ldrh	r1, [r5, #30]
 800386a:	f3c1 010e 	ubfx	r1, r1, #0, #15
 800386e:	292d      	cmp	r1, #45	@ 0x2d
 8003870:	bf2e      	itee	cs
 8003872:	262d      	movcs	r6, #45	@ 0x2d
 8003874:	8bee      	ldrhcc	r6, [r5, #30]
 8003876:	f3c6 060e 	ubfxcc	r6, r6, #0, #15
 800387a:	e093      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800387c:	2007      	movs	r0, #7
 800387e:	7468      	strb	r0, [r5, #17]
 8003880:	e090      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003882:	2001      	movs	r0, #1
 8003884:	f7fd f8c6 	bl	8000a14 <PE_Convert_SOPRxEvent>
 8003888:	f898 2000 	ldrb.w	r2, [r8]
 800388c:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 800388e:	4282      	cmp	r2, r0
 8003890:	d142      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003892:	0bc8      	lsrs	r0, r1, #15
 8003894:	d140      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 8003896:	f3c1 3002 	ubfx	r0, r1, #12, #3
 800389a:	2800      	cmp	r0, #0
 800389c:	d03c      	beq.n	8003918 <PE_StateMachine_VDMCable+0x178>
 800389e:	f895 0034 	ldrb.w	r0, [r5, #52]	@ 0x34
 80038a2:	f000 001f 	and.w	r0, r0, #31
 80038a6:	280f      	cmp	r0, #15
 80038a8:	d136      	bne.n	8003918 <PE_StateMachine_VDMCable+0x178>
 80038aa:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80038ac:	7887      	ldrb	r7, [r0, #2]
 80038ae:	f007 011f 	and.w	r1, r7, #31
 80038b2:	2901      	cmp	r1, #1
 80038b4:	d12b      	bne.n	800390e <PE_StateMachine_VDMCable+0x16e>
 80038b6:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038ba:	b340      	cbz	r0, 800390e <PE_StateMachine_VDMCable+0x16e>
 80038bc:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 80038be:	f3c0 1181 	ubfx	r1, r0, #6, #2
 80038c2:	4628      	mov	r0, r5
 80038c4:	f000 f9b9 	bl	8003c3a <PE_ExtRevisionInteroperability_Cable>
 80038c8:	68e9      	ldr	r1, [r5, #12]
 80038ca:	6948      	ldr	r0, [r1, #20]
 80038cc:	b1e8      	cbz	r0, 800390a <PE_StateMachine_VDMCable+0x16a>
 80038ce:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80038d2:	2801      	cmp	r0, #1
 80038d4:	d119      	bne.n	800390a <PE_StateMachine_VDMCable+0x16a>
 80038d6:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80038d8:	1d81      	adds	r1, r0, #6
 80038da:	7c28      	ldrb	r0, [r5, #16]
 80038dc:	aa03      	add	r2, sp, #12
 80038de:	f001 fa25 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80038e2:	b970      	cbnz	r0, 8003902 <PE_StateMachine_VDMCable+0x162>
 80038e4:	68ee      	ldr	r6, [r5, #12]
 80038e6:	7c28      	ldrb	r0, [r5, #16]
 80038e8:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80038ec:	6977      	ldr	r7, [r6, #20]
 80038ee:	ab03      	add	r3, sp, #12
 80038f0:	2101      	movs	r1, #1
 80038f2:	47b8      	blx	r7
 80038f4:	7c28      	ldrb	r0, [r5, #16]
 80038f6:	2152      	movs	r1, #82	@ 0x52
 80038f8:	f7fc fe2d 	bl	8000556 <USBPD_PE_Notification>
 80038fc:	2014      	movs	r0, #20
 80038fe:	74a0      	strb	r0, [r4, #18]
 8003900:	e003      	b.n	800390a <PE_StateMachine_VDMCable+0x16a>
 8003902:	7c28      	ldrb	r0, [r5, #16]
 8003904:	211b      	movs	r1, #27
 8003906:	f7fc fe26 	bl	8000556 <USBPD_PE_Notification>
 800390a:	f000 f85a 	bl	80039c2 <.text_5>
 800390e:	f898 0000 	ldrb.w	r0, [r8]
 8003912:	2814      	cmp	r0, #20
 8003914:	d10e      	bne.n	8003934 <PE_StateMachine_VDMCable+0x194>
 8003916:	e045      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003918:	f001 011f 	and.w	r1, r1, #31
 800391c:	2910      	cmp	r1, #16
 800391e:	d110      	bne.n	8003942 <PE_StateMachine_VDMCable+0x1a2>
 8003920:	f000 f84f 	bl	80039c2 <.text_5>
 8003924:	2159      	movs	r1, #89	@ 0x59
 8003926:	7c28      	ldrb	r0, [r5, #16]
 8003928:	f7fc fe15 	bl	8000556 <USBPD_PE_Notification>
 800392c:	f898 0000 	ldrb.w	r0, [r8]
 8003930:	2814      	cmp	r0, #20
 8003932:	d037      	beq.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003934:	2114      	movs	r1, #20
 8003936:	f888 1000 	strb.w	r1, [r8]
 800393a:	4628      	mov	r0, r5
 800393c:	f7fd f836 	bl	80009ac <PE_Clear_RxEvent>
 8003940:	e030      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003942:	8c68      	ldrh	r0, [r5, #34]	@ 0x22
 8003944:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003948:	d12c      	bne.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 800394a:	2100      	movs	r1, #0
 800394c:	8469      	strh	r1, [r5, #34]	@ 0x22
 800394e:	f000 f832 	bl	80039b6 <.text_4>
 8003952:	d108      	bne.n	8003966 <PE_StateMachine_VDMCable+0x1c6>
 8003954:	68e8      	ldr	r0, [r5, #12]
 8003956:	6944      	ldr	r4, [r0, #20]
 8003958:	b10c      	cbz	r4, 800395e <PE_StateMachine_VDMCable+0x1be>
 800395a:	f000 f827 	bl	80039ac <.text_3>
 800395e:	2003      	movs	r0, #3
 8003960:	7468      	strb	r0, [r5, #17]
 8003962:	2600      	movs	r6, #0
 8003964:	e01e      	b.n	80039a4 <PE_StateMachine_VDMCable+0x204>
 8003966:	6868      	ldr	r0, [r5, #4]
 8003968:	6801      	ldr	r1, [r0, #0]
 800396a:	f3c1 6081 	ubfx	r0, r1, #26, #2
 800396e:	2802      	cmp	r0, #2
 8003970:	d10e      	bne.n	8003990 <PE_StateMachine_VDMCable+0x1f0>
 8003972:	6869      	ldr	r1, [r5, #4]
 8003974:	680a      	ldr	r2, [r1, #0]
 8003976:	2001      	movs	r0, #1
 8003978:	f360 629b 	bfi	r2, r0, #26, #2
 800397c:	600a      	str	r2, [r1, #0]
 800397e:	2101      	movs	r1, #1
 8003980:	7c28      	ldrb	r0, [r5, #16]
 8003982:	f001 fb3f 	bl	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
 8003986:	846f      	strh	r7, [r5, #34]	@ 0x22
 8003988:	2008      	movs	r0, #8
 800398a:	262d      	movs	r6, #45	@ 0x2d
 800398c:	7468      	strb	r0, [r5, #17]
 800398e:	e007      	b.n	80039a0 <PE_StateMachine_VDMCable+0x200>
 8003990:	68e8      	ldr	r0, [r5, #12]
 8003992:	6944      	ldr	r4, [r0, #20]
 8003994:	b10c      	cbz	r4, 800399a <PE_StateMachine_VDMCable+0x1fa>
 8003996:	f000 f809 	bl	80039ac <.text_3>
 800399a:	2007      	movs	r0, #7
 800399c:	7468      	strb	r0, [r5, #17]
 800399e:	2600      	movs	r6, #0
 80039a0:	2000      	movs	r0, #0
 80039a2:	7728      	strb	r0, [r5, #28]
 80039a4:	4630      	mov	r0, r6
 80039a6:	b00c      	add	sp, #48	@ 0x30
 80039a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080039ac <.text_3>:
 80039ac:	7c28      	ldrb	r0, [r5, #16]
 80039ae:	2300      	movs	r3, #0
 80039b0:	2204      	movs	r2, #4
 80039b2:	2101      	movs	r1, #1

080039b4 <__iar_annotation$$tailcall>:
 80039b4:	4720      	bx	r4

080039b6 <.text_4>:
 80039b6:	6868      	ldr	r0, [r5, #4]
 80039b8:	6801      	ldr	r1, [r0, #0]
 80039ba:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039be:	2803      	cmp	r0, #3
 80039c0:	4770      	bx	lr

080039c2 <.text_5>:
 80039c2:	2000      	movs	r0, #0
 80039c4:	8468      	strh	r0, [r5, #34]	@ 0x22
 80039c6:	6868      	ldr	r0, [r5, #4]
 80039c8:	6801      	ldr	r1, [r0, #0]
 80039ca:	f3c1 2002 	ubfx	r0, r1, #8, #3
 80039ce:	2803      	cmp	r0, #3
 80039d0:	d102      	bne.n	80039d8 <.text_5+0x16>
 80039d2:	7468      	strb	r0, [r5, #17]
 80039d4:	2600      	movs	r6, #0
 80039d6:	4770      	bx	lr
 80039d8:	2007      	movs	r0, #7
 80039da:	2600      	movs	r6, #0
 80039dc:	7468      	strb	r0, [r5, #17]
 80039de:	772e      	strb	r6, [r5, #28]
 80039e0:	4770      	bx	lr

080039e2 <PE_SubStateMachine_VconnSwap>:
 80039e2:	b538      	push	{r3, r4, r5, lr}
 80039e4:	4604      	mov	r4, r0
 80039e6:	2502      	movs	r5, #2
 80039e8:	7c60      	ldrb	r0, [r4, #17]
 80039ea:	289d      	cmp	r0, #157	@ 0x9d
 80039ec:	d010      	beq.n	8003a10 <PE_SubStateMachine_VconnSwap+0x2e>
 80039ee:	d30e      	bcc.n	8003a0e <PE_SubStateMachine_VconnSwap+0x2c>
 80039f0:	289f      	cmp	r0, #159	@ 0x9f
 80039f2:	d054      	beq.n	8003a9e <PE_SubStateMachine_VconnSwap+0xbc>
 80039f4:	d33b      	bcc.n	8003a6e <PE_SubStateMachine_VconnSwap+0x8c>
 80039f6:	28a1      	cmp	r0, #161	@ 0xa1
 80039f8:	f000 807e 	beq.w	8003af8 <PE_SubStateMachine_VconnSwap+0x116>
 80039fc:	d370      	bcc.n	8003ae0 <PE_SubStateMachine_VconnSwap+0xfe>
 80039fe:	28a3      	cmp	r0, #163	@ 0xa3
 8003a00:	f000 809a 	beq.w	8003b38 <PE_SubStateMachine_VconnSwap+0x156>
 8003a04:	f0c0 8086 	bcc.w	8003b14 <PE_SubStateMachine_VconnSwap+0x132>
 8003a08:	28a4      	cmp	r0, #164	@ 0xa4
 8003a0a:	f000 80ee 	beq.w	8003bea <PE_SubStateMachine_VconnSwap+0x208>
 8003a0e:	e0f8      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a10:	6861      	ldr	r1, [r4, #4]
 8003a12:	6808      	ldr	r0, [r1, #0]
 8003a14:	f400 50b8 	and.w	r0, r0, #5888	@ 0x1700
 8003a18:	f5b0 5f98 	cmp.w	r0, #4864	@ 0x1300
 8003a1c:	d11f      	bne.n	8003a5e <PE_SubStateMachine_VconnSwap+0x7c>
 8003a1e:	68a1      	ldr	r1, [r4, #8]
 8003a20:	7c20      	ldrb	r0, [r4, #16]
 8003a22:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8003a24:	4790      	blx	r2
 8003a26:	280a      	cmp	r0, #10
 8003a28:	d002      	beq.n	8003a30 <PE_SubStateMachine_VconnSwap+0x4e>
 8003a2a:	280d      	cmp	r0, #13
 8003a2c:	d007      	beq.n	8003a3e <PE_SubStateMachine_VconnSwap+0x5c>
 8003a2e:	e00d      	b.n	8003a4c <PE_SubStateMachine_VconnSwap+0x6a>
 8003a30:	6961      	ldr	r1, [r4, #20]
 8003a32:	209e      	movs	r0, #158	@ 0x9e
 8003a34:	f441 5180 	orr.w	r1, r1, #4096	@ 0x1000
 8003a38:	7460      	strb	r0, [r4, #17]
 8003a3a:	6161      	str	r1, [r4, #20]
 8003a3c:	e0e1      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a3e:	2000      	movs	r0, #0
 8003a40:	9000      	str	r0, [sp, #0]
 8003a42:	2303      	movs	r3, #3
 8003a44:	220c      	movs	r2, #12
 8003a46:	f000 f8f4 	bl	8003c32 <.text_10>
 8003a4a:	e0da      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	9000      	str	r0, [sp, #0]
 8003a50:	2303      	movs	r3, #3
 8003a52:	2204      	movs	r2, #4
 8003a54:	f000 f8ed 	bl	8003c32 <.text_10>
 8003a58:	2003      	movs	r0, #3
 8003a5a:	7460      	strb	r0, [r4, #17]
 8003a5c:	e005      	b.n	8003a6a <PE_SubStateMachine_VconnSwap+0x88>
 8003a5e:	6960      	ldr	r0, [r4, #20]
 8003a60:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003a64:	2103      	movs	r1, #3
 8003a66:	6160      	str	r0, [r4, #20]
 8003a68:	7461      	strb	r1, [r4, #17]
 8003a6a:	2500      	movs	r5, #0
 8003a6c:	e0c9      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003a6e:	2000      	movs	r0, #0
 8003a70:	9000      	str	r0, [sp, #0]
 8003a72:	239e      	movs	r3, #158	@ 0x9e
 8003a74:	2203      	movs	r2, #3
 8003a76:	f000 f8dc 	bl	8003c32 <.text_10>
 8003a7a:	2800      	cmp	r0, #0
 8003a7c:	d1f6      	bne.n	8003a6c <PE_SubStateMachine_VconnSwap+0x8a>
 8003a7e:	6860      	ldr	r0, [r4, #4]
 8003a80:	6801      	ldr	r1, [r0, #0]
 8003a82:	f3c1 30c0 	ubfx	r0, r1, #15, #1
 8003a86:	b130      	cbz	r0, 8003a96 <PE_SubStateMachine_VconnSwap+0xb4>
 8003a88:	209f      	movs	r0, #159	@ 0x9f
 8003a8a:	7460      	strb	r0, [r4, #17]
 8003a8c:	f248 0196 	movw	r1, #32918	@ 0x8096
 8003a90:	83e1      	strh	r1, [r4, #30]
 8003a92:	2596      	movs	r5, #150	@ 0x96
 8003a94:	e001      	b.n	8003a9a <PE_SubStateMachine_VconnSwap+0xb8>
 8003a96:	20a0      	movs	r0, #160	@ 0xa0
 8003a98:	7460      	strb	r0, [r4, #17]
 8003a9a:	213f      	movs	r1, #63	@ 0x3f
 8003a9c:	e0a1      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003a9e:	8be0      	ldrh	r0, [r4, #30]
 8003aa0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003aa4:	f000 8095 	beq.w	8003bd2 <PE_SubStateMachine_VconnSwap+0x1f0>
 8003aa8:	780a      	ldrb	r2, [r1, #0]
 8003aaa:	2a11      	cmp	r2, #17
 8003aac:	bf01      	itttt	eq
 8003aae:	8ea2      	ldrheq	r2, [r4, #52]	@ 0x34
 8003ab0:	f24f 001f 	movweq	r0, #61471	@ 0xf01f
 8003ab4:	4002      	andeq	r2, r0
 8003ab6:	2a06      	cmpeq	r2, #6
 8003ab8:	d111      	bne.n	8003ade <PE_SubStateMachine_VconnSwap+0xfc>
 8003aba:	f000 f8ab 	bl	8003c14 <.text_8>
 8003abe:	68a0      	ldr	r0, [r4, #8]
 8003ac0:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ac2:	b112      	cbz	r2, 8003aca <PE_SubStateMachine_VconnSwap+0xe8>
 8003ac4:	7c20      	ldrb	r0, [r4, #16]
 8003ac6:	2100      	movs	r1, #0
 8003ac8:	4790      	blx	r2
 8003aca:	f000 f89c 	bl	8003c06 <.text_7>
 8003ace:	2142      	movs	r1, #66	@ 0x42
 8003ad0:	7c20      	ldrb	r0, [r4, #16]
 8003ad2:	f7fc fd40 	bl	8000556 <USBPD_PE_Notification>
 8003ad6:	2500      	movs	r5, #0
 8003ad8:	8465      	strh	r5, [r4, #34]	@ 0x22
 8003ada:	f884 5262 	strb.w	r5, [r4, #610]	@ 0x262
 8003ade:	e090      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003ae0:	68a0      	ldr	r0, [r4, #8]
 8003ae2:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003ae4:	b112      	cbz	r2, 8003aec <PE_SubStateMachine_VconnSwap+0x10a>
 8003ae6:	7c20      	ldrb	r0, [r4, #16]
 8003ae8:	2101      	movs	r1, #1
 8003aea:	4790      	blx	r2
 8003aec:	20a1      	movs	r0, #161	@ 0xa1
 8003aee:	2100      	movs	r1, #0
 8003af0:	7460      	strb	r0, [r4, #17]
 8003af2:	f884 1262 	strb.w	r1, [r4, #610]	@ 0x262
 8003af6:	e084      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003af8:	2000      	movs	r0, #0
 8003afa:	9000      	str	r0, [sp, #0]
 8003afc:	2303      	movs	r3, #3
 8003afe:	2206      	movs	r2, #6
 8003b00:	f000 f897 	bl	8003c32 <.text_10>
 8003b04:	2800      	cmp	r0, #0
 8003b06:	d17c      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b08:	6960      	ldr	r0, [r4, #20]
 8003b0a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003b0e:	6160      	str	r0, [r4, #20]
 8003b10:	2142      	movs	r1, #66	@ 0x42
 8003b12:	e066      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b14:	2000      	movs	r0, #0
 8003b16:	9000      	str	r0, [sp, #0]
 8003b18:	23a3      	movs	r3, #163	@ 0xa3
 8003b1a:	220b      	movs	r2, #11
 8003b1c:	f000 f889 	bl	8003c32 <.text_10>
 8003b20:	2800      	cmp	r0, #0
 8003b22:	d16e      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003b24:	6960      	ldr	r0, [r4, #20]
 8003b26:	f440 5080 	orr.w	r0, r0, #4096	@ 0x1000
 8003b2a:	6160      	str	r0, [r4, #20]
 8003b2c:	f248 011b 	movw	r1, #32795	@ 0x801b
 8003b30:	83e1      	strh	r1, [r4, #30]
 8003b32:	251b      	movs	r5, #27
 8003b34:	213e      	movs	r1, #62	@ 0x3e
 8003b36:	e054      	b.n	8003be2 <PE_SubStateMachine_VconnSwap+0x200>
 8003b38:	7808      	ldrb	r0, [r1, #0]
 8003b3a:	2811      	cmp	r0, #17
 8003b3c:	bf04      	itt	eq
 8003b3e:	8ea0      	ldrheq	r0, [r4, #52]	@ 0x34
 8003b40:	f410 4f70 	tsteq.w	r0, #61440	@ 0xf000
 8003b44:	d141      	bne.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b46:	f000 001f 	and.w	r0, r0, #31
 8003b4a:	2803      	cmp	r0, #3
 8003b4c:	d006      	beq.n	8003b5c <PE_SubStateMachine_VconnSwap+0x17a>
 8003b4e:	2804      	cmp	r0, #4
 8003b50:	d01c      	beq.n	8003b8c <PE_SubStateMachine_VconnSwap+0x1aa>
 8003b52:	280c      	cmp	r0, #12
 8003b54:	d013      	beq.n	8003b7e <PE_SubStateMachine_VconnSwap+0x19c>
 8003b56:	2810      	cmp	r0, #16
 8003b58:	d01f      	beq.n	8003b9a <PE_SubStateMachine_VconnSwap+0x1b8>
 8003b5a:	e036      	b.n	8003bca <PE_SubStateMachine_VconnSwap+0x1e8>
 8003b5c:	6860      	ldr	r0, [r4, #4]
 8003b5e:	6802      	ldr	r2, [r0, #0]
 8003b60:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003b64:	2800      	cmp	r0, #0
 8003b66:	bf19      	ittee	ne
 8003b68:	209f      	movne	r0, #159	@ 0x9f
 8003b6a:	7460      	strbne	r0, [r4, #17]
 8003b6c:	22a0      	moveq	r2, #160	@ 0xa0
 8003b6e:	7462      	strbeq	r2, [r4, #17]
 8003b70:	7808      	ldrb	r0, [r1, #0]
 8003b72:	2814      	cmp	r0, #20
 8003b74:	d001      	beq.n	8003b7a <PE_SubStateMachine_VconnSwap+0x198>
 8003b76:	f000 f84d 	bl	8003c14 <.text_8>
 8003b7a:	213f      	movs	r1, #63	@ 0x3f
 8003b7c:	e022      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b7e:	f000 f84e 	bl	8003c1e <.text_9>
 8003b82:	d001      	beq.n	8003b88 <PE_SubStateMachine_VconnSwap+0x1a6>
 8003b84:	f000 f846 	bl	8003c14 <.text_8>
 8003b88:	2140      	movs	r1, #64	@ 0x40
 8003b8a:	e01b      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b8c:	f000 f847 	bl	8003c1e <.text_9>
 8003b90:	d001      	beq.n	8003b96 <PE_SubStateMachine_VconnSwap+0x1b4>
 8003b92:	f000 f83f 	bl	8003c14 <.text_8>
 8003b96:	2141      	movs	r1, #65	@ 0x41
 8003b98:	e014      	b.n	8003bc4 <PE_SubStateMachine_VconnSwap+0x1e2>
 8003b9a:	6860      	ldr	r0, [r4, #4]
 8003b9c:	6802      	ldr	r2, [r0, #0]
 8003b9e:	f3c2 30c0 	ubfx	r0, r2, #15, #1
 8003ba2:	b910      	cbnz	r0, 8003baa <PE_SubStateMachine_VconnSwap+0x1c8>
 8003ba4:	20a4      	movs	r0, #164	@ 0xa4
 8003ba6:	7460      	strb	r0, [r4, #17]
 8003ba8:	e006      	b.n	8003bb8 <PE_SubStateMachine_VconnSwap+0x1d6>
 8003baa:	6960      	ldr	r0, [r4, #20]
 8003bac:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	6160      	str	r0, [r4, #20]
 8003bb4:	7462      	strb	r2, [r4, #17]
 8003bb6:	2500      	movs	r5, #0
 8003bb8:	7808      	ldrb	r0, [r1, #0]
 8003bba:	2814      	cmp	r0, #20
 8003bbc:	d001      	beq.n	8003bc2 <PE_SubStateMachine_VconnSwap+0x1e0>
 8003bbe:	f000 f829 	bl	8003c14 <.text_8>
 8003bc2:	2143      	movs	r1, #67	@ 0x43
 8003bc4:	7c20      	ldrb	r0, [r4, #16]
 8003bc6:	f7fc fcc6 	bl	8000556 <USBPD_PE_Notification>
 8003bca:	8be0      	ldrh	r0, [r4, #30]
 8003bcc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8003bd0:	d117      	bne.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bd2:	6960      	ldr	r0, [r4, #20]
 8003bd4:	2103      	movs	r1, #3
 8003bd6:	7461      	strb	r1, [r4, #17]
 8003bd8:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003bdc:	6160      	str	r0, [r4, #20]
 8003bde:	2500      	movs	r5, #0
 8003be0:	211c      	movs	r1, #28
 8003be2:	7c20      	ldrb	r0, [r4, #16]
 8003be4:	f7fc fcb7 	bl	8000556 <USBPD_PE_Notification>
 8003be8:	e00b      	b.n	8003c02 <PE_SubStateMachine_VconnSwap+0x220>
 8003bea:	68a0      	ldr	r0, [r4, #8]
 8003bec:	6b02      	ldr	r2, [r0, #48]	@ 0x30
 8003bee:	b112      	cbz	r2, 8003bf6 <PE_SubStateMachine_VconnSwap+0x214>
 8003bf0:	7c20      	ldrb	r0, [r4, #16]
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	4790      	blx	r2
 8003bf6:	f000 f806 	bl	8003c06 <.text_7>
 8003bfa:	f248 002d 	movw	r0, #32813	@ 0x802d
 8003bfe:	2500      	movs	r5, #0
 8003c00:	8460      	strh	r0, [r4, #34]	@ 0x22
 8003c02:	4628      	mov	r0, r5
 8003c04:	bd32      	pop	{r1, r4, r5, pc}

08003c06 <.text_7>:
 8003c06:	6960      	ldr	r0, [r4, #20]
 8003c08:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003c0c:	6160      	str	r0, [r4, #20]
 8003c0e:	2103      	movs	r1, #3
 8003c10:	7461      	strb	r1, [r4, #17]
 8003c12:	4770      	bx	lr

08003c14 <.text_8>:
 8003c14:	2214      	movs	r2, #20
 8003c16:	700a      	strb	r2, [r1, #0]
 8003c18:	4620      	mov	r0, r4
 8003c1a:	f7fc bec7 	b.w	80009ac <PE_Clear_RxEvent>

08003c1e <.text_9>:
 8003c1e:	6960      	ldr	r0, [r4, #20]
 8003c20:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8003c24:	6160      	str	r0, [r4, #20]
 8003c26:	2203      	movs	r2, #3
 8003c28:	7462      	strb	r2, [r4, #17]
 8003c2a:	2500      	movs	r5, #0
 8003c2c:	7808      	ldrb	r0, [r1, #0]
 8003c2e:	2814      	cmp	r0, #20
 8003c30:	4770      	bx	lr

08003c32 <.text_10>:
 8003c32:	2100      	movs	r1, #0
 8003c34:	4620      	mov	r0, r4
 8003c36:	f7fd bc17 	b.w	8001468 <PE_Send_CtrlMessage>

08003c3a <PE_ExtRevisionInteroperability_Cable>:
 8003c3a:	6842      	ldr	r2, [r0, #4]
 8003c3c:	6812      	ldr	r2, [r2, #0]
 8003c3e:	f002 0303 	and.w	r3, r2, #3
 8003c42:	4299      	cmp	r1, r3
 8003c44:	bf28      	it	cs
 8003c46:	4619      	movcs	r1, r3
 8003c48:	f361 629b 	bfi	r2, r1, #26, #2
 8003c4c:	6841      	ldr	r1, [r0, #4]
 8003c4e:	600a      	str	r2, [r1, #0]
 8003c50:	f3c2 6181 	ubfx	r1, r2, #26, #2
 8003c54:	7c00      	ldrb	r0, [r0, #16]
 8003c56:	f001 b9d5 	b.w	8005004 <USBPD_PRL_CBL_SetHeaderSpecification>
	...

08003c5c <USBPD_PE_SVDM_RequestIdentity>:
 8003c5c:	b570      	push	{r4, r5, r6, lr}
 8003c5e:	4ab4      	ldr	r2, [pc, #720]	@ (8003f30 <.text_16>)
 8003c60:	4603      	mov	r3, r0
 8003c62:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003c66:	6823      	ldr	r3, [r4, #0]
 8003c68:	685d      	ldr	r5, [r3, #4]
 8003c6a:	2210      	movs	r2, #16
 8003c6c:	f3c5 2340 	ubfx	r3, r5, #9, #1
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	bf1e      	ittt	ne
 8003c74:	68e3      	ldrne	r3, [r4, #12]
 8003c76:	2b00      	cmpne	r3, #0
 8003c78:	2902      	cmpne	r1, #2
 8003c7a:	d101      	bne.n	8003c80 <USBPD_PE_SVDM_RequestIdentity+0x24>
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	e027      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c80:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003c84:	782b      	ldrb	r3, [r5, #0]
 8003c86:	b913      	cbnz	r3, 8003c8e <USBPD_PE_SVDM_RequestIdentity+0x32>
 8003c88:	f000 f849 	bl	8003d1e <.text_4>
 8003c8c:	b90b      	cbnz	r3, 8003c92 <USBPD_PE_SVDM_RequestIdentity+0x36>
 8003c8e:	2203      	movs	r2, #3
 8003c90:	e01e      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c92:	7069      	strb	r1, [r5, #1]
 8003c94:	b111      	cbz	r1, 8003c9c <USBPD_PE_SVDM_RequestIdentity+0x40>
 8003c96:	2901      	cmp	r1, #1
 8003c98:	d008      	beq.n	8003cac <USBPD_PE_SVDM_RequestIdentity+0x50>
 8003c9a:	e019      	b.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003c9c:	6861      	ldr	r1, [r4, #4]
 8003c9e:	680b      	ldr	r3, [r1, #0]
 8003ca0:	f3c3 2102 	ubfx	r1, r3, #8, #3
 8003ca4:	2903      	cmp	r1, #3
 8003ca6:	d113      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003ca8:	217d      	movs	r1, #125	@ 0x7d
 8003caa:	e00c      	b.n	8003cc6 <USBPD_PE_SVDM_RequestIdentity+0x6a>
 8003cac:	6861      	ldr	r1, [r4, #4]
 8003cae:	6809      	ldr	r1, [r1, #0]
 8003cb0:	f240 7304 	movw	r3, #1796	@ 0x704
 8003cb4:	400b      	ands	r3, r1
 8003cb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003cba:	bf1c      	itt	ne
 8003cbc:	f3c1 2102 	ubfxne	r1, r1, #8, #3
 8003cc0:	2903      	cmpne	r1, #3
 8003cc2:	d105      	bne.n	8003cd0 <USBPD_PE_SVDM_RequestIdentity+0x74>
 8003cc4:	2105      	movs	r1, #5
 8003cc6:	7029      	strb	r1, [r5, #0]
 8003cc8:	68a2      	ldr	r2, [r4, #8]
 8003cca:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003ccc:	4788      	blx	r1
 8003cce:	2200      	movs	r2, #0
 8003cd0:	4610      	mov	r0, r2
 8003cd2:	bd70      	pop	{r4, r5, r6, pc}

08003cd4 <USBPD_PE_SVDM_RequestSVID>:
 8003cd4:	b570      	push	{r4, r5, r6, lr}
 8003cd6:	f000 f923 	bl	8003f20 <.text_15>
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	bf14      	ite	ne
 8003cde:	2902      	cmpne	r1, #2
 8003ce0:	2202      	moveq	r2, #2
 8003ce2:	d01a      	beq.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003ce4:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003ce8:	782b      	ldrb	r3, [r5, #0]
 8003cea:	b913      	cbnz	r3, 8003cf2 <USBPD_PE_SVDM_RequestSVID+0x1e>
 8003cec:	f000 f817 	bl	8003d1e <.text_4>
 8003cf0:	b90b      	cbnz	r3, 8003cf6 <USBPD_PE_SVDM_RequestSVID+0x22>
 8003cf2:	2203      	movs	r2, #3
 8003cf4:	e011      	b.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cf6:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003cfa:	2b03      	cmp	r3, #3
 8003cfc:	d10d      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003cfe:	237f      	movs	r3, #127	@ 0x7f
 8003d00:	7069      	strb	r1, [r5, #1]
 8003d02:	702b      	strb	r3, [r5, #0]
 8003d04:	b129      	cbz	r1, 8003d12 <USBPD_PE_SVDM_RequestSVID+0x3e>
 8003d06:	2901      	cmp	r1, #1
 8003d08:	d107      	bne.n	8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d0a:	6961      	ldr	r1, [r4, #20]
 8003d0c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d10:	b119      	cbz	r1, 8003d1a <USBPD_PE_SVDM_RequestSVID+0x46>
 8003d12:	68a1      	ldr	r1, [r4, #8]
 8003d14:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d16:	4790      	blx	r2
 8003d18:	2200      	movs	r2, #0
 8003d1a:	4610      	mov	r0, r2
 8003d1c:	bd70      	pop	{r4, r5, r6, pc}

08003d1e <.text_4>:
 8003d1e:	6863      	ldr	r3, [r4, #4]
 8003d20:	681e      	ldr	r6, [r3, #0]
 8003d22:	f3c6 3300 	ubfx	r3, r6, #12, #1
 8003d26:	4770      	bx	lr

08003d28 <USBPD_PE_SVDM_RequestMode>:
 8003d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2a:	f000 f8d3 	bl	8003ed4 <.text_13>
 8003d2e:	68ec      	ldr	r4, [r5, #12]
 8003d30:	2310      	movs	r3, #16
 8003d32:	2c00      	cmp	r4, #0
 8003d34:	bf14      	ite	ne
 8003d36:	2902      	cmpne	r1, #2
 8003d38:	2302      	moveq	r3, #2
 8003d3a:	d01e      	beq.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d3c:	f105 0632 	add.w	r6, r5, #50	@ 0x32
 8003d40:	7834      	ldrb	r4, [r6, #0]
 8003d42:	b924      	cbnz	r4, 8003d4e <USBPD_PE_SVDM_RequestMode+0x26>
 8003d44:	686c      	ldr	r4, [r5, #4]
 8003d46:	6827      	ldr	r7, [r4, #0]
 8003d48:	f3c7 3400 	ubfx	r4, r7, #12, #1
 8003d4c:	b90c      	cbnz	r4, 8003d52 <USBPD_PE_SVDM_RequestMode+0x2a>
 8003d4e:	2303      	movs	r3, #3
 8003d50:	e013      	b.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d52:	f3c7 2402 	ubfx	r4, r7, #8, #3
 8003d56:	2c03      	cmp	r4, #3
 8003d58:	d10f      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d5a:	2481      	movs	r4, #129	@ 0x81
 8003d5c:	7071      	strb	r1, [r6, #1]
 8003d5e:	7034      	strb	r4, [r6, #0]
 8003d60:	f8a5 2258 	strh.w	r2, [r5, #600]	@ 0x258
 8003d64:	b129      	cbz	r1, 8003d72 <USBPD_PE_SVDM_RequestMode+0x4a>
 8003d66:	2901      	cmp	r1, #1
 8003d68:	d107      	bne.n	8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d6a:	6969      	ldr	r1, [r5, #20]
 8003d6c:	f3c1 4100 	ubfx	r1, r1, #16, #1
 8003d70:	b119      	cbz	r1, 8003d7a <USBPD_PE_SVDM_RequestMode+0x52>
 8003d72:	68a9      	ldr	r1, [r5, #8]
 8003d74:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003d76:	4790      	blx	r2
 8003d78:	2300      	movs	r3, #0
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003d7e <USBPD_PE_SVDM_RequestModeEnter>:
 8003d7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d80:	f000 f854 	bl	8003e2c <.text_10>
 8003d84:	b90d      	cbnz	r5, 8003d8a <USBPD_PE_SVDM_RequestModeEnter+0xc>
 8003d86:	2402      	movs	r4, #2
 8003d88:	e01b      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d8a:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003d8e:	783d      	ldrb	r5, [r7, #0]
 8003d90:	b915      	cbnz	r5, 8003d98 <USBPD_PE_SVDM_RequestModeEnter+0x1a>
 8003d92:	f000 f845 	bl	8003e20 <.text_9>
 8003d96:	b90d      	cbnz	r5, 8003d9c <USBPD_PE_SVDM_RequestModeEnter+0x1e>
 8003d98:	2403      	movs	r4, #3
 8003d9a:	e012      	b.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003d9c:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003da0:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003da4:	d10d      	bne.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003da6:	2582      	movs	r5, #130	@ 0x82
 8003da8:	f000 f831 	bl	8003e0e <.text_8>
 8003dac:	b129      	cbz	r1, 8003dba <USBPD_PE_SVDM_RequestModeEnter+0x3c>
 8003dae:	2902      	cmp	r1, #2
 8003db0:	d000      	beq.n	8003db4 <USBPD_PE_SVDM_RequestModeEnter+0x36>
 8003db2:	d206      	bcs.n	8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003db4:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003db8:	b119      	cbz	r1, 8003dc2 <USBPD_PE_SVDM_RequestModeEnter+0x44>
 8003dba:	68b1      	ldr	r1, [r6, #8]
 8003dbc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003dbe:	4790      	blx	r2
 8003dc0:	2400      	movs	r4, #0
 8003dc2:	4620      	mov	r0, r4
 8003dc4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003dc6 <USBPD_PE_SVDM_RequestModeExit>:
 8003dc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003dc8:	f000 f830 	bl	8003e2c <.text_10>
 8003dcc:	b90d      	cbnz	r5, 8003dd2 <USBPD_PE_SVDM_RequestModeExit+0xc>
 8003dce:	2402      	movs	r4, #2
 8003dd0:	e01b      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dd2:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003dd6:	783d      	ldrb	r5, [r7, #0]
 8003dd8:	b915      	cbnz	r5, 8003de0 <USBPD_PE_SVDM_RequestModeExit+0x1a>
 8003dda:	f000 f821 	bl	8003e20 <.text_9>
 8003dde:	b90d      	cbnz	r5, 8003de4 <USBPD_PE_SVDM_RequestModeExit+0x1e>
 8003de0:	2403      	movs	r4, #3
 8003de2:	e012      	b.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003de4:	f40c 65e1 	and.w	r5, ip, #1800	@ 0x708
 8003de8:	f5b5 7f42 	cmp.w	r5, #776	@ 0x308
 8003dec:	d10d      	bne.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dee:	2583      	movs	r5, #131	@ 0x83
 8003df0:	f000 f80d 	bl	8003e0e <.text_8>
 8003df4:	b129      	cbz	r1, 8003e02 <USBPD_PE_SVDM_RequestModeExit+0x3c>
 8003df6:	2902      	cmp	r1, #2
 8003df8:	d000      	beq.n	8003dfc <USBPD_PE_SVDM_RequestModeExit+0x36>
 8003dfa:	d206      	bcs.n	8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003dfc:	f3c2 4100 	ubfx	r1, r2, #16, #1
 8003e00:	b119      	cbz	r1, 8003e0a <USBPD_PE_SVDM_RequestModeExit+0x44>
 8003e02:	68b1      	ldr	r1, [r6, #8]
 8003e04:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003e06:	4790      	blx	r2
 8003e08:	2400      	movs	r4, #0
 8003e0a:	4620      	mov	r0, r4
 8003e0c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e0e <.text_8>:
 8003e0e:	7079      	strb	r1, [r7, #1]
 8003e10:	703d      	strb	r5, [r7, #0]
 8003e12:	f8a6 2258 	strh.w	r2, [r6, #600]	@ 0x258
 8003e16:	6972      	ldr	r2, [r6, #20]
 8003e18:	f363 1288 	bfi	r2, r3, #6, #3
 8003e1c:	6172      	str	r2, [r6, #20]
 8003e1e:	4770      	bx	lr

08003e20 <.text_9>:
 8003e20:	6875      	ldr	r5, [r6, #4]
 8003e22:	f8d5 c000 	ldr.w	ip, [r5]
 8003e26:	f3cc 3500 	ubfx	r5, ip, #12, #1
 8003e2a:	4770      	bx	lr

08003e2c <.text_10>:
 8003e2c:	4c40      	ldr	r4, [pc, #256]	@ (8003f30 <.text_16>)
 8003e2e:	4605      	mov	r5, r0
 8003e30:	f854 6025 	ldr.w	r6, [r4, r5, lsl #2]
 8003e34:	68f5      	ldr	r5, [r6, #12]
 8003e36:	2410      	movs	r4, #16
 8003e38:	4770      	bx	lr

08003e3a <USBPD_PE_SVDM_RequestSpecific>:
 8003e3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e3c:	f7ff fff6 	bl	8003e2c <.text_10>
 8003e40:	b90d      	cbnz	r5, 8003e46 <USBPD_PE_SVDM_RequestSpecific+0xc>
 8003e42:	2402      	movs	r4, #2
 8003e44:	e01d      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e46:	f106 0732 	add.w	r7, r6, #50	@ 0x32
 8003e4a:	783d      	ldrb	r5, [r7, #0]
 8003e4c:	b915      	cbnz	r5, 8003e54 <USBPD_PE_SVDM_RequestSpecific+0x1a>
 8003e4e:	f7ff ffe7 	bl	8003e20 <.text_9>
 8003e52:	b90d      	cbnz	r5, 8003e58 <USBPD_PE_SVDM_RequestSpecific+0x1e>
 8003e54:	2403      	movs	r4, #3
 8003e56:	e014      	b.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e58:	6975      	ldr	r5, [r6, #20]
 8003e5a:	f3c5 4500 	ubfx	r5, r5, #16, #1
 8003e5e:	b90d      	cbnz	r5, 8003e64 <USBPD_PE_SVDM_RequestSpecific+0x2a>
 8003e60:	000d      	movs	r5, r1
 8003e62:	d10e      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e64:	f3cc 2502 	ubfx	r5, ip, #8, #3
 8003e68:	2d03      	cmp	r5, #3
 8003e6a:	d10a      	bne.n	8003e82 <USBPD_PE_SVDM_RequestSpecific+0x48>
 8003e6c:	7079      	strb	r1, [r7, #1]
 8003e6e:	2400      	movs	r4, #0
 8003e70:	2185      	movs	r1, #133	@ 0x85
 8003e72:	7039      	strb	r1, [r7, #0]
 8003e74:	f506 7115 	add.w	r1, r6, #596	@ 0x254
 8003e78:	600a      	str	r2, [r1, #0]
 8003e7a:	808b      	strh	r3, [r1, #4]
 8003e7c:	68b1      	ldr	r1, [r6, #8]
 8003e7e:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003e80:	4790      	blx	r2
 8003e82:	4620      	mov	r0, r4
 8003e84:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08003e86 <USBPD_PE_SVDM_RequestAttention>:
 8003e86:	b570      	push	{r4, r5, r6, lr}
 8003e88:	f000 f824 	bl	8003ed4 <.text_13>
 8003e8c:	68eb      	ldr	r3, [r5, #12]
 8003e8e:	2410      	movs	r4, #16
 8003e90:	b103      	cbz	r3, 8003e94 <USBPD_PE_SVDM_RequestAttention+0xe>
 8003e92:	b109      	cbz	r1, 8003e98 <USBPD_PE_SVDM_RequestAttention+0x12>
 8003e94:	2402      	movs	r4, #2
 8003e96:	e01b      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003e98:	f105 0332 	add.w	r3, r5, #50	@ 0x32
 8003e9c:	7819      	ldrb	r1, [r3, #0]
 8003e9e:	b921      	cbnz	r1, 8003eaa <USBPD_PE_SVDM_RequestAttention+0x24>
 8003ea0:	6869      	ldr	r1, [r5, #4]
 8003ea2:	680e      	ldr	r6, [r1, #0]
 8003ea4:	f3c6 3100 	ubfx	r1, r6, #12, #1
 8003ea8:	b909      	cbnz	r1, 8003eae <USBPD_PE_SVDM_RequestAttention+0x28>
 8003eaa:	2403      	movs	r4, #3
 8003eac:	e010      	b.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eae:	f3c6 2102 	ubfx	r1, r6, #8, #3
 8003eb2:	2903      	cmp	r1, #3
 8003eb4:	d10c      	bne.n	8003ed0 <USBPD_PE_SVDM_RequestAttention+0x4a>
 8003eb6:	2100      	movs	r1, #0
 8003eb8:	7059      	strb	r1, [r3, #1]
 8003eba:	2484      	movs	r4, #132	@ 0x84
 8003ebc:	701c      	strb	r4, [r3, #0]
 8003ebe:	f505 7115 	add.w	r1, r5, #596	@ 0x254
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	600b      	str	r3, [r1, #0]
 8003ec6:	808a      	strh	r2, [r1, #4]
 8003ec8:	2400      	movs	r4, #0
 8003eca:	68a9      	ldr	r1, [r5, #8]
 8003ecc:	6a8a      	ldr	r2, [r1, #40]	@ 0x28
 8003ece:	4790      	blx	r2
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	bd70      	pop	{r4, r5, r6, pc}

08003ed4 <.text_13>:
 8003ed4:	4b16      	ldr	r3, [pc, #88]	@ (8003f30 <.text_16>)
 8003ed6:	4604      	mov	r4, r0
 8003ed8:	f853 5024 	ldr.w	r5, [r3, r4, lsl #2]
 8003edc:	4770      	bx	lr

08003ede <USBPD_PE_UVDM_RequestMessage>:
 8003ede:	b570      	push	{r4, r5, r6, lr}
 8003ee0:	f000 f81e 	bl	8003f20 <.text_15>
 8003ee4:	b90b      	cbnz	r3, 8003eea <USBPD_PE_UVDM_RequestMessage+0xc>
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	e018      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003eea:	f104 0532 	add.w	r5, r4, #50	@ 0x32
 8003eee:	782b      	ldrb	r3, [r5, #0]
 8003ef0:	b913      	cbnz	r3, 8003ef8 <USBPD_PE_UVDM_RequestMessage+0x1a>
 8003ef2:	f7ff ff14 	bl	8003d1e <.text_4>
 8003ef6:	b90b      	cbnz	r3, 8003efc <USBPD_PE_UVDM_RequestMessage+0x1e>
 8003ef8:	2203      	movs	r2, #3
 8003efa:	e00f      	b.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003efc:	f3c6 33c0 	ubfx	r3, r6, #15, #1
 8003f00:	b90b      	cbnz	r3, 8003f06 <USBPD_PE_UVDM_RequestMessage+0x28>
 8003f02:	000b      	movs	r3, r1
 8003f04:	d10a      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f06:	f3c6 2302 	ubfx	r3, r6, #8, #3
 8003f0a:	2b03      	cmp	r3, #3
 8003f0c:	d106      	bne.n	8003f1c <USBPD_PE_UVDM_RequestMessage+0x3e>
 8003f0e:	7069      	strb	r1, [r5, #1]
 8003f10:	2186      	movs	r1, #134	@ 0x86
 8003f12:	7029      	strb	r1, [r5, #0]
 8003f14:	68a2      	ldr	r2, [r4, #8]
 8003f16:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8003f18:	4788      	blx	r1
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	4610      	mov	r0, r2
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <.text_15>:
 8003f20:	4a03      	ldr	r2, [pc, #12]	@ (8003f30 <.text_16>)
 8003f22:	4603      	mov	r3, r0
 8003f24:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8003f28:	68e3      	ldr	r3, [r4, #12]
 8003f2a:	2210      	movs	r2, #16
 8003f2c:	4770      	bx	lr
	...

08003f30 <.text_16>:
 8003f30:	200001bc 	.word	0x200001bc

08003f34 <PE_Receive_SVDM>:
 8003f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f36:	4604      	mov	r4, r0
 8003f38:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 8003f3c:	f204 4294 	addw	r2, r4, #1172	@ 0x494
 8003f40:	8808      	ldrh	r0, [r1, #0]
 8003f42:	0b00      	lsrs	r0, r0, #12
 8003f44:	f000 0007 	and.w	r0, r0, #7
 8003f48:	1e43      	subs	r3, r0, #1
 8003f4a:	7613      	strb	r3, [r2, #24]
 8003f4c:	f894 0031 	ldrb.w	r0, [r4, #49]	@ 0x31
 8003f50:	2800      	cmp	r0, #0
 8003f52:	d16e      	bne.n	8004032 <PE_Receive_SVDM+0xfe>
 8003f54:	e010      	b.n	8003f78 <PE_Receive_SVDM+0x44>
 8003f56:	684b      	ldr	r3, [r1, #4]
 8003f58:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8003f5c:	799d      	ldrb	r5, [r3, #6]
 8003f5e:	79de      	ldrb	r6, [r3, #7]
 8003f60:	eb05 2706 	add.w	r7, r5, r6, lsl #8
 8003f64:	7a1d      	ldrb	r5, [r3, #8]
 8003f66:	7a5b      	ldrb	r3, [r3, #9]
 8003f68:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8003f6c:	eb07 6703 	add.w	r7, r7, r3, lsl #24
 8003f70:	f842 7020 	str.w	r7, [r2, r0, lsl #2]
 8003f74:	1c40      	adds	r0, r0, #1
 8003f76:	b2c0      	uxtb	r0, r0
 8003f78:	7e15      	ldrb	r5, [r2, #24]
 8003f7a:	42a8      	cmp	r0, r5
 8003f7c:	dbeb      	blt.n	8003f56 <PE_Receive_SVDM+0x22>
 8003f7e:	f894 3250 	ldrb.w	r3, [r4, #592]	@ 0x250
 8003f82:	f003 031f 	and.w	r3, r3, #31
 8003f86:	1e5b      	subs	r3, r3, #1
 8003f88:	f248 0119 	movw	r1, #32793	@ 0x8019
 8003f8c:	f248 000f 	movw	r0, #32783	@ 0x800f
 8003f90:	d00d      	beq.n	8003fae <PE_Receive_SVDM+0x7a>
 8003f92:	1e5b      	subs	r3, r3, #1
 8003f94:	d028      	beq.n	8003fe8 <PE_Receive_SVDM+0xb4>
 8003f96:	1e5b      	subs	r3, r3, #1
 8003f98:	d02b      	beq.n	8003ff2 <PE_Receive_SVDM+0xbe>
 8003f9a:	1e5b      	subs	r3, r3, #1
 8003f9c:	d02e      	beq.n	8003ffc <PE_Receive_SVDM+0xc8>
 8003f9e:	1e5b      	subs	r3, r3, #1
 8003fa0:	d031      	beq.n	8004006 <PE_Receive_SVDM+0xd2>
 8003fa2:	1e5b      	subs	r3, r3, #1
 8003fa4:	d034      	beq.n	8004010 <PE_Receive_SVDM+0xdc>
 8003fa6:	3b0a      	subs	r3, #10
 8003fa8:	2b0f      	cmp	r3, #15
 8003faa:	d93d      	bls.n	8004028 <PE_Receive_SVDM+0xf4>
 8003fac:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8003fae:	2150      	movs	r1, #80	@ 0x50
 8003fb0:	6862      	ldr	r2, [r4, #4]
 8003fb2:	7721      	strb	r1, [r4, #28]
 8003fb4:	6813      	ldr	r3, [r2, #0]
 8003fb6:	f8d4 1250 	ldr.w	r1, [r4, #592]	@ 0x250
 8003fba:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fbe:	f3c3 1240 	ubfx	r2, r3, #5, #1
 8003fc2:	4291      	cmp	r1, r2
 8003fc4:	da04      	bge.n	8003fd0 <PE_Receive_SVDM+0x9c>
 8003fc6:	f8d4 1250 	ldr.w	r1, [r4, #592]	@ 0x250
 8003fca:	f3c1 3141 	ubfx	r1, r1, #13, #2
 8003fce:	e003      	b.n	8003fd8 <PE_Receive_SVDM+0xa4>
 8003fd0:	6861      	ldr	r1, [r4, #4]
 8003fd2:	680a      	ldr	r2, [r1, #0]
 8003fd4:	f3c2 1140 	ubfx	r1, r2, #5, #1
 8003fd8:	6862      	ldr	r2, [r4, #4]
 8003fda:	6813      	ldr	r3, [r2, #0]
 8003fdc:	f361 1345 	bfi	r3, r1, #5, #1
 8003fe0:	6013      	str	r3, [r2, #0]
 8003fe2:	83e0      	strh	r0, [r4, #30]
 8003fe4:	2075      	movs	r0, #117	@ 0x75
 8003fe6:	e023      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003fe8:	2152      	movs	r1, #82	@ 0x52
 8003fea:	7721      	strb	r1, [r4, #28]
 8003fec:	83e0      	strh	r0, [r4, #30]
 8003fee:	2076      	movs	r0, #118	@ 0x76
 8003ff0:	e01e      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ff2:	2153      	movs	r1, #83	@ 0x53
 8003ff4:	7721      	strb	r1, [r4, #28]
 8003ff6:	83e0      	strh	r0, [r4, #30]
 8003ff8:	2078      	movs	r0, #120	@ 0x78
 8003ffa:	e019      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8003ffc:	2254      	movs	r2, #84	@ 0x54
 8003ffe:	7722      	strb	r2, [r4, #28]
 8004000:	83e1      	strh	r1, [r4, #30]
 8004002:	2079      	movs	r0, #121	@ 0x79
 8004004:	e014      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004006:	2255      	movs	r2, #85	@ 0x55
 8004008:	7722      	strb	r2, [r4, #28]
 800400a:	83e1      	strh	r1, [r4, #30]
 800400c:	207a      	movs	r0, #122	@ 0x7a
 800400e:	e00f      	b.n	8004030 <PE_Receive_SVDM+0xfc>
 8004010:	68e0      	ldr	r0, [r4, #12]
 8004012:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8004014:	b12b      	cbz	r3, 8004022 <PE_Receive_SVDM+0xee>
 8004016:	0029      	movs	r1, r5
 8004018:	6812      	ldr	r2, [r2, #0]
 800401a:	7c20      	ldrb	r0, [r4, #16]
 800401c:	bf18      	it	ne
 800401e:	2101      	movne	r1, #1
 8004020:	4798      	blx	r3
 8004022:	2103      	movs	r1, #3
 8004024:	7461      	strb	r1, [r4, #17]
 8004026:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
 8004028:	225a      	movs	r2, #90	@ 0x5a
 800402a:	7722      	strb	r2, [r4, #28]
 800402c:	83e0      	strh	r0, [r4, #30]
 800402e:	207b      	movs	r0, #123	@ 0x7b
 8004030:	7460      	strb	r0, [r4, #17]
 8004032:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004034 <PE_StateMachine_VDM>:
 8004034:	e92d 47fb 	stmdb	sp!, {r0, r1, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004038:	4604      	mov	r4, r0
 800403a:	b099      	sub	sp, #100	@ 0x64
 800403c:	f894 c011 	ldrb.w	ip, [r4, #17]
 8004040:	f1ac 0075 	sub.w	r0, ip, #117	@ 0x75
 8004044:	2807      	cmp	r0, #7
 8004046:	f04f 0802 	mov.w	r8, #2
 800404a:	d203      	bcs.n	8004054 <PE_StateMachine_VDM+0x20>
 800404c:	7809      	ldrb	r1, [r1, #0]
 800404e:	2914      	cmp	r1, #20
 8004050:	f040 84ea 	bne.w	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004054:	2305      	movs	r3, #5
 8004056:	2003      	movs	r0, #3
 8004058:	2204      	movs	r2, #4
 800405a:	f1bc 0f75 	cmp.w	ip, #117	@ 0x75
 800405e:	f104 0534 	add.w	r5, r4, #52	@ 0x34
 8004062:	f104 0731 	add.w	r7, r4, #49	@ 0x31
 8004066:	f504 7614 	add.w	r6, r4, #592	@ 0x250
 800406a:	f04f 0a01 	mov.w	sl, #1
 800406e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8004072:	f248 091e 	movw	r9, #32798	@ 0x801e
 8004076:	d04c      	beq.n	8004112 <PE_StateMachine_VDM+0xde>
 8004078:	f1bc 0f76 	cmp.w	ip, #118	@ 0x76
 800407c:	f000 80a4 	beq.w	80041c8 <PE_StateMachine_VDM+0x194>
 8004080:	f1bc 0f77 	cmp.w	ip, #119	@ 0x77
 8004084:	f000 811c 	beq.w	80042c0 <PE_StateMachine_VDM+0x28c>
 8004088:	f1bc 0f78 	cmp.w	ip, #120	@ 0x78
 800408c:	f000 8172 	beq.w	8004374 <PE_StateMachine_VDM+0x340>
 8004090:	f1bc 0f79 	cmp.w	ip, #121	@ 0x79
 8004094:	f000 81b3 	beq.w	80043fe <PE_StateMachine_VDM+0x3ca>
 8004098:	f1bc 0f7a 	cmp.w	ip, #122	@ 0x7a
 800409c:	f000 81cf 	beq.w	800443e <PE_StateMachine_VDM+0x40a>
 80040a0:	f1bc 0f7b 	cmp.w	ip, #123	@ 0x7b
 80040a4:	f000 81f9 	beq.w	800449a <PE_StateMachine_VDM+0x466>
 80040a8:	f1bc 0f7d 	cmp.w	ip, #125	@ 0x7d
 80040ac:	f000 8231 	beq.w	8004512 <PE_StateMachine_VDM+0x4de>
 80040b0:	f1bc 0f7f 	cmp.w	ip, #127	@ 0x7f
 80040b4:	f000 8293 	beq.w	80045de <PE_StateMachine_VDM+0x5aa>
 80040b8:	f1bc 0f81 	cmp.w	ip, #129	@ 0x81
 80040bc:	f000 82da 	beq.w	8004674 <PE_StateMachine_VDM+0x640>
 80040c0:	f1bc 0f82 	cmp.w	ip, #130	@ 0x82
 80040c4:	f000 8331 	beq.w	800472a <PE_StateMachine_VDM+0x6f6>
 80040c8:	f1bc 0f83 	cmp.w	ip, #131	@ 0x83
 80040cc:	f000 8393 	beq.w	80047f6 <PE_StateMachine_VDM+0x7c2>
 80040d0:	f1bc 0f84 	cmp.w	ip, #132	@ 0x84
 80040d4:	f000 848c 	beq.w	80049f0 <PE_StateMachine_VDM+0x9bc>
 80040d8:	f1bc 0f85 	cmp.w	ip, #133	@ 0x85
 80040dc:	f000 83f9 	beq.w	80048d2 <PE_StateMachine_VDM+0x89e>
 80040e0:	f1bc 0f87 	cmp.w	ip, #135	@ 0x87
 80040e4:	f000 8241 	beq.w	800456a <PE_StateMachine_VDM+0x536>
 80040e8:	f1bc 0f89 	cmp.w	ip, #137	@ 0x89
 80040ec:	f000 828f 	beq.w	800460e <PE_StateMachine_VDM+0x5da>
 80040f0:	f1bc 0f8b 	cmp.w	ip, #139	@ 0x8b
 80040f4:	f000 82de 	beq.w	80046b4 <PE_StateMachine_VDM+0x680>
 80040f8:	f1bc 0f8c 	cmp.w	ip, #140	@ 0x8c
 80040fc:	f000 832d 	beq.w	800475a <PE_StateMachine_VDM+0x726>
 8004100:	f1bc 0f8d 	cmp.w	ip, #141	@ 0x8d
 8004104:	f000 839a 	beq.w	800483c <PE_StateMachine_VDM+0x808>
 8004108:	f1bc 0f8f 	cmp.w	ip, #143	@ 0x8f
 800410c:	f000 8403 	beq.w	8004916 <PE_StateMachine_VDM+0x8e2>
 8004110:	e125      	b.n	800435e <PE_StateMachine_VDM+0x32a>
 8004112:	f000 fd12 	bl	8004b3a <.text_34>
 8004116:	f000 8466 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 800411a:	6830      	ldr	r0, [r6, #0]
 800411c:	f36a 0004 	bfi	r0, sl, #0, #5
 8004120:	f000 fcca 	bl	8004ab8 <.text_28+0x4>
 8004124:	f000 fc9e 	bl	8004a64 <.text_25>
 8004128:	bf1f      	itttt	ne
 800412a:	68e0      	ldrne	r0, [r4, #12]
 800412c:	2800      	cmpne	r0, #0
 800412e:	6802      	ldrne	r2, [r0, #0]
 8004130:	2a00      	cmpne	r2, #0
 8004132:	d03d      	beq.n	80041b0 <PE_StateMachine_VDM+0x17c>
 8004134:	0c09      	lsrs	r1, r1, #16
 8004136:	f5b1 4f7f 	cmp.w	r1, #65280	@ 0xff00
 800413a:	d139      	bne.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800413c:	7c20      	ldrb	r0, [r4, #16]
 800413e:	a908      	add	r1, sp, #32
 8004140:	4790      	blx	r2
 8004142:	2803      	cmp	r0, #3
 8004144:	d002      	beq.n	800414c <PE_StateMachine_VDM+0x118>
 8004146:	280f      	cmp	r0, #15
 8004148:	d003      	beq.n	8004152 <PE_StateMachine_VDM+0x11e>
 800414a:	e031      	b.n	80041b0 <PE_StateMachine_VDM+0x17c>
 800414c:	f000 fce9 	bl	8004b22 <.text_31>
 8004150:	e030      	b.n	80041b4 <PE_StateMachine_VDM+0x180>
 8004152:	f000 fcf7 	bl	8004b44 <.text_35>
 8004156:	a811      	add	r0, sp, #68	@ 0x44
 8004158:	9908      	ldr	r1, [sp, #32]
 800415a:	6041      	str	r1, [r0, #4]
 800415c:	2504      	movs	r5, #4
 800415e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004160:	6081      	str	r1, [r0, #8]
 8004162:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8004164:	60c1      	str	r1, [r0, #12]
 8004166:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800416a:	f3c1 0140 	ubfx	r1, r1, #1, #1
 800416e:	b111      	cbz	r1, 8004176 <PE_StateMachine_VDM+0x142>
 8004170:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8004172:	6101      	str	r1, [r0, #16]
 8004174:	2505      	movs	r5, #5
 8004176:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800417a:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800417e:	b121      	cbz	r1, 800418a <PE_StateMachine_VDM+0x156>
 8004180:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8004182:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 8004186:	1c6d      	adds	r5, r5, #1
 8004188:	b2ed      	uxtb	r5, r5
 800418a:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 800418e:	f3c1 1100 	ubfx	r1, r1, #4, #1
 8004192:	b181      	cbz	r1, 80041b6 <PE_StateMachine_VDM+0x182>
 8004194:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8004198:	f3c1 01c0 	ubfx	r1, r1, #3, #1
 800419c:	b119      	cbz	r1, 80041a6 <PE_StateMachine_VDM+0x172>
 800419e:	2100      	movs	r1, #0
 80041a0:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041a4:	1c6d      	adds	r5, r5, #1
 80041a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80041a8:	f840 1025 	str.w	r1, [r0, r5, lsl #2]
 80041ac:	1c6d      	adds	r5, r5, #1
 80041ae:	e002      	b.n	80041b6 <PE_StateMachine_VDM+0x182>
 80041b0:	f000 fcbb 	bl	8004b2a <.text_32>
 80041b4:	6030      	str	r0, [r6, #0]
 80041b6:	6831      	ldr	r1, [r6, #0]
 80041b8:	2000      	movs	r0, #0
 80041ba:	2203      	movs	r2, #3
 80041bc:	9111      	str	r1, [sp, #68]	@ 0x44
 80041be:	9002      	str	r0, [sp, #8]
 80041c0:	9201      	str	r2, [sp, #4]
 80041c2:	9500      	str	r5, [sp, #0]
 80041c4:	ab11      	add	r3, sp, #68	@ 0x44
 80041c6:	e19f      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80041c8:	f000 fcb7 	bl	8004b3a <.text_34>
 80041cc:	d07a      	beq.n	80042c4 <PE_StateMachine_VDM+0x290>
 80041ce:	6830      	ldr	r0, [r6, #0]
 80041d0:	f368 0004 	bfi	r0, r8, #0, #5
 80041d4:	6030      	str	r0, [r6, #0]
 80041d6:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 80041da:	6030      	str	r0, [r6, #0]
 80041dc:	6860      	ldr	r0, [r4, #4]
 80041de:	6801      	ldr	r1, [r0, #0]
 80041e0:	6830      	ldr	r0, [r6, #0]
 80041e2:	f3c1 1140 	ubfx	r1, r1, #5, #1
 80041e6:	f420 40c0 	bic.w	r0, r0, #24576	@ 0x6000
 80041ea:	ea40 3041 	orr.w	r0, r0, r1, lsl #13
 80041ee:	6030      	str	r0, [r6, #0]
 80041f0:	6861      	ldr	r1, [r4, #4]
 80041f2:	780a      	ldrb	r2, [r1, #0]
 80041f4:	f002 020b 	and.w	r2, r2, #11
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	bf1e      	ittt	ne
 80041fc:	68e1      	ldrne	r1, [r4, #12]
 80041fe:	684b      	ldrne	r3, [r1, #4]
 8004200:	2b00      	cmpne	r3, #0
 8004202:	d051      	beq.n	80042a8 <PE_StateMachine_VDM+0x274>
 8004204:	0c00      	lsrs	r0, r0, #16
 8004206:	f5b0 4f7f 	cmp.w	r0, #65280	@ 0xff00
 800420a:	d14d      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800420c:	7c20      	ldrb	r0, [r4, #16]
 800420e:	f204 42ad 	addw	r2, r4, #1197	@ 0x4ad
 8004212:	a903      	add	r1, sp, #12
 8004214:	4798      	blx	r3
 8004216:	2803      	cmp	r0, #3
 8004218:	d043      	beq.n	80042a2 <PE_StateMachine_VDM+0x26e>
 800421a:	280f      	cmp	r0, #15
 800421c:	d144      	bne.n	80042a8 <PE_StateMachine_VDM+0x274>
 800421e:	f000 fc91 	bl	8004b44 <.text_35>
 8004222:	211c      	movs	r1, #28
 8004224:	a804      	add	r0, sp, #16
 8004226:	f016 fa35 	bl	801a694 <__aeabi_memclr>
 800422a:	2500      	movs	r5, #0
 800422c:	2300      	movs	r3, #0
 800422e:	f204 42ac 	addw	r2, r4, #1196	@ 0x4ac
 8004232:	e01b      	b.n	800426c <PE_StateMachine_VDM+0x238>
 8004234:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8004238:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 800423c:	f83e 9013 	ldrh.w	r9, [lr, r3, lsl #1]
 8004240:	ea4c 4c09 	orr.w	ip, ip, r9, lsl #16
 8004244:	f841 c020 	str.w	ip, [r1, r0, lsl #2]
 8004248:	e00f      	b.n	800426a <PE_StateMachine_VDM+0x236>
 800424a:	1c6d      	adds	r5, r5, #1
 800424c:	0858      	lsrs	r0, r3, #1
 800424e:	ea5f 7cc3 	movs.w	ip, r3, lsl #31
 8004252:	a905      	add	r1, sp, #20
 8004254:	d5ee      	bpl.n	8004234 <PE_StateMachine_VDM+0x200>
 8004256:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800425a:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800425e:	f83c 9013 	ldrh.w	r9, [ip, r3, lsl #1]
 8004262:	ea49 0e0e 	orr.w	lr, r9, lr
 8004266:	f841 e020 	str.w	lr, [r1, r0, lsl #2]
 800426a:	1c5b      	adds	r3, r3, #1
 800426c:	7850      	ldrb	r0, [r2, #1]
 800426e:	4283      	cmp	r3, r0
 8004270:	bf38      	it	cc
 8004272:	2b0c      	cmpcc	r3, #12
 8004274:	d3e9      	bcc.n	800424a <PE_StateMachine_VDM+0x216>
 8004276:	f204 41ac 	addw	r1, r4, #1196	@ 0x4ac
 800427a:	1b40      	subs	r0, r0, r5
 800427c:	7048      	strb	r0, [r1, #1]
 800427e:	b2e8      	uxtb	r0, r5
 8004280:	280c      	cmp	r0, #12
 8004282:	d109      	bne.n	8004298 <PE_StateMachine_VDM+0x264>
 8004284:	6831      	ldr	r1, [r6, #0]
 8004286:	9104      	str	r1, [sp, #16]
 8004288:	2000      	movs	r0, #0
 800428a:	2277      	movs	r2, #119	@ 0x77
 800428c:	2107      	movs	r1, #7
 800428e:	9002      	str	r0, [sp, #8]
 8004290:	9201      	str	r2, [sp, #4]
 8004292:	9100      	str	r1, [sp, #0]
 8004294:	ab04      	add	r3, sp, #16
 8004296:	e05b      	b.n	8004350 <PE_StateMachine_VDM+0x31c>
 8004298:	062d      	lsls	r5, r5, #24
 800429a:	0e6d      	lsrs	r5, r5, #25
 800429c:	6830      	ldr	r0, [r6, #0]
 800429e:	1cad      	adds	r5, r5, #2
 80042a0:	e005      	b.n	80042ae <PE_StateMachine_VDM+0x27a>
 80042a2:	f000 fc3e 	bl	8004b22 <.text_31>
 80042a6:	e001      	b.n	80042ac <PE_StateMachine_VDM+0x278>
 80042a8:	f000 fc3f 	bl	8004b2a <.text_32>
 80042ac:	6030      	str	r0, [r6, #0]
 80042ae:	9004      	str	r0, [sp, #16]
 80042b0:	2103      	movs	r1, #3
 80042b2:	2000      	movs	r0, #0
 80042b4:	b2ed      	uxtb	r5, r5
 80042b6:	9002      	str	r0, [sp, #8]
 80042b8:	9101      	str	r1, [sp, #4]
 80042ba:	9500      	str	r5, [sp, #0]
 80042bc:	ab04      	add	r3, sp, #16
 80042be:	e123      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80042c0:	f000 fc37 	bl	8004b32 <.text_33>
 80042c4:	f000 838f 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 80042c8:	6830      	ldr	r0, [r6, #0]
 80042ca:	f368 0004 	bfi	r0, r8, #0, #5
 80042ce:	6030      	str	r0, [r6, #0]
 80042d0:	aa03      	add	r2, sp, #12
 80042d2:	f000 fbef 	bl	8004ab4 <.text_28>
 80042d6:	f36a 1187 	bfi	r1, sl, #6, #2
 80042da:	6031      	str	r1, [r6, #0]
 80042dc:	a904      	add	r1, sp, #16
 80042de:	68e3      	ldr	r3, [r4, #12]
 80042e0:	7c20      	ldrb	r0, [r4, #16]
 80042e2:	685d      	ldr	r5, [r3, #4]
 80042e4:	47a8      	blx	r5
 80042e6:	211c      	movs	r1, #28
 80042e8:	a805      	add	r0, sp, #20
 80042ea:	f016 f9d3 	bl	801a694 <__aeabi_memclr>
 80042ee:	2300      	movs	r3, #0
 80042f0:	2500      	movs	r5, #0
 80042f2:	f204 42ac 	addw	r2, r4, #1196	@ 0x4ac
 80042f6:	e018      	b.n	800432a <PE_StateMachine_VDM+0x2f6>
 80042f8:	f8dd e010 	ldr.w	lr, [sp, #16]
 80042fc:	f851 c020 	ldr.w	ip, [r1, r0, lsl #2]
 8004300:	f83e 6015 	ldrh.w	r6, [lr, r5, lsl #1]
 8004304:	ea4c 4606 	orr.w	r6, ip, r6, lsl #16
 8004308:	e00c      	b.n	8004324 <PE_StateMachine_VDM+0x2f0>
 800430a:	1c5b      	adds	r3, r3, #1
 800430c:	0868      	lsrs	r0, r5, #1
 800430e:	07ee      	lsls	r6, r5, #31
 8004310:	a906      	add	r1, sp, #24
 8004312:	d5f1      	bpl.n	80042f8 <PE_StateMachine_VDM+0x2c4>
 8004314:	f8dd c010 	ldr.w	ip, [sp, #16]
 8004318:	f851 e020 	ldr.w	lr, [r1, r0, lsl #2]
 800431c:	f83c 6015 	ldrh.w	r6, [ip, r5, lsl #1]
 8004320:	ea46 060e 	orr.w	r6, r6, lr
 8004324:	f841 6020 	str.w	r6, [r1, r0, lsl #2]
 8004328:	1c6d      	adds	r5, r5, #1
 800432a:	7850      	ldrb	r0, [r2, #1]
 800432c:	4285      	cmp	r5, r0
 800432e:	bf38      	it	cc
 8004330:	2d0c      	cmpcc	r5, #12
 8004332:	d3ea      	bcc.n	800430a <PE_StateMachine_VDM+0x2d6>
 8004334:	f204 41ac 	addw	r1, r4, #1196	@ 0x4ac
 8004338:	1ac0      	subs	r0, r0, r3
 800433a:	7048      	strb	r0, [r1, #1]
 800433c:	b2d8      	uxtb	r0, r3
 800433e:	280c      	cmp	r0, #12
 8004340:	d10e      	bne.n	8004360 <PE_StateMachine_VDM+0x32c>
 8004342:	2100      	movs	r1, #0
 8004344:	2077      	movs	r0, #119	@ 0x77
 8004346:	2207      	movs	r2, #7
 8004348:	9102      	str	r1, [sp, #8]
 800434a:	9001      	str	r0, [sp, #4]
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	ab05      	add	r3, sp, #20
 8004350:	7839      	ldrb	r1, [r7, #0]
 8004352:	220f      	movs	r2, #15
 8004354:	f000 fc84 	bl	8004c60 <.text_44>
 8004358:	f248 000f 	movw	r0, #32783	@ 0x800f
 800435c:	83e0      	strh	r0, [r4, #30]
 800435e:	e363      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004360:	061b      	lsls	r3, r3, #24
 8004362:	0e5b      	lsrs	r3, r3, #25
 8004364:	1c9b      	adds	r3, r3, #2
 8004366:	b2db      	uxtb	r3, r3
 8004368:	9300      	str	r3, [sp, #0]
 800436a:	2100      	movs	r1, #0
 800436c:	2003      	movs	r0, #3
 800436e:	9102      	str	r1, [sp, #8]
 8004370:	9001      	str	r0, [sp, #4]
 8004372:	e042      	b.n	80043fa <PE_StateMachine_VDM+0x3c6>
 8004374:	8be1      	ldrh	r1, [r4, #30]
 8004376:	2501      	movs	r5, #1
 8004378:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 800437c:	d061      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 800437e:	6831      	ldr	r1, [r6, #0]
 8004380:	f360 0104 	bfi	r1, r0, #0, #5
 8004384:	f000 fb74 	bl	8004a70 <.text_26>
 8004388:	f000 fb6c 	bl	8004a64 <.text_25>
 800438c:	bf1e      	ittt	ne
 800438e:	68e0      	ldrne	r0, [r4, #12]
 8004390:	f8d0 c008 	ldrne.w	ip, [r0, #8]
 8004394:	f1bc 0f00 	cmpne.w	ip, #0
 8004398:	d025      	beq.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 800439a:	7c20      	ldrb	r0, [r4, #16]
 800439c:	ab03      	add	r3, sp, #12
 800439e:	aa04      	add	r2, sp, #16
 80043a0:	0c09      	lsrs	r1, r1, #16
 80043a2:	47e0      	blx	ip
 80043a4:	2803      	cmp	r0, #3
 80043a6:	d002      	beq.n	80043ae <PE_StateMachine_VDM+0x37a>
 80043a8:	280f      	cmp	r0, #15
 80043aa:	d005      	beq.n	80043b8 <PE_StateMachine_VDM+0x384>
 80043ac:	e01b      	b.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043ae:	6832      	ldr	r2, [r6, #0]
 80043b0:	f042 02c0 	orr.w	r2, r2, #192	@ 0xc0
 80043b4:	6032      	str	r2, [r6, #0]
 80043b6:	e019      	b.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043b8:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80043bc:	b198      	cbz	r0, 80043e6 <PE_StateMachine_VDM+0x3b2>
 80043be:	2807      	cmp	r0, #7
 80043c0:	d211      	bcs.n	80043e6 <PE_StateMachine_VDM+0x3b2>
 80043c2:	f000 fbbf 	bl	8004b44 <.text_35>
 80043c6:	ab06      	add	r3, sp, #24
 80043c8:	2000      	movs	r0, #0
 80043ca:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80043ce:	4288      	cmp	r0, r1
 80043d0:	d20c      	bcs.n	80043ec <PE_StateMachine_VDM+0x3b8>
 80043d2:	9a04      	ldr	r2, [sp, #16]
 80043d4:	6811      	ldr	r1, [r2, #0]
 80043d6:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
 80043da:	1c6d      	adds	r5, r5, #1
 80043dc:	9904      	ldr	r1, [sp, #16]
 80043de:	1d0a      	adds	r2, r1, #4
 80043e0:	9204      	str	r2, [sp, #16]
 80043e2:	1c40      	adds	r0, r0, #1
 80043e4:	e7f1      	b.n	80043ca <PE_StateMachine_VDM+0x396>
 80043e6:	f000 fba0 	bl	8004b2a <.text_32>
 80043ea:	6030      	str	r0, [r6, #0]
 80043ec:	2000      	movs	r0, #0
 80043ee:	6831      	ldr	r1, [r6, #0]
 80043f0:	9105      	str	r1, [sp, #20]
 80043f2:	2203      	movs	r2, #3
 80043f4:	9002      	str	r0, [sp, #8]
 80043f6:	9201      	str	r2, [sp, #4]
 80043f8:	9500      	str	r5, [sp, #0]
 80043fa:	ab05      	add	r3, sp, #20
 80043fc:	e084      	b.n	8004508 <PE_StateMachine_VDM+0x4d4>
 80043fe:	f000 fb98 	bl	8004b32 <.text_33>
 8004402:	d01e      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 8004404:	6830      	ldr	r0, [r6, #0]
 8004406:	f362 0004 	bfi	r0, r2, #0, #5
 800440a:	f000 fb40 	bl	8004a8e <.text_27>
 800440e:	2800      	cmp	r0, #0
 8004410:	d134      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004412:	68e1      	ldr	r1, [r4, #12]
 8004414:	68c8      	ldr	r0, [r1, #12]
 8004416:	2800      	cmp	r0, #0
 8004418:	d030      	beq.n	800447c <PE_StateMachine_VDM+0x448>
 800441a:	f000 fbcf 	bl	8004bbc <.text_40>
 800441e:	68dd      	ldr	r5, [r3, #12]
 8004420:	47a8      	blx	r5
 8004422:	2803      	cmp	r0, #3
 8004424:	d027      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004426:	280f      	cmp	r0, #15
 8004428:	d128      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 800442a:	f000 fb8b 	bl	8004b44 <.text_35>
 800442e:	f3c0 2002 	ubfx	r0, r0, #8, #3
 8004432:	6961      	ldr	r1, [r4, #20]
 8004434:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004438:	ea41 1180 	orr.w	r1, r1, r0, lsl #6
 800443c:	e019      	b.n	8004472 <PE_StateMachine_VDM+0x43e>
 800443e:	f000 fb78 	bl	8004b32 <.text_33>
 8004442:	f000 82d0 	beq.w	80049e6 <PE_StateMachine_VDM+0x9b2>
 8004446:	6830      	ldr	r0, [r6, #0]
 8004448:	f363 0004 	bfi	r0, r3, #0, #5
 800444c:	f000 fb1f 	bl	8004a8e <.text_27>
 8004450:	b9a0      	cbnz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004452:	68e1      	ldr	r1, [r4, #12]
 8004454:	6908      	ldr	r0, [r1, #16]
 8004456:	b188      	cbz	r0, 800447c <PE_StateMachine_VDM+0x448>
 8004458:	f000 fbb0 	bl	8004bbc <.text_40>
 800445c:	691d      	ldr	r5, [r3, #16]
 800445e:	47a8      	blx	r5
 8004460:	2803      	cmp	r0, #3
 8004462:	d008      	beq.n	8004476 <PE_StateMachine_VDM+0x442>
 8004464:	280f      	cmp	r0, #15
 8004466:	d109      	bne.n	800447c <PE_StateMachine_VDM+0x448>
 8004468:	f000 fb6c 	bl	8004b44 <.text_35>
 800446c:	6961      	ldr	r1, [r4, #20]
 800446e:	f421 71e0 	bic.w	r1, r1, #448	@ 0x1c0
 8004472:	6161      	str	r1, [r4, #20]
 8004474:	e005      	b.n	8004482 <PE_StateMachine_VDM+0x44e>
 8004476:	f000 fb54 	bl	8004b22 <.text_31>
 800447a:	e001      	b.n	8004480 <PE_StateMachine_VDM+0x44c>
 800447c:	f000 fb55 	bl	8004b2a <.text_32>
 8004480:	6030      	str	r0, [r6, #0]
 8004482:	2100      	movs	r1, #0
 8004484:	9102      	str	r1, [sp, #8]
 8004486:	2203      	movs	r2, #3
 8004488:	9201      	str	r2, [sp, #4]
 800448a:	f8cd a000 	str.w	sl, [sp]
 800448e:	4633      	mov	r3, r6
 8004490:	7839      	ldrb	r1, [r7, #0]
 8004492:	220f      	movs	r2, #15
 8004494:	f000 fb89 	bl	8004baa <.text_38+0x6>
 8004498:	e2c6      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800449a:	f000 fb4e 	bl	8004b3a <.text_34>
 800449e:	d0d0      	beq.n	8004442 <PE_StateMachine_VDM+0x40e>
 80044a0:	68e0      	ldr	r0, [r4, #12]
 80044a2:	f8d0 c034 	ldr.w	ip, [r0, #52]	@ 0x34
 80044a6:	f1bc 0f00 	cmp.w	ip, #0
 80044aa:	d021      	beq.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044ac:	7831      	ldrb	r1, [r6, #0]
 80044ae:	7c20      	ldrb	r0, [r4, #16]
 80044b0:	f204 49ac 	addw	r9, r4, #1196	@ 0x4ac
 80044b4:	f204 4394 	addw	r3, r4, #1172	@ 0x494
 80044b8:	464a      	mov	r2, r9
 80044ba:	f001 011f 	and.w	r1, r1, #31
 80044be:	47e0      	blx	ip
 80044c0:	2803      	cmp	r0, #3
 80044c2:	d012      	beq.n	80044ea <PE_StateMachine_VDM+0x4b6>
 80044c4:	280f      	cmp	r0, #15
 80044c6:	d113      	bne.n	80044f0 <PE_StateMachine_VDM+0x4bc>
 80044c8:	f000 fb3c 	bl	8004b44 <.text_35>
 80044cc:	2000      	movs	r0, #0
 80044ce:	f899 1000 	ldrb.w	r1, [r9]
 80044d2:	4288      	cmp	r0, r1
 80044d4:	d20f      	bcs.n	80044f6 <PE_StateMachine_VDM+0x4c2>
 80044d6:	f204 4294 	addw	r2, r4, #1172	@ 0x494
 80044da:	1c6d      	adds	r5, r5, #1
 80044dc:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 80044e0:	aa04      	add	r2, sp, #16
 80044e2:	f842 1020 	str.w	r1, [r2, r0, lsl #2]
 80044e6:	1c40      	adds	r0, r0, #1
 80044e8:	e7f1      	b.n	80044ce <PE_StateMachine_VDM+0x49a>
 80044ea:	f000 fb1a 	bl	8004b22 <.text_31>
 80044ee:	e001      	b.n	80044f4 <PE_StateMachine_VDM+0x4c0>
 80044f0:	f000 fb1b 	bl	8004b2a <.text_32>
 80044f4:	6030      	str	r0, [r6, #0]
 80044f6:	6831      	ldr	r1, [r6, #0]
 80044f8:	2000      	movs	r0, #0
 80044fa:	2203      	movs	r2, #3
 80044fc:	b2ed      	uxtb	r5, r5
 80044fe:	9103      	str	r1, [sp, #12]
 8004500:	9002      	str	r0, [sp, #8]
 8004502:	9201      	str	r2, [sp, #4]
 8004504:	9500      	str	r5, [sp, #0]
 8004506:	ab03      	add	r3, sp, #12
 8004508:	7839      	ldrb	r1, [r7, #0]
 800450a:	220f      	movs	r2, #15
 800450c:	f000 fba8 	bl	8004c60 <.text_44>
 8004510:	e28a      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 8004512:	6830      	ldr	r0, [r6, #0]
 8004514:	f36a 0004 	bfi	r0, sl, #0, #5
 8004518:	6030      	str	r0, [r6, #0]
 800451a:	4633      	mov	r3, r6
 800451c:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004520:	6030      	str	r0, [r6, #0]
 8004522:	6860      	ldr	r0, [r4, #4]
 8004524:	6802      	ldr	r2, [r0, #0]
 8004526:	f3c2 1040 	ubfx	r0, r2, #5, #1
 800452a:	6832      	ldr	r2, [r6, #0]
 800452c:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004530:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004534:	6032      	str	r2, [r6, #0]
 8004536:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800453a:	6032      	str	r2, [r6, #0]
 800453c:	f022 02c0 	bic.w	r2, r2, #192	@ 0xc0
 8004540:	6032      	str	r2, [r6, #0]
 8004542:	f361 421f 	bfi	r2, r1, #16, #16
 8004546:	6032      	str	r2, [r6, #0]
 8004548:	f000 fb7e 	bl	8004c48 <.text_42+0x6>
 800454c:	bf1d      	ittte	ne
 800454e:	6960      	ldrne	r0, [r4, #20]
 8004550:	0880      	lsrne	r0, r0, #2
 8004552:	f000 0001 	andne.w	r0, r0, #1
 8004556:	2002      	moveq	r0, #2
 8004558:	f000 fa80 	bl	8004a5c <.text_24>
 800455c:	2087      	movs	r0, #135	@ 0x87
 800455e:	f000 fb21 	bl	8004ba4 <.text_38>
 8004562:	2800      	cmp	r0, #0
 8004564:	d1d4      	bne.n	8004510 <PE_StateMachine_VDM+0x4dc>
 8004566:	2050      	movs	r0, #80	@ 0x50
 8004568:	e0a1      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800456a:	f000 fa6f 	bl	8004a4c <.text_22>
 800456e:	f000 fa69 	bl	8004a44 <.text_21>
 8004572:	d163      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004574:	8829      	ldrh	r1, [r5, #0]
 8004576:	0bc8      	lsrs	r0, r1, #15
 8004578:	d160      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800457a:	f000 fa5f 	bl	8004a3c <.text_20>
 800457e:	d062      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004580:	f000 fa67 	bl	8004a52 <.text_23>
 8004584:	d15a      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004586:	2a14      	cmp	r2, #20
 8004588:	d001      	beq.n	800458e <PE_StateMachine_VDM+0x55a>
 800458a:	f000 fb11 	bl	8004bb0 <.text_39>
 800458e:	6868      	ldr	r0, [r5, #4]
 8004590:	7887      	ldrb	r7, [r0, #2]
 8004592:	f007 011f 	and.w	r1, r7, #31
 8004596:	2901      	cmp	r1, #1
 8004598:	d150      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800459a:	f3c7 1081 	ubfx	r0, r7, #6, #2
 800459e:	2800      	cmp	r0, #0
 80045a0:	d051      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80045a2:	68e1      	ldr	r1, [r4, #12]
 80045a4:	6948      	ldr	r0, [r1, #20]
 80045a6:	2800      	cmp	r0, #0
 80045a8:	f000 8202 	beq.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045ac:	f3c7 1081 	ubfx	r0, r7, #6, #2
 80045b0:	2801      	cmp	r0, #1
 80045b2:	f040 81fd 	bne.w	80049b0 <PE_StateMachine_VDM+0x97c>
 80045b6:	6868      	ldr	r0, [r5, #4]
 80045b8:	1d81      	adds	r1, r0, #6
 80045ba:	7c20      	ldrb	r0, [r4, #16]
 80045bc:	aa08      	add	r2, sp, #32
 80045be:	f000 fbb5 	bl	8004d2c <PE_SVDM_CheckIdentity>
 80045c2:	b950      	cbnz	r0, 80045da <PE_StateMachine_VDM+0x5a6>
 80045c4:	68e5      	ldr	r5, [r4, #12]
 80045c6:	7c20      	ldrb	r0, [r4, #16]
 80045c8:	f8d5 8014 	ldr.w	r8, [r5, #20]
 80045cc:	ab08      	add	r3, sp, #32
 80045ce:	f3c7 1281 	ubfx	r2, r7, #6, #2
 80045d2:	2100      	movs	r1, #0
 80045d4:	47c0      	blx	r8
 80045d6:	2151      	movs	r1, #81	@ 0x51
 80045d8:	e0a3      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045da:	211b      	movs	r1, #27
 80045dc:	e0a1      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 80045de:	f000 fa9a 	bl	8004b16 <.text_30>
 80045e2:	f368 0004 	bfi	r0, r8, #0, #5
 80045e6:	6030      	str	r0, [r6, #0]
 80045e8:	f000 fa64 	bl	8004ab4 <.text_28>
 80045ec:	f000 fb29 	bl	8004c42 <.text_42>
 80045f0:	bf1d      	ittte	ne
 80045f2:	6960      	ldrne	r0, [r4, #20]
 80045f4:	0880      	lsrne	r0, r0, #2
 80045f6:	f000 0001 	andne.w	r0, r0, #1
 80045fa:	2002      	moveq	r0, #2
 80045fc:	f000 fa2e 	bl	8004a5c <.text_24>
 8004600:	2089      	movs	r0, #137	@ 0x89
 8004602:	f000 facf 	bl	8004ba4 <.text_38>
 8004606:	2800      	cmp	r0, #0
 8004608:	d153      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 800460a:	2052      	movs	r0, #82	@ 0x52
 800460c:	e04f      	b.n	80046ae <PE_StateMachine_VDM+0x67a>
 800460e:	f000 fa1d 	bl	8004a4c <.text_22>
 8004612:	f000 fa17 	bl	8004a44 <.text_21>
 8004616:	d111      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 8004618:	8829      	ldrh	r1, [r5, #0]
 800461a:	0bc8      	lsrs	r0, r1, #15
 800461c:	d10e      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800461e:	f000 fa0d 	bl	8004a3c <.text_20>
 8004622:	d010      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 8004624:	f000 fa15 	bl	8004a52 <.text_23>
 8004628:	d108      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 800462a:	2a14      	cmp	r2, #20
 800462c:	d001      	beq.n	8004632 <PE_StateMachine_VDM+0x5fe>
 800462e:	f000 fabf 	bl	8004bb0 <.text_39>
 8004632:	6868      	ldr	r0, [r5, #4]
 8004634:	7886      	ldrb	r6, [r0, #2]
 8004636:	f006 011f 	and.w	r1, r6, #31
 800463a:	2902      	cmp	r1, #2
 800463c:	f040 8140 	bne.w	80048c0 <PE_StateMachine_VDM+0x88c>
 8004640:	f3c6 1081 	ubfx	r0, r6, #6, #2
 8004644:	2800      	cmp	r0, #0
 8004646:	f000 813b 	beq.w	80048c0 <PE_StateMachine_VDM+0x88c>
 800464a:	68e1      	ldr	r1, [r4, #12]
 800464c:	6988      	ldr	r0, [r1, #24]
 800464e:	2800      	cmp	r0, #0
 8004650:	d06a      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004652:	6868      	ldr	r0, [r5, #4]
 8004654:	1d81      	adds	r1, r0, #6
 8004656:	7c20      	ldrb	r0, [r4, #16]
 8004658:	aa08      	add	r2, sp, #32
 800465a:	f000 fc05 	bl	8004e68 <PE_SVDM_CheckSVIDs>
 800465e:	68e5      	ldr	r5, [r4, #12]
 8004660:	7839      	ldrb	r1, [r7, #0]
 8004662:	7c20      	ldrb	r0, [r4, #16]
 8004664:	f8d5 8018 	ldr.w	r8, [r5, #24]
 8004668:	ab08      	add	r3, sp, #32
 800466a:	f3c6 1281 	ubfx	r2, r6, #6, #2
 800466e:	47c0      	blx	r8
 8004670:	2153      	movs	r1, #83	@ 0x53
 8004672:	e056      	b.n	8004722 <PE_StateMachine_VDM+0x6ee>
 8004674:	6831      	ldr	r1, [r6, #0]
 8004676:	f021 01c0 	bic.w	r1, r1, #192	@ 0xc0
 800467a:	6031      	str	r1, [r6, #0]
 800467c:	4633      	mov	r3, r6
 800467e:	f360 0104 	bfi	r1, r0, #0, #5
 8004682:	6031      	str	r1, [r6, #0]
 8004684:	8930      	ldrh	r0, [r6, #8]
 8004686:	f360 411f 	bfi	r1, r0, #16, #16
 800468a:	f000 f9f1 	bl	8004a70 <.text_26>
 800468e:	f000 fad8 	bl	8004c42 <.text_42>
 8004692:	bf1d      	ittte	ne
 8004694:	6960      	ldrne	r0, [r4, #20]
 8004696:	0880      	lsrne	r0, r0, #2
 8004698:	f000 0001 	andne.w	r0, r0, #1
 800469c:	2002      	moveq	r0, #2
 800469e:	f000 f9dd 	bl	8004a5c <.text_24>
 80046a2:	208b      	movs	r0, #139	@ 0x8b
 80046a4:	f000 fa7e 	bl	8004ba4 <.text_38>
 80046a8:	2800      	cmp	r0, #0
 80046aa:	d102      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 80046ac:	2053      	movs	r0, #83	@ 0x53
 80046ae:	f000 f9bf 	bl	8004a30 <.text_19>
 80046b2:	e1b9      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80046b4:	f000 f9ca 	bl	8004a4c <.text_22>
 80046b8:	f000 f9c4 	bl	8004a44 <.text_21>
 80046bc:	d1be      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046be:	8829      	ldrh	r1, [r5, #0]
 80046c0:	0bc8      	lsrs	r0, r1, #15
 80046c2:	d1bb      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046c4:	f000 f9ba 	bl	8004a3c <.text_20>
 80046c8:	d0bd      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ca:	f000 f9c2 	bl	8004a52 <.text_23>
 80046ce:	d1b5      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046d0:	2a14      	cmp	r2, #20
 80046d2:	d001      	beq.n	80046d8 <PE_StateMachine_VDM+0x6a4>
 80046d4:	f000 fa6c 	bl	8004bb0 <.text_39>
 80046d8:	6868      	ldr	r0, [r5, #4]
 80046da:	f890 9002 	ldrb.w	r9, [r0, #2]
 80046de:	f009 011f 	and.w	r1, r9, #31
 80046e2:	2903      	cmp	r1, #3
 80046e4:	d1aa      	bne.n	800463c <PE_StateMachine_VDM+0x608>
 80046e6:	f3c9 1081 	ubfx	r0, r9, #6, #2
 80046ea:	2800      	cmp	r0, #0
 80046ec:	d0ab      	beq.n	8004646 <PE_StateMachine_VDM+0x612>
 80046ee:	68e1      	ldr	r1, [r4, #12]
 80046f0:	69c8      	ldr	r0, [r1, #28]
 80046f2:	2800      	cmp	r0, #0
 80046f4:	d018      	beq.n	8004728 <PE_StateMachine_VDM+0x6f4>
 80046f6:	6868      	ldr	r0, [r5, #4]
 80046f8:	6831      	ldr	r1, [r6, #0]
 80046fa:	1d82      	adds	r2, r0, #6
 80046fc:	7c20      	ldrb	r0, [r4, #16]
 80046fe:	ab08      	add	r3, sp, #32
 8004700:	0c09      	lsrs	r1, r1, #16
 8004702:	f000 fbe5 	bl	8004ed0 <PE_SVDM_CheckModes>
 8004706:	68e5      	ldr	r5, [r4, #12]
 8004708:	7839      	ldrb	r1, [r7, #0]
 800470a:	7c20      	ldrb	r0, [r4, #16]
 800470c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8004710:	ab08      	add	r3, sp, #32
 8004712:	f3c9 1281 	ubfx	r2, r9, #6, #2
 8004716:	47c0      	blx	r8
 8004718:	f3c9 1081 	ubfx	r0, r9, #6, #2
 800471c:	2801      	cmp	r0, #1
 800471e:	d103      	bne.n	8004728 <PE_StateMachine_VDM+0x6f4>
 8004720:	2154      	movs	r1, #84	@ 0x54
 8004722:	7c20      	ldrb	r0, [r4, #16]
 8004724:	f7fb ff17 	bl	8000556 <USBPD_PE_Notification>
 8004728:	e142      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 800472a:	f000 f9f4 	bl	8004b16 <.text_30>
 800472e:	f362 0004 	bfi	r0, r2, #0, #5
 8004732:	6030      	str	r0, [r6, #0]
 8004734:	f000 f9cf 	bl	8004ad6 <.text_29>
 8004738:	bf1d      	ittte	ne
 800473a:	6960      	ldrne	r0, [r4, #20]
 800473c:	0880      	lsrne	r0, r0, #2
 800473e:	f000 0001 	andne.w	r0, r0, #1
 8004742:	2002      	moveq	r0, #2
 8004744:	f000 f98a 	bl	8004a5c <.text_24>
 8004748:	208c      	movs	r0, #140	@ 0x8c
 800474a:	f000 fa2b 	bl	8004ba4 <.text_38>
 800474e:	2800      	cmp	r0, #0
 8004750:	d1af      	bne.n	80046b2 <PE_StateMachine_VDM+0x67e>
 8004752:	2054      	movs	r0, #84	@ 0x54
 8004754:	7720      	strb	r0, [r4, #28]
 8004756:	2134      	movs	r1, #52	@ 0x34
 8004758:	e067      	b.n	800482a <PE_StateMachine_VDM+0x7f6>
 800475a:	f000 f977 	bl	8004a4c <.text_22>
 800475e:	f000 f971 	bl	8004a44 <.text_21>
 8004762:	f04f 0934 	mov.w	r9, #52	@ 0x34
 8004766:	d16d      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004768:	8829      	ldrh	r1, [r5, #0]
 800476a:	0bc8      	lsrs	r0, r1, #15
 800476c:	d16a      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800476e:	f000 f965 	bl	8004a3c <.text_20>
 8004772:	d06d      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 8004774:	f000 f96d 	bl	8004a52 <.text_23>
 8004778:	d164      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 800477a:	2a14      	cmp	r2, #20
 800477c:	d001      	beq.n	8004782 <PE_StateMachine_VDM+0x74e>
 800477e:	f000 fa17 	bl	8004bb0 <.text_39>
 8004782:	2000      	movs	r0, #0
 8004784:	7720      	strb	r0, [r4, #28]
 8004786:	6869      	ldr	r1, [r5, #4]
 8004788:	f891 a002 	ldrb.w	sl, [r1, #2]
 800478c:	f00a 001f 	and.w	r0, sl, #31
 8004790:	2804      	cmp	r0, #4
 8004792:	d157      	bne.n	8004844 <PE_StateMachine_VDM+0x810>
 8004794:	f3ca 1081 	ubfx	r0, sl, #6, #2
 8004798:	2800      	cmp	r0, #0
 800479a:	d059      	beq.n	8004850 <PE_StateMachine_VDM+0x81c>
 800479c:	2801      	cmp	r0, #1
 800479e:	d00a      	beq.n	80047b6 <PE_StateMachine_VDM+0x782>
 80047a0:	d312      	bcc.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047a2:	2803      	cmp	r0, #3
 80047a4:	d00a      	beq.n	80047bc <PE_StateMachine_VDM+0x788>
 80047a6:	bf3f      	itttt	cc
 80047a8:	6960      	ldrcc	r0, [r4, #20]
 80047aa:	f420 70e0 	biccc.w	r0, r0, #448	@ 0x1c0
 80047ae:	6160      	strcc	r0, [r4, #20]
 80047b0:	f04f 0936 	movcc.w	r9, #54	@ 0x36
 80047b4:	e008      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047b6:	f04f 0935 	mov.w	r9, #53	@ 0x35
 80047ba:	e005      	b.n	80047c8 <PE_StateMachine_VDM+0x794>
 80047bc:	6960      	ldr	r0, [r4, #20]
 80047be:	f420 70e0 	bic.w	r0, r0, #448	@ 0x1c0
 80047c2:	6160      	str	r0, [r4, #20]
 80047c4:	f04f 0937 	mov.w	r9, #55	@ 0x37
 80047c8:	7c20      	ldrb	r0, [r4, #16]
 80047ca:	4649      	mov	r1, r9
 80047cc:	f7fb fec3 	bl	8000556 <USBPD_PE_Notification>
 80047d0:	68e1      	ldr	r1, [r4, #12]
 80047d2:	6a08      	ldr	r0, [r1, #32]
 80047d4:	2800      	cmp	r0, #0
 80047d6:	d00d      	beq.n	80047f4 <PE_StateMachine_VDM+0x7c0>
 80047d8:	6830      	ldr	r0, [r6, #0]
 80047da:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80047de:	9000      	str	r0, [sp, #0]
 80047e0:	f3ca 1281 	ubfx	r2, sl, #6, #2
 80047e4:	68e5      	ldr	r5, [r4, #12]
 80047e6:	6833      	ldr	r3, [r6, #0]
 80047e8:	7839      	ldrb	r1, [r7, #0]
 80047ea:	7c20      	ldrb	r0, [r4, #16]
 80047ec:	f8d5 8020 	ldr.w	r8, [r5, #32]
 80047f0:	0c1b      	lsrs	r3, r3, #16
 80047f2:	47c0      	blx	r8
 80047f4:	e0dc      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80047f6:	6830      	ldr	r0, [r6, #0]
 80047f8:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 80047fc:	6030      	str	r0, [r6, #0]
 80047fe:	f363 0004 	bfi	r0, r3, #0, #5
 8004802:	6030      	str	r0, [r6, #0]
 8004804:	4633      	mov	r3, r6
 8004806:	f000 f966 	bl	8004ad6 <.text_29>
 800480a:	bf1d      	ittte	ne
 800480c:	6960      	ldrne	r0, [r4, #20]
 800480e:	0880      	lsrne	r0, r0, #2
 8004810:	f000 0001 	andne.w	r0, r0, #1
 8004814:	2002      	moveq	r0, #2
 8004816:	f000 f921 	bl	8004a5c <.text_24>
 800481a:	208d      	movs	r0, #141	@ 0x8d
 800481c:	f000 f9c2 	bl	8004ba4 <.text_38>
 8004820:	2800      	cmp	r0, #0
 8004822:	d10a      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 8004824:	2055      	movs	r0, #85	@ 0x55
 8004826:	7720      	strb	r0, [r4, #28]
 8004828:	2155      	movs	r1, #85	@ 0x55
 800482a:	7c20      	ldrb	r0, [r4, #16]
 800482c:	f7fb fe93 	bl	8000556 <USBPD_PE_Notification>
 8004830:	f248 0032 	movw	r0, #32818	@ 0x8032
 8004834:	83e0      	strh	r0, [r4, #30]
 8004836:	f04f 0832 	mov.w	r8, #50	@ 0x32
 800483a:	e0f5      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 800483c:	f000 f906 	bl	8004a4c <.text_22>
 8004840:	f000 f900 	bl	8004a44 <.text_21>
 8004844:	d13c      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004846:	8829      	ldrh	r1, [r5, #0]
 8004848:	0bc8      	lsrs	r0, r1, #15
 800484a:	d139      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 800484c:	f000 f8f6 	bl	8004a3c <.text_20>
 8004850:	d036      	beq.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004852:	f000 f8fe 	bl	8004a52 <.text_23>
 8004856:	d133      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004858:	2a14      	cmp	r2, #20
 800485a:	d001      	beq.n	8004860 <PE_StateMachine_VDM+0x82c>
 800485c:	f000 f9a8 	bl	8004bb0 <.text_39>
 8004860:	2000      	movs	r0, #0
 8004862:	7720      	strb	r0, [r4, #28]
 8004864:	6869      	ldr	r1, [r5, #4]
 8004866:	f891 9002 	ldrb.w	r9, [r1, #2]
 800486a:	f009 001f 	and.w	r0, r9, #31
 800486e:	2805      	cmp	r0, #5
 8004870:	d126      	bne.n	80048c0 <PE_StateMachine_VDM+0x88c>
 8004872:	f3c9 1081 	ubfx	r0, r9, #6, #2
 8004876:	b318      	cbz	r0, 80048c0 <PE_StateMachine_VDM+0x88c>
 8004878:	2801      	cmp	r0, #1
 800487a:	d004      	beq.n	8004886 <PE_StateMachine_VDM+0x852>
 800487c:	d309      	bcc.n	8004892 <PE_StateMachine_VDM+0x85e>
 800487e:	2803      	cmp	r0, #3
 8004880:	d005      	beq.n	800488e <PE_StateMachine_VDM+0x85a>
 8004882:	d302      	bcc.n	800488a <PE_StateMachine_VDM+0x856>
 8004884:	e005      	b.n	8004892 <PE_StateMachine_VDM+0x85e>
 8004886:	2156      	movs	r1, #86	@ 0x56
 8004888:	e004      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488a:	2157      	movs	r1, #87	@ 0x57
 800488c:	e002      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 800488e:	2158      	movs	r1, #88	@ 0x58
 8004890:	e000      	b.n	8004894 <PE_StateMachine_VDM+0x860>
 8004892:	2155      	movs	r1, #85	@ 0x55
 8004894:	7c20      	ldrb	r0, [r4, #16]
 8004896:	f7fb fe5e 	bl	8000556 <USBPD_PE_Notification>
 800489a:	68e1      	ldr	r1, [r4, #12]
 800489c:	6a48      	ldr	r0, [r1, #36]	@ 0x24
 800489e:	2800      	cmp	r0, #0
 80048a0:	d00d      	beq.n	80048be <PE_StateMachine_VDM+0x88a>
 80048a2:	6830      	ldr	r0, [r6, #0]
 80048a4:	f3c0 2002 	ubfx	r0, r0, #8, #3
 80048a8:	9000      	str	r0, [sp, #0]
 80048aa:	f3c9 1281 	ubfx	r2, r9, #6, #2
 80048ae:	68e5      	ldr	r5, [r4, #12]
 80048b0:	6833      	ldr	r3, [r6, #0]
 80048b2:	7839      	ldrb	r1, [r7, #0]
 80048b4:	7c20      	ldrb	r0, [r4, #16]
 80048b6:	f8d5 8024 	ldr.w	r8, [r5, #36]	@ 0x24
 80048ba:	0c1b      	lsrs	r3, r3, #16
 80048bc:	47c0      	blx	r8
 80048be:	e077      	b.n	80049b0 <PE_StateMachine_VDM+0x97c>
 80048c0:	7828      	ldrb	r0, [r5, #0]
 80048c2:	f000 001f 	and.w	r0, r0, #31
 80048c6:	2810      	cmp	r0, #16
 80048c8:	d07a      	beq.n	80049c0 <PE_StateMachine_VDM+0x98c>
 80048ca:	f000 f932 	bl	8004b32 <.text_33>
 80048ce:	d1b4      	bne.n	800483a <PE_StateMachine_VDM+0x806>
 80048d0:	e089      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80048d2:	2100      	movs	r1, #0
 80048d4:	f88d 100c 	strb.w	r1, [sp, #12]
 80048d8:	f000 f939 	bl	8004b4e <.text_36>
 80048dc:	6b05      	ldr	r5, [r0, #48]	@ 0x30
 80048de:	b145      	cbz	r5, 80048f2 <PE_StateMachine_VDM+0x8be>
 80048e0:	a805      	add	r0, sp, #20
 80048e2:	9000      	str	r0, [sp, #0]
 80048e4:	ab03      	add	r3, sp, #12
 80048e6:	7832      	ldrb	r2, [r6, #0]
 80048e8:	7839      	ldrb	r1, [r7, #0]
 80048ea:	7c20      	ldrb	r0, [r4, #16]
 80048ec:	f002 021f 	and.w	r2, r2, #31
 80048f0:	47a8      	blx	r5
 80048f2:	f000 f94b 	bl	8004b8c <.text_37>
 80048f6:	bf1d      	ittte	ne
 80048f8:	6960      	ldrne	r0, [r4, #20]
 80048fa:	0880      	lsrne	r0, r0, #2
 80048fc:	f000 0001 	andne.w	r0, r0, #1
 8004900:	2002      	moveq	r0, #2
 8004902:	9002      	str	r0, [sp, #8]
 8004904:	208f      	movs	r0, #143	@ 0x8f
 8004906:	f000 f9a5 	bl	8004c54 <.text_43>
 800490a:	2800      	cmp	r0, #0
 800490c:	d102      	bne.n	8004914 <PE_StateMachine_VDM+0x8e0>
 800490e:	205a      	movs	r0, #90	@ 0x5a
 8004910:	f000 f88e 	bl	8004a30 <.text_19>
 8004914:	e086      	b.n	8004a24 <PE_StateMachine_VDM+0x9f0>
 8004916:	8828      	ldrh	r0, [r5, #0]
 8004918:	0b00      	lsrs	r0, r0, #12
 800491a:	f000 0007 	and.w	r0, r0, #7
 800491e:	1e41      	subs	r1, r0, #1
 8004920:	f88d 1004 	strb.w	r1, [sp, #4]
 8004924:	f000 f892 	bl	8004a4c <.text_22>
 8004928:	f000 f88c 	bl	8004a44 <.text_21>
 800492c:	d143      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 800492e:	8829      	ldrh	r1, [r5, #0]
 8004930:	0bc8      	lsrs	r0, r1, #15
 8004932:	d140      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004934:	f000 f882 	bl	8004a3c <.text_20>
 8004938:	d03d      	beq.n	80049b6 <PE_StateMachine_VDM+0x982>
 800493a:	f000 f88a 	bl	8004a52 <.text_23>
 800493e:	d13a      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004940:	2a14      	cmp	r2, #20
 8004942:	d001      	beq.n	8004948 <PE_StateMachine_VDM+0x914>
 8004944:	f000 f934 	bl	8004bb0 <.text_39>
 8004948:	6868      	ldr	r0, [r5, #4]
 800494a:	7882      	ldrb	r2, [r0, #2]
 800494c:	6870      	ldr	r0, [r6, #4]
 800494e:	f002 011f 	and.w	r1, r2, #31
 8004952:	4281      	cmp	r1, r0
 8004954:	d12f      	bne.n	80049b6 <PE_StateMachine_VDM+0x982>
 8004956:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800495a:	b360      	cbz	r0, 80049b6 <PE_StateMachine_VDM+0x982>
 800495c:	68e1      	ldr	r1, [r4, #12]
 800495e:	6b88      	ldr	r0, [r1, #56]	@ 0x38
 8004960:	b330      	cbz	r0, 80049b0 <PE_StateMachine_VDM+0x97c>
 8004962:	2000      	movs	r0, #0
 8004964:	e015      	b.n	8004992 <PE_StateMachine_VDM+0x95e>
 8004966:	6869      	ldr	r1, [r5, #4]
 8004968:	0083      	lsls	r3, r0, #2
 800496a:	eb01 0803 	add.w	r8, r1, r3
 800496e:	3108      	adds	r1, #8
 8004970:	f898 c006 	ldrb.w	ip, [r8, #6]
 8004974:	f898 e007 	ldrb.w	lr, [r8, #7]
 8004978:	5ccb      	ldrb	r3, [r1, r3]
 800497a:	f898 1009 	ldrb.w	r1, [r8, #9]
 800497e:	eb0c 260e 	add.w	r6, ip, lr, lsl #8
 8004982:	eb06 4603 	add.w	r6, r6, r3, lsl #16
 8004986:	ab02      	add	r3, sp, #8
 8004988:	eb06 6601 	add.w	r6, r6, r1, lsl #24
 800498c:	f843 6020 	str.w	r6, [r3, r0, lsl #2]
 8004990:	1c40      	adds	r0, r0, #1
 8004992:	f89d 1004 	ldrb.w	r1, [sp, #4]
 8004996:	4288      	cmp	r0, r1
 8004998:	d3e5      	bcc.n	8004966 <PE_StateMachine_VDM+0x932>
 800499a:	a802      	add	r0, sp, #8
 800499c:	9000      	str	r0, [sp, #0]
 800499e:	ab01      	add	r3, sp, #4
 80049a0:	68e5      	ldr	r5, [r4, #12]
 80049a2:	7839      	ldrb	r1, [r7, #0]
 80049a4:	7c20      	ldrb	r0, [r4, #16]
 80049a6:	f8d5 8038 	ldr.w	r8, [r5, #56]	@ 0x38
 80049aa:	f002 021f 	and.w	r2, r2, #31
 80049ae:	47c0      	blx	r8
 80049b0:	2000      	movs	r0, #0
 80049b2:	83e0      	strh	r0, [r4, #30]
 80049b4:	e017      	b.n	80049e6 <PE_StateMachine_VDM+0x9b2>
 80049b6:	7829      	ldrb	r1, [r5, #0]
 80049b8:	f001 011f 	and.w	r1, r1, #31
 80049bc:	2910      	cmp	r1, #16
 80049be:	d10f      	bne.n	80049e0 <PE_StateMachine_VDM+0x9ac>
 80049c0:	981a      	ldr	r0, [sp, #104]	@ 0x68
 80049c2:	7801      	ldrb	r1, [r0, #0]
 80049c4:	2914      	cmp	r1, #20
 80049c6:	d001      	beq.n	80049cc <PE_StateMachine_VDM+0x998>
 80049c8:	f000 f8f2 	bl	8004bb0 <.text_39>
 80049cc:	2000      	movs	r0, #0
 80049ce:	83e0      	strh	r0, [r4, #30]
 80049d0:	2103      	movs	r1, #3
 80049d2:	7461      	strb	r1, [r4, #17]
 80049d4:	4680      	mov	r8, r0
 80049d6:	7c20      	ldrb	r0, [r4, #16]
 80049d8:	2159      	movs	r1, #89	@ 0x59
 80049da:	f7fb fdbc 	bl	8000556 <USBPD_PE_Notification>
 80049de:	e023      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e0:	f000 f8a7 	bl	8004b32 <.text_33>
 80049e4:	d120      	bne.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049e6:	2103      	movs	r1, #3
 80049e8:	7461      	strb	r1, [r4, #17]
 80049ea:	f04f 0800 	mov.w	r8, #0
 80049ee:	e01b      	b.n	8004a28 <PE_StateMachine_VDM+0x9f4>
 80049f0:	2000      	movs	r0, #0
 80049f2:	f88d 000c 	strb.w	r0, [sp, #12]
 80049f6:	f000 f8aa 	bl	8004b4e <.text_36>
 80049fa:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80049fc:	b11b      	cbz	r3, 8004a06 <PE_StateMachine_VDM+0x9d2>
 80049fe:	7c20      	ldrb	r0, [r4, #16]
 8004a00:	aa05      	add	r2, sp, #20
 8004a02:	a903      	add	r1, sp, #12
 8004a04:	4798      	blx	r3
 8004a06:	f000 f8c1 	bl	8004b8c <.text_37>
 8004a0a:	bf1d      	ittte	ne
 8004a0c:	6960      	ldrne	r0, [r4, #20]
 8004a0e:	0880      	lsrne	r0, r0, #2
 8004a10:	f000 0001 	andne.w	r0, r0, #1
 8004a14:	2002      	moveq	r0, #2
 8004a16:	9002      	str	r0, [sp, #8]
 8004a18:	2003      	movs	r0, #3
 8004a1a:	f000 f91b 	bl	8004c54 <.text_43>
 8004a1e:	b908      	cbnz	r0, 8004a24 <PE_StateMachine_VDM+0x9f0>
 8004a20:	205a      	movs	r0, #90	@ 0x5a
 8004a22:	7720      	strb	r0, [r4, #28]
 8004a24:	2100      	movs	r1, #0
 8004a26:	7079      	strb	r1, [r7, #1]
 8004a28:	4640      	mov	r0, r8
 8004a2a:	b01c      	add	sp, #112	@ 0x70
 8004a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08004a30 <.text_19>:
 8004a30:	7720      	strb	r0, [r4, #28]
 8004a32:	f8a4 901e 	strh.w	r9, [r4, #30]
 8004a36:	f04f 081e 	mov.w	r8, #30
 8004a3a:	4770      	bx	lr

08004a3c <.text_20>:
 8004a3c:	f3c1 3002 	ubfx	r0, r1, #12, #3
 8004a40:	2800      	cmp	r0, #0
 8004a42:	4770      	bx	lr

08004a44 <.text_21>:
 8004a44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004a46:	780a      	ldrb	r2, [r1, #0]
 8004a48:	4282      	cmp	r2, r0
 8004a4a:	4770      	bx	lr

08004a4c <.text_22>:
 8004a4c:	7838      	ldrb	r0, [r7, #0]
 8004a4e:	f7fb bfe1 	b.w	8000a14 <PE_Convert_SOPRxEvent>

08004a52 <.text_23>:
 8004a52:	7828      	ldrb	r0, [r5, #0]
 8004a54:	f000 001f 	and.w	r0, r0, #31
 8004a58:	280f      	cmp	r0, #15
 8004a5a:	4770      	bx	lr

08004a5c <.text_24>:
 8004a5c:	9002      	str	r0, [sp, #8]
 8004a5e:	f8cd a000 	str.w	sl, [sp]
 8004a62:	4770      	bx	lr

08004a64 <.text_25>:
 8004a64:	6860      	ldr	r0, [r4, #4]
 8004a66:	7802      	ldrb	r2, [r0, #0]
 8004a68:	f002 020b 	and.w	r2, r2, #11
 8004a6c:	2a09      	cmp	r2, #9
 8004a6e:	4770      	bx	lr

08004a70 <.text_26>:
 8004a70:	6031      	str	r1, [r6, #0]
 8004a72:	f441 4100 	orr.w	r1, r1, #32768	@ 0x8000
 8004a76:	6031      	str	r1, [r6, #0]
 8004a78:	6860      	ldr	r0, [r4, #4]
 8004a7a:	6801      	ldr	r1, [r0, #0]
 8004a7c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004a80:	6831      	ldr	r1, [r6, #0]
 8004a82:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004a86:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004a8a:	6031      	str	r1, [r6, #0]
 8004a8c:	4770      	bx	lr

08004a8e <.text_27>:
 8004a8e:	6030      	str	r0, [r6, #0]
 8004a90:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004a94:	6030      	str	r0, [r6, #0]
 8004a96:	6860      	ldr	r0, [r4, #4]
 8004a98:	6832      	ldr	r2, [r6, #0]
 8004a9a:	6801      	ldr	r1, [r0, #0]
 8004a9c:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aa0:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004aa4:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004aa8:	6032      	str	r2, [r6, #0]
 8004aaa:	6860      	ldr	r0, [r4, #4]
 8004aac:	6801      	ldr	r1, [r0, #0]
 8004aae:	f3c1 00c0 	ubfx	r0, r1, #3, #1
 8004ab2:	4770      	bx	lr

08004ab4 <.text_28>:
 8004ab4:	f361 401f 	bfi	r0, r1, #16, #16
 8004ab8:	6030      	str	r0, [r6, #0]
 8004aba:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004abe:	6030      	str	r0, [r6, #0]
 8004ac0:	6860      	ldr	r0, [r4, #4]
 8004ac2:	6801      	ldr	r1, [r0, #0]
 8004ac4:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004ac8:	6831      	ldr	r1, [r6, #0]
 8004aca:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004ace:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004ad2:	6031      	str	r1, [r6, #0]
 8004ad4:	4770      	bx	lr

08004ad6 <.text_29>:
 8004ad6:	8931      	ldrh	r1, [r6, #8]
 8004ad8:	f361 401f 	bfi	r0, r1, #16, #16
 8004adc:	6030      	str	r0, [r6, #0]
 8004ade:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004ae2:	6030      	str	r0, [r6, #0]
 8004ae4:	6860      	ldr	r0, [r4, #4]
 8004ae6:	6832      	ldr	r2, [r6, #0]
 8004ae8:	6801      	ldr	r1, [r0, #0]
 8004aea:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004aee:	f422 42c0 	bic.w	r2, r2, #24576	@ 0x6000
 8004af2:	ea42 3240 	orr.w	r2, r2, r0, lsl #13
 8004af6:	6032      	str	r2, [r6, #0]
 8004af8:	6960      	ldr	r0, [r4, #20]
 8004afa:	6831      	ldr	r1, [r6, #0]
 8004afc:	f3c0 1082 	ubfx	r0, r0, #6, #3
 8004b00:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004b04:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8004b08:	6031      	str	r1, [r6, #0]
 8004b0a:	6860      	ldr	r0, [r4, #4]
 8004b0c:	6801      	ldr	r1, [r0, #0]
 8004b0e:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004b12:	2800      	cmp	r0, #0
 8004b14:	4770      	bx	lr

08004b16 <.text_30>:
 8004b16:	6830      	ldr	r0, [r6, #0]
 8004b18:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8004b1c:	6030      	str	r0, [r6, #0]
 8004b1e:	4633      	mov	r3, r6
 8004b20:	4770      	bx	lr

08004b22 <.text_31>:
 8004b22:	6830      	ldr	r0, [r6, #0]
 8004b24:	f040 00c0 	orr.w	r0, r0, #192	@ 0xc0
 8004b28:	4770      	bx	lr

08004b2a <.text_32>:
 8004b2a:	6830      	ldr	r0, [r6, #0]
 8004b2c:	f368 1087 	bfi	r0, r8, #6, #2
 8004b30:	4770      	bx	lr

08004b32 <.text_33>:
 8004b32:	8be0      	ldrh	r0, [r4, #30]
 8004b34:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b38:	4770      	bx	lr

08004b3a <.text_34>:
 8004b3a:	8be0      	ldrh	r0, [r4, #30]
 8004b3c:	2501      	movs	r5, #1
 8004b3e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 8004b42:	4770      	bx	lr

08004b44 <.text_35>:
 8004b44:	6830      	ldr	r0, [r6, #0]
 8004b46:	f36a 1087 	bfi	r0, sl, #6, #2
 8004b4a:	6030      	str	r0, [r6, #0]
 8004b4c:	4770      	bx	lr

08004b4e <.text_36>:
 8004b4e:	6830      	ldr	r0, [r6, #0]
 8004b50:	f020 00c0 	bic.w	r0, r0, #192	@ 0xc0
 8004b54:	6030      	str	r0, [r6, #0]
 8004b56:	6871      	ldr	r1, [r6, #4]
 8004b58:	f361 0004 	bfi	r0, r1, #0, #5
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	8931      	ldrh	r1, [r6, #8]
 8004b60:	f361 401f 	bfi	r0, r1, #16, #16
 8004b64:	6030      	str	r0, [r6, #0]
 8004b66:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8004b6a:	6030      	str	r0, [r6, #0]
 8004b6c:	6860      	ldr	r0, [r4, #4]
 8004b6e:	6801      	ldr	r1, [r0, #0]
 8004b70:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004b74:	6831      	ldr	r1, [r6, #0]
 8004b76:	f421 41c0 	bic.w	r1, r1, #24576	@ 0x6000
 8004b7a:	ea41 3140 	orr.w	r1, r1, r0, lsl #13
 8004b7e:	6031      	str	r1, [r6, #0]
 8004b80:	f36a 210a 	bfi	r1, sl, #8, #3
 8004b84:	6031      	str	r1, [r6, #0]
 8004b86:	9104      	str	r1, [sp, #16]
 8004b88:	68e0      	ldr	r0, [r4, #12]
 8004b8a:	4770      	bx	lr

08004b8c <.text_37>:
 8004b8c:	f89d 000c 	ldrb.w	r0, [sp, #12]
 8004b90:	1c40      	adds	r0, r0, #1
 8004b92:	f88d 000c 	strb.w	r0, [sp, #12]
 8004b96:	ab04      	add	r3, sp, #16
 8004b98:	6860      	ldr	r0, [r4, #4]
 8004b9a:	6801      	ldr	r1, [r0, #0]
 8004b9c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004ba0:	2800      	cmp	r0, #0
 8004ba2:	4770      	bx	lr

08004ba4 <.text_38>:
 8004ba4:	9001      	str	r0, [sp, #4]
 8004ba6:	220f      	movs	r2, #15
 8004ba8:	7839      	ldrb	r1, [r7, #0]
 8004baa:	4620      	mov	r0, r4
 8004bac:	f7fc bc89 	b.w	80014c2 <PE_Send_DataMessage>

08004bb0 <.text_39>:
 8004bb0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8004bb2:	2014      	movs	r0, #20
 8004bb4:	7008      	strb	r0, [r1, #0]
 8004bb6:	4620      	mov	r0, r4
 8004bb8:	f7fb bef8 	b.w	80009ac <PE_Clear_RxEvent>

08004bbc <.text_40>:
 8004bbc:	6830      	ldr	r0, [r6, #0]
 8004bbe:	68e3      	ldr	r3, [r4, #12]
 8004bc0:	f3c0 2202 	ubfx	r2, r0, #8, #3
 8004bc4:	0c01      	lsrs	r1, r0, #16
 8004bc6:	7c20      	ldrb	r0, [r4, #16]
 8004bc8:	4770      	bx	lr

08004bca <PE_StateMachine_UVDM>:
 8004bca:	b570      	push	{r4, r5, r6, lr}
 8004bcc:	2914      	cmp	r1, #20
 8004bce:	b08c      	sub	sp, #48	@ 0x30
 8004bd0:	4604      	mov	r4, r0
 8004bd2:	d134      	bne.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004bd4:	68e0      	ldr	r0, [r4, #12]
 8004bd6:	2800      	cmp	r0, #0
 8004bd8:	bf1c      	itt	ne
 8004bda:	6bc0      	ldrne	r0, [r0, #60]	@ 0x3c
 8004bdc:	2800      	cmpne	r0, #0
 8004bde:	d02e      	beq.n	8004c3e <PE_StateMachine_UVDM+0x74>
 8004be0:	2100      	movs	r1, #0
 8004be2:	f88d 100c 	strb.w	r1, [sp, #12]
 8004be6:	ab06      	add	r3, sp, #24
 8004be8:	68e5      	ldr	r5, [r4, #12]
 8004bea:	7c20      	ldrb	r0, [r4, #16]
 8004bec:	6bee      	ldr	r6, [r5, #60]	@ 0x3c
 8004bee:	aa03      	add	r2, sp, #12
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	47b0      	blx	r6
 8004bf4:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004bf8:	9804      	ldr	r0, [sp, #16]
 8004bfa:	1c49      	adds	r1, r1, #1
 8004bfc:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 8004c00:	f88d 100c 	strb.w	r1, [sp, #12]
 8004c04:	9004      	str	r0, [sp, #16]
 8004c06:	f104 0531 	add.w	r5, r4, #49	@ 0x31
 8004c0a:	9904      	ldr	r1, [sp, #16]
 8004c0c:	9105      	str	r1, [sp, #20]
 8004c0e:	ab05      	add	r3, sp, #20
 8004c10:	f000 f81a 	bl	8004c48 <.text_42+0x6>
 8004c14:	bf1d      	ittte	ne
 8004c16:	6960      	ldrne	r0, [r4, #20]
 8004c18:	0880      	lsrne	r0, r0, #2
 8004c1a:	f000 0001 	andne.w	r0, r0, #1
 8004c1e:	2002      	moveq	r0, #2
 8004c20:	9002      	str	r0, [sp, #8]
 8004c22:	2003      	movs	r0, #3
 8004c24:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c28:	9100      	str	r1, [sp, #0]
 8004c2a:	9001      	str	r0, [sp, #4]
 8004c2c:	220f      	movs	r2, #15
 8004c2e:	7829      	ldrb	r1, [r5, #0]
 8004c30:	f000 f816 	bl	8004c60 <.text_44>
 8004c34:	b908      	cbnz	r0, 8004c3a <PE_StateMachine_UVDM+0x70>
 8004c36:	2059      	movs	r0, #89	@ 0x59
 8004c38:	7720      	strb	r0, [r4, #28]
 8004c3a:	2100      	movs	r1, #0
 8004c3c:	7069      	strb	r1, [r5, #1]
 8004c3e:	b00c      	add	sp, #48	@ 0x30
 8004c40:	bd70      	pop	{r4, r5, r6, pc}

08004c42 <.text_42>:
 8004c42:	f421 61e0 	bic.w	r1, r1, #1792	@ 0x700
 8004c46:	6031      	str	r1, [r6, #0]
 8004c48:	6860      	ldr	r0, [r4, #4]
 8004c4a:	6801      	ldr	r1, [r0, #0]
 8004c4c:	f3c1 0080 	ubfx	r0, r1, #2, #1
 8004c50:	2800      	cmp	r0, #0
 8004c52:	4770      	bx	lr

08004c54 <.text_43>:
 8004c54:	f89d 100c 	ldrb.w	r1, [sp, #12]
 8004c58:	9100      	str	r1, [sp, #0]
 8004c5a:	9001      	str	r0, [sp, #4]
 8004c5c:	220f      	movs	r2, #15
 8004c5e:	7839      	ldrb	r1, [r7, #0]

08004c60 <.text_44>:
 8004c60:	4620      	mov	r0, r4
 8004c62:	f7fc bc2e 	b.w	80014c2 <PE_Send_DataMessage>

08004c66 <PE_Check_DataMessageVDM>:
 8004c66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c68:	4605      	mov	r5, r0
 8004c6a:	6828      	ldr	r0, [r5, #0]
 8004c6c:	6841      	ldr	r1, [r0, #4]
 8004c6e:	f3c1 1040 	ubfx	r0, r1, #5, #1
 8004c72:	2800      	cmp	r0, #0
 8004c74:	bf1c      	itt	ne
 8004c76:	68e8      	ldrne	r0, [r5, #12]
 8004c78:	2800      	cmpne	r0, #0
 8004c7a:	d04e      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004c7c:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8004c7e:	7888      	ldrb	r0, [r1, #2]
 8004c80:	78ca      	ldrb	r2, [r1, #3]
 8004c82:	790b      	ldrb	r3, [r1, #4]
 8004c84:	7949      	ldrb	r1, [r1, #5]
 8004c86:	eb00 2002 	add.w	r0, r0, r2, lsl #8
 8004c8a:	eb00 4003 	add.w	r0, r0, r3, lsl #16
 8004c8e:	eb00 6001 	add.w	r0, r0, r1, lsl #24
 8004c92:	4601      	mov	r1, r0
 8004c94:	0bca      	lsrs	r2, r1, #15
 8004c96:	f012 0201 	ands.w	r2, r2, #1
 8004c9a:	d012      	beq.n	8004cc2 <PE_Check_DataMessageVDM+0x5c>
 8004c9c:	2a01      	cmp	r2, #1
 8004c9e:	bf02      	ittt	eq
 8004ca0:	f8c5 1250 	streq.w	r1, [r5, #592]	@ 0x250
 8004ca4:	f3c0 1081 	ubfxeq	r0, r0, #6, #2
 8004ca8:	2800      	cmpeq	r0, #0
 8004caa:	d136      	bne.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cac:	6828      	ldr	r0, [r5, #0]
 8004cae:	6841      	ldr	r1, [r0, #4]
 8004cb0:	f3c1 2000 	ubfx	r0, r1, #8, #1
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	d030      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004cb8:	4628      	mov	r0, r5
 8004cba:	e8bd 40f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, lr}
 8004cbe:	f7ff b939 	b.w	8003f34 <PE_Receive_SVDM>
 8004cc2:	8ea8      	ldrh	r0, [r5, #52]	@ 0x34
 8004cc4:	0b00      	lsrs	r0, r0, #12
 8004cc6:	f000 0007 	and.w	r0, r0, #7
 8004cca:	1e42      	subs	r2, r0, #1
 8004ccc:	f885 24ac 	strb.w	r2, [r5, #1196]	@ 0x4ac
 8004cd0:	2000      	movs	r0, #0
 8004cd2:	f205 4394 	addw	r3, r5, #1172	@ 0x494
 8004cd6:	e00f      	b.n	8004cf8 <PE_Check_DataMessageVDM+0x92>
 8004cd8:	6baa      	ldr	r2, [r5, #56]	@ 0x38
 8004cda:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004cde:	7994      	ldrb	r4, [r2, #6]
 8004ce0:	79d6      	ldrb	r6, [r2, #7]
 8004ce2:	eb04 2706 	add.w	r7, r4, r6, lsl #8
 8004ce6:	7a14      	ldrb	r4, [r2, #8]
 8004ce8:	7a52      	ldrb	r2, [r2, #9]
 8004cea:	eb07 4704 	add.w	r7, r7, r4, lsl #16
 8004cee:	eb07 6702 	add.w	r7, r7, r2, lsl #24
 8004cf2:	f843 7020 	str.w	r7, [r3, r0, lsl #2]
 8004cf6:	1c40      	adds	r0, r0, #1
 8004cf8:	f895 24ac 	ldrb.w	r2, [r5, #1196]	@ 0x4ac
 8004cfc:	4290      	cmp	r0, r2
 8004cfe:	d3eb      	bcc.n	8004cd8 <PE_Check_DataMessageVDM+0x72>
 8004d00:	68e8      	ldr	r0, [r5, #12]
 8004d02:	2800      	cmp	r0, #0
 8004d04:	bf1c      	itt	ne
 8004d06:	6c04      	ldrne	r4, [r0, #64]	@ 0x40
 8004d08:	2c00      	cmpne	r4, #0
 8004d0a:	d006      	beq.n	8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d0c:	7c28      	ldrb	r0, [r5, #16]
 8004d0e:	f205 42ac 	addw	r2, r5, #1196	@ 0x4ac
 8004d12:	47a0      	blx	r4
 8004d14:	b908      	cbnz	r0, 8004d1a <PE_Check_DataMessageVDM+0xb4>
 8004d16:	2003      	movs	r0, #3
 8004d18:	e006      	b.n	8004d28 <PE_Check_DataMessageVDM+0xc2>
 8004d1a:	6868      	ldr	r0, [r5, #4]
 8004d1c:	7801      	ldrb	r1, [r0, #0]
 8004d1e:	f001 0103 	and.w	r1, r1, #3
 8004d22:	2902      	cmp	r1, #2
 8004d24:	d101      	bne.n	8004d2a <PE_Check_DataMessageVDM+0xc4>
 8004d26:	2001      	movs	r0, #1
 8004d28:	7468      	strb	r0, [r5, #17]
 8004d2a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

08004d2c <PE_SVDM_CheckIdentity>:
 8004d2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2e:	f000 f8f3 	bl	8004f18 <.text_51>
 8004d32:	0b24      	lsrs	r4, r4, #12
 8004d34:	f004 0407 	and.w	r4, r4, #7
 8004d38:	1e65      	subs	r5, r4, #1
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	b2ee      	uxtb	r6, r5
 8004d3e:	2e03      	cmp	r6, #3
 8004d40:	f0c0 8081 	bcc.w	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004d44:	780c      	ldrb	r4, [r1, #0]
 8004d46:	784e      	ldrb	r6, [r1, #1]
 8004d48:	788f      	ldrb	r7, [r1, #2]
 8004d4a:	eb04 2406 	add.w	r4, r4, r6, lsl #8
 8004d4e:	78ce      	ldrb	r6, [r1, #3]
 8004d50:	eb04 4407 	add.w	r4, r4, r7, lsl #16
 8004d54:	eb04 6406 	add.w	r4, r4, r6, lsl #24
 8004d58:	6014      	str	r4, [r2, #0]
 8004d5a:	790f      	ldrb	r7, [r1, #4]
 8004d5c:	794e      	ldrb	r6, [r1, #5]
 8004d5e:	eb07 2606 	add.w	r6, r7, r6, lsl #8
 8004d62:	798f      	ldrb	r7, [r1, #6]
 8004d64:	eb06 4707 	add.w	r7, r6, r7, lsl #16
 8004d68:	79ce      	ldrb	r6, [r1, #7]
 8004d6a:	eb07 6606 	add.w	r6, r7, r6, lsl #24
 8004d6e:	6056      	str	r6, [r2, #4]
 8004d70:	7a0f      	ldrb	r7, [r1, #8]
 8004d72:	f891 c009 	ldrb.w	ip, [r1, #9]
 8004d76:	eb07 2e0c 	add.w	lr, r7, ip, lsl #8
 8004d7a:	7a8f      	ldrb	r7, [r1, #10]
 8004d7c:	f891 c00b 	ldrb.w	ip, [r1, #11]
 8004d80:	eb0e 4707 	add.w	r7, lr, r7, lsl #16
 8004d84:	eb07 670c 	add.w	r7, r7, ip, lsl #24
 8004d88:	6097      	str	r7, [r2, #8]
 8004d8a:	2608      	movs	r6, #8
 8004d8c:	1eef      	subs	r7, r5, #3
 8004d8e:	f892 5020 	ldrb.w	r5, [r2, #32]
 8004d92:	f005 0ee0 	and.w	lr, r5, #224	@ 0xe0
 8004d96:	b2fd      	uxtb	r5, r7
 8004d98:	2d00      	cmp	r5, #0
 8004d9a:	f882 e020 	strb.w	lr, [r2, #32]
 8004d9e:	d053      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004da0:	0ee4      	lsrs	r4, r4, #27
 8004da2:	1e7d      	subs	r5, r7, #1
 8004da4:	f004 0407 	and.w	r4, r4, #7
 8004da8:	2c05      	cmp	r4, #5
 8004daa:	d84c      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004dac:	e8df f004 	tbb	[pc, r4]
 8004db0:	2303030c 	.word	0x2303030c
 8004db4:	2f29      	.short	0x2f29
 8004db6:	f04e 0408 	orr.w	r4, lr, #8
 8004dba:	f000 f847 	bl	8004e4c <.text_47>
 8004dbe:	6194      	str	r4, [r2, #24]
 8004dc0:	462f      	mov	r7, r5
 8004dc2:	b2fc      	uxtb	r4, r7
 8004dc4:	2c00      	cmp	r4, #0
 8004dc6:	d03f      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dc8:	8e80      	ldrh	r0, [r0, #52]	@ 0x34
 8004dca:	f3c0 1081 	ubfx	r0, r0, #6, #2
 8004dce:	2802      	cmp	r0, #2
 8004dd0:	d33a      	bcc.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004dd2:	6810      	ldr	r0, [r2, #0]
 8004dd4:	0dc0      	lsrs	r0, r0, #23
 8004dd6:	f010 0007 	ands.w	r0, r0, #7
 8004dda:	d035      	beq.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004ddc:	1e40      	subs	r0, r0, #1
 8004dde:	2802      	cmp	r0, #2
 8004de0:	d831      	bhi.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004de2:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004de6:	f3c0 00c0 	ubfx	r0, r0, #3, #1
 8004dea:	2800      	cmp	r0, #0
 8004dec:	bf1a      	itte	ne
 8004dee:	3608      	addne	r6, #8
 8004df0:	1e7f      	subne	r7, r7, #1
 8004df2:	1d36      	addeq	r6, r6, #4
 8004df4:	e011      	b.n	8004e1a <PE_SVDM_CheckIdentity+0xee>
 8004df6:	f04e 0401 	orr.w	r4, lr, #1
 8004dfa:	f000 f827 	bl	8004e4c <.text_47>
 8004dfe:	60d4      	str	r4, [r2, #12]
 8004e00:	e7de      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e02:	f04e 0404 	orr.w	r4, lr, #4
 8004e06:	f000 f821 	bl	8004e4c <.text_47>
 8004e0a:	6154      	str	r4, [r2, #20]
 8004e0c:	e7d8      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e0e:	f04e 0402 	orr.w	r4, lr, #2
 8004e12:	f000 f81b 	bl	8004e4c <.text_47>
 8004e16:	6114      	str	r4, [r2, #16]
 8004e18:	e7d2      	b.n	8004dc0 <PE_SVDM_CheckIdentity+0x94>
 8004e1a:	b2ff      	uxtb	r7, r7
 8004e1c:	2f01      	cmp	r7, #1
 8004e1e:	d112      	bne.n	8004e46 <PE_SVDM_CheckIdentity+0x11a>
 8004e20:	f892 0020 	ldrb.w	r0, [r2, #32]
 8004e24:	f040 0010 	orr.w	r0, r0, #16
 8004e28:	f882 0020 	strb.w	r0, [r2, #32]
 8004e2c:	1988      	adds	r0, r1, r6
 8004e2e:	7801      	ldrb	r1, [r0, #0]
 8004e30:	7844      	ldrb	r4, [r0, #1]
 8004e32:	eb01 2504 	add.w	r5, r1, r4, lsl #8
 8004e36:	7881      	ldrb	r1, [r0, #2]
 8004e38:	78c0      	ldrb	r0, [r0, #3]
 8004e3a:	eb05 4501 	add.w	r5, r5, r1, lsl #16
 8004e3e:	eb05 6500 	add.w	r5, r5, r0, lsl #24
 8004e42:	61d5      	str	r5, [r2, #28]
 8004e44:	e000      	b.n	8004e48 <PE_SVDM_CheckIdentity+0x11c>
 8004e46:	2302      	movs	r3, #2
 8004e48:	4618      	mov	r0, r3
 8004e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004e4c <.text_47>:
 8004e4c:	f882 4020 	strb.w	r4, [r2, #32]
 8004e50:	260c      	movs	r6, #12
 8004e52:	7b0c      	ldrb	r4, [r1, #12]
 8004e54:	7b4f      	ldrb	r7, [r1, #13]
 8004e56:	eb04 2707 	add.w	r7, r4, r7, lsl #8
 8004e5a:	7b8c      	ldrb	r4, [r1, #14]
 8004e5c:	eb07 4404 	add.w	r4, r7, r4, lsl #16
 8004e60:	7bcf      	ldrb	r7, [r1, #15]
 8004e62:	eb04 6407 	add.w	r4, r4, r7, lsl #24
 8004e66:	4770      	bx	lr

08004e68 <PE_SVDM_CheckSVIDs>:
 8004e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e6a:	4b2e      	ldr	r3, [pc, #184]	@ (8004f24 <.text_52>)
 8004e6c:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8004e70:	8e83      	ldrh	r3, [r0, #52]	@ 0x34
 8004e72:	0b1b      	lsrs	r3, r3, #12
 8004e74:	f003 0307 	and.w	r3, r3, #7
 8004e78:	1e5b      	subs	r3, r3, #1
 8004e7a:	2400      	movs	r4, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2500      	movs	r5, #0
 8004e80:	7614      	strb	r4, [r2, #24]
 8004e82:	7654      	strb	r4, [r2, #25]
 8004e84:	f000 f816 	bl	8004eb4 <.text_49>
 8004e88:	bf19      	ittee	ne
 8004e8a:	1c76      	addne	r6, r6, #1
 8004e8c:	7616      	strbne	r6, [r2, #24]
 8004e8e:	2501      	moveq	r5, #1
 8004e90:	7655      	strbeq	r5, [r2, #25]
 8004e92:	1ca4      	adds	r4, r4, #2
 8004e94:	b2e4      	uxtb	r4, r4
 8004e96:	f000 f80d 	bl	8004eb4 <.text_49>
 8004e9a:	bf19      	ittee	ne
 8004e9c:	1c76      	addne	r6, r6, #1
 8004e9e:	7616      	strbne	r6, [r2, #24]
 8004ea0:	2501      	moveq	r5, #1
 8004ea2:	7655      	strbeq	r5, [r2, #25]
 8004ea4:	1ca4      	adds	r4, r4, #2
 8004ea6:	b2e4      	uxtb	r4, r4
 8004ea8:	ebb4 0f83 	cmp.w	r4, r3, lsl #2
 8004eac:	d201      	bcs.n	8004eb2 <PE_SVDM_CheckSVIDs+0x4a>
 8004eae:	0028      	movs	r0, r5
 8004eb0:	d0e8      	beq.n	8004e84 <PE_SVDM_CheckSVIDs+0x1c>
 8004eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004eb4 <.text_49>:
 8004eb4:	1c4e      	adds	r6, r1, #1
 8004eb6:	5d08      	ldrb	r0, [r1, r4]
 8004eb8:	5d37      	ldrb	r7, [r6, r4]
 8004eba:	eb00 2607 	add.w	r6, r0, r7, lsl #8
 8004ebe:	7e10      	ldrb	r0, [r2, #24]
 8004ec0:	f822 6010 	strh.w	r6, [r2, r0, lsl #1]
 8004ec4:	7e16      	ldrb	r6, [r2, #24]
 8004ec6:	4637      	mov	r7, r6
 8004ec8:	f832 0017 	ldrh.w	r0, [r2, r7, lsl #1]
 8004ecc:	2800      	cmp	r0, #0
 8004ece:	4770      	bx	lr

08004ed0 <PE_SVDM_CheckModes>:
 8004ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ed2:	f000 f821 	bl	8004f18 <.text_51>
 8004ed6:	8399      	strh	r1, [r3, #28]
 8004ed8:	0b24      	lsrs	r4, r4, #12
 8004eda:	f004 0407 	and.w	r4, r4, #7
 8004ede:	1e60      	subs	r0, r4, #1
 8004ee0:	2400      	movs	r4, #0
 8004ee2:	b2c0      	uxtb	r0, r0
 8004ee4:	601c      	str	r4, [r3, #0]
 8004ee6:	1916      	adds	r6, r2, r4
 8004ee8:	5d15      	ldrb	r5, [r2, r4]
 8004eea:	7871      	ldrb	r1, [r6, #1]
 8004eec:	eb05 2701 	add.w	r7, r5, r1, lsl #8
 8004ef0:	1911      	adds	r1, r2, r4
 8004ef2:	1d24      	adds	r4, r4, #4
 8004ef4:	788d      	ldrb	r5, [r1, #2]
 8004ef6:	78ce      	ldrb	r6, [r1, #3]
 8004ef8:	6819      	ldr	r1, [r3, #0]
 8004efa:	eb07 4705 	add.w	r7, r7, r5, lsl #16
 8004efe:	eb03 0581 	add.w	r5, r3, r1, lsl #2
 8004f02:	eb07 6706 	add.w	r7, r7, r6, lsl #24
 8004f06:	606f      	str	r7, [r5, #4]
 8004f08:	b2e4      	uxtb	r4, r4
 8004f0a:	681e      	ldr	r6, [r3, #0]
 8004f0c:	1c76      	adds	r6, r6, #1
 8004f0e:	ebb4 0f80 	cmp.w	r4, r0, lsl #2
 8004f12:	601e      	str	r6, [r3, #0]
 8004f14:	d3e7      	bcc.n	8004ee6 <PE_SVDM_CheckModes+0x16>
 8004f16:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004f18 <.text_51>:
 8004f18:	4c02      	ldr	r4, [pc, #8]	@ (8004f24 <.text_52>)
 8004f1a:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004f1e:	8e84      	ldrh	r4, [r0, #52]	@ 0x34
 8004f20:	4770      	bx	lr
	...

08004f24 <.text_52>:
 8004f24:	200001bc 	.word	0x200001bc

08004f28 <USBPD_PRL_TimerCounter>:
 8004f28:	b510      	push	{r4, lr}
 8004f2a:	f000 f879 	bl	8005020 <.text_12>
 8004f2e:	7919      	ldrb	r1, [r3, #4]
 8004f30:	b111      	cbz	r1, 8004f38 <USBPD_PRL_TimerCounter+0x10>
 8004f32:	7919      	ldrb	r1, [r3, #4]
 8004f34:	1e4c      	subs	r4, r1, #1
 8004f36:	711c      	strb	r4, [r3, #4]
 8004f38:	f852 1020 	ldr.w	r1, [r2, r0, lsl #2]
 8004f3c:	7848      	ldrb	r0, [r1, #1]
 8004f3e:	b108      	cbz	r0, 8004f44 <USBPD_PRL_TimerCounter+0x1c>
 8004f40:	1e40      	subs	r0, r0, #1
 8004f42:	7048      	strb	r0, [r1, #1]
 8004f44:	bd10      	pop	{r4, pc}

08004f46 <USBPD_PRL_Init>:
 8004f46:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f4a:	4680      	mov	r8, r0
 8004f4c:	460e      	mov	r6, r1
 8004f4e:	4617      	mov	r7, r2
 8004f50:	461d      	mov	r5, r3
 8004f52:	f44f 709c 	mov.w	r0, #312	@ 0x138
 8004f56:	f015 fa4d 	bl	801a3f4 <malloc>
 8004f5a:	0004      	movs	r4, r0
 8004f5c:	f04f 0916 	mov.w	r9, #22
 8004f60:	d019      	beq.n	8004f96 <USBPD_PRL_Init+0x50>
 8004f62:	f44f 719c 	mov.w	r1, #312	@ 0x138
 8004f66:	f015 fb95 	bl	801a694 <__aeabi_memclr>
 8004f6a:	f000 fca8 	bl	80058be <.text_34>
 8004f6e:	f8df 0a48 	ldr.w	r0, [pc, #2632]	@ 80059b8 <.text_40>
 8004f72:	4641      	mov	r1, r8
 8004f74:	f840 4021 	str.w	r4, [r0, r1, lsl #2]
 8004f78:	62a7      	str	r7, [r4, #40]	@ 0x28
 8004f7a:	62e5      	str	r5, [r4, #44]	@ 0x2c
 8004f7c:	2001      	movs	r0, #1
 8004f7e:	9000      	str	r0, [sp, #0]
 8004f80:	f104 0230 	add.w	r2, r4, #48	@ 0x30
 8004f84:	6870      	ldr	r0, [r6, #4]
 8004f86:	f60f 21a4 	addw	r1, pc, #2724	@ 0xaa4
 8004f8a:	f3c0 0380 	ubfx	r3, r0, #2, #1
 8004f8e:	4640      	mov	r0, r8
 8004f90:	f00a fe3e 	bl	800fc10 <USBPD_PHY_Init>
 8004f94:	4681      	mov	r9, r0
 8004f96:	4648      	mov	r0, r9
 8004f98:	e8bd 83f2 	ldmia.w	sp!, {r1, r4, r5, r6, r7, r8, r9, pc}

08004f9c <USBPD_PRL_GetMemoryConsumption>:
 8004f9c:	f44f 706a 	mov.w	r0, #936	@ 0x3a8
 8004fa0:	4770      	bx	lr

08004fa2 <USBPD_PRL_SetHeader>:
 8004fa2:	b530      	push	{r4, r5, lr}
 8004fa4:	f8df 4a10 	ldr.w	r4, [pc, #2576]	@ 80059b8 <.text_40>
 8004fa8:	f854 5020 	ldr.w	r5, [r4, r0, lsl #2]
 8004fac:	8a6d      	ldrh	r5, [r5, #18]
 8004fae:	f361 2508 	bfi	r5, r1, #8, #1
 8004fb2:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fb6:	824d      	strh	r5, [r1, #18]
 8004fb8:	f362 1545 	bfi	r5, r2, #5, #1
 8004fbc:	f854 1020 	ldr.w	r1, [r4, r0, lsl #2]
 8004fc0:	824d      	strh	r5, [r1, #18]
 8004fc2:	f363 1587 	bfi	r5, r3, #6, #2
 8004fc6:	f854 0020 	ldr.w	r0, [r4, r0, lsl #2]
 8004fca:	8245      	strh	r5, [r0, #18]
 8004fcc:	bd30      	pop	{r4, r5, pc}

08004fce <USBPD_PRL_SetHeaderPowerRole>:
 8004fce:	b510      	push	{r4, lr}
 8004fd0:	f000 f80b 	bl	8004fea <.text_9>
 8004fd4:	f361 2408 	bfi	r4, r1, #8, #1
 8004fd8:	825c      	strh	r4, [r3, #18]
 8004fda:	bd10      	pop	{r4, pc}

08004fdc <USBPD_PRL_SetHeaderDataRole>:
 8004fdc:	b510      	push	{r4, lr}
 8004fde:	f000 f804 	bl	8004fea <.text_9>
 8004fe2:	f361 1445 	bfi	r4, r1, #5, #1
 8004fe6:	825c      	strh	r4, [r3, #18]
 8004fe8:	bd10      	pop	{r4, pc}

08004fea <.text_9>:
 8004fea:	f8df 29cc 	ldr.w	r2, [pc, #2508]	@ 80059b8 <.text_40>
 8004fee:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8004ff2:	8a5c      	ldrh	r4, [r3, #18]
 8004ff4:	4770      	bx	lr

08004ff6 <USBPD_PRL_SetHeaderSpecification>:
 8004ff6:	b510      	push	{r4, lr}
 8004ff8:	f7ff fff7 	bl	8004fea <.text_9>
 8004ffc:	f361 1487 	bfi	r4, r1, #6, #2
 8005000:	825c      	strh	r4, [r3, #18]
 8005002:	bd10      	pop	{r4, pc}

08005004 <USBPD_PRL_CBL_SetHeaderSpecification>:
 8005004:	b540      	push	{r6, lr}
 8005006:	f000 f80b 	bl	8005020 <.text_12>
 800500a:	8a9e      	ldrh	r6, [r3, #20]
 800500c:	f361 1687 	bfi	r6, r1, #6, #2
 8005010:	829e      	strh	r6, [r3, #20]
 8005012:	8adb      	ldrh	r3, [r3, #22]
 8005014:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005018:	f361 1387 	bfi	r3, r1, #6, #2
 800501c:	82c3      	strh	r3, [r0, #22]
 800501e:	bd40      	pop	{r6, pc}

08005020 <.text_12>:
 8005020:	f8df 2994 	ldr.w	r2, [pc, #2452]	@ 80059b8 <.text_40>
 8005024:	f852 3020 	ldr.w	r3, [r2, r0, lsl #2]
 8005028:	4770      	bx	lr

0800502a <USBPD_PRL_SRCSetSinkNG>:
 800502a:	f00a becc 	b.w	800fdc6 <USBPD_PHY_SetResistor_SinkTxNG>

0800502e <USBPD_PRL_SRCReleaseSinkNG>:
 800502e:	b510      	push	{r4, lr}
 8005030:	4604      	mov	r4, r0
 8005032:	f00a fed5 	bl	800fde0 <USBPD_PHY_SetResistor_SinkTxOK>
 8005036:	f8df 1980 	ldr.w	r1, [pc, #2432]	@ 80059b8 <.text_40>
 800503a:	f851 2024 	ldr.w	r2, [r1, r4, lsl #2]
 800503e:	2000      	movs	r0, #0
 8005040:	7150      	strb	r0, [r2, #5]
 8005042:	bd10      	pop	{r4, pc}

08005044 <USBPD_PRL_IsResistor_SinkTxOK>:
 8005044:	f00a beee 	b.w	800fe24 <USBPD_PHY_IsResistor_SinkTxOk>

08005048 <USBPD_PRL_FastRoleSwapSignalling>:
 8005048:	f00a befa 	b.w	800fe40 <USBPD_PHY_FastRoleSwapSignalling>

0800504c <PRL_FastRoleSwapReception>:
 800504c:	f7fb be1a 	b.w	8000c84 <PE_PRL_FastRoleSwapReception>

08005050 <USBPD_PRL_SOPCapability>:
 8005050:	f00a bed4 	b.w	800fdfc <USBPD_PHY_SOPSupported>

08005054 <USBPD_PRL_SendMessage>:
 8005054:	e92d 4dfd 	stmdb	sp!, {r0, r2, r3, r4, r5, r6, r7, r8, sl, fp, lr}
 8005058:	f8df a95c 	ldr.w	sl, [pc, #2396]	@ 80059b8 <.text_40>
 800505c:	b083      	sub	sp, #12
 800505e:	4680      	mov	r8, r0
 8005060:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005064:	4694      	mov	ip, r2
 8005066:	f10c 0701 	add.w	r7, ip, #1
 800506a:	2403      	movs	r4, #3
 800506c:	7938      	ldrb	r0, [r7, #4]
 800506e:	b118      	cbz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005070:	7a38      	ldrb	r0, [r7, #8]
 8005072:	b908      	cbnz	r0, 8005078 <USBPD_PRL_SendMessage+0x24>
 8005074:	200f      	movs	r0, #15
 8005076:	7150      	strb	r0, [r2, #5]
 8005078:	ea4f 0048 	mov.w	r0, r8, lsl #1
 800507c:	1c40      	adds	r0, r0, #1
 800507e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8005080:	f88d 0005 	strb.w	r0, [sp, #5]
 8005084:	f88d 1004 	strb.w	r1, [sp, #4]
 8005088:	9302      	str	r3, [sp, #8]
 800508a:	eb0c 0e01 	add.w	lr, ip, r1
 800508e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8005090:	f897 b004 	ldrb.w	fp, [r7, #4]
 8005094:	f1bb 0f10 	cmp.w	fp, #16
 8005098:	f10c 050e 	add.w	r5, ip, #14
 800509c:	f200 81fb 	bhi.w	8005496 <USBPD_PRL_SendMessage+0x442>
 80050a0:	e8df f01b 	tbh	[pc, fp, lsl #1]
 80050a4:	00250011 	.word	0x00250011
 80050a8:	01f90030 	.word	0x01f90030
 80050ac:	00550037 	.word	0x00550037
 80050b0:	00b60045 	.word	0x00b60045
 80050b4:	01f901f9 	.word	0x01f901f9
 80050b8:	0182016d 	.word	0x0182016d
 80050bc:	01b1019b 	.word	0x01b1019b
 80050c0:	01f501f9 	.word	0x01f501f9
 80050c4:	01e0      	.short	0x01e0
 80050c6:	f3ef 8510 	mrs	r5, PRIMASK
 80050ca:	b672      	cpsid	i
 80050cc:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050d0:	f7fb fc91 	bl	80009f6 <PE_PRL_Control_RxEvent>
 80050d4:	2800      	cmp	r0, #0
 80050d6:	bf04      	itt	eq
 80050d8:	7a78      	ldrbeq	r0, [r7, #9]
 80050da:	2800      	cmpeq	r0, #0
 80050dc:	bf07      	ittee	eq
 80050de:	21ff      	moveq	r1, #255	@ 0xff
 80050e0:	7239      	strbeq	r1, [r7, #8]
 80050e2:	2000      	movne	r0, #0
 80050e4:	7238      	strbne	r0, [r7, #8]
 80050e6:	f385 8810 	msr	PRIMASK, r5
 80050ea:	2106      	movs	r1, #6
 80050ec:	e1a9      	b.n	8005442 <USBPD_PRL_SendMessage+0x3ee>
 80050ee:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80050f2:	f00a fe68 	bl	800fdc6 <USBPD_PHY_SetResistor_SinkTxNG>
 80050f6:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80050fa:	2002      	movs	r0, #2
 80050fc:	7148      	strb	r0, [r1, #5]
 80050fe:	2013      	movs	r0, #19
 8005100:	7038      	strb	r0, [r7, #0]
 8005102:	e1cb      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005104:	2801      	cmp	r0, #1
 8005106:	d110      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005108:	7838      	ldrb	r0, [r7, #0]
 800510a:	b960      	cbnz	r0, 8005126 <USBPD_PRL_SendMessage+0xd2>
 800510c:	2105      	movs	r1, #5
 800510e:	7151      	strb	r1, [r2, #5]
 8005110:	e1c4      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005112:	2802      	cmp	r0, #2
 8005114:	d109      	bne.n	800512a <USBPD_PRL_SendMessage+0xd6>
 8005116:	f89d 000c 	ldrb.w	r0, [sp, #12]
 800511a:	f00a fe83 	bl	800fe24 <USBPD_PHY_IsResistor_SinkTxOk>
 800511e:	2801      	cmp	r0, #1
 8005120:	bf08      	it	eq
 8005122:	2005      	moveq	r0, #5
 8005124:	d070      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005126:	2409      	movs	r4, #9
 8005128:	e1b8      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800512a:	2006      	movs	r0, #6
 800512c:	e153      	b.n	80053d6 <USBPD_PRL_SendMessage+0x382>
 800512e:	f10c 0212 	add.w	r2, ip, #18
 8005132:	f832 1011 	ldrh.w	r1, [r2, r1, lsl #1]
 8005136:	f3c1 1181 	ubfx	r1, r1, #6, #2
 800513a:	2902      	cmp	r1, #2
 800513c:	d105      	bne.n	800514a <USBPD_PRL_SendMessage+0xf6>
 800513e:	2801      	cmp	r0, #1
 8005140:	d062      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 8005142:	2802      	cmp	r0, #2
 8005144:	bf08      	it	eq
 8005146:	2004      	moveq	r0, #4
 8005148:	d05e      	beq.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514a:	2005      	movs	r0, #5
 800514c:	e05c      	b.n	8005208 <USBPD_PRL_SendMessage+0x1b4>
 800514e:	f10c 0012 	add.w	r0, ip, #18
 8005152:	f89d 2010 	ldrb.w	r2, [sp, #16]
 8005156:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800515a:	f10c 0312 	add.w	r3, ip, #18
 800515e:	f362 0004 	bfi	r0, r2, #0, #5
 8005162:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005166:	ea4f 1bd2 	mov.w	fp, r2, lsr #7
 800516a:	f3c0 000e 	ubfx	r0, r0, #0, #15
 800516e:	ea40 30cb 	orr.w	r0, r0, fp, lsl #15
 8005172:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005176:	2000      	movs	r0, #0
 8005178:	7078      	strb	r0, [r7, #1]
 800517a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800517e:	0bd8      	lsrs	r0, r3, #15
 8005180:	d025      	beq.n	80051ce <USBPD_PRL_SendMessage+0x17a>
 8005182:	9802      	ldr	r0, [sp, #8]
 8005184:	7883      	ldrb	r3, [r0, #2]
 8005186:	78c7      	ldrb	r7, [r0, #3]
 8005188:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800518c:	81eb      	strh	r3, [r5, #14]
 800518e:	89e8      	ldrh	r0, [r5, #14]
 8005190:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005194:	b968      	cbnz	r0, 80051b2 <USBPD_PRL_SendMessage+0x15e>
 8005196:	89e8      	ldrh	r0, [r5, #14]
 8005198:	f3c0 20c3 	ubfx	r0, r0, #11, #4
 800519c:	bb08      	cbnz	r0, 80051e2 <USBPD_PRL_SendMessage+0x18e>
 800519e:	1f30      	subs	r0, r6, #4
 80051a0:	82a8      	strh	r0, [r5, #20]
 80051a2:	f3c0 0008 	ubfx	r0, r0, #0, #9
 80051a6:	89eb      	ldrh	r3, [r5, #14]
 80051a8:	f403 437e 	and.w	r3, r3, #65024	@ 0xfe00
 80051ac:	4318      	orrs	r0, r3
 80051ae:	81e8      	strh	r0, [r5, #14]
 80051b0:	e017      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051b2:	2000      	movs	r0, #0
 80051b4:	f10c 0312 	add.w	r3, ip, #18
 80051b8:	82a8      	strh	r0, [r5, #20]
 80051ba:	2001      	movs	r0, #1
 80051bc:	f833 7011 	ldrh.w	r7, [r3, r1, lsl #1]
 80051c0:	f360 370e 	bfi	r7, r0, #12, #3
 80051c4:	f10c 0012 	add.w	r0, ip, #18
 80051c8:	f820 7011 	strh.w	r7, [r0, r1, lsl #1]
 80051cc:	e009      	b.n	80051e2 <USBPD_PRL_SendMessage+0x18e>
 80051ce:	1eb0      	subs	r0, r6, #2
 80051d0:	0880      	lsrs	r0, r0, #2
 80051d2:	f360 330e 	bfi	r3, r0, #12, #3
 80051d6:	f10c 0012 	add.w	r0, ip, #18
 80051da:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 80051de:	2300      	movs	r3, #0
 80051e0:	82ab      	strh	r3, [r5, #20]
 80051e2:	2a0d      	cmp	r2, #13
 80051e4:	bf02      	ittt	eq
 80051e6:	f10c 0012 	addeq.w	r0, ip, #18
 80051ea:	f830 1011 	ldrheq.w	r1, [r0, r1, lsl #1]
 80051ee:	f411 4f70 	tsteq.w	r1, #61440	@ 0xf000
 80051f2:	d108      	bne.n	8005206 <USBPD_PRL_SendMessage+0x1b2>
 80051f4:	2000      	movs	r0, #0
 80051f6:	f88e 000b 	strb.w	r0, [lr, #11]
 80051fa:	220f      	movs	r2, #15
 80051fc:	2103      	movs	r1, #3
 80051fe:	f10c 0006 	add.w	r0, ip, #6
 8005202:	f000 fc20 	bl	8005a46 <__aeabi_memset>
 8005206:	2007      	movs	r0, #7
 8005208:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800520c:	7148      	strb	r0, [r1, #5]
 800520e:	e145      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005210:	f102 0312 	add.w	r3, r2, #18
 8005214:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005218:	0bc0      	lsrs	r0, r0, #15
 800521a:	d07c      	beq.n	8005316 <USBPD_PRL_SendMessage+0x2c2>
 800521c:	8b90      	ldrh	r0, [r2, #28]
 800521e:	f3c0 2080 	ubfx	r0, r0, #10, #1
 8005222:	2800      	cmp	r0, #0
 8005224:	d16c      	bne.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005226:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800522a:	8c57      	ldrh	r7, [r2, #34]	@ 0x22
 800522c:	8b93      	ldrh	r3, [r2, #28]
 800522e:	2f1b      	cmp	r7, #27
 8005230:	d30f      	bcc.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005232:	0bd8      	lsrs	r0, r3, #15
 8005234:	d00d      	beq.n	8005252 <USBPD_PRL_SendMessage+0x1fe>
 8005236:	f102 0312 	add.w	r3, r2, #18
 800523a:	261e      	movs	r6, #30
 800523c:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005240:	f440 40e0 	orr.w	r0, r0, #28672	@ 0x7000
 8005244:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 8005248:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 800524a:	f1a0 031a 	sub.w	r3, r0, #26
 800524e:	8453      	strh	r3, [r2, #34]	@ 0x22
 8005250:	e056      	b.n	8005300 <USBPD_PRL_SendMessage+0x2ac>
 8005252:	f3c3 20c3 	ubfx	r0, r3, #11, #4
 8005256:	b918      	cbnz	r0, 8005260 <USBPD_PRL_SendMessage+0x20c>
 8005258:	4618      	mov	r0, r3
 800525a:	f367 0008 	bfi	r0, r7, #0, #9
 800525e:	8390      	strh	r0, [r2, #28]
 8005260:	f648 70ff 	movw	r0, #36863	@ 0x8fff
 8005264:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 8005268:	f102 0312 	add.w	r3, r2, #18
 800526c:	f102 0712 	add.w	r7, r2, #18
 8005270:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005274:	4003      	ands	r3, r0
 8005276:	f827 3011 	strh.w	r3, [r7, r1, lsl #1]
 800527a:	8b90      	ldrh	r0, [r2, #28]
 800527c:	0bc0      	lsrs	r0, r0, #15
 800527e:	d03b      	beq.n	80052f8 <USBPD_PRL_SendMessage+0x2a4>
 8005280:	8c50      	ldrh	r0, [r2, #34]	@ 0x22
 8005282:	1c80      	adds	r0, r0, #2
 8005284:	0880      	lsrs	r0, r0, #2
 8005286:	0307      	lsls	r7, r0, #12
 8005288:	f407 47e0 	and.w	r7, r7, #28672	@ 0x7000
 800528c:	f102 0012 	add.w	r0, r2, #18
 8005290:	433b      	orrs	r3, r7
 8005292:	f820 3011 	strh.w	r3, [r0, r1, lsl #1]
 8005296:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8005298:	1c92      	adds	r2, r2, #2
 800529a:	f012 0203 	ands.w	r2, r2, #3
 800529e:	d021      	beq.n	80052e4 <USBPD_PRL_SendMessage+0x290>
 80052a0:	9802      	ldr	r0, [sp, #8]
 80052a2:	2300      	movs	r3, #0
 80052a4:	e005      	b.n	80052b2 <USBPD_PRL_SendMessage+0x25e>
 80052a6:	8c7f      	ldrh	r7, [r7, #34]	@ 0x22
 80052a8:	442f      	add	r7, r5
 80052aa:	4407      	add	r7, r0
 80052ac:	2500      	movs	r5, #0
 80052ae:	713d      	strb	r5, [r7, #4]
 80052b0:	1c5b      	adds	r3, r3, #1
 80052b2:	b2dd      	uxtb	r5, r3
 80052b4:	f1c2 0e04 	rsb	lr, r2, #4
 80052b8:	f85a 7028 	ldr.w	r7, [sl, r8, lsl #2]
 80052bc:	4575      	cmp	r5, lr
 80052be:	d3f2      	bcc.n	80052a6 <USBPD_PRL_SendMessage+0x252>
 80052c0:	9002      	str	r0, [sp, #8]
 80052c2:	f648 72ff 	movw	r2, #36863	@ 0x8fff
 80052c6:	f107 0012 	add.w	r0, r7, #18
 80052ca:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 80052ce:	4002      	ands	r2, r0
 80052d0:	0b00      	lsrs	r0, r0, #12
 80052d2:	1c40      	adds	r0, r0, #1
 80052d4:	0300      	lsls	r0, r0, #12
 80052d6:	f400 40e0 	and.w	r0, r0, #28672	@ 0x7000
 80052da:	4310      	orrs	r0, r2
 80052dc:	f107 0212 	add.w	r2, r7, #18
 80052e0:	f822 0011 	strh.w	r0, [r2, r1, lsl #1]
 80052e4:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 80052e8:	f100 0212 	add.w	r2, r0, #18
 80052ec:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
 80052f0:	f3c3 3602 	ubfx	r6, r3, #12, #3
 80052f4:	00b6      	lsls	r6, r6, #2
 80052f6:	1cb6      	adds	r6, r6, #2
 80052f8:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 80052fc:	2000      	movs	r0, #0
 80052fe:	8450      	strh	r0, [r2, #34]	@ 0x22
 8005300:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005304:	8b82      	ldrh	r2, [r0, #28]
 8005306:	9802      	ldr	r0, [sp, #8]
 8005308:	7082      	strb	r2, [r0, #2]
 800530a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800530e:	8b90      	ldrh	r0, [r2, #28]
 8005310:	9a02      	ldr	r2, [sp, #8]
 8005312:	0a00      	lsrs	r0, r0, #8
 8005314:	70d0      	strb	r0, [r2, #3]
 8005316:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800531a:	f8df 56a0 	ldr.w	r5, [pc, #1696]	@ 80059bc <.text_41>
 800531e:	f100 020b 	add.w	r2, r0, #11
 8005322:	3012      	adds	r0, #18
 8005324:	5c53      	ldrb	r3, [r2, r1]
 8005326:	f830 0011 	ldrh.w	r0, [r0, r1, lsl #1]
 800532a:	f85a 2028 	ldr.w	r2, [sl, r8, lsl #2]
 800532e:	f363 204b 	bfi	r0, r3, #9, #3
 8005332:	f102 0312 	add.w	r3, r2, #18
 8005336:	f823 0011 	strh.w	r0, [r3, r1, lsl #1]
 800533a:	9a02      	ldr	r2, [sp, #8]
 800533c:	7010      	strb	r0, [r2, #0]
 800533e:	2202      	movs	r2, #2
 8005340:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005344:	f100 0312 	add.w	r3, r0, #18
 8005348:	9802      	ldr	r0, [sp, #8]
 800534a:	f833 1011 	ldrh.w	r1, [r3, r1, lsl #1]
 800534e:	0a09      	lsrs	r1, r1, #8
 8005350:	7041      	strb	r1, [r0, #1]
 8005352:	210a      	movs	r1, #10
 8005354:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005358:	81c6      	strh	r6, [r0, #14]
 800535a:	7141      	strb	r1, [r0, #5]
 800535c:	7402      	strb	r2, [r0, #16]
 800535e:	b2b0      	uxth	r0, r6
 8005360:	9000      	str	r0, [sp, #0]
 8005362:	f000 f8a5 	bl	80054b0 <.text_21>
 8005366:	f89d 0005 	ldrb.w	r0, [sp, #5]
 800536a:	f242 7110 	movw	r1, #10000	@ 0x2710
 800536e:	f00c f865 	bl	801143c <USBPD_TIM_Start>
 8005372:	f000 f897 	bl	80054a4 <.text_20>
 8005376:	b2b3      	uxth	r3, r6
 8005378:	f00a fced 	bl	800fd56 <USBPD_PHY_SendMessage>
 800537c:	e08e      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800537e:	f3ef 8710 	mrs	r7, PRIMASK
 8005382:	b672      	cpsid	i
 8005384:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005388:	7941      	ldrb	r1, [r0, #5]
 800538a:	290a      	cmp	r1, #10
 800538c:	d109      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800538e:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005392:	f00c f8c5 	bl	8011520 <USBPD_TIM_IsExpired>
 8005396:	2801      	cmp	r0, #1
 8005398:	d103      	bne.n	80053a2 <USBPD_PRL_SendMessage+0x34e>
 800539a:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 800539e:	200d      	movs	r0, #13
 80053a0:	7148      	strb	r0, [r1, #5]
 80053a2:	f387 8810 	msr	PRIMASK, r7
 80053a6:	e079      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053a8:	89a8      	ldrh	r0, [r5, #12]
 80053aa:	f89e 100b 	ldrb.w	r1, [lr, #11]
 80053ae:	0a43      	lsrs	r3, r0, #9
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	4299      	cmp	r1, r3
 80053b6:	bf04      	itt	eq
 80053b8:	f000 001f 	andeq.w	r0, r0, #31
 80053bc:	2801      	cmpeq	r0, #1
 80053be:	d109      	bne.n	80053d4 <USBPD_PRL_SendMessage+0x380>
 80053c0:	1c49      	adds	r1, r1, #1
 80053c2:	f001 0107 	and.w	r1, r1, #7
 80053c6:	f88e 100b 	strb.w	r1, [lr, #11]
 80053ca:	2000      	movs	r0, #0
 80053cc:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053d0:	7148      	strb	r0, [r1, #5]
 80053d2:	e016      	b.n	8005402 <USBPD_PRL_SendMessage+0x3ae>
 80053d4:	200d      	movs	r0, #13
 80053d6:	7150      	strb	r0, [r2, #5]
 80053d8:	e060      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 80053da:	f89e 000b 	ldrb.w	r0, [lr, #11]
 80053de:	1c40      	adds	r0, r0, #1
 80053e0:	f000 0007 	and.w	r0, r0, #7
 80053e4:	f88e 000b 	strb.w	r0, [lr, #11]
 80053e8:	2000      	movs	r0, #0
 80053ea:	f85a 1028 	ldr.w	r1, [sl, r8, lsl #2]
 80053ee:	7148      	strb	r0, [r1, #5]
 80053f0:	f248 71ff 	movw	r1, #34815	@ 0x87ff
 80053f4:	89ea      	ldrh	r2, [r5, #14]
 80053f6:	400a      	ands	r2, r1
 80053f8:	81ea      	strh	r2, [r5, #14]
 80053fa:	f64f 30ff 	movw	r0, #64511	@ 0xfbff
 80053fe:	4002      	ands	r2, r0
 8005400:	81ea      	strh	r2, [r5, #14]
 8005402:	2405      	movs	r4, #5
 8005404:	e04a      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005406:	7878      	ldrb	r0, [r7, #1]
 8005408:	1c40      	adds	r0, r0, #1
 800540a:	7078      	strb	r0, [r7, #1]
 800540c:	f10c 0312 	add.w	r3, ip, #18
 8005410:	f10c 0012 	add.w	r0, ip, #18
 8005414:	f830 2011 	ldrh.w	r2, [r0, r1, lsl #1]
 8005418:	f3c2 1081 	ubfx	r0, r2, #6, #2
 800541c:	2801      	cmp	r0, #1
 800541e:	f833 0011 	ldrh.w	r0, [r3, r1, lsl #1]
 8005422:	bf0c      	ite	eq
 8005424:	2203      	moveq	r2, #3
 8005426:	2202      	movne	r2, #2
 8005428:	0bc0      	lsrs	r0, r0, #15
 800542a:	d006      	beq.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 800542c:	89e9      	ldrh	r1, [r5, #14]
 800542e:	0bc8      	lsrs	r0, r1, #15
 8005430:	d103      	bne.n	800543a <USBPD_PRL_SendMessage+0x3e6>
 8005432:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8005436:	291b      	cmp	r1, #27
 8005438:	d207      	bcs.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 800543a:	7878      	ldrb	r0, [r7, #1]
 800543c:	4282      	cmp	r2, r0
 800543e:	d304      	bcc.n	800544a <USBPD_PRL_SendMessage+0x3f6>
 8005440:	2110      	movs	r1, #16
 8005442:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 8005446:	7141      	strb	r1, [r0, #5]
 8005448:	e028      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800544a:	f85a 0028 	ldr.w	r0, [sl, r8, lsl #2]
 800544e:	2100      	movs	r1, #0
 8005450:	7141      	strb	r1, [r0, #5]
 8005452:	2407      	movs	r4, #7
 8005454:	f89e 100b 	ldrb.w	r1, [lr, #11]
 8005458:	1c49      	adds	r1, r1, #1
 800545a:	f001 0107 	and.w	r1, r1, #7
 800545e:	f88e 100b 	strb.w	r1, [lr, #11]
 8005462:	e01b      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005464:	200a      	movs	r0, #10
 8005466:	7150      	strb	r0, [r2, #5]
 8005468:	2102      	movs	r1, #2
 800546a:	70a9      	strb	r1, [r5, #2]
 800546c:	f242 7110 	movw	r1, #10000	@ 0x2710
 8005470:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8005474:	f00b ffe2 	bl	801143c <USBPD_TIM_Start>
 8005478:	882b      	ldrh	r3, [r5, #0]
 800547a:	f000 f813 	bl	80054a4 <.text_20>
 800547e:	f8df 553c 	ldr.w	r5, [pc, #1340]	@ 80059bc <.text_41>
 8005482:	f00a fc68 	bl	800fd56 <USBPD_PHY_SendMessage>
 8005486:	9600      	str	r6, [sp, #0]
 8005488:	f000 f812 	bl	80054b0 <.text_21>
 800548c:	e006      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 800548e:	2000      	movs	r0, #0
 8005490:	7150      	strb	r0, [r2, #5]
 8005492:	2406      	movs	r4, #6
 8005494:	e002      	b.n	800549c <USBPD_PRL_SendMessage+0x448>
 8005496:	2000      	movs	r0, #0
 8005498:	7150      	strb	r0, [r2, #5]
 800549a:	2410      	movs	r4, #16
 800549c:	4620      	mov	r0, r4
 800549e:	b006      	add	sp, #24
 80054a0:	e8bd 8df0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, fp, pc}

080054a4 <.text_20>:
 80054a4:	9a02      	ldr	r2, [sp, #8]
 80054a6:	f89d 1004 	ldrb.w	r1, [sp, #4]
 80054aa:	f89d 000c 	ldrb.w	r0, [sp, #12]
 80054ae:	4770      	bx	lr

080054b0 <.text_21>:
 80054b0:	9b02      	ldr	r3, [sp, #8]
 80054b2:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80054b6:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80054ba:	f8d5 a000 	ldr.w	sl, [r5]
 80054be:	2002      	movs	r0, #2

080054c0 <__iar_annotation$$tailcall>:
 80054c0:	4750      	bx	sl

080054c2 <USBPD_PRL_ResetRequestProcess>:
 80054c2:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80054c6:	4605      	mov	r5, r0
 80054c8:	f8df 84ec 	ldr.w	r8, [pc, #1260]	@ 80059b8 <.text_40>
 80054cc:	462f      	mov	r7, r5
 80054ce:	f858 4027 	ldr.w	r4, [r8, r7, lsl #2]
 80054d2:	2000      	movs	r0, #0
 80054d4:	70e0      	strb	r0, [r4, #3]
 80054d6:	72e0      	strb	r0, [r4, #11]
 80054d8:	7320      	strb	r0, [r4, #12]
 80054da:	7360      	strb	r0, [r4, #13]
 80054dc:	460e      	mov	r6, r1
 80054de:	f000 f9ee 	bl	80058be <.text_34>
 80054e2:	f858 0027 	ldr.w	r0, [r8, r7, lsl #2]
 80054e6:	f8df 74d4 	ldr.w	r7, [pc, #1236]	@ 80059bc <.text_41>
 80054ea:	2200      	movs	r2, #0
 80054ec:	7142      	strb	r2, [r0, #5]
 80054ee:	9200      	str	r2, [sp, #0]
 80054f0:	2300      	movs	r3, #0
 80054f2:	f8d7 c000 	ldr.w	ip, [r7]
 80054f6:	4632      	mov	r2, r6
 80054f8:	4629      	mov	r1, r5
 80054fa:	2002      	movs	r0, #2
 80054fc:	47e0      	blx	ip
 80054fe:	4628      	mov	r0, r5
 8005500:	f000 f83c 	bl	800557c <PRL_DisableRX>
 8005504:	4631      	mov	r1, r6
 8005506:	4628      	mov	r0, r5
 8005508:	f00a fc12 	bl	800fd30 <USBPD_PHY_ResetRequest>
 800550c:	2005      	movs	r0, #5
 800550e:	7120      	strb	r0, [r4, #4]
 8005510:	78e0      	ldrb	r0, [r4, #3]
 8005512:	2801      	cmp	r0, #1
 8005514:	bf1c      	itt	ne
 8005516:	7920      	ldrbne	r0, [r4, #4]
 8005518:	2800      	cmpne	r0, #0
 800551a:	d1f9      	bne.n	8005510 <USBPD_PRL_ResetRequestProcess+0x4e>
 800551c:	e8bd 81f3 	ldmia.w	sp!, {r0, r1, r4, r5, r6, r7, r8, pc}

08005520 <USBDPD_PRL_BistCarrierEyeMode>:
 8005520:	2905      	cmp	r1, #5
 8005522:	bf08      	it	eq
 8005524:	f00a bc2d 	beq.w	800fd82 <USBPD_PHY_Send_BIST_Pattern>
 8005528:	2010      	movs	r0, #16
 800552a:	4770      	bx	lr

0800552c <USBDPD_PRL_BistCarrierEyeModeExit>:
 800552c:	2905      	cmp	r1, #5
 800552e:	bf04      	itt	eq
 8005530:	2107      	moveq	r1, #7
 8005532:	f00a bc34 	beq.w	800fd9e <USBPD_PHY_ExitTransmit>
 8005536:	2010      	movs	r0, #16
 8005538:	4770      	bx	lr

0800553a <USBPD_PRL_Reset>:
 800553a:	b538      	push	{r3, r4, r5, lr}
 800553c:	4604      	mov	r4, r0
 800553e:	f8df 0478 	ldr.w	r0, [pc, #1144]	@ 80059b8 <.text_40>
 8005542:	4621      	mov	r1, r4
 8005544:	f850 5021 	ldr.w	r5, [r0, r1, lsl #2]
 8005548:	2200      	movs	r2, #0
 800554a:	716a      	strb	r2, [r5, #5]
 800554c:	702a      	strb	r2, [r5, #0]
 800554e:	712a      	strb	r2, [r5, #4]
 8005550:	72ea      	strb	r2, [r5, #11]
 8005552:	732a      	strb	r2, [r5, #12]
 8005554:	736a      	strb	r2, [r5, #13]
 8005556:	2103      	movs	r1, #3
 8005558:	220f      	movs	r2, #15
 800555a:	1da8      	adds	r0, r5, #6
 800555c:	f000 fa73 	bl	8005a46 <__aeabi_memset>
 8005560:	2200      	movs	r2, #0
 8005562:	f885 2025 	strb.w	r2, [r5, #37]	@ 0x25
 8005566:	4620      	mov	r0, r4
 8005568:	f00a fbd7 	bl	800fd1a <USBPD_PHY_Reset>
 800556c:	4620      	mov	r0, r4
 800556e:	e8bd 4032 	ldmia.w	sp!, {r1, r4, r5, lr}
 8005572:	f00a bc72 	b.w	800fe5a <USBPD_PHY_EnableRX>

08005576 <USBPD_PRL_Stop>:
 8005576:	f00a bc7d 	b.w	800fe74 <USBPD_PHY_DisableRX>

0800557a <USBPD_PRL_DeInit>:
 800557a:	4770      	bx	lr

0800557c <PRL_DisableRX>:
 800557c:	f00a bc7a 	b.w	800fe74 <USBPD_PHY_DisableRX>

08005580 <PRL_Received>:
 8005580:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005584:	4682      	mov	sl, r0
 8005586:	f8df 9430 	ldr.w	r9, [pc, #1072]	@ 80059b8 <.text_40>
 800558a:	b084      	sub	sp, #16
 800558c:	4655      	mov	r5, sl
 800558e:	f859 4025 	ldr.w	r4, [r9, r5, lsl #2]
 8005592:	f8df b428 	ldr.w	fp, [pc, #1064]	@ 80059bc <.text_41>
 8005596:	4688      	mov	r8, r1
 8005598:	f00a fbb3 	bl	800fd02 <USBPD_PHY_GetMinGOODCRCTimerValue>
 800559c:	4601      	mov	r1, r0
 800559e:	ea4f 004a 	mov.w	r0, sl, lsl #1
 80055a2:	b2c0      	uxtb	r0, r0
 80055a4:	f00b ff4a 	bl	801143c <USBPD_TIM_Start>
 80055a8:	f104 0628 	add.w	r6, r4, #40	@ 0x28
 80055ac:	7a30      	ldrb	r0, [r6, #8]
 80055ae:	7a71      	ldrb	r1, [r6, #9]
 80055b0:	eb00 2701 	add.w	r7, r0, r1, lsl #8
 80055b4:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 80055b8:	4038      	ands	r0, r7
 80055ba:	2801      	cmp	r0, #1
 80055bc:	d113      	bne.n	80055e6 <PRL_Received+0x66>
 80055be:	0069      	lsls	r1, r5, #1
 80055c0:	1c49      	adds	r1, r1, #1
 80055c2:	b2c8      	uxtb	r0, r1
 80055c4:	f00b ffac 	bl	8011520 <USBPD_TIM_IsExpired>
 80055c8:	2801      	cmp	r0, #1
 80055ca:	d040      	beq.n	800564e <PRL_Received+0xce>
 80055cc:	f859 1025 	ldr.w	r1, [r9, r5, lsl #2]
 80055d0:	200b      	movs	r0, #11
 80055d2:	7148      	strb	r0, [r1, #5]
 80055d4:	8367      	strh	r7, [r4, #26]
 80055d6:	f000 f96c 	bl	80058b2 <.text_33>
 80055da:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80055de:	4642      	mov	r2, r8
 80055e0:	4651      	mov	r1, sl
 80055e2:	2001      	movs	r0, #1
 80055e4:	e14d      	b.n	8005882 <PRL_Received+0x302>
 80055e6:	f20f 405c 	addw	r0, pc, #1116	@ 0x45c
 80055ea:	8805      	ldrh	r5, [r0, #0]
 80055ec:	f24f 001f 	movw	r0, #61471	@ 0xf01f
 80055f0:	2101      	movs	r1, #1
 80055f2:	4038      	ands	r0, r7
 80055f4:	72a1      	strb	r1, [r4, #10]
 80055f6:	eb04 0208 	add.w	r2, r4, r8
 80055fa:	280d      	cmp	r0, #13
 80055fc:	9202      	str	r2, [sp, #8]
 80055fe:	d103      	bne.n	8005608 <PRL_Received+0x88>
 8005600:	2100      	movs	r1, #0
 8005602:	72d1      	strb	r1, [r2, #11]
 8005604:	f000 f95b 	bl	80058be <.text_34>
 8005608:	ea5f 0008 	movs.w	r0, r8
 800560c:	d10c      	bne.n	8005628 <PRL_Received+0xa8>
 800560e:	8a60      	ldrh	r0, [r4, #18]
 8005610:	f3c0 1140 	ubfx	r1, r0, #5, #1
 8005614:	f3c0 2200 	ubfx	r2, r0, #8, #1
 8005618:	f64f 60df 	movw	r0, #65247	@ 0xfedf
 800561c:	4005      	ands	r5, r0
 800561e:	ea45 1541 	orr.w	r5, r5, r1, lsl #5
 8005622:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8005626:	e002      	b.n	800562e <PRL_Received+0xae>
 8005628:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 800562c:	4015      	ands	r5, r2
 800562e:	f24f 113f 	movw	r1, #61759	@ 0xf13f
 8005632:	400d      	ands	r5, r1
 8005634:	f407 6060 	and.w	r0, r7, #3584	@ 0xe00
 8005638:	4305      	orrs	r5, r0
 800563a:	f045 0540 	orr.w	r5, r5, #64	@ 0x40
 800563e:	7625      	strb	r5, [r4, #24]
 8005640:	4641      	mov	r1, r8
 8005642:	0a2d      	lsrs	r5, r5, #8
 8005644:	7665      	strb	r5, [r4, #25]
 8005646:	4650      	mov	r0, sl
 8005648:	f7fb fb2b 	bl	8000ca2 <PE_PRL_PostReceiveEvent>
 800564c:	2800      	cmp	r0, #0
 800564e:	f000 811b 	beq.w	8005888 <PRL_Received+0x308>
 8005652:	2001      	movs	r0, #1
 8005654:	7420      	strb	r0, [r4, #16]
 8005656:	ea4f 004a 	mov.w	r0, sl, lsl #1
 800565a:	b2c0      	uxtb	r0, r0
 800565c:	f00b ff60 	bl	8011520 <USBPD_TIM_IsExpired>
 8005660:	2800      	cmp	r0, #0
 8005662:	d0f8      	beq.n	8005656 <PRL_Received+0xd6>
 8005664:	2302      	movs	r3, #2
 8005666:	f104 0218 	add.w	r2, r4, #24
 800566a:	4641      	mov	r1, r8
 800566c:	4650      	mov	r0, sl
 800566e:	f00a fb72 	bl	800fd56 <USBPD_PHY_SendMessage>
 8005672:	9003      	str	r0, [sp, #12]
 8005674:	f884 8009 	strb.w	r8, [r4, #9]
 8005678:	f104 0130 	add.w	r1, r4, #48	@ 0x30
 800567c:	4650      	mov	r0, sl
 800567e:	f7fb fb46 	bl	8000d0e <PE_PRL_PostReceiveEventCopy>
 8005682:	7ab0      	ldrb	r0, [r6, #10]
 8005684:	7af1      	ldrb	r1, [r6, #11]
 8005686:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 800568a:	f8ad 2004 	strh.w	r2, [sp, #4]
 800568e:	0438      	lsls	r0, r7, #16
 8005690:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005694:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 8005698:	0bc9      	lsrs	r1, r1, #15
 800569a:	0fc0      	lsrs	r0, r0, #31
 800569c:	f3c5 0508 	ubfx	r5, r5, #0, #9
 80056a0:	f8ad 1006 	strh.w	r1, [sp, #6]
 80056a4:	d004      	beq.n	80056b0 <PRL_Received+0x130>
 80056a6:	0008      	movs	r0, r1
 80056a8:	d102      	bne.n	80056b0 <PRL_Received+0x130>
 80056aa:	1d29      	adds	r1, r5, #4
 80056ac:	9100      	str	r1, [sp, #0]
 80056ae:	e019      	b.n	80056e4 <PRL_Received+0x164>
 80056b0:	7821      	ldrb	r1, [r4, #0]
 80056b2:	b9a9      	cbnz	r1, 80056e0 <PRL_Received+0x160>
 80056b4:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80056b8:	b190      	cbz	r0, 80056e0 <PRL_Received+0x160>
 80056ba:	f007 001f 	and.w	r0, r7, #31
 80056be:	2803      	cmp	r0, #3
 80056c0:	d10e      	bne.n	80056e0 <PRL_Received+0x160>
 80056c2:	7ab0      	ldrb	r0, [r6, #10]
 80056c4:	7af1      	ldrb	r1, [r6, #11]
 80056c6:	eb00 2201 	add.w	r2, r0, r1, lsl #8
 80056ca:	7b30      	ldrb	r0, [r6, #12]
 80056cc:	7b71      	ldrb	r1, [r6, #13]
 80056ce:	eb02 4200 	add.w	r2, r2, r0, lsl #16
 80056d2:	eb02 6201 	add.w	r2, r2, r1, lsl #24
 80056d6:	0f12      	lsrs	r2, r2, #28
 80056d8:	2a08      	cmp	r2, #8
 80056da:	bf04      	itt	eq
 80056dc:	2001      	moveq	r0, #1
 80056de:	7020      	strbeq	r0, [r4, #0]
 80056e0:	f000 f8e7 	bl	80058b2 <.text_33>
 80056e4:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80056e8:	f8db c000 	ldr.w	ip, [fp]
 80056ec:	4642      	mov	r2, r8
 80056ee:	4651      	mov	r1, sl
 80056f0:	2001      	movs	r0, #1
 80056f2:	47e0      	blx	ip
 80056f4:	9803      	ldr	r0, [sp, #12]
 80056f6:	b948      	cbnz	r0, 800570c <PRL_Received+0x18c>
 80056f8:	2102      	movs	r1, #2
 80056fa:	9100      	str	r1, [sp, #0]
 80056fc:	f104 0318 	add.w	r3, r4, #24
 8005700:	f8db c000 	ldr.w	ip, [fp]
 8005704:	4642      	mov	r2, r8
 8005706:	4651      	mov	r1, sl
 8005708:	2002      	movs	r0, #2
 800570a:	47e0      	blx	ip
 800570c:	9802      	ldr	r0, [sp, #8]
 800570e:	7981      	ldrb	r1, [r0, #6]
 8005710:	f3c7 2042 	ubfx	r0, r7, #9, #3
 8005714:	4281      	cmp	r1, r0
 8005716:	bf04      	itt	eq
 8005718:	9803      	ldreq	r0, [sp, #12]
 800571a:	2800      	cmpeq	r0, #0
 800571c:	f000 80a2 	beq.w	8005864 <PRL_Received+0x2e4>
 8005720:	0439      	lsls	r1, r7, #16
 8005722:	9a02      	ldr	r2, [sp, #8]
 8005724:	0e49      	lsrs	r1, r1, #25
 8005726:	f001 0107 	and.w	r1, r1, #7
 800572a:	7191      	strb	r1, [r2, #6]
 800572c:	0438      	lsls	r0, r7, #16
 800572e:	8427      	strh	r7, [r4, #32]
 8005730:	0fc0      	lsrs	r0, r0, #31
 8005732:	bf1c      	itt	ne
 8005734:	f8bd 0006 	ldrhne.w	r0, [sp, #6]
 8005738:	2800      	cmpne	r0, #0
 800573a:	d06e      	beq.n	800581a <PRL_Received+0x29a>
 800573c:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8005740:	83e0      	strh	r0, [r4, #30]
 8005742:	201a      	movs	r0, #26
 8005744:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 8005748:	f411 4ff8 	tst.w	r1, #31744	@ 0x7c00
 800574c:	d13c      	bne.n	80057c8 <PRL_Received+0x248>
 800574e:	f3c7 3102 	ubfx	r1, r7, #12, #3
 8005752:	2907      	cmp	r1, #7
 8005754:	d301      	bcc.n	800575a <PRL_Received+0x1da>
 8005756:	2d1a      	cmp	r5, #26
 8005758:	d820      	bhi.n	800579c <PRL_Received+0x21c>
 800575a:	2100      	movs	r1, #0
 800575c:	3434      	adds	r4, #52	@ 0x34
 800575e:	e00c      	b.n	800577a <PRL_Received+0x1fa>
 8005760:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005764:	6832      	ldr	r2, [r6, #0]
 8005766:	f814 e001 	ldrb.w	lr, [r4, r1]
 800576a:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 800576e:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005772:	1c49      	adds	r1, r1, #1
 8005774:	f802 e003 	strb.w	lr, [r2, r3]
 8005778:	b289      	uxth	r1, r1
 800577a:	f000 f894 	bl	80058a6 <.text_32>
 800577e:	d3ef      	bcc.n	8005760 <PRL_Received+0x1e0>
 8005780:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005784:	0080      	lsls	r0, r0, #2
 8005786:	1e80      	subs	r0, r0, #2
 8005788:	42a8      	cmp	r0, r5
 800578a:	d204      	bcs.n	8005796 <PRL_Received+0x216>
 800578c:	f3c7 3002 	ubfx	r0, r7, #12, #3
 8005790:	0080      	lsls	r0, r0, #2
 8005792:	1e80      	subs	r0, r0, #2
 8005794:	e00f      	b.n	80057b6 <PRL_Received+0x236>
 8005796:	6870      	ldr	r0, [r6, #4]
 8005798:	8005      	strh	r5, [r0, #0]
 800579a:	e00e      	b.n	80057ba <PRL_Received+0x23a>
 800579c:	2101      	movs	r1, #1
 800579e:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80057a2:	2000      	movs	r0, #0
 80057a4:	f104 0134 	add.w	r1, r4, #52	@ 0x34
 80057a8:	6833      	ldr	r3, [r6, #0]
 80057aa:	5c0a      	ldrb	r2, [r1, r0]
 80057ac:	541a      	strb	r2, [r3, r0]
 80057ae:	1c40      	adds	r0, r0, #1
 80057b0:	281a      	cmp	r0, #26
 80057b2:	d3f9      	bcc.n	80057a8 <PRL_Received+0x228>
 80057b4:	201a      	movs	r0, #26
 80057b6:	6871      	ldr	r1, [r6, #4]
 80057b8:	8008      	strh	r0, [r1, #0]
 80057ba:	4641      	mov	r1, r8
 80057bc:	4650      	mov	r0, sl
 80057be:	b005      	add	sp, #20
 80057c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057c4:	f7fb ba6d 	b.w	8000ca2 <PE_PRL_PostReceiveEvent>
 80057c8:	6871      	ldr	r1, [r6, #4]
 80057ca:	8809      	ldrh	r1, [r1, #0]
 80057cc:	f240 1205 	movw	r2, #261	@ 0x105
 80057d0:	f101 031a 	add.w	r3, r1, #26
 80057d4:	4293      	cmp	r3, r2
 80057d6:	bf3f      	itttt	cc
 80057d8:	f3c7 3302 	ubfxcc	r3, r7, #12, #3
 80057dc:	eb01 0183 	addcc.w	r1, r1, r3, lsl #2
 80057e0:	1e89      	subcc	r1, r1, #2
 80057e2:	42a9      	cmpcc	r1, r5
 80057e4:	d21a      	bcs.n	800581c <PRL_Received+0x29c>
 80057e6:	2101      	movs	r1, #1
 80057e8:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 80057ec:	3434      	adds	r4, #52	@ 0x34
 80057ee:	2100      	movs	r1, #0
 80057f0:	e007      	b.n	8005802 <PRL_Received+0x282>
 80057f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80057f6:	6832      	ldr	r2, [r6, #0]
 80057f8:	5c65      	ldrb	r5, [r4, r1]
 80057fa:	f000 f848 	bl	800588e <.text_30>
 80057fe:	54d5      	strb	r5, [r2, r3]
 8005800:	b289      	uxth	r1, r1
 8005802:	f000 f850 	bl	80058a6 <.text_32>
 8005806:	d3f4      	bcc.n	80057f2 <PRL_Received+0x272>
 8005808:	6871      	ldr	r1, [r6, #4]
 800580a:	880a      	ldrh	r2, [r1, #0]
 800580c:	043f      	lsls	r7, r7, #16
 800580e:	0ebf      	lsrs	r7, r7, #26
 8005810:	f007 071c 	and.w	r7, r7, #28
 8005814:	1eb8      	subs	r0, r7, #2
 8005816:	1882      	adds	r2, r0, r2
 8005818:	800a      	strh	r2, [r1, #0]
 800581a:	e035      	b.n	8005888 <PRL_Received+0x308>
 800581c:	6871      	ldr	r1, [r6, #4]
 800581e:	880b      	ldrh	r3, [r1, #0]
 8005820:	f000 f83b 	bl	800589a <.text_31>
 8005824:	4291      	cmp	r1, r2
 8005826:	d219      	bcs.n	800585c <PRL_Received+0x2dc>
 8005828:	f000 f837 	bl	800589a <.text_31>
 800582c:	42a9      	cmp	r1, r5
 800582e:	d315      	bcc.n	800585c <PRL_Received+0x2dc>
 8005830:	2201      	movs	r2, #1
 8005832:	f884 2025 	strb.w	r2, [r4, #37]	@ 0x25
 8005836:	2100      	movs	r1, #0
 8005838:	3434      	adds	r4, #52	@ 0x34
 800583a:	e009      	b.n	8005850 <PRL_Received+0x2d0>
 800583c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005840:	6832      	ldr	r2, [r6, #0]
 8005842:	f814 a001 	ldrb.w	sl, [r4, r1]
 8005846:	f000 f822 	bl	800588e <.text_30>
 800584a:	f802 a003 	strb.w	sl, [r2, r3]
 800584e:	b289      	uxth	r1, r1
 8005850:	f000 f829 	bl	80058a6 <.text_32>
 8005854:	d3f2      	bcc.n	800583c <PRL_Received+0x2bc>
 8005856:	6870      	ldr	r0, [r6, #4]
 8005858:	8005      	strh	r5, [r0, #0]
 800585a:	e015      	b.n	8005888 <PRL_Received+0x308>
 800585c:	2100      	movs	r1, #0
 800585e:	f884 1025 	strb.w	r1, [r4, #37]	@ 0x25
 8005862:	e011      	b.n	8005888 <PRL_Received+0x308>
 8005864:	20ff      	movs	r0, #255	@ 0xff
 8005866:	7260      	strb	r0, [r4, #9]
 8005868:	2100      	movs	r1, #0
 800586a:	7421      	strb	r1, [r4, #16]
 800586c:	4650      	mov	r0, sl
 800586e:	f7fb fa38 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005872:	2000      	movs	r0, #0
 8005874:	72a0      	strb	r0, [r4, #10]
 8005876:	2117      	movs	r1, #23
 8005878:	9100      	str	r1, [sp, #0]
 800587a:	2200      	movs	r2, #0
 800587c:	a365      	add	r3, pc, #404	@ (adr r3, 8005a14 <.text_43>)
 800587e:	4651      	mov	r1, sl
 8005880:	2006      	movs	r0, #6
 8005882:	f8db 4000 	ldr.w	r4, [fp]
 8005886:	47a0      	blx	r4
 8005888:	b005      	add	sp, #20
 800588a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800588e <.text_30>:
 800588e:	f3c3 23c3 	ubfx	r3, r3, #11, #4
 8005892:	fb10 1303 	smlabb	r3, r0, r3, r1
 8005896:	1c49      	adds	r1, r1, #1
 8005898:	4770      	bx	lr

0800589a <.text_31>:
 800589a:	f3c7 3102 	ubfx	r1, r7, #12, #3
 800589e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 80058a2:	1e89      	subs	r1, r1, #2
 80058a4:	4770      	bx	lr

080058a6 <.text_32>:
 80058a6:	f3c7 3202 	ubfx	r2, r7, #12, #3
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	1e92      	subs	r2, r2, #2
 80058ae:	4291      	cmp	r1, r2
 80058b0:	4770      	bx	lr

080058b2 <.text_33>:
 80058b2:	f3c7 3002 	ubfx	r0, r7, #12, #3
 80058b6:	0080      	lsls	r0, r0, #2
 80058b8:	1c80      	adds	r0, r0, #2
 80058ba:	9000      	str	r0, [sp, #0]
 80058bc:	4770      	bx	lr

080058be <.text_34>:
 80058be:	220f      	movs	r2, #15
 80058c0:	2103      	movs	r1, #3
 80058c2:	1da0      	adds	r0, r4, #6
 80058c4:	f000 b8bf 	b.w	8005a46 <__aeabi_memset>

080058c8 <PRL_ResetIndicate>:
 80058c8:	e92d 41fc 	stmdb	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 80058cc:	460d      	mov	r5, r1
 80058ce:	2d05      	cmp	r5, #5
 80058d0:	4680      	mov	r8, r0
 80058d2:	d116      	bne.n	8005902 <PRL_ResetIndicate+0x3a>
 80058d4:	4f38      	ldr	r7, [pc, #224]	@ (80059b8 <.text_40>)
 80058d6:	4646      	mov	r6, r8
 80058d8:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
 80058dc:	2000      	movs	r0, #0
 80058de:	2100      	movs	r1, #0
 80058e0:	b2c2      	uxtb	r2, r0
 80058e2:	1c40      	adds	r0, r0, #1
 80058e4:	18a2      	adds	r2, r4, r2
 80058e6:	b2c3      	uxtb	r3, r0
 80058e8:	2b03      	cmp	r3, #3
 80058ea:	72d1      	strb	r1, [r2, #11]
 80058ec:	d3f8      	bcc.n	80058e0 <PRL_ResetIndicate+0x18>
 80058ee:	f7ff ffe6 	bl	80058be <.text_34>
 80058f2:	f857 0026 	ldr.w	r0, [r7, r6, lsl #2]
 80058f6:	2200      	movs	r2, #0
 80058f8:	7142      	strb	r2, [r0, #5]
 80058fa:	7022      	strb	r2, [r4, #0]
 80058fc:	4640      	mov	r0, r8
 80058fe:	f7ff fe3d 	bl	800557c <PRL_DisableRX>
 8005902:	2000      	movs	r0, #0
 8005904:	4e2d      	ldr	r6, [pc, #180]	@ (80059bc <.text_41>)
 8005906:	6837      	ldr	r7, [r6, #0]
 8005908:	9000      	str	r0, [sp, #0]
 800590a:	2300      	movs	r3, #0
 800590c:	462a      	mov	r2, r5
 800590e:	4641      	mov	r1, r8
 8005910:	2001      	movs	r0, #1
 8005912:	47b8      	blx	r7
 8005914:	4629      	mov	r1, r5
 8005916:	4640      	mov	r0, r8
 8005918:	e8bd 41fc 	ldmia.w	sp!, {r2, r3, r4, r5, r6, r7, r8, lr}
 800591c:	f7fb b8c3 	b.w	8000aa6 <PE_PRL_ResetReceived>

08005920 <PRL_ResetCompleted>:
 8005920:	4a25      	ldr	r2, [pc, #148]	@ (80059b8 <.text_40>)
 8005922:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8005926:	2101      	movs	r1, #1
 8005928:	70c1      	strb	r1, [r0, #3]
 800592a:	4770      	bx	lr

0800592c <PRL_BistCompleted>:
 800592c:	f7fb b8e0 	b.w	8000af0 <PE_PRL_BistCompleted>

08005930 <PRL_TxCompleted>:
 8005930:	b538      	push	{r3, r4, r5, lr}
 8005932:	4a21      	ldr	r2, [pc, #132]	@ (80059b8 <.text_40>)
 8005934:	4604      	mov	r4, r0
 8005936:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
 800593a:	7c2a      	ldrb	r2, [r5, #16]
 800593c:	2a01      	cmp	r2, #1
 800593e:	d002      	beq.n	8005946 <PRL_TxCompleted+0x16>
 8005940:	2a02      	cmp	r2, #2
 8005942:	d009      	beq.n	8005958 <PRL_TxCompleted+0x28>
 8005944:	e010      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005946:	b911      	cbnz	r1, 800594e <PRL_TxCompleted+0x1e>
 8005948:	f7fb f9fe 	bl	8000d48 <PE_PRL_PostReceiveEventComplete>
 800594c:	e001      	b.n	8005952 <PRL_TxCompleted+0x22>
 800594e:	f7fb f9c8 	bl	8000ce2 <PE_PRL_PostReceiveEventError>
 8005952:	2000      	movs	r0, #0
 8005954:	72a8      	strb	r0, [r5, #10]
 8005956:	e007      	b.n	8005968 <PRL_TxCompleted+0x38>
 8005958:	f00a f9c6 	bl	800fce8 <USBPD_PHY_GetRetryTimerValue>
 800595c:	0064      	lsls	r4, r4, #1
 800595e:	4601      	mov	r1, r0
 8005960:	1c64      	adds	r4, r4, #1
 8005962:	b2e0      	uxtb	r0, r4
 8005964:	f00b fd6a 	bl	801143c <USBPD_TIM_Start>
 8005968:	2000      	movs	r0, #0
 800596a:	7428      	strb	r0, [r5, #16]
 800596c:	bd31      	pop	{r0, r4, r5, pc}

0800596e <USBPD_PRL_PrepareExtendedTxChunkSending>:
 800596e:	b530      	push	{r4, r5, lr}
 8005970:	4c11      	ldr	r4, [pc, #68]	@ (80059b8 <.text_40>)
 8005972:	f854 4020 	ldr.w	r4, [r4, r0, lsl #2]
 8005976:	8ba5      	ldrh	r5, [r4, #28]
 8005978:	f248 30ff 	movw	r0, #33791	@ 0x83ff
 800597c:	4005      	ands	r5, r0
 800597e:	8a60      	ldrh	r0, [r4, #18]
 8005980:	ea45 25c1 	orr.w	r5, r5, r1, lsl #11
 8005984:	f440 4000 	orr.w	r0, r0, #32768	@ 0x8000
 8005988:	f405 457e 	and.w	r5, r5, #65024	@ 0xfe00
 800598c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005990:	8260      	strh	r0, [r4, #18]
 8005992:	432a      	orrs	r2, r5
 8005994:	8c21      	ldrh	r1, [r4, #32]
 8005996:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800599a:	f361 0004 	bfi	r0, r1, #0, #5
 800599e:	83a2      	strh	r2, [r4, #28]
 80059a0:	8260      	strh	r0, [r4, #18]
 80059a2:	7018      	strb	r0, [r3, #0]
 80059a4:	8a60      	ldrh	r0, [r4, #18]
 80059a6:	0a00      	lsrs	r0, r0, #8
 80059a8:	7058      	strb	r0, [r3, #1]
 80059aa:	8ba0      	ldrh	r0, [r4, #28]
 80059ac:	7098      	strb	r0, [r3, #2]
 80059ae:	8ba1      	ldrh	r1, [r4, #28]
 80059b0:	0a09      	lsrs	r1, r1, #8
 80059b2:	70d9      	strb	r1, [r3, #3]
 80059b4:	bd30      	pop	{r4, r5, pc}
	...

080059b8 <.text_40>:
 80059b8:	200001c8 	.word	0x200001c8

080059bc <.text_41>:
 80059bc:	20000000 	.word	0x20000000

080059c0 <USBPD_PRL_PrepareChunkRequest>:
 80059c0:	b530      	push	{r4, r5, lr}
 80059c2:	f7ff fb2d 	bl	8005020 <.text_12>
 80059c6:	8b9c      	ldrh	r4, [r3, #28]
 80059c8:	8bdd      	ldrh	r5, [r3, #30]
 80059ca:	f444 4404 	orr.w	r4, r4, #33792	@ 0x8400
 80059ce:	0aed      	lsrs	r5, r5, #11
 80059d0:	839c      	strh	r4, [r3, #28]
 80059d2:	1c6d      	adds	r5, r5, #1
 80059d4:	02ed      	lsls	r5, r5, #11
 80059d6:	f404 4406 	and.w	r4, r4, #34304	@ 0x8600
 80059da:	f405 45f0 	and.w	r5, r5, #30720	@ 0x7800
 80059de:	432c      	orrs	r4, r5
 80059e0:	839c      	strh	r4, [r3, #28]
 80059e2:	8a5c      	ldrh	r4, [r3, #18]
 80059e4:	8c1d      	ldrh	r5, [r3, #32]
 80059e6:	f444 4400 	orr.w	r4, r4, #32768	@ 0x8000
 80059ea:	825c      	strh	r4, [r3, #18]
 80059ec:	f365 0404 	bfi	r4, r5, #0, #5
 80059f0:	825c      	strh	r4, [r3, #18]
 80059f2:	2400      	movs	r4, #0
 80059f4:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 80059f8:	7144      	strb	r4, [r0, #5]
 80059fa:	8a5a      	ldrh	r2, [r3, #18]
 80059fc:	700a      	strb	r2, [r1, #0]
 80059fe:	8a58      	ldrh	r0, [r3, #18]
 8005a00:	0a00      	lsrs	r0, r0, #8
 8005a02:	7048      	strb	r0, [r1, #1]
 8005a04:	8b98      	ldrh	r0, [r3, #28]
 8005a06:	7088      	strb	r0, [r1, #2]
 8005a08:	8b9a      	ldrh	r2, [r3, #28]
 8005a0a:	710c      	strb	r4, [r1, #4]
 8005a0c:	0a12      	lsrs	r2, r2, #8
 8005a0e:	714c      	strb	r4, [r1, #5]
 8005a10:	70ca      	strb	r2, [r1, #3]
 8005a12:	bd30      	pop	{r4, r5, pc}

08005a14 <.text_43>:
 8005a14:	5f4c5250 	.word	0x5f4c5250
 8005a18:	4e455645 	.word	0x4e455645
 8005a1c:	58525f54 	.word	0x58525f54
 8005a20:	5349445f 	.word	0x5349445f
 8005a24:	44524143 	.word	0x44524143
 8005a28:	00004445 	.word	0x00004445

08005a2c <USBPD_PRL_Init::PRL_PhyCallbacks>:
 8005a2c:	08005581 080058c9 08005921 0800592d     .U...X..!Y..-Y..
 8005a3c:	08005931 0800504d                       1Y..MP..

08005a44 <.text_45>:
 8005a44:	0001      	.short	0x0001

08005a46 <__aeabi_memset>:
 8005a46:	b470      	push	{r4, r5, r6}
 8005a48:	0784      	lsls	r4, r0, #30
 8005a4a:	d046      	beq.n	8005ada <__aeabi_memset+0x94>
 8005a4c:	1e4c      	subs	r4, r1, #1
 8005a4e:	2900      	cmp	r1, #0
 8005a50:	d041      	beq.n	8005ad6 <__aeabi_memset+0x90>
 8005a52:	b2d5      	uxtb	r5, r2
 8005a54:	4603      	mov	r3, r0
 8005a56:	e002      	b.n	8005a5e <__aeabi_memset+0x18>
 8005a58:	1e61      	subs	r1, r4, #1
 8005a5a:	b3e4      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005a5c:	460c      	mov	r4, r1
 8005a5e:	f803 5b01 	strb.w	r5, [r3], #1
 8005a62:	0799      	lsls	r1, r3, #30
 8005a64:	d1f8      	bne.n	8005a58 <__aeabi_memset+0x12>
 8005a66:	2c03      	cmp	r4, #3
 8005a68:	d92e      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005a6a:	b2d5      	uxtb	r5, r2
 8005a6c:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 8005a70:	2c0f      	cmp	r4, #15
 8005a72:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8005a76:	d919      	bls.n	8005aac <__aeabi_memset+0x66>
 8005a78:	4626      	mov	r6, r4
 8005a7a:	f103 0110 	add.w	r1, r3, #16
 8005a7e:	3e10      	subs	r6, #16
 8005a80:	2e0f      	cmp	r6, #15
 8005a82:	f841 5c10 	str.w	r5, [r1, #-16]
 8005a86:	f841 5c0c 	str.w	r5, [r1, #-12]
 8005a8a:	f841 5c08 	str.w	r5, [r1, #-8]
 8005a8e:	f841 5c04 	str.w	r5, [r1, #-4]
 8005a92:	f101 0110 	add.w	r1, r1, #16
 8005a96:	d8f2      	bhi.n	8005a7e <__aeabi_memset+0x38>
 8005a98:	f1a4 0110 	sub.w	r1, r4, #16
 8005a9c:	f021 010f 	bic.w	r1, r1, #15
 8005aa0:	f004 040f 	and.w	r4, r4, #15
 8005aa4:	3110      	adds	r1, #16
 8005aa6:	2c03      	cmp	r4, #3
 8005aa8:	440b      	add	r3, r1
 8005aaa:	d90d      	bls.n	8005ac8 <__aeabi_memset+0x82>
 8005aac:	461e      	mov	r6, r3
 8005aae:	4621      	mov	r1, r4
 8005ab0:	3904      	subs	r1, #4
 8005ab2:	2903      	cmp	r1, #3
 8005ab4:	f846 5b04 	str.w	r5, [r6], #4
 8005ab8:	d8fa      	bhi.n	8005ab0 <__aeabi_memset+0x6a>
 8005aba:	1f21      	subs	r1, r4, #4
 8005abc:	f021 0103 	bic.w	r1, r1, #3
 8005ac0:	3104      	adds	r1, #4
 8005ac2:	440b      	add	r3, r1
 8005ac4:	f004 0403 	and.w	r4, r4, #3
 8005ac8:	b12c      	cbz	r4, 8005ad6 <__aeabi_memset+0x90>
 8005aca:	b2d2      	uxtb	r2, r2
 8005acc:	441c      	add	r4, r3
 8005ace:	f803 2b01 	strb.w	r2, [r3], #1
 8005ad2:	42a3      	cmp	r3, r4
 8005ad4:	d1fb      	bne.n	8005ace <__aeabi_memset+0x88>
 8005ad6:	bc70      	pop	{r4, r5, r6}
 8005ad8:	4770      	bx	lr
 8005ada:	460c      	mov	r4, r1
 8005adc:	4603      	mov	r3, r0
 8005ade:	e7c2      	b.n	8005a66 <__aeabi_memset+0x20>

08005ae0 <strlen>:
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ae6:	2a00      	cmp	r2, #0
 8005ae8:	d1fb      	bne.n	8005ae2 <strlen+0x2>
 8005aea:	1a18      	subs	r0, r3, r0
 8005aec:	3801      	subs	r0, #1
 8005aee:	4770      	bx	lr

08005af0 <memchr>:
 8005af0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005af4:	2a10      	cmp	r2, #16
 8005af6:	db2b      	blt.n	8005b50 <memchr+0x60>
 8005af8:	f010 0f07 	tst.w	r0, #7
 8005afc:	d008      	beq.n	8005b10 <memchr+0x20>
 8005afe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b02:	3a01      	subs	r2, #1
 8005b04:	428b      	cmp	r3, r1
 8005b06:	d02d      	beq.n	8005b64 <memchr+0x74>
 8005b08:	f010 0f07 	tst.w	r0, #7
 8005b0c:	b342      	cbz	r2, 8005b60 <memchr+0x70>
 8005b0e:	d1f6      	bne.n	8005afe <memchr+0xe>
 8005b10:	b4f0      	push	{r4, r5, r6, r7}
 8005b12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8005b16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8005b1a:	f022 0407 	bic.w	r4, r2, #7
 8005b1e:	f07f 0700 	mvns.w	r7, #0
 8005b22:	2300      	movs	r3, #0
 8005b24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8005b28:	3c08      	subs	r4, #8
 8005b2a:	ea85 0501 	eor.w	r5, r5, r1
 8005b2e:	ea86 0601 	eor.w	r6, r6, r1
 8005b32:	fa85 f547 	uadd8	r5, r5, r7
 8005b36:	faa3 f587 	sel	r5, r3, r7
 8005b3a:	fa86 f647 	uadd8	r6, r6, r7
 8005b3e:	faa5 f687 	sel	r6, r5, r7
 8005b42:	b98e      	cbnz	r6, 8005b68 <memchr+0x78>
 8005b44:	d1ee      	bne.n	8005b24 <memchr+0x34>
 8005b46:	bcf0      	pop	{r4, r5, r6, r7}
 8005b48:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8005b4c:	f002 0207 	and.w	r2, r2, #7
 8005b50:	b132      	cbz	r2, 8005b60 <memchr+0x70>
 8005b52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005b56:	3a01      	subs	r2, #1
 8005b58:	ea83 0301 	eor.w	r3, r3, r1
 8005b5c:	b113      	cbz	r3, 8005b64 <memchr+0x74>
 8005b5e:	d1f8      	bne.n	8005b52 <memchr+0x62>
 8005b60:	2000      	movs	r0, #0
 8005b62:	4770      	bx	lr
 8005b64:	3801      	subs	r0, #1
 8005b66:	4770      	bx	lr
 8005b68:	2d00      	cmp	r5, #0
 8005b6a:	bf06      	itte	eq
 8005b6c:	4635      	moveq	r5, r6
 8005b6e:	3803      	subeq	r0, #3
 8005b70:	3807      	subne	r0, #7
 8005b72:	f015 0f01 	tst.w	r5, #1
 8005b76:	d107      	bne.n	8005b88 <memchr+0x98>
 8005b78:	3001      	adds	r0, #1
 8005b7a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 8005b7e:	bf02      	ittt	eq
 8005b80:	3001      	addeq	r0, #1
 8005b82:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8005b86:	3001      	addeq	r0, #1
 8005b88:	bcf0      	pop	{r4, r5, r6, r7}
 8005b8a:	3801      	subs	r0, #1
 8005b8c:	4770      	bx	lr
 8005b8e:	bf00      	nop

08005b90 <__aeabi_uldivmod>:
 8005b90:	b953      	cbnz	r3, 8005ba8 <__aeabi_uldivmod+0x18>
 8005b92:	b94a      	cbnz	r2, 8005ba8 <__aeabi_uldivmod+0x18>
 8005b94:	2900      	cmp	r1, #0
 8005b96:	bf08      	it	eq
 8005b98:	2800      	cmpeq	r0, #0
 8005b9a:	bf1c      	itt	ne
 8005b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8005ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8005ba4:	f000 b96a 	b.w	8005e7c <__aeabi_idiv0>
 8005ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8005bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8005bb0:	f000 f806 	bl	8005bc0 <__udivmoddi4>
 8005bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8005bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bbc:	b004      	add	sp, #16
 8005bbe:	4770      	bx	lr

08005bc0 <__udivmoddi4>:
 8005bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bc4:	9d08      	ldr	r5, [sp, #32]
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d14e      	bne.n	8005c6a <__udivmoddi4+0xaa>
 8005bcc:	4694      	mov	ip, r2
 8005bce:	458c      	cmp	ip, r1
 8005bd0:	4686      	mov	lr, r0
 8005bd2:	fab2 f282 	clz	r2, r2
 8005bd6:	d962      	bls.n	8005c9e <__udivmoddi4+0xde>
 8005bd8:	b14a      	cbz	r2, 8005bee <__udivmoddi4+0x2e>
 8005bda:	f1c2 0320 	rsb	r3, r2, #32
 8005bde:	4091      	lsls	r1, r2
 8005be0:	fa20 f303 	lsr.w	r3, r0, r3
 8005be4:	fa0c fc02 	lsl.w	ip, ip, r2
 8005be8:	4319      	orrs	r1, r3
 8005bea:	fa00 fe02 	lsl.w	lr, r0, r2
 8005bee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8005bf2:	fa1f f68c 	uxth.w	r6, ip
 8005bf6:	fbb1 f4f7 	udiv	r4, r1, r7
 8005bfa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005bfe:	fb07 1114 	mls	r1, r7, r4, r1
 8005c02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c06:	fb04 f106 	mul.w	r1, r4, r6
 8005c0a:	4299      	cmp	r1, r3
 8005c0c:	d90a      	bls.n	8005c24 <__udivmoddi4+0x64>
 8005c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8005c12:	f104 30ff 	add.w	r0, r4, #4294967295
 8005c16:	f080 8112 	bcs.w	8005e3e <__udivmoddi4+0x27e>
 8005c1a:	4299      	cmp	r1, r3
 8005c1c:	f240 810f 	bls.w	8005e3e <__udivmoddi4+0x27e>
 8005c20:	3c02      	subs	r4, #2
 8005c22:	4463      	add	r3, ip
 8005c24:	1a59      	subs	r1, r3, r1
 8005c26:	fa1f f38e 	uxth.w	r3, lr
 8005c2a:	fbb1 f0f7 	udiv	r0, r1, r7
 8005c2e:	fb07 1110 	mls	r1, r7, r0, r1
 8005c32:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005c36:	fb00 f606 	mul.w	r6, r0, r6
 8005c3a:	429e      	cmp	r6, r3
 8005c3c:	d90a      	bls.n	8005c54 <__udivmoddi4+0x94>
 8005c3e:	eb1c 0303 	adds.w	r3, ip, r3
 8005c42:	f100 31ff 	add.w	r1, r0, #4294967295
 8005c46:	f080 80fc 	bcs.w	8005e42 <__udivmoddi4+0x282>
 8005c4a:	429e      	cmp	r6, r3
 8005c4c:	f240 80f9 	bls.w	8005e42 <__udivmoddi4+0x282>
 8005c50:	4463      	add	r3, ip
 8005c52:	3802      	subs	r0, #2
 8005c54:	1b9b      	subs	r3, r3, r6
 8005c56:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8005c5a:	2100      	movs	r1, #0
 8005c5c:	b11d      	cbz	r5, 8005c66 <__udivmoddi4+0xa6>
 8005c5e:	40d3      	lsrs	r3, r2
 8005c60:	2200      	movs	r2, #0
 8005c62:	e9c5 3200 	strd	r3, r2, [r5]
 8005c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c6a:	428b      	cmp	r3, r1
 8005c6c:	d905      	bls.n	8005c7a <__udivmoddi4+0xba>
 8005c6e:	b10d      	cbz	r5, 8005c74 <__udivmoddi4+0xb4>
 8005c70:	e9c5 0100 	strd	r0, r1, [r5]
 8005c74:	2100      	movs	r1, #0
 8005c76:	4608      	mov	r0, r1
 8005c78:	e7f5      	b.n	8005c66 <__udivmoddi4+0xa6>
 8005c7a:	fab3 f183 	clz	r1, r3
 8005c7e:	2900      	cmp	r1, #0
 8005c80:	d146      	bne.n	8005d10 <__udivmoddi4+0x150>
 8005c82:	42a3      	cmp	r3, r4
 8005c84:	d302      	bcc.n	8005c8c <__udivmoddi4+0xcc>
 8005c86:	4290      	cmp	r0, r2
 8005c88:	f0c0 80f0 	bcc.w	8005e6c <__udivmoddi4+0x2ac>
 8005c8c:	1a86      	subs	r6, r0, r2
 8005c8e:	eb64 0303 	sbc.w	r3, r4, r3
 8005c92:	2001      	movs	r0, #1
 8005c94:	2d00      	cmp	r5, #0
 8005c96:	d0e6      	beq.n	8005c66 <__udivmoddi4+0xa6>
 8005c98:	e9c5 6300 	strd	r6, r3, [r5]
 8005c9c:	e7e3      	b.n	8005c66 <__udivmoddi4+0xa6>
 8005c9e:	2a00      	cmp	r2, #0
 8005ca0:	f040 8090 	bne.w	8005dc4 <__udivmoddi4+0x204>
 8005ca4:	eba1 040c 	sub.w	r4, r1, ip
 8005ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8005cac:	fa1f f78c 	uxth.w	r7, ip
 8005cb0:	2101      	movs	r1, #1
 8005cb2:	fbb4 f6f8 	udiv	r6, r4, r8
 8005cb6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8005cba:	fb08 4416 	mls	r4, r8, r6, r4
 8005cbe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cc2:	fb07 f006 	mul.w	r0, r7, r6
 8005cc6:	4298      	cmp	r0, r3
 8005cc8:	d908      	bls.n	8005cdc <__udivmoddi4+0x11c>
 8005cca:	eb1c 0303 	adds.w	r3, ip, r3
 8005cce:	f106 34ff 	add.w	r4, r6, #4294967295
 8005cd2:	d202      	bcs.n	8005cda <__udivmoddi4+0x11a>
 8005cd4:	4298      	cmp	r0, r3
 8005cd6:	f200 80cd 	bhi.w	8005e74 <__udivmoddi4+0x2b4>
 8005cda:	4626      	mov	r6, r4
 8005cdc:	1a1c      	subs	r4, r3, r0
 8005cde:	fa1f f38e 	uxth.w	r3, lr
 8005ce2:	fbb4 f0f8 	udiv	r0, r4, r8
 8005ce6:	fb08 4410 	mls	r4, r8, r0, r4
 8005cea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8005cee:	fb00 f707 	mul.w	r7, r0, r7
 8005cf2:	429f      	cmp	r7, r3
 8005cf4:	d908      	bls.n	8005d08 <__udivmoddi4+0x148>
 8005cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8005cfa:	f100 34ff 	add.w	r4, r0, #4294967295
 8005cfe:	d202      	bcs.n	8005d06 <__udivmoddi4+0x146>
 8005d00:	429f      	cmp	r7, r3
 8005d02:	f200 80b0 	bhi.w	8005e66 <__udivmoddi4+0x2a6>
 8005d06:	4620      	mov	r0, r4
 8005d08:	1bdb      	subs	r3, r3, r7
 8005d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8005d0e:	e7a5      	b.n	8005c5c <__udivmoddi4+0x9c>
 8005d10:	f1c1 0620 	rsb	r6, r1, #32
 8005d14:	408b      	lsls	r3, r1
 8005d16:	fa22 f706 	lsr.w	r7, r2, r6
 8005d1a:	431f      	orrs	r7, r3
 8005d1c:	fa20 fc06 	lsr.w	ip, r0, r6
 8005d20:	fa04 f301 	lsl.w	r3, r4, r1
 8005d24:	ea43 030c 	orr.w	r3, r3, ip
 8005d28:	40f4      	lsrs	r4, r6
 8005d2a:	fa00 f801 	lsl.w	r8, r0, r1
 8005d2e:	0c38      	lsrs	r0, r7, #16
 8005d30:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8005d34:	fbb4 fef0 	udiv	lr, r4, r0
 8005d38:	fa1f fc87 	uxth.w	ip, r7
 8005d3c:	fb00 441e 	mls	r4, r0, lr, r4
 8005d40:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005d44:	fb0e f90c 	mul.w	r9, lr, ip
 8005d48:	45a1      	cmp	r9, r4
 8005d4a:	fa02 f201 	lsl.w	r2, r2, r1
 8005d4e:	d90a      	bls.n	8005d66 <__udivmoddi4+0x1a6>
 8005d50:	193c      	adds	r4, r7, r4
 8005d52:	f10e 3aff 	add.w	sl, lr, #4294967295
 8005d56:	f080 8084 	bcs.w	8005e62 <__udivmoddi4+0x2a2>
 8005d5a:	45a1      	cmp	r9, r4
 8005d5c:	f240 8081 	bls.w	8005e62 <__udivmoddi4+0x2a2>
 8005d60:	f1ae 0e02 	sub.w	lr, lr, #2
 8005d64:	443c      	add	r4, r7
 8005d66:	eba4 0409 	sub.w	r4, r4, r9
 8005d6a:	fa1f f983 	uxth.w	r9, r3
 8005d6e:	fbb4 f3f0 	udiv	r3, r4, r0
 8005d72:	fb00 4413 	mls	r4, r0, r3, r4
 8005d76:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8005d7a:	fb03 fc0c 	mul.w	ip, r3, ip
 8005d7e:	45a4      	cmp	ip, r4
 8005d80:	d907      	bls.n	8005d92 <__udivmoddi4+0x1d2>
 8005d82:	193c      	adds	r4, r7, r4
 8005d84:	f103 30ff 	add.w	r0, r3, #4294967295
 8005d88:	d267      	bcs.n	8005e5a <__udivmoddi4+0x29a>
 8005d8a:	45a4      	cmp	ip, r4
 8005d8c:	d965      	bls.n	8005e5a <__udivmoddi4+0x29a>
 8005d8e:	3b02      	subs	r3, #2
 8005d90:	443c      	add	r4, r7
 8005d92:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8005d96:	fba0 9302 	umull	r9, r3, r0, r2
 8005d9a:	eba4 040c 	sub.w	r4, r4, ip
 8005d9e:	429c      	cmp	r4, r3
 8005da0:	46ce      	mov	lr, r9
 8005da2:	469c      	mov	ip, r3
 8005da4:	d351      	bcc.n	8005e4a <__udivmoddi4+0x28a>
 8005da6:	d04e      	beq.n	8005e46 <__udivmoddi4+0x286>
 8005da8:	b155      	cbz	r5, 8005dc0 <__udivmoddi4+0x200>
 8005daa:	ebb8 030e 	subs.w	r3, r8, lr
 8005dae:	eb64 040c 	sbc.w	r4, r4, ip
 8005db2:	fa04 f606 	lsl.w	r6, r4, r6
 8005db6:	40cb      	lsrs	r3, r1
 8005db8:	431e      	orrs	r6, r3
 8005dba:	40cc      	lsrs	r4, r1
 8005dbc:	e9c5 6400 	strd	r6, r4, [r5]
 8005dc0:	2100      	movs	r1, #0
 8005dc2:	e750      	b.n	8005c66 <__udivmoddi4+0xa6>
 8005dc4:	f1c2 0320 	rsb	r3, r2, #32
 8005dc8:	fa20 f103 	lsr.w	r1, r0, r3
 8005dcc:	fa0c fc02 	lsl.w	ip, ip, r2
 8005dd0:	fa24 f303 	lsr.w	r3, r4, r3
 8005dd4:	4094      	lsls	r4, r2
 8005dd6:	430c      	orrs	r4, r1
 8005dd8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8005ddc:	fa00 fe02 	lsl.w	lr, r0, r2
 8005de0:	fa1f f78c 	uxth.w	r7, ip
 8005de4:	fbb3 f0f8 	udiv	r0, r3, r8
 8005de8:	fb08 3110 	mls	r1, r8, r0, r3
 8005dec:	0c23      	lsrs	r3, r4, #16
 8005dee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8005df2:	fb00 f107 	mul.w	r1, r0, r7
 8005df6:	4299      	cmp	r1, r3
 8005df8:	d908      	bls.n	8005e0c <__udivmoddi4+0x24c>
 8005dfa:	eb1c 0303 	adds.w	r3, ip, r3
 8005dfe:	f100 36ff 	add.w	r6, r0, #4294967295
 8005e02:	d22c      	bcs.n	8005e5e <__udivmoddi4+0x29e>
 8005e04:	4299      	cmp	r1, r3
 8005e06:	d92a      	bls.n	8005e5e <__udivmoddi4+0x29e>
 8005e08:	3802      	subs	r0, #2
 8005e0a:	4463      	add	r3, ip
 8005e0c:	1a5b      	subs	r3, r3, r1
 8005e0e:	b2a4      	uxth	r4, r4
 8005e10:	fbb3 f1f8 	udiv	r1, r3, r8
 8005e14:	fb08 3311 	mls	r3, r8, r1, r3
 8005e18:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8005e1c:	fb01 f307 	mul.w	r3, r1, r7
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	d908      	bls.n	8005e36 <__udivmoddi4+0x276>
 8005e24:	eb1c 0404 	adds.w	r4, ip, r4
 8005e28:	f101 36ff 	add.w	r6, r1, #4294967295
 8005e2c:	d213      	bcs.n	8005e56 <__udivmoddi4+0x296>
 8005e2e:	42a3      	cmp	r3, r4
 8005e30:	d911      	bls.n	8005e56 <__udivmoddi4+0x296>
 8005e32:	3902      	subs	r1, #2
 8005e34:	4464      	add	r4, ip
 8005e36:	1ae4      	subs	r4, r4, r3
 8005e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005e3c:	e739      	b.n	8005cb2 <__udivmoddi4+0xf2>
 8005e3e:	4604      	mov	r4, r0
 8005e40:	e6f0      	b.n	8005c24 <__udivmoddi4+0x64>
 8005e42:	4608      	mov	r0, r1
 8005e44:	e706      	b.n	8005c54 <__udivmoddi4+0x94>
 8005e46:	45c8      	cmp	r8, r9
 8005e48:	d2ae      	bcs.n	8005da8 <__udivmoddi4+0x1e8>
 8005e4a:	ebb9 0e02 	subs.w	lr, r9, r2
 8005e4e:	eb63 0c07 	sbc.w	ip, r3, r7
 8005e52:	3801      	subs	r0, #1
 8005e54:	e7a8      	b.n	8005da8 <__udivmoddi4+0x1e8>
 8005e56:	4631      	mov	r1, r6
 8005e58:	e7ed      	b.n	8005e36 <__udivmoddi4+0x276>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	e799      	b.n	8005d92 <__udivmoddi4+0x1d2>
 8005e5e:	4630      	mov	r0, r6
 8005e60:	e7d4      	b.n	8005e0c <__udivmoddi4+0x24c>
 8005e62:	46d6      	mov	lr, sl
 8005e64:	e77f      	b.n	8005d66 <__udivmoddi4+0x1a6>
 8005e66:	4463      	add	r3, ip
 8005e68:	3802      	subs	r0, #2
 8005e6a:	e74d      	b.n	8005d08 <__udivmoddi4+0x148>
 8005e6c:	4606      	mov	r6, r0
 8005e6e:	4623      	mov	r3, r4
 8005e70:	4608      	mov	r0, r1
 8005e72:	e70f      	b.n	8005c94 <__udivmoddi4+0xd4>
 8005e74:	3e02      	subs	r6, #2
 8005e76:	4463      	add	r3, ip
 8005e78:	e730      	b.n	8005cdc <__udivmoddi4+0x11c>
 8005e7a:	bf00      	nop

08005e7c <__aeabi_idiv0>:
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop

08005e80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e80:	b480      	push	{r7}
 8005e82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e84:	4b04      	ldr	r3, [pc, #16]	@ (8005e98 <__NVIC_GetPriorityGrouping+0x18>)
 8005e86:	68db      	ldr	r3, [r3, #12]
 8005e88:	0a1b      	lsrs	r3, r3, #8
 8005e8a:	f003 0307 	and.w	r3, r3, #7
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	46bd      	mov	sp, r7
 8005e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e96:	4770      	bx	lr
 8005e98:	e000ed00 	.word	0xe000ed00

08005e9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b083      	sub	sp, #12
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	4603      	mov	r3, r0
 8005ea4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	db0b      	blt.n	8005ec6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005eae:	79fb      	ldrb	r3, [r7, #7]
 8005eb0:	f003 021f 	and.w	r2, r3, #31
 8005eb4:	4907      	ldr	r1, [pc, #28]	@ (8005ed4 <__NVIC_EnableIRQ+0x38>)
 8005eb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eba:	095b      	lsrs	r3, r3, #5
 8005ebc:	2001      	movs	r0, #1
 8005ebe:	fa00 f202 	lsl.w	r2, r0, r2
 8005ec2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	e000e100 	.word	0xe000e100

08005ed8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6039      	str	r1, [r7, #0]
 8005ee2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	db0a      	blt.n	8005f02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	b2da      	uxtb	r2, r3
 8005ef0:	490c      	ldr	r1, [pc, #48]	@ (8005f24 <__NVIC_SetPriority+0x4c>)
 8005ef2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ef6:	0112      	lsls	r2, r2, #4
 8005ef8:	b2d2      	uxtb	r2, r2
 8005efa:	440b      	add	r3, r1
 8005efc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005f00:	e00a      	b.n	8005f18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	b2da      	uxtb	r2, r3
 8005f06:	4908      	ldr	r1, [pc, #32]	@ (8005f28 <__NVIC_SetPriority+0x50>)
 8005f08:	79fb      	ldrb	r3, [r7, #7]
 8005f0a:	f003 030f 	and.w	r3, r3, #15
 8005f0e:	3b04      	subs	r3, #4
 8005f10:	0112      	lsls	r2, r2, #4
 8005f12:	b2d2      	uxtb	r2, r2
 8005f14:	440b      	add	r3, r1
 8005f16:	761a      	strb	r2, [r3, #24]
}
 8005f18:	bf00      	nop
 8005f1a:	370c      	adds	r7, #12
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr
 8005f24:	e000e100 	.word	0xe000e100
 8005f28:	e000ed00 	.word	0xe000ed00

08005f2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f2c:	b480      	push	{r7}
 8005f2e:	b089      	sub	sp, #36	@ 0x24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	60b9      	str	r1, [r7, #8]
 8005f36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	f003 0307 	and.w	r3, r3, #7
 8005f3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	f1c3 0307 	rsb	r3, r3, #7
 8005f46:	2b04      	cmp	r3, #4
 8005f48:	bf28      	it	cs
 8005f4a:	2304      	movcs	r3, #4
 8005f4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	3304      	adds	r3, #4
 8005f52:	2b06      	cmp	r3, #6
 8005f54:	d902      	bls.n	8005f5c <NVIC_EncodePriority+0x30>
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	3b03      	subs	r3, #3
 8005f5a:	e000      	b.n	8005f5e <NVIC_EncodePriority+0x32>
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f60:	f04f 32ff 	mov.w	r2, #4294967295
 8005f64:	69bb      	ldr	r3, [r7, #24]
 8005f66:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6a:	43da      	mvns	r2, r3
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	401a      	ands	r2, r3
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f74:	f04f 31ff 	mov.w	r1, #4294967295
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f7e:	43d9      	mvns	r1, r3
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f84:	4313      	orrs	r3, r2
         );
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3724      	adds	r7, #36	@ 0x24
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr

08005f92 <LL_LPUART_Enable>:
  * @rmtoll CR1          UE            LL_LPUART_Enable
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_Enable(USART_TypeDef *LPUARTx)
{
 8005f92:	b480      	push	{r7}
 8005f94:	b083      	sub	sp, #12
 8005f96:	af00      	add	r7, sp, #0
 8005f98:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f043 0201 	orr.w	r2, r3, #1
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	601a      	str	r2, [r3, #0]
}
 8005fa6:	bf00      	nop
 8005fa8:	370c      	adds	r7, #12
 8005faa:	46bd      	mov	sp, r7
 8005fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb0:	4770      	bx	lr

08005fb2 <LL_LPUART_DisableFIFO>:
  * @rmtoll CR1          FIFOEN        LL_LPUART_DisableFIFO
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableFIFO(USART_TypeDef *LPUARTx)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	b083      	sub	sp, #12
 8005fb6:	af00      	add	r7, sp, #0
 8005fb8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_FIFOEN);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	601a      	str	r2, [r3, #0]
}
 8005fc6:	bf00      	nop
 8005fc8:	370c      	adds	r7, #12
 8005fca:	46bd      	mov	sp, r7
 8005fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd0:	4770      	bx	lr

08005fd2 <LL_LPUART_SetTXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetTXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8005fd2:	b480      	push	{r7}
 8005fd4:	b089      	sub	sp, #36	@ 0x24
 8005fd6:	af00      	add	r7, sp, #0
 8005fd8:	6078      	str	r0, [r7, #4]
 8005fda:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	3308      	adds	r3, #8
 8005fe0:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	e853 3f00 	ldrex	r3, [r3]
 8005fe8:	60bb      	str	r3, [r7, #8]
   return(result);
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	075b      	lsls	r3, r3, #29
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	61fb      	str	r3, [r7, #28]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	3308      	adds	r3, #8
 8005ffc:	69fa      	ldr	r2, [r7, #28]
 8005ffe:	61ba      	str	r2, [r7, #24]
 8006000:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006002:	6979      	ldr	r1, [r7, #20]
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	e841 2300 	strex	r3, r2, [r1]
 800600a:	613b      	str	r3, [r7, #16]
   return(result);
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d1e4      	bne.n	8005fdc <LL_LPUART_SetTXFIFOThreshold+0xa>
}
 8006012:	bf00      	nop
 8006014:	bf00      	nop
 8006016:	3724      	adds	r7, #36	@ 0x24
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <LL_LPUART_SetRXFIFOThreshold>:
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_7_8
  *         @arg @ref LL_LPUART_FIFOTHRESHOLD_8_8
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_SetRXFIFOThreshold(USART_TypeDef *LPUARTx, uint32_t Threshold)
{
 8006020:	b480      	push	{r7}
 8006022:	b089      	sub	sp, #36	@ 0x24
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(LPUARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	3308      	adds	r3, #8
 800602e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	e853 3f00 	ldrex	r3, [r3]
 8006036:	60bb      	str	r3, [r7, #8]
   return(result);
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	f023 6260 	bic.w	r2, r3, #234881024	@ 0xe000000
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	065b      	lsls	r3, r3, #25
 8006042:	4313      	orrs	r3, r2
 8006044:	61fb      	str	r3, [r7, #28]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	3308      	adds	r3, #8
 800604a:	69fa      	ldr	r2, [r7, #28]
 800604c:	61ba      	str	r2, [r7, #24]
 800604e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	6979      	ldr	r1, [r7, #20]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	613b      	str	r3, [r7, #16]
   return(result);
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e4      	bne.n	800602a <LL_LPUART_SetRXFIFOThreshold+0xa>
}
 8006060:	bf00      	nop
 8006062:	bf00      	nop
 8006064:	3724      	adds	r7, #36	@ 0x24
 8006066:	46bd      	mov	sp, r7
 8006068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606c:	4770      	bx	lr

0800606e <LL_LPUART_IsActiveFlag_TEACK>:
  * @rmtoll ISR          TEACK         LL_LPUART_IsActiveFlag_TEACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_TEACK(const USART_TypeDef *LPUARTx)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69db      	ldr	r3, [r3, #28]
 800607a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800607e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006082:	d101      	bne.n	8006088 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8006084:	2301      	movs	r3, #1
 8006086:	e000      	b.n	800608a <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <LL_LPUART_IsActiveFlag_REACK>:
  * @rmtoll ISR          REACK         LL_LPUART_IsActiveFlag_REACK
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsActiveFlag_REACK(const USART_TypeDef *LPUARTx)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	69db      	ldr	r3, [r3, #28]
 80060a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80060a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80060aa:	d101      	bne.n	80060b0 <LL_LPUART_IsActiveFlag_REACK+0x1a>
 80060ac:	2301      	movs	r3, #1
 80060ae:	e000      	b.n	80060b2 <LL_LPUART_IsActiveFlag_REACK+0x1c>
 80060b0:	2300      	movs	r3, #0
}
 80060b2:	4618      	mov	r0, r3
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80060c8:	4b08      	ldr	r3, [pc, #32]	@ (80060ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060cc:	4907      	ldr	r1, [pc, #28]	@ (80060ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	4313      	orrs	r3, r2
 80060d2:	64cb      	str	r3, [r1, #76]	@ 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80060d4:	4b05      	ldr	r3, [pc, #20]	@ (80060ec <LL_AHB2_GRP1_EnableClock+0x2c>)
 80060d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4013      	ands	r3, r2
 80060dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	bf00      	nop
 80060e2:	3714      	adds	r7, #20
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr
 80060ec:	40021000 	.word	0x40021000

080060f0 <LL_APB1_GRP2_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b085      	sub	sp, #20
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 80060f8:	4b08      	ldr	r3, [pc, #32]	@ (800611c <LL_APB1_GRP2_EnableClock+0x2c>)
 80060fa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80060fc:	4907      	ldr	r1, [pc, #28]	@ (800611c <LL_APB1_GRP2_EnableClock+0x2c>)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4313      	orrs	r3, r2
 8006102:	65cb      	str	r3, [r1, #92]	@ 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 8006104:	4b05      	ldr	r3, [pc, #20]	@ (800611c <LL_APB1_GRP2_EnableClock+0x2c>)
 8006106:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4013      	ands	r3, r2
 800610c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800610e:	68fb      	ldr	r3, [r7, #12]
}
 8006110:	bf00      	nop
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr
 800611c:	40021000 	.word	0x40021000

08006120 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Direction)
{
 8006120:	b480      	push	{r7}
 8006122:	b087      	sub	sp, #28
 8006124:	af00      	add	r7, sp, #0
 8006126:	60f8      	str	r0, [r7, #12]
 8006128:	60b9      	str	r1, [r7, #8]
 800612a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8006130:	4a0e      	ldr	r2, [pc, #56]	@ (800616c <LL_DMA_SetDataTransferDirection+0x4c>)
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	4413      	add	r3, r2
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	461a      	mov	r2, r3
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	4413      	add	r3, r2
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006144:	f023 0310 	bic.w	r3, r3, #16
 8006148:	4908      	ldr	r1, [pc, #32]	@ (800616c <LL_DMA_SetDataTransferDirection+0x4c>)
 800614a:	68ba      	ldr	r2, [r7, #8]
 800614c:	440a      	add	r2, r1
 800614e:	7812      	ldrb	r2, [r2, #0]
 8006150:	4611      	mov	r1, r2
 8006152:	697a      	ldr	r2, [r7, #20]
 8006154:	440a      	add	r2, r1
 8006156:	4611      	mov	r1, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4313      	orrs	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
             DMA_CCR_DIR | DMA_CCR_MEM2MEM, Direction);
}
 800615e:	bf00      	nop
 8006160:	371c      	adds	r7, #28
 8006162:	46bd      	mov	sp, r7
 8006164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	0801b87c 	.word	0x0801b87c

08006170 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_NORMAL
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Mode)
{
 8006170:	b480      	push	{r7}
 8006172:	b087      	sub	sp, #28
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 8006180:	4a0d      	ldr	r2, [pc, #52]	@ (80061b8 <LL_DMA_SetMode+0x48>)
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	4413      	add	r3, r2
 8006186:	781b      	ldrb	r3, [r3, #0]
 8006188:	461a      	mov	r2, r3
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	4413      	add	r3, r2
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f023 0220 	bic.w	r2, r3, #32
 8006194:	4908      	ldr	r1, [pc, #32]	@ (80061b8 <LL_DMA_SetMode+0x48>)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	440b      	add	r3, r1
 800619a:	781b      	ldrb	r3, [r3, #0]
 800619c:	4619      	mov	r1, r3
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	440b      	add	r3, r1
 80061a2:	4619      	mov	r1, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	600b      	str	r3, [r1, #0]
             Mode);
}
 80061aa:	bf00      	nop
 80061ac:	371c      	adds	r7, #28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b4:	4770      	bx	lr
 80061b6:	bf00      	nop
 80061b8:	0801b87c 	.word	0x0801b87c

080061bc <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcIncMode)
{
 80061bc:	b480      	push	{r7}
 80061be:	b087      	sub	sp, #28
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	60f8      	str	r0, [r7, #12]
 80061c4:	60b9      	str	r1, [r7, #8]
 80061c6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 80061cc:	4a0d      	ldr	r2, [pc, #52]	@ (8006204 <LL_DMA_SetPeriphIncMode+0x48>)
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	4413      	add	r3, r2
 80061d2:	781b      	ldrb	r3, [r3, #0]
 80061d4:	461a      	mov	r2, r3
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	4413      	add	r3, r2
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80061e0:	4908      	ldr	r1, [pc, #32]	@ (8006204 <LL_DMA_SetPeriphIncMode+0x48>)
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	440b      	add	r3, r1
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4619      	mov	r1, r3
 80061ea:	697b      	ldr	r3, [r7, #20]
 80061ec:	440b      	add	r3, r1
 80061ee:	4619      	mov	r1, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcIncMode);
}
 80061f6:	bf00      	nop
 80061f8:	371c      	adds	r7, #28
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	0801b87c 	.word	0x0801b87c

08006208 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstIncMode)
{
 8006208:	b480      	push	{r7}
 800620a:	b087      	sub	sp, #28
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8006218:	4a0d      	ldr	r2, [pc, #52]	@ (8006250 <LL_DMA_SetMemoryIncMode+0x48>)
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	4413      	add	r3, r2
 800621e:	781b      	ldrb	r3, [r3, #0]
 8006220:	461a      	mov	r2, r3
 8006222:	697b      	ldr	r3, [r7, #20]
 8006224:	4413      	add	r3, r2
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800622c:	4908      	ldr	r1, [pc, #32]	@ (8006250 <LL_DMA_SetMemoryIncMode+0x48>)
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	440b      	add	r3, r1
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	4619      	mov	r1, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	440b      	add	r3, r1
 800623a:	4619      	mov	r1, r3
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	4313      	orrs	r3, r2
 8006240:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstIncMode);
}
 8006242:	bf00      	nop
 8006244:	371c      	adds	r7, #28
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	0801b87c 	.word	0x0801b87c

08006254 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphOrM2MSrcDataSize)
{
 8006254:	b480      	push	{r7}
 8006256:	b087      	sub	sp, #28
 8006258:	af00      	add	r7, sp, #0
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 8006264:	4a0d      	ldr	r2, [pc, #52]	@ (800629c <LL_DMA_SetPeriphSize+0x48>)
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	4413      	add	r3, r2
 800626a:	781b      	ldrb	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	697b      	ldr	r3, [r7, #20]
 8006270:	4413      	add	r3, r2
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006278:	4908      	ldr	r1, [pc, #32]	@ (800629c <LL_DMA_SetPeriphSize+0x48>)
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	440b      	add	r3, r1
 800627e:	781b      	ldrb	r3, [r3, #0]
 8006280:	4619      	mov	r1, r3
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	440b      	add	r3, r1
 8006286:	4619      	mov	r1, r3
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4313      	orrs	r3, r2
 800628c:	600b      	str	r3, [r1, #0]
             PeriphOrM2MSrcDataSize);
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	0801b87c 	.word	0x0801b87c

080062a0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t MemoryOrM2MDstDataSize)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80062b0:	4a0d      	ldr	r2, [pc, #52]	@ (80062e8 <LL_DMA_SetMemorySize+0x48>)
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	4413      	add	r3, r2
 80062b6:	781b      	ldrb	r3, [r3, #0]
 80062b8:	461a      	mov	r2, r3
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	4413      	add	r3, r2
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80062c4:	4908      	ldr	r1, [pc, #32]	@ (80062e8 <LL_DMA_SetMemorySize+0x48>)
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	440b      	add	r3, r1
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	4619      	mov	r1, r3
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	440b      	add	r3, r1
 80062d2:	4619      	mov	r1, r3
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	4313      	orrs	r3, r2
 80062d8:	600b      	str	r3, [r1, #0]
             MemoryOrM2MDstDataSize);
}
 80062da:	bf00      	nop
 80062dc:	371c      	adds	r7, #28
 80062de:	46bd      	mov	sp, r7
 80062e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e4:	4770      	bx	lr
 80062e6:	bf00      	nop
 80062e8:	0801b87c 	.word	0x0801b87c

080062ec <LL_DMA_SetChannelPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetChannelPriorityLevel(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t Priority)
{
 80062ec:	b480      	push	{r7}
 80062ee:	b087      	sub	sp, #28
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 80062fc:	4a0d      	ldr	r2, [pc, #52]	@ (8006334 <LL_DMA_SetChannelPriorityLevel+0x48>)
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	461a      	mov	r2, r3
 8006306:	697b      	ldr	r3, [r7, #20]
 8006308:	4413      	add	r3, r2
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8006310:	4908      	ldr	r1, [pc, #32]	@ (8006334 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	440b      	add	r3, r1
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	4619      	mov	r1, r3
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	440b      	add	r3, r1
 800631e:	4619      	mov	r1, r3
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	4313      	orrs	r3, r2
 8006324:	600b      	str	r3, [r1, #0]
             Priority);
}
 8006326:	bf00      	nop
 8006328:	371c      	adds	r7, #28
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	0801b87c 	.word	0x0801b87c

08006338 <LL_DMA_SetPeriphRequest>:
  *         @arg @ref LL_DMAMUX_REQ_UCPD1_TX
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Channel, uint32_t PeriphRequest)
{
 8006338:	b480      	push	{r7}
 800633a:	b087      	sub	sp, #28
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	0a9b      	lsrs	r3, r3, #10
 8006348:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800634c:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8006350:	00db      	lsls	r3, r3, #3
 8006352:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	4413      	add	r3, r2
 800635a:	009b      	lsls	r3, r3, #2
 800635c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006360:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	697b      	ldr	r3, [r7, #20]
 800636e:	4413      	add	r3, r2
 8006370:	009b      	lsls	r3, r3, #2
 8006372:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006376:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	430a      	orrs	r2, r1
 800637e:	601a      	str	r2, [r3, #0]
}
 8006380:	bf00      	nop
 8006382:	371c      	adds	r7, #28
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800638c:	b5b0      	push	{r4, r5, r7, lr}
 800638e:	b086      	sub	sp, #24
 8006390:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006392:	f003 fb83 	bl	8009a9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006396:	f000 f827 	bl	80063e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800639a:	f000 fb4d 	bl	8006a38 <MX_GPIO_Init>
  MX_DMA_Init();
 800639e:	f000 faf9 	bl	8006994 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 80063a2:	f000 f8ad 	bl	8006500 <MX_LPUART1_UART_Init>
  MX_UCPD1_Init();
 80063a6:	f000 fa65 	bl	8006874 <MX_UCPD1_Init>
  MX_TIM8_Init();
 80063aa:	f000 f971 	bl	8006690 <MX_TIM8_Init>
  MX_I2C1_Init();
 80063ae:	f000 f867 	bl	8006480 <MX_I2C1_Init>
  MX_TCPP_Init();
 80063b2:	f00d fb39 	bl	8013a28 <MX_TCPP_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* USBPD initialisation ---------------------------------*/
  MX_USBPD_Init();
 80063b6:	f00d fb49 	bl	8013a4c <MX_USBPD_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80063ba:	4b09      	ldr	r3, [pc, #36]	@ (80063e0 <main+0x54>)
 80063bc:	1d3c      	adds	r4, r7, #4
 80063be:	461d      	mov	r5, r3
 80063c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80063c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c4:	682b      	ldr	r3, [r5, #0]
 80063c6:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	2100      	movs	r1, #0
 80063cc:	4618      	mov	r0, r3
 80063ce:	f00b f90a 	bl	80115e6 <osThreadCreate>
 80063d2:	4603      	mov	r3, r0
 80063d4:	4a03      	ldr	r2, [pc, #12]	@ (80063e4 <main+0x58>)
 80063d6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80063d8:	f00b f8fe 	bl	80115d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80063dc:	bf00      	nop
 80063de:	e7fd      	b.n	80063dc <main+0x50>
 80063e0:	0801addc 	.word	0x0801addc
 80063e4:	20000274 	.word	0x20000274

080063e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80063e8:	b580      	push	{r7, lr}
 80063ea:	b094      	sub	sp, #80	@ 0x50
 80063ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80063ee:	f107 0318 	add.w	r3, r7, #24
 80063f2:	2238      	movs	r2, #56	@ 0x38
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f014 f906 	bl	801a608 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80063fc:	1d3b      	adds	r3, r7, #4
 80063fe:	2200      	movs	r2, #0
 8006400:	601a      	str	r2, [r3, #0]
 8006402:	605a      	str	r2, [r3, #4]
 8006404:	609a      	str	r2, [r3, #8]
 8006406:	60da      	str	r2, [r3, #12]
 8006408:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800640a:	2000      	movs	r0, #0
 800640c:	f005 f838 	bl	800b480 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006410:	2302      	movs	r3, #2
 8006412:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8006414:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006418:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800641a:	2340      	movs	r3, #64	@ 0x40
 800641c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800641e:	2302      	movs	r3, #2
 8006420:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006422:	2302      	movs	r3, #2
 8006424:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8006426:	2304      	movs	r3, #4
 8006428:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800642a:	2355      	movs	r3, #85	@ 0x55
 800642c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800642e:	2302      	movs	r3, #2
 8006430:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8006432:	2302      	movs	r3, #2
 8006434:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8006436:	2302      	movs	r3, #2
 8006438:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800643a:	f107 0318 	add.w	r3, r7, #24
 800643e:	4618      	mov	r0, r3
 8006440:	f005 f8d2 	bl	800b5e8 <HAL_RCC_OscConfig>
 8006444:	4603      	mov	r3, r0
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800644a:	f000 fb93 	bl	8006b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800644e:	230f      	movs	r3, #15
 8006450:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006452:	2303      	movs	r3, #3
 8006454:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800645a:	2300      	movs	r3, #0
 800645c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800645e:	2300      	movs	r3, #0
 8006460:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8006462:	1d3b      	adds	r3, r7, #4
 8006464:	2104      	movs	r1, #4
 8006466:	4618      	mov	r0, r3
 8006468:	f005 fbd0 	bl	800bc0c <HAL_RCC_ClockConfig>
 800646c:	4603      	mov	r3, r0
 800646e:	2b00      	cmp	r3, #0
 8006470:	d001      	beq.n	8006476 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8006472:	f000 fb7f 	bl	8006b74 <Error_Handler>
  }
}
 8006476:	bf00      	nop
 8006478:	3750      	adds	r7, #80	@ 0x50
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}
	...

08006480 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8006480:	b580      	push	{r7, lr}
 8006482:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006484:	4b1b      	ldr	r3, [pc, #108]	@ (80064f4 <MX_I2C1_Init+0x74>)
 8006486:	4a1c      	ldr	r2, [pc, #112]	@ (80064f8 <MX_I2C1_Init+0x78>)
 8006488:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40B285C2;
 800648a:	4b1a      	ldr	r3, [pc, #104]	@ (80064f4 <MX_I2C1_Init+0x74>)
 800648c:	4a1b      	ldr	r2, [pc, #108]	@ (80064fc <MX_I2C1_Init+0x7c>)
 800648e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006490:	4b18      	ldr	r3, [pc, #96]	@ (80064f4 <MX_I2C1_Init+0x74>)
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006496:	4b17      	ldr	r3, [pc, #92]	@ (80064f4 <MX_I2C1_Init+0x74>)
 8006498:	2201      	movs	r2, #1
 800649a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800649c:	4b15      	ldr	r3, [pc, #84]	@ (80064f4 <MX_I2C1_Init+0x74>)
 800649e:	2200      	movs	r2, #0
 80064a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80064a2:	4b14      	ldr	r3, [pc, #80]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80064a8:	4b12      	ldr	r3, [pc, #72]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064aa:	2200      	movs	r2, #0
 80064ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80064ae:	4b11      	ldr	r3, [pc, #68]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064b0:	2200      	movs	r2, #0
 80064b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80064b4:	4b0f      	ldr	r3, [pc, #60]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064b6:	2200      	movs	r2, #0
 80064b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80064ba:	480e      	ldr	r0, [pc, #56]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064bc:	f004 f974 	bl	800a7a8 <HAL_I2C_Init>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80064c6:	f000 fb55 	bl	8006b74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80064ca:	2100      	movs	r1, #0
 80064cc:	4809      	ldr	r0, [pc, #36]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064ce:	f004 ff3f 	bl	800b350 <HAL_I2CEx_ConfigAnalogFilter>
 80064d2:	4603      	mov	r3, r0
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d001      	beq.n	80064dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80064d8:	f000 fb4c 	bl	8006b74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80064dc:	2100      	movs	r1, #0
 80064de:	4805      	ldr	r0, [pc, #20]	@ (80064f4 <MX_I2C1_Init+0x74>)
 80064e0:	f004 ff81 	bl	800b3e6 <HAL_I2CEx_ConfigDigitalFilter>
 80064e4:	4603      	mov	r3, r0
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d001      	beq.n	80064ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80064ea:	f000 fb43 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80064ee:	bf00      	nop
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop
 80064f4:	200001d4 	.word	0x200001d4
 80064f8:	40005400 	.word	0x40005400
 80064fc:	40b285c2 	.word	0x40b285c2

08006500 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b09e      	sub	sp, #120	@ 0x78
 8006504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LPUART1_Init 0 */

  /* USER CODE END LPUART1_Init 0 */

  LL_LPUART_InitTypeDef LPUART_InitStruct = {0};
 8006506:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]
 800650e:	605a      	str	r2, [r3, #4]
 8006510:	609a      	str	r2, [r3, #8]
 8006512:	60da      	str	r2, [r3, #12]
 8006514:	611a      	str	r2, [r3, #16]
 8006516:	615a      	str	r2, [r3, #20]
 8006518:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800651a:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
 8006522:	605a      	str	r2, [r3, #4]
 8006524:	609a      	str	r2, [r3, #8]
 8006526:	60da      	str	r2, [r3, #12]
 8006528:	611a      	str	r2, [r3, #16]
 800652a:	615a      	str	r2, [r3, #20]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800652c:	463b      	mov	r3, r7
 800652e:	2244      	movs	r2, #68	@ 0x44
 8006530:	2100      	movs	r1, #0
 8006532:	4618      	mov	r0, r3
 8006534:	f014 f868 	bl	801a608 <memset>

  /** Initializes the peripherals clocks
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8006538:	2320      	movs	r3, #32
 800653a:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 800653c:	2300      	movs	r3, #0
 800653e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006540:	463b      	mov	r3, r7
 8006542:	4618      	mov	r0, r3
 8006544:	f005 fd68 	bl	800c018 <HAL_RCCEx_PeriphCLKConfig>
 8006548:	4603      	mov	r3, r0
 800654a:	2b00      	cmp	r3, #0
 800654c:	d001      	beq.n	8006552 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800654e:	f000 fb11 	bl	8006b74 <Error_Handler>
  }

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_LPUART1);
 8006552:	2001      	movs	r0, #1
 8006554:	f7ff fdcc 	bl	80060f0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8006558:	2001      	movs	r0, #1
 800655a:	f7ff fdb1 	bl	80060c0 <LL_AHB2_GRP1_EnableClock>
  /**LPUART1 GPIO Configuration
  PA2   ------> LPUART1_TX
  PA3   ------> LPUART1_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 800655e:	2304      	movs	r3, #4
 8006560:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006562:	2302      	movs	r3, #2
 8006564:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8006566:	2300      	movs	r3, #0
 8006568:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800656a:	2300      	movs	r3, #0
 800656c:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800656e:	2300      	movs	r3, #0
 8006570:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8006572:	230c      	movs	r3, #12
 8006574:	65bb      	str	r3, [r7, #88]	@ 0x58
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006576:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 800657a:	4619      	mov	r1, r3
 800657c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006580:	f007 fd08 	bl	800df94 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_3;
 8006584:	2308      	movs	r3, #8
 8006586:	647b      	str	r3, [r7, #68]	@ 0x44
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006588:	2302      	movs	r3, #2
 800658a:	64bb      	str	r3, [r7, #72]	@ 0x48
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800658c:	2300      	movs	r3, #0
 800658e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006590:	2300      	movs	r3, #0
 8006592:	653b      	str	r3, [r7, #80]	@ 0x50
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006594:	2300      	movs	r3, #0
 8006596:	657b      	str	r3, [r7, #84]	@ 0x54
  GPIO_InitStruct.Alternate = LL_GPIO_AF_12;
 8006598:	230c      	movs	r3, #12
 800659a:	65bb      	str	r3, [r7, #88]	@ 0x58
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800659c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80065a0:	4619      	mov	r1, r3
 80065a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80065a6:	f007 fcf5 	bl	800df94 <LL_GPIO_Init>

  /* LPUART1 DMA Init */

  /* LPUART1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_1, LL_DMAMUX_REQ_LPUART1_TX);
 80065aa:	2223      	movs	r2, #35	@ 0x23
 80065ac:	2100      	movs	r1, #0
 80065ae:	4836      	ldr	r0, [pc, #216]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065b0:	f7ff fec2 	bl	8006338 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_1, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 80065b4:	2210      	movs	r2, #16
 80065b6:	2100      	movs	r1, #0
 80065b8:	4833      	ldr	r0, [pc, #204]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065ba:	f7ff fdb1 	bl	8006120 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PRIORITY_LOW);
 80065be:	2200      	movs	r2, #0
 80065c0:	2100      	movs	r1, #0
 80065c2:	4831      	ldr	r0, [pc, #196]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065c4:	f7ff fe92 	bl	80062ec <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MODE_NORMAL);
 80065c8:	2200      	movs	r2, #0
 80065ca:	2100      	movs	r1, #0
 80065cc:	482e      	ldr	r0, [pc, #184]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065ce:	f7ff fdcf 	bl	8006170 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PERIPH_NOINCREMENT);
 80065d2:	2200      	movs	r2, #0
 80065d4:	2100      	movs	r1, #0
 80065d6:	482c      	ldr	r0, [pc, #176]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065d8:	f7ff fdf0 	bl	80061bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MEMORY_INCREMENT);
 80065dc:	2280      	movs	r2, #128	@ 0x80
 80065de:	2100      	movs	r1, #0
 80065e0:	4829      	ldr	r0, [pc, #164]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065e2:	f7ff fe11 	bl	8006208 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_PDATAALIGN_BYTE);
 80065e6:	2200      	movs	r2, #0
 80065e8:	2100      	movs	r1, #0
 80065ea:	4827      	ldr	r0, [pc, #156]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065ec:	f7ff fe32 	bl	8006254 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_1, LL_DMA_MDATAALIGN_BYTE);
 80065f0:	2200      	movs	r2, #0
 80065f2:	2100      	movs	r1, #0
 80065f4:	4824      	ldr	r0, [pc, #144]	@ (8006688 <MX_LPUART1_UART_Init+0x188>)
 80065f6:	f7ff fe53 	bl	80062a0 <LL_DMA_SetMemorySize>

  /* LPUART1 interrupt Init */
  NVIC_SetPriority(LPUART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80065fa:	f7ff fc41 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 80065fe:	4603      	mov	r3, r0
 8006600:	2200      	movs	r2, #0
 8006602:	2103      	movs	r1, #3
 8006604:	4618      	mov	r0, r3
 8006606:	f7ff fc91 	bl	8005f2c <NVIC_EncodePriority>
 800660a:	4603      	mov	r3, r0
 800660c:	4619      	mov	r1, r3
 800660e:	205b      	movs	r0, #91	@ 0x5b
 8006610:	f7ff fc62 	bl	8005ed8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(LPUART1_IRQn);
 8006614:	205b      	movs	r0, #91	@ 0x5b
 8006616:	f7ff fc41 	bl	8005e9c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  LPUART_InitStruct.PrescalerValue = LL_LPUART_PRESCALER_DIV1;
 800661a:	2300      	movs	r3, #0
 800661c:	65fb      	str	r3, [r7, #92]	@ 0x5c
  LPUART_InitStruct.BaudRate = 921600;
 800661e:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 8006622:	663b      	str	r3, [r7, #96]	@ 0x60
  LPUART_InitStruct.DataWidth = LL_LPUART_DATAWIDTH_7B;
 8006624:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8006628:	667b      	str	r3, [r7, #100]	@ 0x64
  LPUART_InitStruct.StopBits = LL_LPUART_STOPBITS_1;
 800662a:	2300      	movs	r3, #0
 800662c:	66bb      	str	r3, [r7, #104]	@ 0x68
  LPUART_InitStruct.Parity = LL_LPUART_PARITY_NONE;
 800662e:	2300      	movs	r3, #0
 8006630:	66fb      	str	r3, [r7, #108]	@ 0x6c
  LPUART_InitStruct.TransferDirection = LL_LPUART_DIRECTION_TX_RX;
 8006632:	230c      	movs	r3, #12
 8006634:	673b      	str	r3, [r7, #112]	@ 0x70
  LPUART_InitStruct.HardwareFlowControl = LL_LPUART_HWCONTROL_NONE;
 8006636:	2300      	movs	r3, #0
 8006638:	677b      	str	r3, [r7, #116]	@ 0x74
  LL_LPUART_Init(LPUART1, &LPUART_InitStruct);
 800663a:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 800663e:	4619      	mov	r1, r3
 8006640:	4812      	ldr	r0, [pc, #72]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 8006642:	f007 fdaf 	bl	800e1a4 <LL_LPUART_Init>
  LL_LPUART_SetTXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 8006646:	2100      	movs	r1, #0
 8006648:	4810      	ldr	r0, [pc, #64]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 800664a:	f7ff fcc2 	bl	8005fd2 <LL_LPUART_SetTXFIFOThreshold>
  LL_LPUART_SetRXFIFOThreshold(LPUART1, LL_LPUART_FIFOTHRESHOLD_1_8);
 800664e:	2100      	movs	r1, #0
 8006650:	480e      	ldr	r0, [pc, #56]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 8006652:	f7ff fce5 	bl	8006020 <LL_LPUART_SetRXFIFOThreshold>
  LL_LPUART_DisableFIFO(LPUART1);
 8006656:	480d      	ldr	r0, [pc, #52]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 8006658:	f7ff fcab 	bl	8005fb2 <LL_LPUART_DisableFIFO>

  /* USER CODE BEGIN WKUPType LPUART1 */

  /* USER CODE END WKUPType LPUART1 */

  LL_LPUART_Enable(LPUART1);
 800665c:	480b      	ldr	r0, [pc, #44]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 800665e:	f7ff fc98 	bl	8005f92 <LL_LPUART_Enable>

  /* Polling LPUART1 initialisation */
  while((!(LL_LPUART_IsActiveFlag_TEACK(LPUART1))) || (!(LL_LPUART_IsActiveFlag_REACK(LPUART1))))
 8006662:	bf00      	nop
 8006664:	4809      	ldr	r0, [pc, #36]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 8006666:	f7ff fd02 	bl	800606e <LL_LPUART_IsActiveFlag_TEACK>
 800666a:	4603      	mov	r3, r0
 800666c:	2b00      	cmp	r3, #0
 800666e:	d0f9      	beq.n	8006664 <MX_LPUART1_UART_Init+0x164>
 8006670:	4806      	ldr	r0, [pc, #24]	@ (800668c <MX_LPUART1_UART_Init+0x18c>)
 8006672:	f7ff fd10 	bl	8006096 <LL_LPUART_IsActiveFlag_REACK>
 8006676:	4603      	mov	r3, r0
 8006678:	2b00      	cmp	r3, #0
 800667a:	d0f3      	beq.n	8006664 <MX_LPUART1_UART_Init+0x164>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800667c:	bf00      	nop
 800667e:	bf00      	nop
 8006680:	3778      	adds	r7, #120	@ 0x78
 8006682:	46bd      	mov	sp, r7
 8006684:	bd80      	pop	{r7, pc}
 8006686:	bf00      	nop
 8006688:	40020000 	.word	0x40020000
 800668c:	40008000 	.word	0x40008000

08006690 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b09e      	sub	sp, #120	@ 0x78
 8006694:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006696:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800669a:	2200      	movs	r2, #0
 800669c:	601a      	str	r2, [r3, #0]
 800669e:	605a      	str	r2, [r3, #4]
 80066a0:	609a      	str	r2, [r3, #8]
 80066a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80066a4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80066a8:	2200      	movs	r2, #0
 80066aa:	601a      	str	r2, [r3, #0]
 80066ac:	605a      	str	r2, [r3, #4]
 80066ae:	609a      	str	r2, [r3, #8]
  TIMEx_BreakInputConfigTypeDef sBreakInputConfig = {0};
 80066b0:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
 80066b8:	605a      	str	r2, [r3, #4]
 80066ba:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80066bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	611a      	str	r2, [r3, #16]
 80066cc:	615a      	str	r2, [r3, #20]
 80066ce:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80066d0:	463b      	mov	r3, r7
 80066d2:	2234      	movs	r2, #52	@ 0x34
 80066d4:	2100      	movs	r1, #0
 80066d6:	4618      	mov	r0, r3
 80066d8:	f013 ff96 	bl	801a608 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80066dc:	4b63      	ldr	r3, [pc, #396]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066de:	4a64      	ldr	r2, [pc, #400]	@ (8006870 <MX_TIM8_Init+0x1e0>)
 80066e0:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80066e2:	4b62      	ldr	r3, [pc, #392]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066e4:	2200      	movs	r2, #0
 80066e6:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80066e8:	4b60      	ldr	r3, [pc, #384]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066ea:	2200      	movs	r2, #0
 80066ec:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 169;
 80066ee:	4b5f      	ldr	r3, [pc, #380]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066f0:	22a9      	movs	r2, #169	@ 0xa9
 80066f2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80066f4:	4b5d      	ldr	r3, [pc, #372]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80066fa:	4b5c      	ldr	r3, [pc, #368]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80066fc:	2200      	movs	r2, #0
 80066fe:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006700:	4b5a      	ldr	r3, [pc, #360]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006702:	2200      	movs	r2, #0
 8006704:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8006706:	4859      	ldr	r0, [pc, #356]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006708:	f005 fe76 	bl	800c3f8 <HAL_TIM_Base_Init>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d001      	beq.n	8006716 <MX_TIM8_Init+0x86>
  {
    Error_Handler();
 8006712:	f000 fa2f 	bl	8006b74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006716:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800671a:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800671c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8006720:	4619      	mov	r1, r3
 8006722:	4852      	ldr	r0, [pc, #328]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006724:	f006 f9ca 	bl	800cabc <HAL_TIM_ConfigClockSource>
 8006728:	4603      	mov	r3, r0
 800672a:	2b00      	cmp	r3, #0
 800672c:	d001      	beq.n	8006732 <MX_TIM8_Init+0xa2>
  {
    Error_Handler();
 800672e:	f000 fa21 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8006732:	484e      	ldr	r0, [pc, #312]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006734:	f005 feb7 	bl	800c4a6 <HAL_TIM_PWM_Init>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <MX_TIM8_Init+0xb2>
  {
    Error_Handler();
 800673e:	f000 fa19 	bl	8006b74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006742:	2300      	movs	r3, #0
 8006744:	65fb      	str	r3, [r7, #92]	@ 0x5c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006746:	2300      	movs	r3, #0
 8006748:	663b      	str	r3, [r7, #96]	@ 0x60
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800674a:	2300      	movs	r3, #0
 800674c:	667b      	str	r3, [r7, #100]	@ 0x64
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800674e:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8006752:	4619      	mov	r1, r3
 8006754:	4845      	ldr	r0, [pc, #276]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006756:	f006 feff 	bl	800d558 <HAL_TIMEx_MasterConfigSynchronization>
 800675a:	4603      	mov	r3, r0
 800675c:	2b00      	cmp	r3, #0
 800675e:	d001      	beq.n	8006764 <MX_TIM8_Init+0xd4>
  {
    Error_Handler();
 8006760:	f000 fa08 	bl	8006b74 <Error_Handler>
  }
  sBreakInputConfig.Source = TIM_BREAKINPUTSOURCE_BKIN;
 8006764:	2301      	movs	r3, #1
 8006766:	653b      	str	r3, [r7, #80]	@ 0x50
  sBreakInputConfig.Enable = TIM_BREAKINPUTSOURCE_ENABLE;
 8006768:	2301      	movs	r3, #1
 800676a:	657b      	str	r3, [r7, #84]	@ 0x54
  sBreakInputConfig.Polarity = TIM_BREAKINPUTSOURCE_POLARITY_LOW;
 800676c:	2301      	movs	r3, #1
 800676e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK, &sBreakInputConfig) != HAL_OK)
 8006770:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8006774:	461a      	mov	r2, r3
 8006776:	2101      	movs	r1, #1
 8006778:	483c      	ldr	r0, [pc, #240]	@ (800686c <MX_TIM8_Init+0x1dc>)
 800677a:	f006 fffb 	bl	800d774 <HAL_TIMEx_ConfigBreakInput>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d001      	beq.n	8006788 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8006784:	f000 f9f6 	bl	8006b74 <Error_Handler>
  }
  if (HAL_TIMEx_ConfigBreakInput(&htim8, TIM_BREAKINPUT_BRK2, &sBreakInputConfig) != HAL_OK)
 8006788:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800678c:	461a      	mov	r2, r3
 800678e:	2102      	movs	r1, #2
 8006790:	4836      	ldr	r0, [pc, #216]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006792:	f006 ffef 	bl	800d774 <HAL_TIMEx_ConfigBreakInput>
 8006796:	4603      	mov	r3, r0
 8006798:	2b00      	cmp	r3, #0
 800679a:	d001      	beq.n	80067a0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 800679c:	f000 f9ea 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80067a0:	2360      	movs	r3, #96	@ 0x60
 80067a2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 84;
 80067a4:	2354      	movs	r3, #84	@ 0x54
 80067a6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80067a8:	2300      	movs	r3, #0
 80067aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80067ac:	2300      	movs	r3, #0
 80067ae:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80067b0:	2300      	movs	r3, #0
 80067b2:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80067b4:	2300      	movs	r3, #0
 80067b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80067b8:	2300      	movs	r3, #0
 80067ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80067bc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067c0:	2200      	movs	r2, #0
 80067c2:	4619      	mov	r1, r3
 80067c4:	4829      	ldr	r0, [pc, #164]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80067c6:	f006 f865 	bl	800c894 <HAL_TIM_PWM_ConfigChannel>
 80067ca:	4603      	mov	r3, r0
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d001      	beq.n	80067d4 <MX_TIM8_Init+0x144>
  {
    Error_Handler();
 80067d0:	f000 f9d0 	bl	8006b74 <Error_Handler>
  }
  sConfigOC.Pulse = 25;
 80067d4:	2319      	movs	r3, #25
 80067d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80067d8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80067dc:	2204      	movs	r2, #4
 80067de:	4619      	mov	r1, r3
 80067e0:	4822      	ldr	r0, [pc, #136]	@ (800686c <MX_TIM8_Init+0x1dc>)
 80067e2:	f006 f857 	bl	800c894 <HAL_TIM_PWM_ConfigChannel>
 80067e6:	4603      	mov	r3, r0
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d001      	beq.n	80067f0 <MX_TIM8_Init+0x160>
  {
    Error_Handler();
 80067ec:	f000 f9c2 	bl	8006b74 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 80067f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80067f4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 80067f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80067fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80067fc:	2300      	movs	r3, #0
 80067fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 6;
 8006800:	2306      	movs	r3, #6
 8006802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8006804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006808:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800680a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800680e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8006810:	2300      	movs	r3, #0
 8006812:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8006814:	2300      	movs	r3, #0
 8006816:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_ENABLE;
 8006818:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800681c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800681e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006822:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8006824:	2300      	movs	r3, #0
 8006826:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8006828:	2300      	movs	r3, #0
 800682a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 800682c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006830:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8006832:	463b      	mov	r3, r7
 8006834:	4619      	mov	r1, r3
 8006836:	480d      	ldr	r0, [pc, #52]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006838:	f006 ff10 	bl	800d65c <HAL_TIMEx_ConfigBreakDeadTime>
 800683c:	4603      	mov	r3, r0
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <MX_TIM8_Init+0x1b6>
  {
    Error_Handler();
 8006842:	f000 f997 	bl	8006b74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */
	/*Enable CH1 and CH1 complementary output*/
	TIM8->CCER |=TIM_CCER_CC1E|TIM_CCER_CC1NE;
 8006846:	4b0a      	ldr	r3, [pc, #40]	@ (8006870 <MX_TIM8_Init+0x1e0>)
 8006848:	6a1b      	ldr	r3, [r3, #32]
 800684a:	4a09      	ldr	r2, [pc, #36]	@ (8006870 <MX_TIM8_Init+0x1e0>)
 800684c:	f043 0305 	orr.w	r3, r3, #5
 8006850:	6213      	str	r3, [r2, #32]
  TIM8->CCER |=TIM_CCER_CC2E|TIM_CCER_CC2NE;
 8006852:	4b07      	ldr	r3, [pc, #28]	@ (8006870 <MX_TIM8_Init+0x1e0>)
 8006854:	6a1b      	ldr	r3, [r3, #32]
 8006856:	4a06      	ldr	r2, [pc, #24]	@ (8006870 <MX_TIM8_Init+0x1e0>)
 8006858:	f043 0350 	orr.w	r3, r3, #80	@ 0x50
 800685c:	6213      	str	r3, [r2, #32]
  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800685e:	4803      	ldr	r0, [pc, #12]	@ (800686c <MX_TIM8_Init+0x1dc>)
 8006860:	f000 fa98 	bl	8006d94 <HAL_TIM_MspPostInit>

}
 8006864:	bf00      	nop
 8006866:	3778      	adds	r7, #120	@ 0x78
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000228 	.word	0x20000228
 8006870:	40013400 	.word	0x40013400

08006874 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b086      	sub	sp, #24
 8006878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800687a:	463b      	mov	r3, r7
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	611a      	str	r2, [r3, #16]
 8006888:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800688a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800688e:	f7ff fc2f 	bl	80060f0 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8006892:	2002      	movs	r0, #2
 8006894:	f7ff fc14 	bl	80060c0 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PB4   ------> UCPD1_CC2
  PB6   ------> UCPD1_CC1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 8006898:	2310      	movs	r3, #16
 800689a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800689c:	2303      	movs	r3, #3
 800689e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068a0:	2300      	movs	r3, #0
 80068a2:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068a4:	463b      	mov	r3, r7
 80068a6:	4619      	mov	r1, r3
 80068a8:	4838      	ldr	r0, [pc, #224]	@ (800698c <MX_UCPD1_Init+0x118>)
 80068aa:	f007 fb73 	bl	800df94 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 80068ae:	2340      	movs	r3, #64	@ 0x40
 80068b0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80068b2:	2303      	movs	r3, #3
 80068b4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80068b6:	2300      	movs	r3, #0
 80068b8:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80068ba:	463b      	mov	r3, r7
 80068bc:	4619      	mov	r1, r3
 80068be:	4833      	ldr	r0, [pc, #204]	@ (800698c <MX_UCPD1_Init+0x118>)
 80068c0:	f007 fb68 	bl	800df94 <LL_GPIO_Init>

  /* UCPD1 DMA Init */

  /* UCPD1_RX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_4, LL_DMAMUX_REQ_UCPD1_RX);
 80068c4:	2272      	movs	r2, #114	@ 0x72
 80068c6:	2103      	movs	r1, #3
 80068c8:	4831      	ldr	r0, [pc, #196]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068ca:	f7ff fd35 	bl	8006338 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_4, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80068ce:	2200      	movs	r2, #0
 80068d0:	2103      	movs	r1, #3
 80068d2:	482f      	ldr	r0, [pc, #188]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068d4:	f7ff fc24 	bl	8006120 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PRIORITY_LOW);
 80068d8:	2200      	movs	r2, #0
 80068da:	2103      	movs	r1, #3
 80068dc:	482c      	ldr	r0, [pc, #176]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068de:	f7ff fd05 	bl	80062ec <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MODE_NORMAL);
 80068e2:	2200      	movs	r2, #0
 80068e4:	2103      	movs	r1, #3
 80068e6:	482a      	ldr	r0, [pc, #168]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068e8:	f7ff fc42 	bl	8006170 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PERIPH_NOINCREMENT);
 80068ec:	2200      	movs	r2, #0
 80068ee:	2103      	movs	r1, #3
 80068f0:	4827      	ldr	r0, [pc, #156]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068f2:	f7ff fc63 	bl	80061bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MEMORY_INCREMENT);
 80068f6:	2280      	movs	r2, #128	@ 0x80
 80068f8:	2103      	movs	r1, #3
 80068fa:	4825      	ldr	r0, [pc, #148]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 80068fc:	f7ff fc84 	bl	8006208 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_PDATAALIGN_BYTE);
 8006900:	2200      	movs	r2, #0
 8006902:	2103      	movs	r1, #3
 8006904:	4822      	ldr	r0, [pc, #136]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006906:	f7ff fca5 	bl	8006254 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_4, LL_DMA_MDATAALIGN_BYTE);
 800690a:	2200      	movs	r2, #0
 800690c:	2103      	movs	r1, #3
 800690e:	4820      	ldr	r0, [pc, #128]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006910:	f7ff fcc6 	bl	80062a0 <LL_DMA_SetMemorySize>

  /* UCPD1_TX Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_CHANNEL_2, LL_DMAMUX_REQ_UCPD1_TX);
 8006914:	2273      	movs	r2, #115	@ 0x73
 8006916:	2101      	movs	r1, #1
 8006918:	481d      	ldr	r0, [pc, #116]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 800691a:	f7ff fd0d 	bl	8006338 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_CHANNEL_2, LL_DMA_DIRECTION_MEMORY_TO_PERIPH);
 800691e:	2210      	movs	r2, #16
 8006920:	2101      	movs	r1, #1
 8006922:	481b      	ldr	r0, [pc, #108]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006924:	f7ff fbfc 	bl	8006120 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetChannelPriorityLevel(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PRIORITY_LOW);
 8006928:	2200      	movs	r2, #0
 800692a:	2101      	movs	r1, #1
 800692c:	4818      	ldr	r0, [pc, #96]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 800692e:	f7ff fcdd 	bl	80062ec <LL_DMA_SetChannelPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MODE_NORMAL);
 8006932:	2200      	movs	r2, #0
 8006934:	2101      	movs	r1, #1
 8006936:	4816      	ldr	r0, [pc, #88]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006938:	f7ff fc1a 	bl	8006170 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PERIPH_NOINCREMENT);
 800693c:	2200      	movs	r2, #0
 800693e:	2101      	movs	r1, #1
 8006940:	4813      	ldr	r0, [pc, #76]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006942:	f7ff fc3b 	bl	80061bc <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MEMORY_INCREMENT);
 8006946:	2280      	movs	r2, #128	@ 0x80
 8006948:	2101      	movs	r1, #1
 800694a:	4811      	ldr	r0, [pc, #68]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 800694c:	f7ff fc5c 	bl	8006208 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_PDATAALIGN_BYTE);
 8006950:	2200      	movs	r2, #0
 8006952:	2101      	movs	r1, #1
 8006954:	480e      	ldr	r0, [pc, #56]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006956:	f7ff fc7d 	bl	8006254 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_CHANNEL_2, LL_DMA_MDATAALIGN_BYTE);
 800695a:	2200      	movs	r2, #0
 800695c:	2101      	movs	r1, #1
 800695e:	480c      	ldr	r0, [pc, #48]	@ (8006990 <MX_UCPD1_Init+0x11c>)
 8006960:	f7ff fc9e 	bl	80062a0 <LL_DMA_SetMemorySize>

  /* UCPD1 interrupt Init */
  NVIC_SetPriority(UCPD1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8006964:	f7ff fa8c 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 8006968:	4603      	mov	r3, r0
 800696a:	2200      	movs	r2, #0
 800696c:	2103      	movs	r1, #3
 800696e:	4618      	mov	r0, r3
 8006970:	f7ff fadc 	bl	8005f2c <NVIC_EncodePriority>
 8006974:	4603      	mov	r3, r0
 8006976:	4619      	mov	r1, r3
 8006978:	203f      	movs	r0, #63	@ 0x3f
 800697a:	f7ff faad 	bl	8005ed8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UCPD1_IRQn);
 800697e:	203f      	movs	r0, #63	@ 0x3f
 8006980:	f7ff fa8c 	bl	8005e9c <__NVIC_EnableIRQ>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8006984:	bf00      	nop
 8006986:	3718      	adds	r7, #24
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}
 800698c:	48000400 	.word	0x48000400
 8006990:	40020000 	.word	0x40020000

08006994 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b082      	sub	sp, #8
 8006998:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800699a:	4b26      	ldr	r3, [pc, #152]	@ (8006a34 <MX_DMA_Init+0xa0>)
 800699c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800699e:	4a25      	ldr	r2, [pc, #148]	@ (8006a34 <MX_DMA_Init+0xa0>)
 80069a0:	f043 0304 	orr.w	r3, r3, #4
 80069a4:	6493      	str	r3, [r2, #72]	@ 0x48
 80069a6:	4b23      	ldr	r3, [pc, #140]	@ (8006a34 <MX_DMA_Init+0xa0>)
 80069a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	607b      	str	r3, [r7, #4]
 80069b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069b2:	4b20      	ldr	r3, [pc, #128]	@ (8006a34 <MX_DMA_Init+0xa0>)
 80069b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006a34 <MX_DMA_Init+0xa0>)
 80069b8:	f043 0301 	orr.w	r3, r3, #1
 80069bc:	6493      	str	r3, [r2, #72]	@ 0x48
 80069be:	4b1d      	ldr	r3, [pc, #116]	@ (8006a34 <MX_DMA_Init+0xa0>)
 80069c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80069c2:	f003 0301 	and.w	r3, r3, #1
 80069c6:	603b      	str	r3, [r7, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80069ca:	f7ff fa59 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 80069ce:	4603      	mov	r3, r0
 80069d0:	2200      	movs	r2, #0
 80069d2:	2103      	movs	r1, #3
 80069d4:	4618      	mov	r0, r3
 80069d6:	f7ff faa9 	bl	8005f2c <NVIC_EncodePriority>
 80069da:	4603      	mov	r3, r0
 80069dc:	4619      	mov	r1, r3
 80069de:	200b      	movs	r0, #11
 80069e0:	f7ff fa7a 	bl	8005ed8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80069e4:	200b      	movs	r0, #11
 80069e6:	f7ff fa59 	bl	8005e9c <__NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 80069ea:	f7ff fa49 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2200      	movs	r2, #0
 80069f2:	2103      	movs	r1, #3
 80069f4:	4618      	mov	r0, r3
 80069f6:	f7ff fa99 	bl	8005f2c <NVIC_EncodePriority>
 80069fa:	4603      	mov	r3, r0
 80069fc:	4619      	mov	r1, r3
 80069fe:	200c      	movs	r0, #12
 8006a00:	f7ff fa6a 	bl	8005ed8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8006a04:	200c      	movs	r0, #12
 8006a06:	f7ff fa49 	bl	8005e9c <__NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Channel4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),3, 0));
 8006a0a:	f7ff fa39 	bl	8005e80 <__NVIC_GetPriorityGrouping>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2200      	movs	r2, #0
 8006a12:	2103      	movs	r1, #3
 8006a14:	4618      	mov	r0, r3
 8006a16:	f7ff fa89 	bl	8005f2c <NVIC_EncodePriority>
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	200e      	movs	r0, #14
 8006a20:	f7ff fa5a 	bl	8005ed8 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8006a24:	200e      	movs	r0, #14
 8006a26:	f7ff fa39 	bl	8005e9c <__NVIC_EnableIRQ>

}
 8006a2a:	bf00      	nop
 8006a2c:	3708      	adds	r7, #8
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	40021000 	.word	0x40021000

08006a38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b08a      	sub	sp, #40	@ 0x28
 8006a3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a3e:	f107 0314 	add.w	r3, r7, #20
 8006a42:	2200      	movs	r2, #0
 8006a44:	601a      	str	r2, [r3, #0]
 8006a46:	605a      	str	r2, [r3, #4]
 8006a48:	609a      	str	r2, [r3, #8]
 8006a4a:	60da      	str	r2, [r3, #12]
 8006a4c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a4e:	4b2b      	ldr	r3, [pc, #172]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a52:	4a2a      	ldr	r2, [pc, #168]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a54:	f043 0301 	orr.w	r3, r3, #1
 8006a58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a5a:	4b28      	ldr	r3, [pc, #160]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a5e:	f003 0301 	and.w	r3, r3, #1
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a66:	4b25      	ldr	r3, [pc, #148]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a6a:	4a24      	ldr	r2, [pc, #144]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a6c:	f043 0304 	orr.w	r3, r3, #4
 8006a70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a72:	4b22      	ldr	r3, [pc, #136]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a76:	f003 0304 	and.w	r3, r3, #4
 8006a7a:	60fb      	str	r3, [r7, #12]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006a7e:	4b1f      	ldr	r3, [pc, #124]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a82:	4a1e      	ldr	r2, [pc, #120]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a84:	f043 0308 	orr.w	r3, r3, #8
 8006a88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006a8a:	4b1c      	ldr	r3, [pc, #112]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a8e:	f003 0308 	and.w	r3, r3, #8
 8006a92:	60bb      	str	r3, [r7, #8]
 8006a94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a96:	4b19      	ldr	r3, [pc, #100]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006a9a:	4a18      	ldr	r2, [pc, #96]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006a9c:	f043 0302 	orr.w	r3, r3, #2
 8006aa0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006aa2:	4b16      	ldr	r3, [pc, #88]	@ (8006afc <MX_GPIO_Init+0xc4>)
 8006aa4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	607b      	str	r3, [r7, #4]
 8006aac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Input_en_Pin|Output_en_Pin|Output_dischg_Pin, GPIO_PIN_RESET);
 8006aae:	2200      	movs	r2, #0
 8006ab0:	f44f 71e0 	mov.w	r1, #448	@ 0x1c0
 8006ab4:	4812      	ldr	r0, [pc, #72]	@ (8006b00 <MX_GPIO_Init+0xc8>)
 8006ab6:	f003 fe5f 	bl	800a778 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Input_en_Pin Output_en_Pin Output_dischg_Pin */
  GPIO_InitStruct.Pin = Input_en_Pin|Output_en_Pin|Output_dischg_Pin;
 8006aba:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8006abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ac8:	2300      	movs	r3, #0
 8006aca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006acc:	f107 0314 	add.w	r3, r7, #20
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	480b      	ldr	r0, [pc, #44]	@ (8006b00 <MX_GPIO_Init+0xc8>)
 8006ad4:	f003 fbec 	bl	800a2b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : FiveVgood_Pin ThreeVgood_Pin */
  GPIO_InitStruct.Pin = FiveVgood_Pin|ThreeVgood_Pin;
 8006ad8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ae6:	f107 0314 	add.w	r3, r7, #20
 8006aea:	4619      	mov	r1, r3
 8006aec:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006af0:	f003 fbde 	bl	800a2b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8006af4:	bf00      	nop
 8006af6:	3728      	adds	r7, #40	@ 0x28
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	40021000 	.word	0x40021000
 8006b00:	48000800 	.word	0x48000800

08006b04 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_1);
 8006b0c:	2100      	movs	r1, #0
 8006b0e:	4817      	ldr	r0, [pc, #92]	@ (8006b6c <StartDefaultTask+0x68>)
 8006b10:	f005 fe2a 	bl	800c768 <HAL_TIM_PWM_Stop>
  HAL_TIM_PWM_Stop(&htim8, TIM_CHANNEL_2);
 8006b14:	2104      	movs	r1, #4
 8006b16:	4815      	ldr	r0, [pc, #84]	@ (8006b6c <StartDefaultTask+0x68>)
 8006b18:	f005 fe26 	bl	800c768 <HAL_TIM_PWM_Stop>

  osDelay(1000);
 8006b1c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006b20:	f00a fd94 	bl	801164c <osDelay>

  HAL_GPIO_WritePin(Output_dischg_GPIO_Port, Output_dischg_Pin, GPIO_PIN_RESET);
 8006b24:	2200      	movs	r2, #0
 8006b26:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006b2a:	4811      	ldr	r0, [pc, #68]	@ (8006b70 <StartDefaultTask+0x6c>)
 8006b2c:	f003 fe24 	bl	800a778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Output_en_GPIO_Port, Output_en_Pin, GPIO_PIN_SET);
 8006b30:	2201      	movs	r2, #1
 8006b32:	2180      	movs	r1, #128	@ 0x80
 8006b34:	480e      	ldr	r0, [pc, #56]	@ (8006b70 <StartDefaultTask+0x6c>)
 8006b36:	f003 fe1f 	bl	800a778 <HAL_GPIO_WritePin>

  osDelay(1000);
 8006b3a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006b3e:	f00a fd85 	bl	801164c <osDelay>

  HAL_GPIO_WritePin(Input_en_GPIO_Port, Input_en_Pin, GPIO_PIN_SET);
 8006b42:	2201      	movs	r2, #1
 8006b44:	2140      	movs	r1, #64	@ 0x40
 8006b46:	480a      	ldr	r0, [pc, #40]	@ (8006b70 <StartDefaultTask+0x6c>)
 8006b48:	f003 fe16 	bl	800a778 <HAL_GPIO_WritePin>

  osDelay(1000);
 8006b4c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006b50:	f00a fd7c 	bl	801164c <osDelay>

  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8006b54:	2100      	movs	r1, #0
 8006b56:	4805      	ldr	r0, [pc, #20]	@ (8006b6c <StartDefaultTask+0x68>)
 8006b58:	f005 fd06 	bl	800c568 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8006b5c:	2104      	movs	r1, #4
 8006b5e:	4803      	ldr	r0, [pc, #12]	@ (8006b6c <StartDefaultTask+0x68>)
 8006b60:	f005 fd02 	bl	800c568 <HAL_TIM_PWM_Start>
  
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8006b64:	2001      	movs	r0, #1
 8006b66:	f00a fd71 	bl	801164c <osDelay>
 8006b6a:	e7fb      	b.n	8006b64 <StartDefaultTask+0x60>
 8006b6c:	20000228 	.word	0x20000228
 8006b70:	48000800 	.word	0x48000800

08006b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006b74:	b480      	push	{r7}
 8006b76:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8006b78:	b672      	cpsid	i
}
 8006b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006b7c:	bf00      	nop
 8006b7e:	e7fd      	b.n	8006b7c <Error_Handler+0x8>

08006b80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b86:	4b12      	ldr	r3, [pc, #72]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006b88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b8a:	4a11      	ldr	r2, [pc, #68]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006b8c:	f043 0301 	orr.w	r3, r3, #1
 8006b90:	6613      	str	r3, [r2, #96]	@ 0x60
 8006b92:	4b0f      	ldr	r3, [pc, #60]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006b94:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006b96:	f003 0301 	and.w	r3, r3, #1
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b9e:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ba2:	4a0b      	ldr	r2, [pc, #44]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006ba4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8006baa:	4b09      	ldr	r3, [pc, #36]	@ (8006bd0 <HAL_MspInit+0x50>)
 8006bac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006bae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006bb2:	603b      	str	r3, [r7, #0]
 8006bb4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	210f      	movs	r1, #15
 8006bba:	f06f 0001 	mvn.w	r0, #1
 8006bbe:	f003 f8d2 	bl	8009d66 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8006bc2:	f004 fd01 	bl	800b5c8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006bc6:	bf00      	nop
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}
 8006bce:	bf00      	nop
 8006bd0:	40021000 	.word	0x40021000

08006bd4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b09a      	sub	sp, #104	@ 0x68
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006bdc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006be0:	2200      	movs	r2, #0
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	605a      	str	r2, [r3, #4]
 8006be6:	609a      	str	r2, [r3, #8]
 8006be8:	60da      	str	r2, [r3, #12]
 8006bea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8006bec:	f107 0310 	add.w	r3, r7, #16
 8006bf0:	2244      	movs	r2, #68	@ 0x44
 8006bf2:	2100      	movs	r1, #0
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f013 fd07 	bl	801a608 <memset>
  if(hi2c->Instance==I2C1)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	4a1f      	ldr	r2, [pc, #124]	@ (8006c7c <HAL_I2C_MspInit+0xa8>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d136      	bne.n	8006c72 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8006c04:	2340      	movs	r3, #64	@ 0x40
 8006c06:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8006c08:	2300      	movs	r3, #0
 8006c0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8006c0c:	f107 0310 	add.w	r3, r7, #16
 8006c10:	4618      	mov	r0, r3
 8006c12:	f005 fa01 	bl	800c018 <HAL_RCCEx_PeriphCLKConfig>
 8006c16:	4603      	mov	r3, r0
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d001      	beq.n	8006c20 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8006c1c:	f7ff ffaa 	bl	8006b74 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006c20:	4b17      	ldr	r3, [pc, #92]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c24:	4a16      	ldr	r2, [pc, #88]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c26:	f043 0302 	orr.w	r3, r3, #2
 8006c2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006c2c:	4b14      	ldr	r3, [pc, #80]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8006c38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006c3c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c3e:	2312      	movs	r3, #18
 8006c40:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c42:	2300      	movs	r3, #0
 8006c44:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006c46:	2300      	movs	r3, #0
 8006c48:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006c4a:	2304      	movs	r3, #4
 8006c4c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c4e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8006c52:	4619      	mov	r1, r3
 8006c54:	480b      	ldr	r0, [pc, #44]	@ (8006c84 <HAL_I2C_MspInit+0xb0>)
 8006c56:	f003 fb2b 	bl	800a2b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006c5a:	4b09      	ldr	r3, [pc, #36]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c5e:	4a08      	ldr	r2, [pc, #32]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c60:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006c64:	6593      	str	r3, [r2, #88]	@ 0x58
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_I2C_MspInit+0xac>)
 8006c68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c6a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006c6e:	60bb      	str	r3, [r7, #8]
 8006c70:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8006c72:	bf00      	nop
 8006c74:	3768      	adds	r7, #104	@ 0x68
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
 8006c7a:	bf00      	nop
 8006c7c:	40005400 	.word	0x40005400
 8006c80:	40021000 	.word	0x40021000
 8006c84:	48000400 	.word	0x48000400

08006c88 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a0b      	ldr	r2, [pc, #44]	@ (8006cc4 <HAL_I2C_MspDeInit+0x3c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d10f      	bne.n	8006cba <HAL_I2C_MspDeInit+0x32>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8006c9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc8 <HAL_I2C_MspDeInit+0x40>)
 8006c9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8006cc8 <HAL_I2C_MspDeInit+0x40>)
 8006ca0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006ca4:	6593      	str	r3, [r2, #88]	@ 0x58

    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8);
 8006ca6:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8006caa:	4808      	ldr	r0, [pc, #32]	@ (8006ccc <HAL_I2C_MspDeInit+0x44>)
 8006cac:	f003 fc82 	bl	800a5b4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_9);
 8006cb0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006cb4:	4805      	ldr	r0, [pc, #20]	@ (8006ccc <HAL_I2C_MspDeInit+0x44>)
 8006cb6:	f003 fc7d 	bl	800a5b4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8006cba:	bf00      	nop
 8006cbc:	3708      	adds	r7, #8
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40005400 	.word	0x40005400
 8006cc8:	40021000 	.word	0x40021000
 8006ccc:	48000400 	.word	0x48000400

08006cd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b08a      	sub	sp, #40	@ 0x28
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd8:	f107 0314 	add.w	r3, r7, #20
 8006cdc:	2200      	movs	r2, #0
 8006cde:	601a      	str	r2, [r3, #0]
 8006ce0:	605a      	str	r2, [r3, #4]
 8006ce2:	609a      	str	r2, [r3, #8]
 8006ce4:	60da      	str	r2, [r3, #12]
 8006ce6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM8)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	4a25      	ldr	r2, [pc, #148]	@ (8006d84 <HAL_TIM_Base_MspInit+0xb4>)
 8006cee:	4293      	cmp	r3, r2
 8006cf0:	d144      	bne.n	8006d7c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM8_MspInit 0 */

  /* USER CODE END TIM8_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006cf2:	4b25      	ldr	r3, [pc, #148]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006cf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006cf6:	4a24      	ldr	r2, [pc, #144]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006cf8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8006cfc:	6613      	str	r3, [r2, #96]	@ 0x60
 8006cfe:	4b22      	ldr	r3, [pc, #136]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d00:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006d02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006d06:	613b      	str	r3, [r7, #16]
 8006d08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006d0a:	4b1f      	ldr	r3, [pc, #124]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d0e:	4a1e      	ldr	r2, [pc, #120]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d10:	f043 0304 	orr.w	r3, r3, #4
 8006d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d16:	4b1c      	ldr	r3, [pc, #112]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d1a:	f003 0304 	and.w	r3, r3, #4
 8006d1e:	60fb      	str	r3, [r7, #12]
 8006d20:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d22:	4b19      	ldr	r3, [pc, #100]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d26:	4a18      	ldr	r2, [pc, #96]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d28:	f043 0308 	orr.w	r3, r3, #8
 8006d2c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006d2e:	4b16      	ldr	r3, [pc, #88]	@ (8006d88 <HAL_TIM_Base_MspInit+0xb8>)
 8006d30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d32:	f003 0308 	and.w	r3, r3, #8
 8006d36:	60bb      	str	r3, [r7, #8]
 8006d38:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PC9     ------> TIM8_BKIN2
    PD2     ------> TIM8_BKIN
    */
    GPIO_InitStruct.Pin = VSgood_Pin;
 8006d3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006d3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d40:	2312      	movs	r3, #18
 8006d42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d44:	2301      	movs	r3, #1
 8006d46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d48:	2300      	movs	r3, #0
 8006d4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM8;
 8006d4c:	2306      	movs	r3, #6
 8006d4e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(VSgood_GPIO_Port, &GPIO_InitStruct);
 8006d50:	f107 0314 	add.w	r3, r7, #20
 8006d54:	4619      	mov	r1, r3
 8006d56:	480d      	ldr	r0, [pc, #52]	@ (8006d8c <HAL_TIM_Base_MspInit+0xbc>)
 8006d58:	f003 faaa 	bl	800a2b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ISgood_Pin;
 8006d5c:	2304      	movs	r3, #4
 8006d5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d60:	2312      	movs	r3, #18
 8006d62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006d64:	2301      	movs	r3, #1
 8006d66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006d6c:	2304      	movs	r3, #4
 8006d6e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(ISgood_GPIO_Port, &GPIO_InitStruct);
 8006d70:	f107 0314 	add.w	r3, r7, #20
 8006d74:	4619      	mov	r1, r3
 8006d76:	4806      	ldr	r0, [pc, #24]	@ (8006d90 <HAL_TIM_Base_MspInit+0xc0>)
 8006d78:	f003 fa9a 	bl	800a2b0 <HAL_GPIO_Init>

  /* USER CODE END TIM8_MspInit 1 */

  }

}
 8006d7c:	bf00      	nop
 8006d7e:	3728      	adds	r7, #40	@ 0x28
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	40013400 	.word	0x40013400
 8006d88:	40021000 	.word	0x40021000
 8006d8c:	48000800 	.word	0x48000800
 8006d90:	48000c00 	.word	0x48000c00

08006d94 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	@ 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d9c:	f107 0314 	add.w	r3, r7, #20
 8006da0:	2200      	movs	r2, #0
 8006da2:	601a      	str	r2, [r3, #0]
 8006da4:	605a      	str	r2, [r3, #4]
 8006da6:	609a      	str	r2, [r3, #8]
 8006da8:	60da      	str	r2, [r3, #12]
 8006daa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a29      	ldr	r2, [pc, #164]	@ (8006e58 <HAL_TIM_MspPostInit+0xc4>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d14c      	bne.n	8006e50 <HAL_TIM_MspPostInit+0xbc>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006db6:	4b29      	ldr	r3, [pc, #164]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dba:	4a28      	ldr	r2, [pc, #160]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006dbc:	f043 0301 	orr.w	r3, r3, #1
 8006dc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dc2:	4b26      	ldr	r3, [pc, #152]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006dc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dc6:	f003 0301 	and.w	r3, r3, #1
 8006dca:	613b      	str	r3, [r7, #16]
 8006dcc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006dce:	4b23      	ldr	r3, [pc, #140]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006dd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dd2:	4a22      	ldr	r2, [pc, #136]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006dd4:	f043 0304 	orr.w	r3, r3, #4
 8006dd8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8006dda:	4b20      	ldr	r3, [pc, #128]	@ (8006e5c <HAL_TIM_MspPostInit+0xc8>)
 8006ddc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006dde:	f003 0304 	and.w	r3, r3, #4
 8006de2:	60fb      	str	r3, [r7, #12]
 8006de4:	68fb      	ldr	r3, [r7, #12]
    PA14     ------> TIM8_CH2
    PA15     ------> TIM8_CH1
    PC10     ------> TIM8_CH1N
    PC11     ------> TIM8_CH2N
    */
    GPIO_InitStruct.Pin = PH_2_P_Pin;
 8006de6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8006dea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006dec:	2302      	movs	r3, #2
 8006dee:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df0:	2300      	movs	r3, #0
 8006df2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df4:	2300      	movs	r3, #0
 8006df6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_TIM8;
 8006df8:	2305      	movs	r3, #5
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PH_2_P_GPIO_Port, &GPIO_InitStruct);
 8006dfc:	f107 0314 	add.w	r3, r7, #20
 8006e00:	4619      	mov	r1, r3
 8006e02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e06:	f003 fa53 	bl	800a2b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PH_1_P_Pin;
 8006e0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006e0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e10:	2302      	movs	r3, #2
 8006e12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e14:	2300      	movs	r3, #0
 8006e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM8;
 8006e1c:	2302      	movs	r3, #2
 8006e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PH_1_P_GPIO_Port, &GPIO_InitStruct);
 8006e20:	f107 0314 	add.w	r3, r7, #20
 8006e24:	4619      	mov	r1, r3
 8006e26:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8006e2a:	f003 fa41 	bl	800a2b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PH_1_N_Pin|PH_2_N_Pin;
 8006e2e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006e32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e34:	2302      	movs	r3, #2
 8006e36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM8;
 8006e40:	2304      	movs	r3, #4
 8006e42:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e44:	f107 0314 	add.w	r3, r7, #20
 8006e48:	4619      	mov	r1, r3
 8006e4a:	4805      	ldr	r0, [pc, #20]	@ (8006e60 <HAL_TIM_MspPostInit+0xcc>)
 8006e4c:	f003 fa30 	bl	800a2b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8006e50:	bf00      	nop
 8006e52:	3728      	adds	r7, #40	@ 0x28
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40013400 	.word	0x40013400
 8006e5c:	40021000 	.word	0x40021000
 8006e60:	48000800 	.word	0x48000800

08006e64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006e64:	b480      	push	{r7}
 8006e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006e68:	bf00      	nop
 8006e6a:	e7fd      	b.n	8006e68 <NMI_Handler+0x4>

08006e6c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006e70:	bf00      	nop
 8006e72:	e7fd      	b.n	8006e70 <HardFault_Handler+0x4>

08006e74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006e74:	b480      	push	{r7}
 8006e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006e78:	bf00      	nop
 8006e7a:	e7fd      	b.n	8006e78 <MemManage_Handler+0x4>

08006e7c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006e80:	bf00      	nop
 8006e82:	e7fd      	b.n	8006e80 <BusFault_Handler+0x4>

08006e84 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006e84:	b480      	push	{r7}
 8006e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006e88:	bf00      	nop
 8006e8a:	e7fd      	b.n	8006e88 <UsageFault_Handler+0x4>

08006e8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006e90:	bf00      	nop
 8006e92:	46bd      	mov	sp, r7
 8006e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e98:	4770      	bx	lr

08006e9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006e9e:	f002 fe4f 	bl	8009b40 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8006ea2:	f00c f867 	bl	8012f74 <xTaskGetSchedulerState>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d001      	beq.n	8006eb0 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8006eac:	f00c fb2c 	bl	8013508 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  USBPD_DPM_TimerCounter();
 8006eb0:	f00c fed4 	bl	8013c5c <USBPD_DPM_TimerCounter>
  GUI_TimerCounter();
 8006eb4:	f00f fc4e 	bl	8016754 <GUI_TimerCounter>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006eb8:	bf00      	nop
 8006eba:	bd80      	pop	{r7, pc}

08006ebc <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  TRACER_EMB_IRQHandlerDMA();
 8006ec0:	f012 fa80 	bl	80193c4 <TRACER_EMB_IRQHandlerDMA>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8006ec4:	bf00      	nop
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8006ec8:	b480      	push	{r7}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel2_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8006ecc:	bf00      	nop
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr

08006ed6 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8006ed6:	b480      	push	{r7}
 8006ed8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Channel4_IRQn 0 */

  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8006eda:	bf00      	nop
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr

08006ee4 <UCPD1_IRQHandler>:

/**
  * @brief This function handles UCPD1 interrupt / UCPD1 wake-up interrupt through EXTI line 43.
  */
void UCPD1_IRQHandler(void)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UCPD1_IRQn 0 */

  /* USER CODE END UCPD1_IRQn 0 */
  USBPD_PORT0_IRQHandler();
 8006ee8:	f008 fca1 	bl	800f82e <USBPD_PORT0_IRQHandler>

  /* USER CODE BEGIN UCPD1_IRQn 1 */

  /* USER CODE END UCPD1_IRQn 1 */
}
 8006eec:	bf00      	nop
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  TRACER_EMB_IRQHandlerUSART();
 8006ef4:	f012 fa6c 	bl	80193d0 <TRACER_EMB_IRQHandlerUSART>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8006ef8:	bf00      	nop
 8006efa:	bd80      	pop	{r7, pc}

08006efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b086      	sub	sp, #24
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006f04:	4a14      	ldr	r2, [pc, #80]	@ (8006f58 <_sbrk+0x5c>)
 8006f06:	4b15      	ldr	r3, [pc, #84]	@ (8006f5c <_sbrk+0x60>)
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006f0c:	697b      	ldr	r3, [r7, #20]
 8006f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006f10:	4b13      	ldr	r3, [pc, #76]	@ (8006f60 <_sbrk+0x64>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d102      	bne.n	8006f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006f18:	4b11      	ldr	r3, [pc, #68]	@ (8006f60 <_sbrk+0x64>)
 8006f1a:	4a12      	ldr	r2, [pc, #72]	@ (8006f64 <_sbrk+0x68>)
 8006f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006f1e:	4b10      	ldr	r3, [pc, #64]	@ (8006f60 <_sbrk+0x64>)
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	4413      	add	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	429a      	cmp	r2, r3
 8006f2a:	d207      	bcs.n	8006f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006f2c:	f013 fb84 	bl	801a638 <__errno>
 8006f30:	4603      	mov	r3, r0
 8006f32:	220c      	movs	r2, #12
 8006f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006f36:	f04f 33ff 	mov.w	r3, #4294967295
 8006f3a:	e009      	b.n	8006f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006f3c:	4b08      	ldr	r3, [pc, #32]	@ (8006f60 <_sbrk+0x64>)
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006f42:	4b07      	ldr	r3, [pc, #28]	@ (8006f60 <_sbrk+0x64>)
 8006f44:	681a      	ldr	r2, [r3, #0]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4413      	add	r3, r2
 8006f4a:	4a05      	ldr	r2, [pc, #20]	@ (8006f60 <_sbrk+0x64>)
 8006f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3718      	adds	r7, #24
 8006f54:	46bd      	mov	sp, r7
 8006f56:	bd80      	pop	{r7, pc}
 8006f58:	20008000 	.word	0x20008000
 8006f5c:	00000400 	.word	0x00000400
 8006f60:	20000278 	.word	0x20000278
 8006f64:	200030c0 	.word	0x200030c0

08006f68 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006f6c:	4b06      	ldr	r3, [pc, #24]	@ (8006f88 <SystemInit+0x20>)
 8006f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f72:	4a05      	ldr	r2, [pc, #20]	@ (8006f88 <SystemInit+0x20>)
 8006f74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006f78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006f7c:	bf00      	nop
 8006f7e:	46bd      	mov	sp, r7
 8006f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f84:	4770      	bx	lr
 8006f86:	bf00      	nop
 8006f88:	e000ed00 	.word	0xe000ed00

08006f8c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8006f8c:	480d      	ldr	r0, [pc, #52]	@ (8006fc4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8006f8e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8006f90:	f7ff ffea 	bl	8006f68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f94:	480c      	ldr	r0, [pc, #48]	@ (8006fc8 <LoopForever+0x6>)
  ldr r1, =_edata
 8006f96:	490d      	ldr	r1, [pc, #52]	@ (8006fcc <LoopForever+0xa>)
  ldr r2, =_sidata
 8006f98:	4a0d      	ldr	r2, [pc, #52]	@ (8006fd0 <LoopForever+0xe>)
  movs r3, #0
 8006f9a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8006f9c:	e002      	b.n	8006fa4 <LoopCopyDataInit>

08006f9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006fa0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006fa2:	3304      	adds	r3, #4

08006fa4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006fa4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006fa6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006fa8:	d3f9      	bcc.n	8006f9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006faa:	4a0a      	ldr	r2, [pc, #40]	@ (8006fd4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8006fac:	4c0a      	ldr	r4, [pc, #40]	@ (8006fd8 <LoopForever+0x16>)
  movs r3, #0
 8006fae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fb0:	e001      	b.n	8006fb6 <LoopFillZerobss>

08006fb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fb4:	3204      	adds	r2, #4

08006fb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fb8:	d3fb      	bcc.n	8006fb2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8006fba:	f013 fb43 	bl	801a644 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006fbe:	f7ff f9e5 	bl	800638c <main>

08006fc2 <LoopForever>:

LoopForever:
    b LoopForever
 8006fc2:	e7fe      	b.n	8006fc2 <LoopForever>
  ldr   r0, =_estack
 8006fc4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8006fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006fcc:	20000194 	.word	0x20000194
  ldr r2, =_sidata
 8006fd0:	0801ba70 	.word	0x0801ba70
  ldr r2, =_sbss
 8006fd4:	20000194 	.word	0x20000194
  ldr r4, =_ebss
 8006fd8:	200030bc 	.word	0x200030bc

08006fdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006fdc:	e7fe      	b.n	8006fdc <ADC1_2_IRQHandler>
	...

08006fe0 <TCPP0203_RegisterBusIO>:
  * @brief  Register Bus Io to component
  * @param  Component object pointer
  * @retval Status of execution
  */
int32_t TCPP0203_RegisterBusIO(TCPP0203_Object_t *pObj, TCPP0203_IO_t *pIO)
{
 8006fe0:	b580      	push	{r7, lr}
 8006fe2:	b084      	sub	sp, #16
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d103      	bne.n	8006ff8 <TCPP0203_RegisterBusIO+0x18>
  {
    ret = TCPP0203_ERROR;
 8006ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8006ff4:	60fb      	str	r3, [r7, #12]
 8006ff6:	e02c      	b.n	8007052 <TCPP0203_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8006ff8:	683b      	ldr	r3, [r7, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	685a      	ldr	r2, [r3, #4]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	891a      	ldrh	r2, [r3, #8]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	68da      	ldr	r2, [r3, #12]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	691a      	ldr	r2, [r3, #16]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	695a      	ldr	r2, [r3, #20]
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = TCPP0203_ReadRegWrap;
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	4a0c      	ldr	r2, [pc, #48]	@ (800705c <TCPP0203_RegisterBusIO+0x7c>)
 800702c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = TCPP0203_WriteRegWrap;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	4a0b      	ldr	r2, [pc, #44]	@ (8007060 <TCPP0203_RegisterBusIO+0x80>)
 8007032:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d004      	beq.n	800704c <TCPP0203_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	4798      	blx	r3
 8007048:	60f8      	str	r0, [r7, #12]
 800704a:	e002      	b.n	8007052 <TCPP0203_RegisterBusIO+0x72>
    }
    else
    {
      ret = TCPP0203_ERROR;
 800704c:	f04f 33ff 	mov.w	r3, #4294967295
 8007050:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007052:	68fb      	ldr	r3, [r7, #12]
}
 8007054:	4618      	mov	r0, r3
 8007056:	3710      	adds	r7, #16
 8007058:	46bd      	mov	sp, r7
 800705a:	bd80      	pop	{r7, pc}
 800705c:	0800767b 	.word	0x0800767b
 8007060:	080076b1 	.word	0x080076b1

08007064 <TCPP0203_Init>:
  * @brief  Initializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Init(TCPP0203_Object_t *pObj)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
 800706a:	6078      	str	r0, [r7, #4]
  int32_t ret = 0;
 800706c:	2300      	movs	r3, #0
 800706e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8007076:	2b00      	cmp	r3, #0
 8007078:	d11d      	bne.n	80070b6 <TCPP0203_Init+0x52>
  {
    /* Read TCPP Device type */
    ret += tcpp0203_read_reg(&pObj->Ctx, TCPP0203_READ_REG2, &tmp, 1);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f103 0018 	add.w	r0, r3, #24
 8007080:	f107 020b 	add.w	r2, r7, #11
 8007084:	2301      	movs	r3, #1
 8007086:	2102      	movs	r1, #2
 8007088:	f000 fb63 	bl	8007752 <tcpp0203_read_reg>
 800708c:	4602      	mov	r2, r0
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	4413      	add	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]

    if (ret == TCPP0203_OK)
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d106      	bne.n	80070a8 <TCPP0203_Init+0x44>
    {
      TCPP0203_DeviceType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 800709a:	7afb      	ldrb	r3, [r7, #11]
 800709c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	4b0a      	ldr	r3, [pc, #40]	@ (80070cc <TCPP0203_Init+0x68>)
 80070a4:	701a      	strb	r2, [r3, #0]
 80070a6:	e002      	b.n	80070ae <TCPP0203_Init+0x4a>
    }
    else
    {
      TCPP0203_DeviceType = TCPP0203_DEVICE_TYPE_02;
 80070a8:	4b08      	ldr	r3, [pc, #32]	@ (80070cc <TCPP0203_Init+0x68>)
 80070aa:	2280      	movs	r2, #128	@ 0x80
 80070ac:	701a      	strb	r2, [r3, #0]
    }
    pObj->IsInitialized = 1U;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	2201      	movs	r2, #1
 80070b2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  if (ret != TCPP0203_OK)
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <TCPP0203_Init+0x5e>
  {
    ret = TCPP0203_ERROR;
 80070bc:	f04f 33ff 	mov.w	r3, #4294967295
 80070c0:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80070c2:	68fb      	ldr	r3, [r7, #12]
}
 80070c4:	4618      	mov	r0, r3
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	2000027c 	.word	0x2000027c

080070d0 <TCPP0203_DeInit>:
  * @brief  Deinitializes the TCPP0203 interface
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_DeInit(TCPP0203_Object_t *pObj)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d106      	bne.n	80070f0 <TCPP0203_DeInit+0x20>
  {
    /* De-Initialize IO BUS layer */
    pObj->IO.DeInit();
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	4798      	blx	r3

    pObj->IsInitialized = 0U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return TCPP0203_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}

080070fa <TCPP0203_Reset>:
  * @brief  Resets TCPP0203 register (Reg0)
  * @param  pObj Pointer to component object
  * @retval Component status (TCPP0203_OK / TCPP0203_ERROR)
  */
int32_t TCPP0203_Reset(TCPP0203_Object_t *pObj)
{
 80070fa:	b580      	push	{r7, lr}
 80070fc:	b084      	sub	sp, #16
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
  int32_t ret = TCPP0203_OK;
 8007102:	2300      	movs	r3, #0
 8007104:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = TCPP0203_REG0_RST_VALUE;
 8007106:	2300      	movs	r3, #0
 8007108:	72fb      	strb	r3, [r7, #11]

  /* Write reset values in Reg0 register */
  if (tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1) != TCPP0203_OK)
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	f103 0018 	add.w	r0, r3, #24
 8007110:	f107 020b 	add.w	r2, r7, #11
 8007114:	2301      	movs	r3, #1
 8007116:	2100      	movs	r1, #0
 8007118:	f000 fb32 	bl	8007780 <tcpp0203_write_reg>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <TCPP0203_Reset+0x2e>
  {
    ret = TCPP0203_ERROR;
 8007122:	f04f 33ff 	mov.w	r3, #4294967295
 8007126:	60fb      	str	r3, [r7, #12]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = TCPP0203_REG0_RST_VALUE;
  Reg1_LastRead_Value = TCPP0203_REG0_RST_VALUE;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007128:	68fb      	ldr	r3, [r7, #12]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3710      	adds	r7, #16
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}

08007132 <TCPP0203_SetVConnSwitch>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2
  * @retval Component status
  */
int32_t TCPP0203_SetVConnSwitch(TCPP0203_Object_t *pObj, uint8_t VConnSwitch)
{
 8007132:	b580      	push	{r7, lr}
 8007134:	b084      	sub	sp, #16
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	460b      	mov	r3, r1
 800713c:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800713e:	2300      	movs	r3, #0
 8007140:	60fb      	str	r3, [r7, #12]

  if ((VConnSwitch != TCPP0203_VCONN_SWITCH_OPEN)
 8007142:	78fb      	ldrb	r3, [r7, #3]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d009      	beq.n	800715c <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC1)
 8007148:	78fb      	ldrb	r3, [r7, #3]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d006      	beq.n	800715c <TCPP0203_SetVConnSwitch+0x2a>
      && (VConnSwitch != TCPP0203_VCONN_SWITCH_CC2))
 800714e:	78fb      	ldrb	r3, [r7, #3]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d003      	beq.n	800715c <TCPP0203_SetVConnSwitch+0x2a>
  {
    ret = TCPP0203_ERROR;
 8007154:	f04f 33ff 	mov.w	r3, #4294967295
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	e009      	b.n	8007170 <TCPP0203_SetVConnSwitch+0x3e>
  }
  else
  {
    /* Update VConn switch setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnSwitch, TCPP0203_VCONN_SWITCH_MSK);
 800715c:	78fb      	ldrb	r3, [r7, #3]
 800715e:	2203      	movs	r2, #3
 8007160:	4619      	mov	r1, r3
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f000 fabf 	bl	80076e6 <TCPP0203_ModifyReg0>
 8007168:	4602      	mov	r2, r0
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	4413      	add	r3, r2
 800716e:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007170:	68fb      	ldr	r3, [r7, #12]
}
 8007172:	4618      	mov	r0, r3
 8007174:	3710      	adds	r7, #16
 8007176:	46bd      	mov	sp, r7
 8007178:	bd80      	pop	{r7, pc}

0800717a <TCPP0203_SetGateDriverProvider>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_OPEN    GDP Switch Load Open
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_CLOSED  GDP Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverProvider(TCPP0203_Object_t *pObj, uint8_t GateDriverProvider)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b084      	sub	sp, #16
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
 8007182:	460b      	mov	r3, r1
 8007184:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 8007186:	2300      	movs	r3, #0
 8007188:	60fb      	str	r3, [r7, #12]

  if ((GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_OPEN)
 800718a:	78fb      	ldrb	r3, [r7, #3]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d006      	beq.n	800719e <TCPP0203_SetGateDriverProvider+0x24>
      && (GateDriverProvider != TCPP0203_GD_PROVIDER_SWITCH_CLOSED))
 8007190:	78fb      	ldrb	r3, [r7, #3]
 8007192:	2b04      	cmp	r3, #4
 8007194:	d003      	beq.n	800719e <TCPP0203_SetGateDriverProvider+0x24>
  {
    ret = TCPP0203_ERROR;
 8007196:	f04f 33ff 	mov.w	r3, #4294967295
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	e01a      	b.n	80071d4 <TCPP0203_SetGateDriverProvider+0x5a>
  }
  else
  {
    /* Update GDP Switch Load setting in Writing register Reg0 */
    if (GateDriverProvider == TCPP0203_GD_PROVIDER_SWITCH_CLOSED)
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	2b04      	cmp	r3, #4
 80071a2:	d10d      	bne.n	80071c0 <TCPP0203_SetGateDriverProvider+0x46>
    {
      /* If Gate Driver Provider is to be closed, Gate Driver Consumer should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverProvider | TCPP0203_GD_CONSUMER_SWITCH_OPEN),
 80071a4:	78fb      	ldrb	r3, [r7, #3]
 80071a6:	f043 0308 	orr.w	r3, r3, #8
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	220c      	movs	r2, #12
 80071ae:	4619      	mov	r1, r3
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 fa98 	bl	80076e6 <TCPP0203_ModifyReg0>
 80071b6:	4602      	mov	r2, r0
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	4413      	add	r3, r2
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e009      	b.n	80071d4 <TCPP0203_SetGateDriverProvider+0x5a>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverProvider, TCPP0203_GD_PROVIDER_SWITCH_MSK);
 80071c0:	78fb      	ldrb	r3, [r7, #3]
 80071c2:	2204      	movs	r2, #4
 80071c4:	4619      	mov	r1, r3
 80071c6:	6878      	ldr	r0, [r7, #4]
 80071c8:	f000 fa8d 	bl	80076e6 <TCPP0203_ModifyReg0>
 80071cc:	4602      	mov	r2, r0
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4413      	add	r3, r2
 80071d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <TCPP0203_SetGateDriverConsumer>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_OPEN    GDC Switch Load Open
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_CLOSED  GDC Switch Load closed
  * @retval Component status
  */
int32_t TCPP0203_SetGateDriverConsumer(TCPP0203_Object_t *pObj, uint8_t GateDriverConsumer)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	460b      	mov	r3, r1
 80071ea:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 80071ec:	2300      	movs	r3, #0
 80071ee:	60fb      	str	r3, [r7, #12]

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 80071f0:	4b16      	ldr	r3, [pc, #88]	@ (800724c <TCPP0203_SetGateDriverConsumer+0x6c>)
 80071f2:	781b      	ldrb	r3, [r3, #0]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d002      	beq.n	80071fe <TCPP0203_SetGateDriverConsumer+0x1e>
  {
    return (TCPP0203_ERROR);
 80071f8:	f04f 33ff 	mov.w	r3, #4294967295
 80071fc:	e022      	b.n	8007244 <TCPP0203_SetGateDriverConsumer+0x64>
  }

  if ((GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_OPEN)
 80071fe:	78fb      	ldrb	r3, [r7, #3]
 8007200:	2b08      	cmp	r3, #8
 8007202:	d006      	beq.n	8007212 <TCPP0203_SetGateDriverConsumer+0x32>
      && (GateDriverConsumer != TCPP0203_GD_CONSUMER_SWITCH_CLOSED))
 8007204:	78fb      	ldrb	r3, [r7, #3]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d003      	beq.n	8007212 <TCPP0203_SetGateDriverConsumer+0x32>
  {
    ret = TCPP0203_ERROR;
 800720a:	f04f 33ff 	mov.w	r3, #4294967295
 800720e:	60fb      	str	r3, [r7, #12]
 8007210:	e017      	b.n	8007242 <TCPP0203_SetGateDriverConsumer+0x62>
  }
  else
  {
    /* Update GDC Switch Load setting in Writing register Reg0 */
    if (GateDriverConsumer == TCPP0203_GD_CONSUMER_SWITCH_CLOSED)
 8007212:	78fb      	ldrb	r3, [r7, #3]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d10a      	bne.n	800722e <TCPP0203_SetGateDriverConsumer+0x4e>
    {
      /* If Gate Driver Consumer is to be closed, Gate Driver Provider should be open */
      ret += TCPP0203_ModifyReg0(pObj, (GateDriverConsumer | TCPP0203_GD_PROVIDER_SWITCH_OPEN),
 8007218:	78fb      	ldrb	r3, [r7, #3]
 800721a:	220c      	movs	r2, #12
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fa61 	bl	80076e6 <TCPP0203_ModifyReg0>
 8007224:	4602      	mov	r2, r0
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	4413      	add	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
 800722c:	e009      	b.n	8007242 <TCPP0203_SetGateDriverConsumer+0x62>
                                 (TCPP0203_GD_PROVIDER_SWITCH_MSK | TCPP0203_GD_CONSUMER_SWITCH_MSK));
    }
    else
    {
      ret += TCPP0203_ModifyReg0(pObj, GateDriverConsumer, TCPP0203_GD_CONSUMER_SWITCH_MSK);
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	2208      	movs	r2, #8
 8007232:	4619      	mov	r1, r3
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fa56 	bl	80076e6 <TCPP0203_ModifyReg0>
 800723a:	4602      	mov	r2, r0
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	4413      	add	r3, r2
 8007240:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8007242:	68fb      	ldr	r3, [r7, #12]
}
 8007244:	4618      	mov	r0, r3
 8007246:	3710      	adds	r7, #16
 8007248:	46bd      	mov	sp, r7
 800724a:	bd80      	pop	{r7, pc}
 800724c:	2000027c 	.word	0x2000027c

08007250 <TCPP0203_SetPowerMode>:
  *          @arg TCPP0203_POWER_MODE_LOWPOWER     Low Power
  *          @arg TCPP0203_POWER_MODE_NORMAL       Normal
  * @retval Component status
  */
int32_t TCPP0203_SetPowerMode(TCPP0203_Object_t *pObj, uint8_t PowerMode)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	460b      	mov	r3, r1
 800725a:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	60fb      	str	r3, [r7, #12]

  if ((PowerMode != TCPP0203_POWER_MODE_HIBERNATE)
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d009      	beq.n	800727a <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_LOWPOWER)
 8007266:	78fb      	ldrb	r3, [r7, #3]
 8007268:	2b20      	cmp	r3, #32
 800726a:	d006      	beq.n	800727a <TCPP0203_SetPowerMode+0x2a>
      && (PowerMode != TCPP0203_POWER_MODE_NORMAL))
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2b10      	cmp	r3, #16
 8007270:	d003      	beq.n	800727a <TCPP0203_SetPowerMode+0x2a>
  {
    ret = TCPP0203_ERROR;
 8007272:	f04f 33ff 	mov.w	r3, #4294967295
 8007276:	60fb      	str	r3, [r7, #12]
 8007278:	e009      	b.n	800728e <TCPP0203_SetPowerMode+0x3e>
  }
  else
  {
    /* Update Power Mode setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, PowerMode, TCPP0203_POWER_MODE_MSK);
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	2230      	movs	r2, #48	@ 0x30
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f000 fa30 	bl	80076e6 <TCPP0203_ModifyReg0>
 8007286:	4602      	mov	r2, r0
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	4413      	add	r3, r2
 800728c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800728e:	68fb      	ldr	r3, [r7, #12]
}
 8007290:	4618      	mov	r0, r3
 8007292:	3710      	adds	r7, #16
 8007294:	46bd      	mov	sp, r7
 8007296:	bd80      	pop	{r7, pc}

08007298 <TCPP0203_SetVBusDischarge>:
  *          @arg TCPP0203_VBUS_DISCHARGE_OFF    VBUS Discharge Off
  *          @arg TCPP0203_VBUS_DISCHARGE_ON     VBUS Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVBusDischarge(TCPP0203_Object_t *pObj, uint8_t VBusDischarge)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
 80072a0:	460b      	mov	r3, r1
 80072a2:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 80072a4:	2300      	movs	r3, #0
 80072a6:	60fb      	str	r3, [r7, #12]

  if ((VBusDischarge != TCPP0203_VBUS_DISCHARGE_OFF)
 80072a8:	78fb      	ldrb	r3, [r7, #3]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d006      	beq.n	80072bc <TCPP0203_SetVBusDischarge+0x24>
      && (VBusDischarge != TCPP0203_VBUS_DISCHARGE_ON))
 80072ae:	78fb      	ldrb	r3, [r7, #3]
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d003      	beq.n	80072bc <TCPP0203_SetVBusDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 80072b4:	f04f 33ff 	mov.w	r3, #4294967295
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	e009      	b.n	80072d0 <TCPP0203_SetVBusDischarge+0x38>
  }
  else
  {
    /* Update VBUS Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VBusDischarge, TCPP0203_VBUS_DISCHARGE_MSK);
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	2240      	movs	r2, #64	@ 0x40
 80072c0:	4619      	mov	r1, r3
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f000 fa0f 	bl	80076e6 <TCPP0203_ModifyReg0>
 80072c8:	4602      	mov	r2, r0
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	4413      	add	r3, r2
 80072ce:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 80072d0:	68fb      	ldr	r3, [r7, #12]
}
 80072d2:	4618      	mov	r0, r3
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}

080072da <TCPP0203_SetVConnDischarge>:
  *          @arg TCPP0203_VCONN_DISCHARGE_OFF    VConn Discharge Off
  *          @arg TCPP0203_VCONN_DISCHARGE_ON     VConn Discharge On
  * @retval Component status
  */
int32_t TCPP0203_SetVConnDischarge(TCPP0203_Object_t *pObj, uint8_t VConnDischarge)
{
 80072da:	b580      	push	{r7, lr}
 80072dc:	b084      	sub	sp, #16
 80072de:	af00      	add	r7, sp, #0
 80072e0:	6078      	str	r0, [r7, #4]
 80072e2:	460b      	mov	r3, r1
 80072e4:	70fb      	strb	r3, [r7, #3]
  int32_t ret = TCPP0203_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	60fb      	str	r3, [r7, #12]

  if ((VConnDischarge != TCPP0203_VCONN_DISCHARGE_OFF)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	2b00      	cmp	r3, #0
 80072ee:	d006      	beq.n	80072fe <TCPP0203_SetVConnDischarge+0x24>
      && (VConnDischarge != TCPP0203_VCONN_DISCHARGE_ON))
 80072f0:	78fb      	ldrb	r3, [r7, #3]
 80072f2:	2b80      	cmp	r3, #128	@ 0x80
 80072f4:	d003      	beq.n	80072fe <TCPP0203_SetVConnDischarge+0x24>
  {
    ret = TCPP0203_ERROR;
 80072f6:	f04f 33ff 	mov.w	r3, #4294967295
 80072fa:	60fb      	str	r3, [r7, #12]
 80072fc:	e009      	b.n	8007312 <TCPP0203_SetVConnDischarge+0x38>
  }
  else
  {
    /* Update VConn Discharge setting in Writing register Reg0 */
    ret += TCPP0203_ModifyReg0(pObj, VConnDischarge, TCPP0203_VCONN_DISCHARGE_MSK);
 80072fe:	78fb      	ldrb	r3, [r7, #3]
 8007300:	2280      	movs	r2, #128	@ 0x80
 8007302:	4619      	mov	r1, r3
 8007304:	6878      	ldr	r0, [r7, #4]
 8007306:	f000 f9ee 	bl	80076e6 <TCPP0203_ModifyReg0>
 800730a:	4602      	mov	r2, r0
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	4413      	add	r3, r2
 8007310:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007312:	68fb      	ldr	r3, [r7, #12]
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <TCPP0203_GetVConnSwitchAck>:
  *          @arg TCPP0203_VCONN_SWITCH_CC1  VConn closed on CC1 Ack
  *          @arg TCPP0203_VCONN_SWITCH_CC2  VConn closed on CC2 Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnSwitchAck(TCPP0203_Object_t *pObj, uint8_t *pVConnSwitchAck)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f103 0018 	add.w	r0, r3, #24
 800732c:	f107 020b 	add.w	r2, r7, #11
 8007330:	2301      	movs	r3, #1
 8007332:	2101      	movs	r1, #1
 8007334:	f000 fa0d 	bl	8007752 <tcpp0203_read_reg>
 8007338:	60f8      	str	r0, [r7, #12]
  *pVConnSwitchAck = (tmp & TCPP0203_VCONN_SWITCH_ACK_MSK);
 800733a:	7afb      	ldrb	r3, [r7, #11]
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	b2da      	uxtb	r2, r3
 8007342:	683b      	ldr	r3, [r7, #0]
 8007344:	701a      	strb	r2, [r3, #0]

  return ret;
 8007346:	68fb      	ldr	r3, [r7, #12]
}
 8007348:	4618      	mov	r0, r3
 800734a:	3710      	adds	r7, #16
 800734c:	46bd      	mov	sp, r7
 800734e:	bd80      	pop	{r7, pc}

08007350 <TCPP0203_GetGateDriverProviderAck>:
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_OPEN    Gate Driver Provider Open Ack
  *          @arg TCPP0203_GD_PROVIDER_SWITCH_ACK_CLOSED  Gate Driver Provider Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverProviderAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverProviderAck)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	f103 0018 	add.w	r0, r3, #24
 8007360:	f107 020b 	add.w	r2, r7, #11
 8007364:	2301      	movs	r3, #1
 8007366:	2101      	movs	r1, #1
 8007368:	f000 f9f3 	bl	8007752 <tcpp0203_read_reg>
 800736c:	60f8      	str	r0, [r7, #12]
  *pGateDriverProviderAck = (tmp & TCPP0203_GD_PROVIDER_SWITCH_ACK_MSK);
 800736e:	7afb      	ldrb	r3, [r7, #11]
 8007370:	f003 0304 	and.w	r3, r3, #4
 8007374:	b2da      	uxtb	r2, r3
 8007376:	683b      	ldr	r3, [r7, #0]
 8007378:	701a      	strb	r2, [r3, #0]

  return ret;
 800737a:	68fb      	ldr	r3, [r7, #12]
}
 800737c:	4618      	mov	r0, r3
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <TCPP0203_GetGateDriverConsumerAck>:
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_OPEN    Gate Driver Consumer Open Ack
  *          @arg TCPP0203_GD_CONSUMER_SWITCH_ACK_CLOSED  Gate Driver Consumer Closed Ack
  * @retval Component status
  */
int32_t TCPP0203_GetGateDriverConsumerAck(TCPP0203_Object_t *pObj, uint8_t *pGateDriverConsumerAck)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b084      	sub	sp, #16
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Check if TCPP type is TCPP03. Otherwise, return error */
  if (TCPP0203_DeviceType != TCPP0203_DEVICE_TYPE_03)
 800738e:	4b0e      	ldr	r3, [pc, #56]	@ (80073c8 <TCPP0203_GetGateDriverConsumerAck+0x44>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d002      	beq.n	800739c <TCPP0203_GetGateDriverConsumerAck+0x18>
  {
    return (TCPP0203_ERROR);
 8007396:	f04f 33ff 	mov.w	r3, #4294967295
 800739a:	e010      	b.n	80073be <TCPP0203_GetGateDriverConsumerAck+0x3a>
  }

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f103 0018 	add.w	r0, r3, #24
 80073a2:	f107 020b 	add.w	r2, r7, #11
 80073a6:	2301      	movs	r3, #1
 80073a8:	2101      	movs	r1, #1
 80073aa:	f000 f9d2 	bl	8007752 <tcpp0203_read_reg>
 80073ae:	60f8      	str	r0, [r7, #12]
  *pGateDriverConsumerAck = (tmp & TCPP0203_GD_CONSUMER_SWITCH_ACK_MSK);
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	f003 0308 	and.w	r3, r3, #8
 80073b6:	b2da      	uxtb	r2, r3
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	701a      	strb	r2, [r3, #0]

  return ret;
 80073bc:	68fb      	ldr	r3, [r7, #12]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3710      	adds	r7, #16
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	2000027c 	.word	0x2000027c

080073cc <TCPP0203_GetPowerModeAck>:
  *          @arg TCPP0203_POWER_MODE_ACK_LOWPOWER   Power Mode Low Power Ack
  *          @arg TCPP0203_POWER_MODE_ACK_NORMAL     Power Mode Normal Ack
  * @retval Component status
  */
int32_t TCPP0203_GetPowerModeAck(TCPP0203_Object_t *pObj, uint8_t *pPowerModeAck)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b084      	sub	sp, #16
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
 80073d4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	f103 0018 	add.w	r0, r3, #24
 80073dc:	f107 020b 	add.w	r2, r7, #11
 80073e0:	2301      	movs	r3, #1
 80073e2:	2101      	movs	r1, #1
 80073e4:	f000 f9b5 	bl	8007752 <tcpp0203_read_reg>
 80073e8:	60f8      	str	r0, [r7, #12]
  *pPowerModeAck = (tmp & TCPP0203_POWER_MODE_ACK_MSK);
 80073ea:	7afb      	ldrb	r3, [r7, #11]
 80073ec:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80073f0:	b2da      	uxtb	r2, r3
 80073f2:	683b      	ldr	r3, [r7, #0]
 80073f4:	701a      	strb	r2, [r3, #0]

  return ret;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3710      	adds	r7, #16
 80073fc:	46bd      	mov	sp, r7
 80073fe:	bd80      	pop	{r7, pc}

08007400 <TCPP0203_GetVBusDischargeAck>:
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_OFF   VBUS Discharge Off Ack
  *          @arg TCPP0203_VBUS_DISCHARGE_ACK_ON    VBUS Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVBusDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVBusDischargeAck)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b084      	sub	sp, #16
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	f103 0018 	add.w	r0, r3, #24
 8007410:	f107 020b 	add.w	r2, r7, #11
 8007414:	2301      	movs	r3, #1
 8007416:	2101      	movs	r1, #1
 8007418:	f000 f99b 	bl	8007752 <tcpp0203_read_reg>
 800741c:	60f8      	str	r0, [r7, #12]
  *pVBusDischargeAck = (tmp & TCPP0203_VBUS_DISCHARGE_ACK_MSK);
 800741e:	7afb      	ldrb	r3, [r7, #11]
 8007420:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007424:	b2da      	uxtb	r2, r3
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	701a      	strb	r2, [r3, #0]

  return ret;
 800742a:	68fb      	ldr	r3, [r7, #12]
}
 800742c:	4618      	mov	r0, r3
 800742e:	3710      	adds	r7, #16
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <TCPP0203_GetVConnDischargeAck>:
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_OFF   VConn Discharge Off Ack
  *          @arg TCPP0203_VCONN_DISCHARGE_ACK_ON    VConn Discharge On Ack
  * @retval Component status
  */
int32_t TCPP0203_GetVConnDischargeAck(TCPP0203_Object_t *pObj, uint8_t *pVConnDischargeAck)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b084      	sub	sp, #16
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f103 0018 	add.w	r0, r3, #24
 8007444:	f107 020b 	add.w	r2, r7, #11
 8007448:	2301      	movs	r3, #1
 800744a:	2101      	movs	r1, #1
 800744c:	f000 f981 	bl	8007752 <tcpp0203_read_reg>
 8007450:	60f8      	str	r0, [r7, #12]
  *pVConnDischargeAck = (tmp & TCPP0203_VCONN_DISCHARGE_ACK_MSK);
 8007452:	7afb      	ldrb	r3, [r7, #11]
 8007454:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007458:	b2da      	uxtb	r2, r3
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	701a      	strb	r2, [r3, #0]

  return ret;
 800745e:	68fb      	ldr	r3, [r7, #12]
}
 8007460:	4618      	mov	r0, r3
 8007462:	3710      	adds	r7, #16
 8007464:	46bd      	mov	sp, r7
 8007466:	bd80      	pop	{r7, pc}

08007468 <TCPP0203_GetOCPVConnFlag>:
  *          @arg TCPP0203_FLAG_OCP_VCONN_RESET   OCP VConn flag not set
  *          @arg TCPP0203_FLAG_OCP_VCONN_SET     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVConnFlag(TCPP0203_Object_t *pObj, uint8_t *pOCPVConnFlag)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b084      	sub	sp, #16
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
 8007470:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	f103 0018 	add.w	r0, r3, #24
 8007478:	f107 020b 	add.w	r2, r7, #11
 800747c:	2301      	movs	r3, #1
 800747e:	2102      	movs	r1, #2
 8007480:	f000 f967 	bl	8007752 <tcpp0203_read_reg>
 8007484:	60f8      	str	r0, [r7, #12]
  *pOCPVConnFlag = (tmp & TCPP0203_FLAG_OCP_VCONN_MSK);
 8007486:	7afb      	ldrb	r3, [r7, #11]
 8007488:	f003 0301 	and.w	r3, r3, #1
 800748c:	b2da      	uxtb	r2, r3
 800748e:	683b      	ldr	r3, [r7, #0]
 8007490:	701a      	strb	r2, [r3, #0]

  return ret;
 8007492:	68fb      	ldr	r3, [r7, #12]
}
 8007494:	4618      	mov	r0, r3
 8007496:	3710      	adds	r7, #16
 8007498:	46bd      	mov	sp, r7
 800749a:	bd80      	pop	{r7, pc}

0800749c <TCPP0203_GetOCPVBusFlag>:
  *          @arg TCPP0203_FLAG_OCP_VBUS_RESET   OCP VBUS flag not set
  *          @arg TCPP0203_FLAG_OCP_VBUS_SET     OCP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOCPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pGetOCPVBusFlag)
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b084      	sub	sp, #16
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
 80074a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f103 0018 	add.w	r0, r3, #24
 80074ac:	f107 020b 	add.w	r2, r7, #11
 80074b0:	2301      	movs	r3, #1
 80074b2:	2102      	movs	r1, #2
 80074b4:	f000 f94d 	bl	8007752 <tcpp0203_read_reg>
 80074b8:	60f8      	str	r0, [r7, #12]
  *pGetOCPVBusFlag = (tmp & TCPP0203_FLAG_OCP_VBUS_MSK);
 80074ba:	7afb      	ldrb	r3, [r7, #11]
 80074bc:	f003 0302 	and.w	r3, r3, #2
 80074c0:	b2da      	uxtb	r2, r3
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	701a      	strb	r2, [r3, #0]

  return ret;
 80074c6:	68fb      	ldr	r3, [r7, #12]
}
 80074c8:	4618      	mov	r0, r3
 80074ca:	3710      	adds	r7, #16
 80074cc:	46bd      	mov	sp, r7
 80074ce:	bd80      	pop	{r7, pc}

080074d0 <TCPP0203_GetOVPVBusFlag>:
  *          @arg TCPP0203_FLAG_OVP_VBUS_RESET   OVP VBUS flag not set
  *          @arg TCPP0203_FLAG_OVP_VBUS_SET     OVP VBUS flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPVBusFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPVBusFlag)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b084      	sub	sp, #16
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	f103 0018 	add.w	r0, r3, #24
 80074e0:	f107 020b 	add.w	r2, r7, #11
 80074e4:	2301      	movs	r3, #1
 80074e6:	2102      	movs	r1, #2
 80074e8:	f000 f933 	bl	8007752 <tcpp0203_read_reg>
 80074ec:	60f8      	str	r0, [r7, #12]
  *pOVPVBusFlag = (tmp & TCPP0203_FLAG_OVP_VBUS_MSK);
 80074ee:	7afb      	ldrb	r3, [r7, #11]
 80074f0:	f003 0304 	and.w	r3, r3, #4
 80074f4:	b2da      	uxtb	r2, r3
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	701a      	strb	r2, [r3, #0]

  return ret;
 80074fa:	68fb      	ldr	r3, [r7, #12]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3710      	adds	r7, #16
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <TCPP0203_GetOVPCCFlag>:
  *          @arg TCPP0203_FLAG_OVP_CC_RESET   OVP CC flag not set
  *          @arg TCPP0203_FLAG_OVP_CC_SET     OVP CC flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOVPCCFlag(TCPP0203_Object_t *pObj, uint8_t *pOVPCCFlag)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f103 0018 	add.w	r0, r3, #24
 8007514:	f107 020b 	add.w	r2, r7, #11
 8007518:	2301      	movs	r3, #1
 800751a:	2102      	movs	r1, #2
 800751c:	f000 f919 	bl	8007752 <tcpp0203_read_reg>
 8007520:	60f8      	str	r0, [r7, #12]
  *pOVPCCFlag = (tmp & TCPP0203_FLAG_OVP_CC_MSK);
 8007522:	7afb      	ldrb	r3, [r7, #11]
 8007524:	f003 0308 	and.w	r3, r3, #8
 8007528:	b2da      	uxtb	r2, r3
 800752a:	683b      	ldr	r3, [r7, #0]
 800752c:	701a      	strb	r2, [r3, #0]

  return ret;
 800752e:	68fb      	ldr	r3, [r7, #12]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3710      	adds	r7, #16
 8007534:	46bd      	mov	sp, r7
 8007536:	bd80      	pop	{r7, pc}

08007538 <TCPP0203_GetOTPFlag>:
  *          @arg TCPP0203_FLAG_OTP_RESET   Over Temperature flag not set
  *          @arg TCPP0203_FLAG_OTP_SET     Over Temperature flag set
  * @retval Component status
  */
int32_t TCPP0203_GetOTPFlag(TCPP0203_Object_t *pObj, uint8_t *pOTPFlag)
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b084      	sub	sp, #16
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
 8007540:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f103 0018 	add.w	r0, r3, #24
 8007548:	f107 020b 	add.w	r2, r7, #11
 800754c:	2301      	movs	r3, #1
 800754e:	2102      	movs	r1, #2
 8007550:	f000 f8ff 	bl	8007752 <tcpp0203_read_reg>
 8007554:	60f8      	str	r0, [r7, #12]
  *pOTPFlag = (tmp & TCPP0203_FLAG_OTP_MSK);
 8007556:	7afb      	ldrb	r3, [r7, #11]
 8007558:	f003 0310 	and.w	r3, r3, #16
 800755c:	b2da      	uxtb	r2, r3
 800755e:	683b      	ldr	r3, [r7, #0]
 8007560:	701a      	strb	r2, [r3, #0]

  return ret;
 8007562:	68fb      	ldr	r3, [r7, #12]
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <TCPP0203_GetVBusOkFlag>:
  *          @arg TCPP0203_FLAG_VBUS_OK_RESET   VBUS OK flag not set
  *          @arg TCPP0203_FLAG_VBUS_OK_SET     VBUS OK flag set
  * @retval Component status
  */
int32_t TCPP0203_GetVBusOkFlag(TCPP0203_Object_t *pObj, uint8_t *pVBusOkFlag)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b084      	sub	sp, #16
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f103 0018 	add.w	r0, r3, #24
 800757c:	f107 020b 	add.w	r2, r7, #11
 8007580:	2301      	movs	r3, #1
 8007582:	2102      	movs	r1, #2
 8007584:	f000 f8e5 	bl	8007752 <tcpp0203_read_reg>
 8007588:	60f8      	str	r0, [r7, #12]
  *pVBusOkFlag = (tmp & TCPP0203_FLAG_VBUS_OK_MSK);
 800758a:	7afb      	ldrb	r3, [r7, #11]
 800758c:	f003 0320 	and.w	r3, r3, #32
 8007590:	b2da      	uxtb	r2, r3
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	701a      	strb	r2, [r3, #0]

  return ret;
 8007596:	68fb      	ldr	r3, [r7, #12]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <TCPP0203_ReadTCPPType>:
  *          @arg TCPP0203_DEVICE_TYPE_02   TCPP02 Type
  *          @arg TCPP0203_DEVICE_TYPE_03   TCPP03 Type
  * @retval Component status
  */
int32_t TCPP0203_ReadTCPPType(TCPP0203_Object_t *pObj, uint8_t *pTCPPType)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
 80075a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f103 0018 	add.w	r0, r3, #24
 80075b0:	f107 020b 	add.w	r2, r7, #11
 80075b4:	2301      	movs	r3, #1
 80075b6:	2102      	movs	r1, #2
 80075b8:	f000 f8cb 	bl	8007752 <tcpp0203_read_reg>
 80075bc:	60f8      	str	r0, [r7, #12]
  *pTCPPType = (tmp & TCPP0203_DEVICE_TYPE_MSK);
 80075be:	7afb      	ldrb	r3, [r7, #11]
 80075c0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80075c4:	b2da      	uxtb	r2, r3
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	701a      	strb	r2, [r3, #0]

  return ret;
 80075ca:	68fb      	ldr	r3, [r7, #12]
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	3710      	adds	r7, #16
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <TCPP0203_ReadVCONNPower>:
  *          @arg TCPP0203_FLAG_VCONN_PWR_1W       OCP VConn flag not set
  *          @arg TCPP0203_FLAG_VCONN_PWR_0_1W     OCP VConn flag set
  * @retval Component status
  */
int32_t TCPP0203_ReadVCONNPower(TCPP0203_Object_t *pObj, uint8_t *pVCONNPower)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b084      	sub	sp, #16
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, &tmp, 1);
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	f103 0018 	add.w	r0, r3, #24
 80075e4:	f107 020b 	add.w	r2, r7, #11
 80075e8:	2301      	movs	r3, #1
 80075ea:	2102      	movs	r1, #2
 80075ec:	f000 f8b1 	bl	8007752 <tcpp0203_read_reg>
 80075f0:	60f8      	str	r0, [r7, #12]
  *pVCONNPower = (tmp & TCPP0203_FLAG_VCONN_PWR_MSK);
 80075f2:	7afb      	ldrb	r3, [r7, #11]
 80075f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075f8:	b2da      	uxtb	r2, r3
 80075fa:	683b      	ldr	r3, [r7, #0]
 80075fc:	701a      	strb	r2, [r3, #0]

  return ret;
 80075fe:	68fb      	ldr	r3, [r7, #12]
}
 8007600:	4618      	mov	r0, r3
 8007602:	3710      	adds	r7, #16
 8007604:	46bd      	mov	sp, r7
 8007606:	bd80      	pop	{r7, pc}

08007608 <TCPP0203_WriteCtrlRegister>:
  * @param  pObj Pointer to component object
  * @param  pCtrlRegister Pointer on Ctrl register value
  * @retval Component status
  */
int32_t TCPP0203_WriteCtrlRegister(TCPP0203_Object_t *pObj, uint8_t *pCtrlRegister)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	6039      	str	r1, [r7, #0]
  int32_t ret;

  /* Update value in writing register (reg0) */
  ret = tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, pCtrlRegister, 1);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	f103 0018 	add.w	r0, r3, #24
 8007618:	2301      	movs	r3, #1
 800761a:	683a      	ldr	r2, [r7, #0]
 800761c:	2100      	movs	r1, #0
 800761e:	f000 f8af 	bl	8007780 <tcpp0203_write_reg>
 8007622:	60f8      	str	r0, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pCtrlRegister;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007624:	68fb      	ldr	r3, [r7, #12]
}
 8007626:	4618      	mov	r0, r3
 8007628:	3710      	adds	r7, #16
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <TCPP0203_ReadAckRegister>:
  * @param  pObj Pointer to component object
  * @param  pAckRegister Pointer on Ack register value
  * @retval Component status
  */
int32_t TCPP0203_ReadAckRegister(TCPP0203_Object_t *pObj, uint8_t *pAckRegister)
{
 800762e:	b580      	push	{r7, lr}
 8007630:	b084      	sub	sp, #16
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
 8007636:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, pAckRegister, 1);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f103 0018 	add.w	r0, r3, #24
 800763e:	2301      	movs	r3, #1
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	2101      	movs	r1, #1
 8007644:	f000 f885 	bl	8007752 <tcpp0203_read_reg>
 8007648:	60f8      	str	r0, [r7, #12]

  return ret;
 800764a:	68fb      	ldr	r3, [r7, #12]
}
 800764c:	4618      	mov	r0, r3
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <TCPP0203_ReadFlagRegister>:
  * @param  pObj Pointer to component object
  * @param  pFlagRegister Pointer on Flag register value
  * @retval Component status
  */
int32_t TCPP0203_ReadFlagRegister(TCPP0203_Object_t *pObj, uint8_t *pFlagRegister)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_FLAG_REG, pFlagRegister, 1);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f103 0018 	add.w	r0, r3, #24
 8007664:	2301      	movs	r3, #1
 8007666:	683a      	ldr	r2, [r7, #0]
 8007668:	2102      	movs	r1, #2
 800766a:	f000 f872 	bl	8007752 <tcpp0203_read_reg>
 800766e:	60f8      	str	r0, [r7, #12]

  return ret;
 8007670:	68fb      	ldr	r3, [r7, #12]
}
 8007672:	4618      	mov	r0, r3
 8007674:	3710      	adds	r7, #16
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <TCPP0203_ReadRegWrap>:
  * @param  pData   Buffer where Target register value should be stored
  * @param  Length  buffer size to be read
  * @retval error status
  */
static int32_t TCPP0203_ReadRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 800767a:	b590      	push	{r4, r7, lr}
 800767c:	b087      	sub	sp, #28
 800767e:	af00      	add	r7, sp, #0
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	461a      	mov	r2, r3
 8007686:	460b      	mov	r3, r1
 8007688:	72fb      	strb	r3, [r7, #11]
 800768a:	4613      	mov	r3, r2
 800768c:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007692:	697b      	ldr	r3, [r7, #20]
 8007694:	691c      	ldr	r4, [r3, #16]
 8007696:	697b      	ldr	r3, [r7, #20]
 8007698:	8918      	ldrh	r0, [r3, #8]
 800769a:	7afb      	ldrb	r3, [r7, #11]
 800769c:	b299      	uxth	r1, r3
 800769e:	7abb      	ldrb	r3, [r7, #10]
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	47a0      	blx	r4
 80076a6:	4603      	mov	r3, r0
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	371c      	adds	r7, #28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd90      	pop	{r4, r7, pc}

080076b0 <TCPP0203_WriteRegWrap>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_WriteRegWrap(const void *handle, uint8_t Reg, uint8_t *pData, uint8_t Length)
{
 80076b0:	b590      	push	{r4, r7, lr}
 80076b2:	b087      	sub	sp, #28
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	60f8      	str	r0, [r7, #12]
 80076b8:	607a      	str	r2, [r7, #4]
 80076ba:	461a      	mov	r2, r3
 80076bc:	460b      	mov	r3, r1
 80076be:	72fb      	strb	r3, [r7, #11]
 80076c0:	4613      	mov	r3, r2
 80076c2:	72bb      	strb	r3, [r7, #10]
  const TCPP0203_Object_t *pObj = (const TCPP0203_Object_t *)handle;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	617b      	str	r3, [r7, #20]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = *pData;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	68dc      	ldr	r4, [r3, #12]
 80076cc:	697b      	ldr	r3, [r7, #20]
 80076ce:	8918      	ldrh	r0, [r3, #8]
 80076d0:	7afb      	ldrb	r3, [r7, #11]
 80076d2:	b299      	uxth	r1, r3
 80076d4:	7abb      	ldrb	r3, [r7, #10]
 80076d6:	b29b      	uxth	r3, r3
 80076d8:	687a      	ldr	r2, [r7, #4]
 80076da:	47a0      	blx	r4
 80076dc:	4603      	mov	r3, r0
}
 80076de:	4618      	mov	r0, r3
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd90      	pop	{r4, r7, pc}

080076e6 <TCPP0203_ModifyReg0>:
  * @param  pData  Target register value to be written
  * @param  Length Buffer size to be written
  * @retval error status
  */
static int32_t TCPP0203_ModifyReg0(TCPP0203_Object_t *pObj, uint8_t Value, uint8_t Mask)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b084      	sub	sp, #16
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
 80076ee:	460b      	mov	r3, r1
 80076f0:	70fb      	strb	r3, [r7, #3]
 80076f2:	4613      	mov	r3, r2
 80076f4:	70bb      	strb	r3, [r7, #2]
  int32_t ret;
  uint8_t tmp;

  /* Read current content of ACK register (reflects content of bits set to 1 in Writing register Reg0) */
  ret = tcpp0203_read_reg(&pObj->Ctx, TCPP0203_ACK_REG, &tmp, 1);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	f103 0018 	add.w	r0, r3, #24
 80076fc:	f107 020b 	add.w	r2, r7, #11
 8007700:	2301      	movs	r3, #1
 8007702:	2101      	movs	r1, #1
 8007704:	f000 f825 	bl	8007752 <tcpp0203_read_reg>
 8007708:	60f8      	str	r0, [r7, #12]

  /* Update only the area dedicated to Mask */
  tmp &= ~(Mask);
 800770a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800770e:	43db      	mvns	r3, r3
 8007710:	b25a      	sxtb	r2, r3
 8007712:	7afb      	ldrb	r3, [r7, #11]
 8007714:	b25b      	sxtb	r3, r3
 8007716:	4013      	ands	r3, r2
 8007718:	b25b      	sxtb	r3, r3
 800771a:	b2db      	uxtb	r3, r3
 800771c:	72fb      	strb	r3, [r7, #11]
  tmp |= (Value & Mask);
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	78bb      	ldrb	r3, [r7, #2]
 8007722:	4013      	ands	r3, r2
 8007724:	b2da      	uxtb	r2, r3
 8007726:	7afb      	ldrb	r3, [r7, #11]
 8007728:	4313      	orrs	r3, r2
 800772a:	b2db      	uxtb	r3, r3
 800772c:	72fb      	strb	r3, [r7, #11]
#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  Reg0_Expected_Value = tmp;
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  /* Update value in writing register (reg0) */
  ret += tcpp0203_write_reg(&pObj->Ctx, TCPP0203_PROG_CTRL, &tmp, 1);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f103 0018 	add.w	r0, r3, #24
 8007734:	f107 020b 	add.w	r2, r7, #11
 8007738:	2301      	movs	r3, #1
 800773a:	2100      	movs	r1, #0
 800773c:	f000 f820 	bl	8007780 <tcpp0203_write_reg>
 8007740:	4602      	mov	r2, r0
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4413      	add	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

#if defined(TCPP0203_REGISTER_CONSISTENCY_CHECK)
  ret += TCPP0203_CheckReg0Reg1(pObj, Reg0_Expected_Value);
#endif /* TCPP0203_REGISTER_CONSISTENCY_CHECK */

  return ret;
 8007748:	68fb      	ldr	r3, [r7, #12]
}
 800774a:	4618      	mov	r0, r3
 800774c:	3710      	adds	r7, #16
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <tcpp0203_read_reg>:
  *                 I2C or SPI reading functions
  * Input         : Register Address, length of buffer
  * Output        : data Read
  *******************************************************************************/
int32_t tcpp0203_read_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8007752:	b590      	push	{r4, r7, lr}
 8007754:	b085      	sub	sp, #20
 8007756:	af00      	add	r7, sp, #0
 8007758:	60f8      	str	r0, [r7, #12]
 800775a:	607a      	str	r2, [r7, #4]
 800775c:	461a      	mov	r2, r3
 800775e:	460b      	mov	r3, r1
 8007760:	72fb      	strb	r3, [r7, #11]
 8007762:	4613      	mov	r3, r2
 8007764:	72bb      	strb	r3, [r7, #10]
  return ctx->ReadReg(ctx->handle, reg, data, length);
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	685c      	ldr	r4, [r3, #4]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	6898      	ldr	r0, [r3, #8]
 800776e:	7abb      	ldrb	r3, [r7, #10]
 8007770:	7af9      	ldrb	r1, [r7, #11]
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	47a0      	blx	r4
 8007776:	4603      	mov	r3, r0
}
 8007778:	4618      	mov	r0, r3
 800777a:	3714      	adds	r7, #20
 800777c:	46bd      	mov	sp, r7
 800777e:	bd90      	pop	{r4, r7, pc}

08007780 <tcpp0203_write_reg>:
  *                 I2C or SPI writing function
  * Input         : Register Address, data to be written, length of buffer
  * Output        : None
  *******************************************************************************/
int32_t tcpp0203_write_reg(const TCPP0203_ctx_t *ctx, uint8_t reg, uint8_t *data, uint8_t length)
{
 8007780:	b590      	push	{r4, r7, lr}
 8007782:	b085      	sub	sp, #20
 8007784:	af00      	add	r7, sp, #0
 8007786:	60f8      	str	r0, [r7, #12]
 8007788:	607a      	str	r2, [r7, #4]
 800778a:	461a      	mov	r2, r3
 800778c:	460b      	mov	r3, r1
 800778e:	72fb      	strb	r3, [r7, #11]
 8007790:	4613      	mov	r3, r2
 8007792:	72bb      	strb	r3, [r7, #10]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681c      	ldr	r4, [r3, #0]
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6898      	ldr	r0, [r3, #8]
 800779c:	7abb      	ldrb	r3, [r7, #10]
 800779e:	7af9      	ldrb	r1, [r7, #11]
 80077a0:	687a      	ldr	r2, [r7, #4]
 80077a2:	47a0      	blx	r4
 80077a4:	4603      	mov	r3, r0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd90      	pop	{r4, r7, pc}
	...

080077b0 <BSP_GetBoardName>:
/**
  * @brief  This method returns the board name
  * @retval pointer to the board name string
  */
const uint8_t* BSP_GetBoardName(void)
{
 80077b0:	b480      	push	{r7}
 80077b2:	af00      	add	r7, sp, #0
  return (const uint8_t*)STM32G4XX_NUCLEO_BSP_BOARD_NAME;
 80077b4:	4b02      	ldr	r3, [pc, #8]	@ (80077c0 <BSP_GetBoardName+0x10>)
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	46bd      	mov	sp, r7
 80077ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077be:	4770      	bx	lr
 80077c0:	0801adf0 	.word	0x0801adf0

080077c4 <BSP_GetBoardID>:
/**
  * @brief  This method returns the board ID
  * @retval pointer to the board ID string
  */
const uint8_t* BSP_GetBoardID(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  return (const uint8_t*)STM32G4XX_NUCLEO_BSP_BOARD_ID;
 80077c8:	4b02      	ldr	r3, [pc, #8]	@ (80077d4 <BSP_GetBoardID+0x10>)
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	46bd      	mov	sp, r7
 80077ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d2:	4770      	bx	lr
 80077d4:	0801ae04 	.word	0x0801ae04

080077d8 <MX_I2C_Init>:
/**
  * @brief  MX I2C1 Initialization as generated by CubeMX.
  * @retval Status
  */
__weak HAL_StatusTypeDef MX_I2C_Init(void)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b082      	sub	sp, #8
 80077dc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef ret = HAL_OK;
 80077de:	2300      	movs	r3, #0
 80077e0:	71fb      	strb	r3, [r7, #7]
#if defined(I2C_CR1_ENGC)
  TCPP0X_HANDLE_I2C.Init.ClockSpeed       = BUS_I2C_FREQUENCY;
#else
  TCPP0X_HANDLE_I2C.Init.Timing           = I2C_GetTiming(HAL_RCC_GetPCLK1Freq(), BUS_I2C_FREQUENCY);
 80077e2:	f004 fbbd 	bl	800bf60 <HAL_RCC_GetPCLK1Freq>
 80077e6:	4603      	mov	r3, r0
 80077e8:	491e      	ldr	r1, [pc, #120]	@ (8007864 <MX_I2C_Init+0x8c>)
 80077ea:	4618      	mov	r0, r3
 80077ec:	f000 f97c 	bl	8007ae8 <I2C_GetTiming>
 80077f0:	4603      	mov	r3, r0
 80077f2:	4a1d      	ldr	r2, [pc, #116]	@ (8007868 <MX_I2C_Init+0x90>)
 80077f4:	6053      	str	r3, [r2, #4]
#endif /* I2C_CR1_ENGC */
  TCPP0X_HANDLE_I2C.Init.OwnAddress1      = 0;
 80077f6:	4b1c      	ldr	r3, [pc, #112]	@ (8007868 <MX_I2C_Init+0x90>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	609a      	str	r2, [r3, #8]
  TCPP0X_HANDLE_I2C.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80077fc:	4b1a      	ldr	r3, [pc, #104]	@ (8007868 <MX_I2C_Init+0x90>)
 80077fe:	2201      	movs	r2, #1
 8007800:	60da      	str	r2, [r3, #12]
  TCPP0X_HANDLE_I2C.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007802:	4b19      	ldr	r3, [pc, #100]	@ (8007868 <MX_I2C_Init+0x90>)
 8007804:	2200      	movs	r2, #0
 8007806:	611a      	str	r2, [r3, #16]
  TCPP0X_HANDLE_I2C.Init.OwnAddress2      = 0;
 8007808:	4b17      	ldr	r3, [pc, #92]	@ (8007868 <MX_I2C_Init+0x90>)
 800780a:	2200      	movs	r2, #0
 800780c:	615a      	str	r2, [r3, #20]
  TCPP0X_HANDLE_I2C.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800780e:	4b16      	ldr	r3, [pc, #88]	@ (8007868 <MX_I2C_Init+0x90>)
 8007810:	2200      	movs	r2, #0
 8007812:	61da      	str	r2, [r3, #28]
  TCPP0X_HANDLE_I2C.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007814:	4b14      	ldr	r3, [pc, #80]	@ (8007868 <MX_I2C_Init+0x90>)
 8007816:	2200      	movs	r2, #0
 8007818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  /* Init the I2C Msp */
  I2C_MspInit(&TCPP0X_HANDLE_I2C);
 800781a:	4813      	ldr	r0, [pc, #76]	@ (8007868 <MX_I2C_Init+0x90>)
 800781c:	f000 f8da 	bl	80079d4 <I2C_MspInit>
      return BSP_ERROR_MSP_FAILURE;
    }
  }
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS == 0 */

  if (HAL_I2C_Init(&TCPP0X_HANDLE_I2C) != HAL_OK)
 8007820:	4811      	ldr	r0, [pc, #68]	@ (8007868 <MX_I2C_Init+0x90>)
 8007822:	f002 ffc1 	bl	800a7a8 <HAL_I2C_Init>
 8007826:	4603      	mov	r3, r0
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <MX_I2C_Init+0x5a>
  {
    ret = HAL_ERROR;
 800782c:	2301      	movs	r3, #1
 800782e:	71fb      	strb	r3, [r7, #7]
 8007830:	e012      	b.n	8007858 <MX_I2C_Init+0x80>
  }
  else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007832:	2100      	movs	r1, #0
 8007834:	480c      	ldr	r0, [pc, #48]	@ (8007868 <MX_I2C_Init+0x90>)
 8007836:	f003 fd8b 	bl	800b350 <HAL_I2CEx_ConfigAnalogFilter>
 800783a:	4603      	mov	r3, r0
 800783c:	2b00      	cmp	r3, #0
 800783e:	d002      	beq.n	8007846 <MX_I2C_Init+0x6e>
  {
    ret = HAL_ERROR;
 8007840:	2301      	movs	r3, #1
 8007842:	71fb      	strb	r3, [r7, #7]
 8007844:	e008      	b.n	8007858 <MX_I2C_Init+0x80>
  }
  else
  {
    if (HAL_I2CEx_ConfigDigitalFilter(&TCPP0X_HANDLE_I2C, 0) != HAL_OK)
 8007846:	2100      	movs	r1, #0
 8007848:	4807      	ldr	r0, [pc, #28]	@ (8007868 <MX_I2C_Init+0x90>)
 800784a:	f003 fdcc 	bl	800b3e6 <HAL_I2CEx_ConfigDigitalFilter>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d001      	beq.n	8007858 <MX_I2C_Init+0x80>
    {
      ret = HAL_ERROR;
 8007854:	2301      	movs	r3, #1
 8007856:	71fb      	strb	r3, [r7, #7]
    }
  }

  return ret;
 8007858:	79fb      	ldrb	r3, [r7, #7]
}
 800785a:	4618      	mov	r0, r3
 800785c:	3708      	adds	r7, #8
 800785e:	46bd      	mov	sp, r7
 8007860:	bd80      	pop	{r7, pc}
 8007862:	bf00      	nop
 8007864:	00061a80 	.word	0x00061a80
 8007868:	20000280 	.word	0x20000280

0800786c <BSP_I2C_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_Init(void)
{
 800786c:	b580      	push	{r7, lr}
 800786e:	b082      	sub	sp, #8
 8007870:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8007872:	2300      	movs	r3, #0
 8007874:	607b      	str	r3, [r7, #4]

  TCPP0X_HANDLE_I2C.Instance  = BUS_I2C_INSTANCE;
 8007876:	4b12      	ldr	r3, [pc, #72]	@ (80078c0 <BSP_I2C_Init+0x54>)
 8007878:	4a12      	ldr	r2, [pc, #72]	@ (80078c4 <BSP_I2C_Init+0x58>)
 800787a:	601a      	str	r2, [r3, #0]

  if (HAL_I2C_GetState(&TCPP0X_HANDLE_I2C) == HAL_I2C_STATE_RESET)
 800787c:	4810      	ldr	r0, [pc, #64]	@ (80078c0 <BSP_I2C_Init+0x54>)
 800787e:	f003 fa8b 	bl	800ad98 <HAL_I2C_GetState>
 8007882:	4603      	mov	r3, r0
 8007884:	2b00      	cmp	r3, #0
 8007886:	d115      	bne.n	80078b4 <BSP_I2C_Init+0x48>
  {
    /* Init the I2C */
    if (MX_I2C_Init() != HAL_OK)
 8007888:	f7ff ffa6 	bl	80077d8 <MX_I2C_Init>
 800788c:	4603      	mov	r3, r0
 800788e:	2b00      	cmp	r3, #0
 8007890:	d003      	beq.n	800789a <BSP_I2C_Init+0x2e>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8007892:	f06f 0307 	mvn.w	r3, #7
 8007896:	607b      	str	r3, [r7, #4]
 8007898:	e00c      	b.n	80078b4 <BSP_I2C_Init+0x48>
    }
    else if (HAL_I2CEx_ConfigAnalogFilter(&TCPP0X_HANDLE_I2C, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800789a:	2100      	movs	r1, #0
 800789c:	4808      	ldr	r0, [pc, #32]	@ (80078c0 <BSP_I2C_Init+0x54>)
 800789e:	f003 fd57 	bl	800b350 <HAL_I2CEx_ConfigAnalogFilter>
 80078a2:	4603      	mov	r3, r0
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d003      	beq.n	80078b0 <BSP_I2C_Init+0x44>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 80078a8:	f06f 0307 	mvn.w	r3, #7
 80078ac:	607b      	str	r3, [r7, #4]
 80078ae:	e001      	b.n	80078b4 <BSP_I2C_Init+0x48>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 80078b0:	2300      	movs	r3, #0
 80078b2:	607b      	str	r3, [r7, #4]
    }
  }
  return ret;
 80078b4:	687b      	ldr	r3, [r7, #4]
}
 80078b6:	4618      	mov	r0, r3
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20000280 	.word	0x20000280
 80078c4:	40005400 	.word	0x40005400

080078c8 <BSP_I2C_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C_DeInit(void)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b082      	sub	sp, #8
 80078cc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 80078ce:	2300      	movs	r3, #0
 80078d0:	607b      	str	r3, [r7, #4]

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
  I2C_MspDeInit(&TCPP0X_HANDLE_I2C);
 80078d2:	4808      	ldr	r0, [pc, #32]	@ (80078f4 <BSP_I2C_DeInit+0x2c>)
 80078d4:	f000 f8da 	bl	8007a8c <I2C_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

  /* Init the I2C */
  if (HAL_I2C_DeInit(&TCPP0X_HANDLE_I2C) != HAL_OK)
 80078d8:	4806      	ldr	r0, [pc, #24]	@ (80078f4 <BSP_I2C_DeInit+0x2c>)
 80078da:	f003 f800 	bl	800a8de <HAL_I2C_DeInit>
 80078de:	4603      	mov	r3, r0
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d002      	beq.n	80078ea <BSP_I2C_DeInit+0x22>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 80078e4:	f06f 0303 	mvn.w	r3, #3
 80078e8:	607b      	str	r3, [r7, #4]
  }

  return ret;
 80078ea:	687b      	ldr	r3, [r7, #4]
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3708      	adds	r7, #8
 80078f0:	46bd      	mov	sp, r7
 80078f2:	bd80      	pop	{r7, pc}
 80078f4:	20000280 	.word	0x20000280

080078f8 <BSP_I2C_WriteReg>:
  * @param  pData    The target register value to written
  * @param  Length   buffer size to write
  * @retval BSP status
  */
int32_t BSP_I2C_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b08a      	sub	sp, #40	@ 0x28
 80078fc:	af04      	add	r7, sp, #16
 80078fe:	60ba      	str	r2, [r7, #8]
 8007900:	461a      	mov	r2, r3
 8007902:	4603      	mov	r3, r0
 8007904:	81fb      	strh	r3, [r7, #14]
 8007906:	460b      	mov	r3, r1
 8007908:	81bb      	strh	r3, [r7, #12]
 800790a:	4613      	mov	r3, r2
 800790c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if (HAL_I2C_Mem_Write(&TCPP0X_HANDLE_I2C, (uint8_t)DevAddr,
 800790e:	89fb      	ldrh	r3, [r7, #14]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	4619      	mov	r1, r3
 8007914:	89ba      	ldrh	r2, [r7, #12]
 8007916:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800791a:	9302      	str	r3, [sp, #8]
 800791c:	88fb      	ldrh	r3, [r7, #6]
 800791e:	9301      	str	r3, [sp, #4]
 8007920:	68bb      	ldr	r3, [r7, #8]
 8007922:	9300      	str	r3, [sp, #0]
 8007924:	2301      	movs	r3, #1
 8007926:	480d      	ldr	r0, [pc, #52]	@ (800795c <BSP_I2C_WriteReg+0x64>)
 8007928:	f003 f808 	bl	800a93c <HAL_I2C_Mem_Write>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d102      	bne.n	8007938 <BSP_I2C_WriteReg+0x40>
                        (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,
                        (uint8_t *)pData, Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8007932:	2300      	movs	r3, #0
 8007934:	617b      	str	r3, [r7, #20]
 8007936:	e00c      	b.n	8007952 <BSP_I2C_WriteReg+0x5a>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 8007938:	4808      	ldr	r0, [pc, #32]	@ (800795c <BSP_I2C_WriteReg+0x64>)
 800793a:	f003 fa3b 	bl	800adb4 <HAL_I2C_GetError>
 800793e:	4603      	mov	r3, r0
 8007940:	2b04      	cmp	r3, #4
 8007942:	d103      	bne.n	800794c <BSP_I2C_WriteReg+0x54>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8007944:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007948:	617b      	str	r3, [r7, #20]
 800794a:	e002      	b.n	8007952 <BSP_I2C_WriteReg+0x5a>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800794c:	f06f 0303 	mvn.w	r3, #3
 8007950:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 8007952:	697b      	ldr	r3, [r7, #20]
}
 8007954:	4618      	mov	r0, r3
 8007956:	3718      	adds	r7, #24
 8007958:	46bd      	mov	sp, r7
 800795a:	bd80      	pop	{r7, pc}
 800795c:	20000280 	.word	0x20000280

08007960 <BSP_I2C_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007960:	b580      	push	{r7, lr}
 8007962:	b08a      	sub	sp, #40	@ 0x28
 8007964:	af04      	add	r7, sp, #16
 8007966:	60ba      	str	r2, [r7, #8]
 8007968:	461a      	mov	r2, r3
 800796a:	4603      	mov	r3, r0
 800796c:	81fb      	strh	r3, [r7, #14]
 800796e:	460b      	mov	r3, r1
 8007970:	81bb      	strh	r3, [r7, #12]
 8007972:	4613      	mov	r3, r2
 8007974:	80fb      	strh	r3, [r7, #6]
  int32_t ret;

  if (HAL_I2C_Mem_Read(&TCPP0X_HANDLE_I2C, DevAddr, (uint16_t)Reg,
 8007976:	89ba      	ldrh	r2, [r7, #12]
 8007978:	89f9      	ldrh	r1, [r7, #14]
 800797a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800797e:	9302      	str	r3, [sp, #8]
 8007980:	88fb      	ldrh	r3, [r7, #6]
 8007982:	9301      	str	r3, [sp, #4]
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	9300      	str	r3, [sp, #0]
 8007988:	2301      	movs	r3, #1
 800798a:	480d      	ldr	r0, [pc, #52]	@ (80079c0 <BSP_I2C_ReadReg+0x60>)
 800798c:	f003 f8ea 	bl	800ab64 <HAL_I2C_Mem_Read>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d102      	bne.n	800799c <BSP_I2C_ReadReg+0x3c>
                       I2C_MEMADD_SIZE_8BIT, pData,
                       Length, 0x1000) == HAL_OK)
  {
    ret = BSP_ERROR_NONE;
 8007996:	2300      	movs	r3, #0
 8007998:	617b      	str	r3, [r7, #20]
 800799a:	e00c      	b.n	80079b6 <BSP_I2C_ReadReg+0x56>
  }
  else
  {
    if (HAL_I2C_GetError(&TCPP0X_HANDLE_I2C) == HAL_I2C_ERROR_AF)
 800799c:	4808      	ldr	r0, [pc, #32]	@ (80079c0 <BSP_I2C_ReadReg+0x60>)
 800799e:	f003 fa09 	bl	800adb4 <HAL_I2C_GetError>
 80079a2:	4603      	mov	r3, r0
 80079a4:	2b04      	cmp	r3, #4
 80079a6:	d103      	bne.n	80079b0 <BSP_I2C_ReadReg+0x50>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80079a8:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80079ac:	617b      	str	r3, [r7, #20]
 80079ae:	e002      	b.n	80079b6 <BSP_I2C_ReadReg+0x56>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80079b0:	f06f 0303 	mvn.w	r3, #3
 80079b4:	617b      	str	r3, [r7, #20]
    }
  }
  return ret;
 80079b6:	697b      	ldr	r3, [r7, #20]
}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3718      	adds	r7, #24
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20000280 	.word	0x20000280

080079c4 <BSP_GetTick>:
/**
  * @brief  Return system tick (ms) function.
  * @retval Current HAL time base time stamp
  */
int32_t BSP_GetTick(void)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80079c8:	f002 f8cc 	bl	8009b64 <HAL_GetTick>
 80079cc:	4603      	mov	r3, r0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	bd80      	pop	{r7, pc}
	...

080079d4 <I2C_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b09c      	sub	sp, #112	@ 0x70
 80079d8:	af00      	add	r7, sp, #0
 80079da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* -1- Configure the I2C clock source. The clock is derived from the SYSCLK */
#if !defined(I2C_CR1_ENGC)
  RCC_PeriphCLKInitTypeDef  RCC_PeriphCLKInitStruct;
  RCC_PeriphCLKInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80079dc:	2340      	movs	r3, #64	@ 0x40
 80079de:	61bb      	str	r3, [r7, #24]
  RCC_PeriphCLKInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_SYSCLK;
 80079e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80079e4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_RCCEx_PeriphCLKConfig(&RCC_PeriphCLKInitStruct);
 80079e6:	f107 0318 	add.w	r3, r7, #24
 80079ea:	4618      	mov	r0, r3
 80079ec:	f004 fb14 	bl	800c018 <HAL_RCCEx_PeriphCLKConfig>
#endif /* !I2C_CR1_ENGC */

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_ENABLE();
 80079f0:	4b24      	ldr	r3, [pc, #144]	@ (8007a84 <I2C_MspInit+0xb0>)
 80079f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079f4:	4a23      	ldr	r2, [pc, #140]	@ (8007a84 <I2C_MspInit+0xb0>)
 80079f6:	f043 0302 	orr.w	r3, r3, #2
 80079fa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80079fc:	4b21      	ldr	r3, [pc, #132]	@ (8007a84 <I2C_MspInit+0xb0>)
 80079fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a00:	f003 0302 	and.w	r3, r3, #2
 8007a04:	617b      	str	r3, [r7, #20]
 8007a06:	697b      	ldr	r3, [r7, #20]
  /* Enable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_ENABLE();
 8007a08:	4b1e      	ldr	r3, [pc, #120]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a0c:	4a1d      	ldr	r2, [pc, #116]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a0e:	f043 0302 	orr.w	r3, r3, #2
 8007a12:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8007a14:	4b1b      	ldr	r3, [pc, #108]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007a18:	f003 0302 	and.w	r3, r3, #2
 8007a1c:	613b      	str	r3, [r7, #16]
 8007a1e:	693b      	ldr	r3, [r7, #16]

  /* Configure I2C SCL as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SCL_GPIO_PIN;
 8007a20:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a24:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007a26:	2312      	movs	r3, #18
 8007a28:	663b      	str	r3, [r7, #96]	@ 0x60
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	667b      	str	r3, [r7, #100]	@ 0x64
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007a2e:	2302      	movs	r3, #2
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
  gpio_init_structure.Alternate = BUS_I2C_SCL_GPIO_AF;
 8007a32:	2304      	movs	r3, #4
 8007a34:	66fb      	str	r3, [r7, #108]	@ 0x6c
  HAL_GPIO_Init(BUS_I2C_SCL_GPIO_PORT, &gpio_init_structure);
 8007a36:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007a3a:	4619      	mov	r1, r3
 8007a3c:	4812      	ldr	r0, [pc, #72]	@ (8007a88 <I2C_MspInit+0xb4>)
 8007a3e:	f002 fc37 	bl	800a2b0 <HAL_GPIO_Init>

  /* Configure I2C SDA as alternate function */
  gpio_init_structure.Pin       = BUS_I2C_SDA_GPIO_PIN;
 8007a42:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8007a48:	2312      	movs	r3, #18
 8007a4a:	663b      	str	r3, [r7, #96]	@ 0x60
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	667b      	str	r3, [r7, #100]	@ 0x64
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007a50:	2302      	movs	r3, #2
 8007a52:	66bb      	str	r3, [r7, #104]	@ 0x68
  gpio_init_structure.Alternate = BUS_I2C_SDA_GPIO_AF;
 8007a54:	2304      	movs	r3, #4
 8007a56:	66fb      	str	r3, [r7, #108]	@ 0x6c
  HAL_GPIO_Init(BUS_I2C_SDA_GPIO_PORT, &gpio_init_structure);
 8007a58:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8007a5c:	4619      	mov	r1, r3
 8007a5e:	480a      	ldr	r0, [pc, #40]	@ (8007a88 <I2C_MspInit+0xb4>)
 8007a60:	f002 fc26 	bl	800a2b0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C_CLK_ENABLE();
 8007a64:	4b07      	ldr	r3, [pc, #28]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a68:	4a06      	ldr	r2, [pc, #24]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a6a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8007a6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8007a70:	4b04      	ldr	r3, [pc, #16]	@ (8007a84 <I2C_MspInit+0xb0>)
 8007a72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007a78:	60fb      	str	r3, [r7, #12]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
}
 8007a7c:	bf00      	nop
 8007a7e:	3770      	adds	r7, #112	@ 0x70
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	40021000 	.word	0x40021000
 8007a88:	48000400 	.word	0x48000400

08007a8c <I2C_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  hi2c  I2C handler
  * @retval None
  */
static void I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b088      	sub	sp, #32
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hi2c);

  /* Configure I2C SCL, SDA as alternate function */
  gpio_init_structure.Pin = BUS_I2C_SCL_GPIO_PIN;
 8007a94:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4810      	ldr	r0, [pc, #64]	@ (8007ae0 <I2C_MspDeInit+0x54>)
 8007aa0:	f002 fd88 	bl	800a5b4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C_SDA_GPIO_PIN;
 8007aa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007aa8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	4619      	mov	r1, r3
 8007aae:	480c      	ldr	r0, [pc, #48]	@ (8007ae0 <I2C_MspDeInit+0x54>)
 8007ab0:	f002 fd80 	bl	800a5b4 <HAL_GPIO_DeInit>

  /** Disable GPIO clock **/
  /* Disable SCL GPIO clock */
  BUS_I2C_SCL_GPIO_CLK_DISABLE();
 8007ab4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007ab6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ab8:	4a0a      	ldr	r2, [pc, #40]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007aba:	f023 0302 	bic.w	r3, r3, #2
 8007abe:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Disable SDA GPIO clock */
  BUS_I2C_SDA_GPIO_CLK_DISABLE();
 8007ac0:	4b08      	ldr	r3, [pc, #32]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007ac2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007ac4:	4a07      	ldr	r2, [pc, #28]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007ac6:	f023 0302 	bic.w	r3, r3, #2
 8007aca:	64d3      	str	r3, [r2, #76]	@ 0x4c
  /* Disable I2C clock */
  BUS_I2C_CLK_DISABLE();
 8007acc:	4b05      	ldr	r3, [pc, #20]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007ace:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ad0:	4a04      	ldr	r2, [pc, #16]	@ (8007ae4 <I2C_MspDeInit+0x58>)
 8007ad2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8007ad6:	6593      	str	r3, [r2, #88]	@ 0x58
}
 8007ad8:	bf00      	nop
 8007ada:	3720      	adds	r7, #32
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	48000400 	.word	0x48000400
 8007ae4:	40021000 	.word	0x40021000

08007ae8 <I2C_GetTiming>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_freq   I2C frequency in Hz.
  * @retval I2C timing value
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	b086      	sub	sp, #24
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
 8007af0:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8007af2:	2300      	movs	r3, #0
 8007af4:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t itiming;

  if ((clock_src_freq != 0U) && (i2c_freq != 0U))
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d06b      	beq.n	8007bd4 <I2C_GetTiming+0xec>
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d068      	beq.n	8007bd4 <I2C_GetTiming+0xec>
  {
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	613b      	str	r3, [r7, #16]
 8007b06:	e060      	b.n	8007bca <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 8007b08:	4a35      	ldr	r2, [pc, #212]	@ (8007be0 <I2C_GetTiming+0xf8>)
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	212c      	movs	r1, #44	@ 0x2c
 8007b0e:	fb01 f303 	mul.w	r3, r1, r3
 8007b12:	4413      	add	r3, r2
 8007b14:	3304      	adds	r3, #4
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	683a      	ldr	r2, [r7, #0]
 8007b1a:	429a      	cmp	r2, r3
 8007b1c:	d352      	bcc.n	8007bc4 <I2C_GetTiming+0xdc>
          (i2c_freq <= i2c_charac[speed].freq_max))
 8007b1e:	4a30      	ldr	r2, [pc, #192]	@ (8007be0 <I2C_GetTiming+0xf8>)
 8007b20:	693b      	ldr	r3, [r7, #16]
 8007b22:	212c      	movs	r1, #44	@ 0x2c
 8007b24:	fb01 f303 	mul.w	r3, r1, r3
 8007b28:	4413      	add	r3, r2
 8007b2a:	3308      	adds	r3, #8
 8007b2c:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= i2c_charac[speed].freq_min) &&
 8007b2e:	683a      	ldr	r2, [r7, #0]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d847      	bhi.n	8007bc4 <I2C_GetTiming+0xdc>
      {
        Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8007b34:	6939      	ldr	r1, [r7, #16]
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 f856 	bl	8007be8 <Compute_PRESC_SCLDEL_SDADEL>
        itiming = Compute_SCLL_SCLH(clock_src_freq, speed);
 8007b3c:	6939      	ldr	r1, [r7, #16]
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 f910 	bl	8007d64 <Compute_SCLL_SCLH>
 8007b44:	60f8      	str	r0, [r7, #12]

        if (itiming < I2C_VALID_PRESC_NBR)
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	2b63      	cmp	r3, #99	@ 0x63
 8007b4a:	d842      	bhi.n	8007bd2 <I2C_GetTiming+0xea>
        {
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007b4c:	4925      	ldr	r1, [pc, #148]	@ (8007be4 <I2C_GetTiming+0xfc>)
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	440b      	add	r3, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	0719      	lsls	r1, r3, #28
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 8007b5e:	4821      	ldr	r0, [pc, #132]	@ (8007be4 <I2C_GetTiming+0xfc>)
 8007b60:	68fa      	ldr	r2, [r7, #12]
 8007b62:	4613      	mov	r3, r2
 8007b64:	009b      	lsls	r3, r3, #2
 8007b66:	4413      	add	r3, r2
 8007b68:	009b      	lsls	r3, r3, #2
 8007b6a:	4403      	add	r3, r0
 8007b6c:	3304      	adds	r3, #4
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	051b      	lsls	r3, r3, #20
 8007b72:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007b76:	4319      	orrs	r1, r3
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 8007b78:	481a      	ldr	r0, [pc, #104]	@ (8007be4 <I2C_GetTiming+0xfc>)
 8007b7a:	68fa      	ldr	r2, [r7, #12]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4403      	add	r3, r0
 8007b86:	3308      	adds	r3, #8
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	041b      	lsls	r3, r3, #16
 8007b8c:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((valid_timing[itiming].tscldel & 0x0FU) << 20) |
 8007b90:	4319      	orrs	r1, r3
                ((valid_timing[itiming].sclh & 0xFFU) << 8)     |
 8007b92:	4814      	ldr	r0, [pc, #80]	@ (8007be4 <I2C_GetTiming+0xfc>)
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	4613      	mov	r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	4413      	add	r3, r2
 8007b9c:	009b      	lsls	r3, r3, #2
 8007b9e:	4403      	add	r3, r0
 8007ba0:	330c      	adds	r3, #12
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	021b      	lsls	r3, r3, #8
 8007ba6:	b29b      	uxth	r3, r3
                ((valid_timing[itiming].tsdadel & 0x0FU) << 16) |
 8007ba8:	4319      	orrs	r1, r3
                ((valid_timing[itiming].scll & 0xFFU) << 0);
 8007baa:	480e      	ldr	r0, [pc, #56]	@ (8007be4 <I2C_GetTiming+0xfc>)
 8007bac:	68fa      	ldr	r2, [r7, #12]
 8007bae:	4613      	mov	r3, r2
 8007bb0:	009b      	lsls	r3, r3, #2
 8007bb2:	4413      	add	r3, r2
 8007bb4:	009b      	lsls	r3, r3, #2
 8007bb6:	4403      	add	r3, r0
 8007bb8:	3310      	adds	r3, #16
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
          ret = ((valid_timing[itiming].presc  & 0x0FU) << 28)  |
 8007bbe:	430b      	orrs	r3, r1
 8007bc0:	617b      	str	r3, [r7, #20]
        }
        break;
 8007bc2:	e006      	b.n	8007bd2 <I2C_GetTiming+0xea>
    for (speed = 0 ; speed <= (uint32_t)I2C_SPEED_FAST_PLUS ; speed++)
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	613b      	str	r3, [r7, #16]
 8007bca:	693b      	ldr	r3, [r7, #16]
 8007bcc:	2b02      	cmp	r3, #2
 8007bce:	d99b      	bls.n	8007b08 <I2C_GetTiming+0x20>
 8007bd0:	e000      	b.n	8007bd4 <I2C_GetTiming+0xec>
        break;
 8007bd2:	bf00      	nop
      }
    }
  }

  return ret;
 8007bd4:	697b      	ldr	r3, [r7, #20]
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3718      	adds	r7, #24
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	0801b89c 	.word	0x0801b89c
 8007be4:	200002d4 	.word	0x200002d4

08007be8 <Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval None
  */
static void Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t i2c_speed)
{
 8007be8:	b480      	push	{r7}
 8007bea:	b08d      	sub	sp, #52	@ 0x34
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
 8007bf0:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007bf2:	2310      	movs	r3, #16
 8007bf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  int32_t  tscldel_min;
  uint32_t presc;
  uint32_t iscl;
  uint32_t isda;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	085a      	lsrs	r2, r3, #1
 8007bfa:	4b56      	ldr	r3, [pc, #344]	@ (8007d54 <Compute_PRESC_SCLDEL_SDADEL+0x16c>)
 8007bfc:	4413      	add	r3, r2
 8007bfe:	687a      	ldr	r2, [r7, #4]
 8007c00:	fbb3 f3f2 	udiv	r3, r3, r2
 8007c04:	61bb      	str	r3, [r7, #24]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007c06:	4a54      	ldr	r2, [pc, #336]	@ (8007d58 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	212c      	movs	r1, #44	@ 0x2c
 8007c0c:	fb01 f303 	mul.w	r3, r1, r3
 8007c10:	4413      	add	r3, r2
 8007c12:	3324      	adds	r3, #36	@ 0x24
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	4618      	mov	r0, r3
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 8007c18:	4a4f      	ldr	r2, [pc, #316]	@ (8007d58 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	212c      	movs	r1, #44	@ 0x2c
 8007c1e:	fb01 f303 	mul.w	r3, r1, r3
 8007c22:	4413      	add	r3, r2
 8007c24:	330c      	adds	r3, #12
 8007c26:	681b      	ldr	r3, [r3, #0]
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007c28:	4403      	add	r3, r0
                (int32_t)i2c_charac[i2c_speed].hddat_min -
 8007c2a:	f1a3 0232 	sub.w	r2, r3, #50	@ 0x32
                (int32_t)I2C_ANALOG_FILTER_DELAY_MIN     -
                (int32_t)(((int32_t)i2c_charac[i2c_speed].dnf + 3) * (int32_t)ti2cclk);
 8007c2e:	494a      	ldr	r1, [pc, #296]	@ (8007d58 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	202c      	movs	r0, #44	@ 0x2c
 8007c34:	fb00 f303 	mul.w	r3, r0, r3
 8007c38:	440b      	add	r3, r1
 8007c3a:	3328      	adds	r3, #40	@ 0x28
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	3303      	adds	r3, #3
 8007c40:	69b9      	ldr	r1, [r7, #24]
 8007c42:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)i2c_charac[i2c_speed].tfall     +
 8007c46:	1ad3      	subs	r3, r2, r3
 8007c48:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)i2c_charac[i2c_speed].trise + (int32_t)i2c_charac[i2c_speed].sudat_min;
 8007c4a:	4a43      	ldr	r2, [pc, #268]	@ (8007d58 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	212c      	movs	r1, #44	@ 0x2c
 8007c50:	fb01 f303 	mul.w	r3, r1, r3
 8007c54:	4413      	add	r3, r2
 8007c56:	3320      	adds	r3, #32
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	4a3e      	ldr	r2, [pc, #248]	@ (8007d58 <Compute_PRESC_SCLDEL_SDADEL+0x170>)
 8007c5e:	683b      	ldr	r3, [r7, #0]
 8007c60:	212c      	movs	r1, #44	@ 0x2c
 8007c62:	fb01 f303 	mul.w	r3, r1, r3
 8007c66:	4413      	add	r3, r2
 8007c68:	3314      	adds	r3, #20
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4403      	add	r3, r0
 8007c6e:	617b      	str	r3, [r7, #20]

  if (tsdadel_min <= 0)
 8007c70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	dc01      	bgt.n	8007c7a <Compute_PRESC_SCLDEL_SDADEL+0x92>
  {
    tsdadel_min = 0;
 8007c76:	2300      	movs	r3, #0
 8007c78:	62bb      	str	r3, [r7, #40]	@ 0x28
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007c7a:	2300      	movs	r3, #0
 8007c7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7e:	e05e      	b.n	8007d3e <Compute_PRESC_SCLDEL_SDADEL+0x156>
  {
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 8007c80:	2300      	movs	r3, #0
 8007c82:	623b      	str	r3, [r7, #32]
 8007c84:	e055      	b.n	8007d32 <Compute_PRESC_SCLDEL_SDADEL+0x14a>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (iscl + 1U) * (presc + 1U) * ti2cclk;
 8007c86:	6a3b      	ldr	r3, [r7, #32]
 8007c88:	3301      	adds	r3, #1
 8007c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c8c:	3201      	adds	r2, #1
 8007c8e:	fb03 f202 	mul.w	r2, r3, r2
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	fb02 f303 	mul.w	r3, r2, r3
 8007c98:	613b      	str	r3, [r7, #16]

      if (tscldel >= (uint32_t)tscldel_min)
 8007c9a:	697b      	ldr	r3, [r7, #20]
 8007c9c:	693a      	ldr	r2, [r7, #16]
 8007c9e:	429a      	cmp	r2, r3
 8007ca0:	d344      	bcc.n	8007d2c <Compute_PRESC_SCLDEL_SDADEL+0x144>
      {
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
 8007ca6:	e03e      	b.n	8007d26 <Compute_PRESC_SCLDEL_SDADEL+0x13e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (isda * (presc + 1U)) * ti2cclk;
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007caa:	3301      	adds	r3, #1
 8007cac:	69fa      	ldr	r2, [r7, #28]
 8007cae:	fb03 f202 	mul.w	r2, r3, r2
 8007cb2:	69bb      	ldr	r3, [r7, #24]
 8007cb4:	fb02 f303 	mul.w	r3, r2, r3
 8007cb8:	60fb      	str	r3, [r7, #12]

          if (tsdadel >= (uint32_t)tsdadel_min)
 8007cba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007cbc:	68fa      	ldr	r2, [r7, #12]
 8007cbe:	429a      	cmp	r2, r3
 8007cc0:	d32e      	bcc.n	8007d20 <Compute_PRESC_SCLDEL_SDADEL+0x138>
          {
            if (presc != prev_presc)
 8007cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007cc6:	429a      	cmp	r2, r3
 8007cc8:	d02a      	beq.n	8007d20 <Compute_PRESC_SCLDEL_SDADEL+0x138>
            {
              valid_timing[valid_timing_nbr].presc = presc;
 8007cca:	4b24      	ldr	r3, [pc, #144]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	4924      	ldr	r1, [pc, #144]	@ (8007d60 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	009b      	lsls	r3, r3, #2
 8007cd4:	4413      	add	r3, r2
 8007cd6:	009b      	lsls	r3, r3, #2
 8007cd8:	440b      	add	r3, r1
 8007cda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007cdc:	601a      	str	r2, [r3, #0]
              valid_timing[valid_timing_nbr].tscldel = iscl;
 8007cde:	4b1f      	ldr	r3, [pc, #124]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	491f      	ldr	r1, [pc, #124]	@ (8007d60 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 8007ce4:	4613      	mov	r3, r2
 8007ce6:	009b      	lsls	r3, r3, #2
 8007ce8:	4413      	add	r3, r2
 8007cea:	009b      	lsls	r3, r3, #2
 8007cec:	440b      	add	r3, r1
 8007cee:	3304      	adds	r3, #4
 8007cf0:	6a3a      	ldr	r2, [r7, #32]
 8007cf2:	601a      	str	r2, [r3, #0]
              valid_timing[valid_timing_nbr].tsdadel = isda;
 8007cf4:	4b19      	ldr	r3, [pc, #100]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	4919      	ldr	r1, [pc, #100]	@ (8007d60 <Compute_PRESC_SCLDEL_SDADEL+0x178>)
 8007cfa:	4613      	mov	r3, r2
 8007cfc:	009b      	lsls	r3, r3, #2
 8007cfe:	4413      	add	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	440b      	add	r3, r1
 8007d04:	3308      	adds	r3, #8
 8007d06:	69fa      	ldr	r2, [r7, #28]
 8007d08:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
              valid_timing_nbr ++;
 8007d0e:	4b13      	ldr	r3, [pc, #76]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	3301      	adds	r3, #1
 8007d14:	4a11      	ldr	r2, [pc, #68]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007d16:	6013      	str	r3, [r2, #0]

              if (valid_timing_nbr >= I2C_VALID_PRESC_NBR)
 8007d18:	4b10      	ldr	r3, [pc, #64]	@ (8007d5c <Compute_PRESC_SCLDEL_SDADEL+0x174>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	2b63      	cmp	r3, #99	@ 0x63
 8007d1e:	d812      	bhi.n	8007d46 <Compute_PRESC_SCLDEL_SDADEL+0x15e>
        for (isda = 0; isda < I2C_SDADEL_MAX; isda++)
 8007d20:	69fb      	ldr	r3, [r7, #28]
 8007d22:	3301      	adds	r3, #1
 8007d24:	61fb      	str	r3, [r7, #28]
 8007d26:	69fb      	ldr	r3, [r7, #28]
 8007d28:	2b0f      	cmp	r3, #15
 8007d2a:	d9bd      	bls.n	8007ca8 <Compute_PRESC_SCLDEL_SDADEL+0xc0>
    for (iscl = 0; iscl < I2C_SCLDEL_MAX; iscl++)
 8007d2c:	6a3b      	ldr	r3, [r7, #32]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	623b      	str	r3, [r7, #32]
 8007d32:	6a3b      	ldr	r3, [r7, #32]
 8007d34:	2b0f      	cmp	r3, #15
 8007d36:	d9a6      	bls.n	8007c86 <Compute_PRESC_SCLDEL_SDADEL+0x9e>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	3301      	adds	r3, #1
 8007d3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d40:	2b0f      	cmp	r3, #15
 8007d42:	d99d      	bls.n	8007c80 <Compute_PRESC_SCLDEL_SDADEL+0x98>
 8007d44:	e000      	b.n	8007d48 <Compute_PRESC_SCLDEL_SDADEL+0x160>
              {
                return;
 8007d46:	bf00      	nop
          }
        }
      }
    }
  }
}
 8007d48:	3734      	adds	r7, #52	@ 0x34
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	3b9aca00 	.word	0x3b9aca00
 8007d58:	0801b89c 	.word	0x0801b89c
 8007d5c:	20000aa4 	.word	0x20000aa4
 8007d60:	200002d4 	.word	0x200002d4

08007d64 <Compute_SCLL_SCLH>:
  * @param  clock_src_freq  I2C source clock in HZ.
  * @param  i2c_speed  I2C frequency (index).
  * @retval > 0  config index, no valid config
  */
static uint32_t Compute_SCLL_SCLH(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b093      	sub	sp, #76	@ 0x4c
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
 8007d6c:	6039      	str	r1, [r7, #0]
  uint32_t ret = I2C_VALID_PRESC_NBR;
 8007d6e:	2364      	movs	r3, #100	@ 0x64
 8007d70:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t clk_min;
  uint32_t clk_max;
  uint32_t scll_tmp;
  uint32_t sclh_tmp;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U)) / clock_src_freq;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	085a      	lsrs	r2, r3, #1
 8007d76:	4b79      	ldr	r3, [pc, #484]	@ (8007f5c <Compute_SCLL_SCLH+0x1f8>)
 8007d78:	4413      	add	r3, r2
 8007d7a:	687a      	ldr	r2, [r7, #4]
 8007d7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (i2c_charac[I2C_speed].freq / 2U)) / i2c_charac[I2C_speed].freq;
 8007d82:	4a77      	ldr	r2, [pc, #476]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007d84:	683b      	ldr	r3, [r7, #0]
 8007d86:	212c      	movs	r1, #44	@ 0x2c
 8007d88:	fb01 f303 	mul.w	r3, r1, r3
 8007d8c:	4413      	add	r3, r2
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	085a      	lsrs	r2, r3, #1
 8007d92:	4b72      	ldr	r3, [pc, #456]	@ (8007f5c <Compute_SCLL_SCLH+0x1f8>)
 8007d94:	4413      	add	r3, r2
 8007d96:	4972      	ldr	r1, [pc, #456]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	202c      	movs	r0, #44	@ 0x2c
 8007d9c:	fb00 f202 	mul.w	r2, r0, r2
 8007da0:	440a      	add	r2, r1
 8007da2:	6812      	ldr	r2, [r2, #0]
 8007da4:	fbb3 f3f2 	udiv	r3, r3, r2
 8007da8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = i2c_charac[I2C_speed].dnf * ti2cclk;
 8007daa:	4a6d      	ldr	r2, [pc, #436]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007dac:	683b      	ldr	r3, [r7, #0]
 8007dae:	212c      	movs	r1, #44	@ 0x2c
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	3328      	adds	r3, #40	@ 0x28
 8007db8:	681a      	ldr	r2, [r3, #0]
 8007dba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007dbc:	fb02 f303 	mul.w	r3, r2, r3
 8007dc0:	627b      	str	r3, [r7, #36]	@ 0x24

  clk_max = SEC2NSEC / i2c_charac[I2C_speed].freq_min;
 8007dc2:	4a67      	ldr	r2, [pc, #412]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007dc4:	683b      	ldr	r3, [r7, #0]
 8007dc6:	212c      	movs	r1, #44	@ 0x2c
 8007dc8:	fb01 f303 	mul.w	r3, r1, r3
 8007dcc:	4413      	add	r3, r2
 8007dce:	3304      	adds	r3, #4
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	4a62      	ldr	r2, [pc, #392]	@ (8007f5c <Compute_SCLL_SCLH+0x1f8>)
 8007dd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007dd8:	623b      	str	r3, [r7, #32]
  clk_min = SEC2NSEC / i2c_charac[I2C_speed].freq_max;
 8007dda:	4a61      	ldr	r2, [pc, #388]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	212c      	movs	r1, #44	@ 0x2c
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	4413      	add	r3, r2
 8007de6:	3308      	adds	r3, #8
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	4a5c      	ldr	r2, [pc, #368]	@ (8007f5c <Compute_SCLL_SCLH+0x1f8>)
 8007dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8007df0:	61fb      	str	r3, [r7, #28]

  prev_clk_error = ti2cspeed;
 8007df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007df4:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 8007df6:	2300      	movs	r3, #0
 8007df8:	637b      	str	r3, [r7, #52]	@ 0x34
 8007dfa:	e0a2      	b.n	8007f42 <Compute_SCLL_SCLH+0x1de>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (valid_timing[count].presc + 1U) * ti2cclk;
 8007dfc:	4959      	ldr	r1, [pc, #356]	@ (8007f64 <Compute_SCLL_SCLH+0x200>)
 8007dfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e00:	4613      	mov	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4413      	add	r3, r2
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	440b      	add	r3, r1
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	1c5a      	adds	r2, r3, #1
 8007e0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e10:	fb02 f303 	mul.w	r3, r2, r3
 8007e14:	61bb      	str	r3, [r7, #24]

    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 8007e16:	2300      	movs	r3, #0
 8007e18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e1a:	e08b      	b.n	8007f34 <Compute_SCLL_SCLH+0x1d0>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((scll_tmp + 1U) * tpresc);
 8007e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e1e:	005a      	lsls	r2, r3, #1
 8007e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e22:	441a      	add	r2, r3
 8007e24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007e26:	3301      	adds	r3, #1
 8007e28:	69b9      	ldr	r1, [r7, #24]
 8007e2a:	fb01 f303 	mul.w	r3, r1, r3
 8007e2e:	4413      	add	r3, r2
 8007e30:	3332      	adds	r3, #50	@ 0x32
 8007e32:	617b      	str	r3, [r7, #20]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
         tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 8007e34:	4a4a      	ldr	r2, [pc, #296]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	212c      	movs	r1, #44	@ 0x2c
 8007e3a:	fb01 f303 	mul.w	r3, r1, r3
 8007e3e:	4413      	add	r3, r2
 8007e40:	3318      	adds	r3, #24
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	697a      	ldr	r2, [r7, #20]
 8007e46:	429a      	cmp	r2, r3
 8007e48:	d370      	bcc.n	8007f2c <Compute_SCLL_SCLH+0x1c8>
          (ti2cclk >= ((tscl_l - I2C_ANALOG_FILTER_DELAY_MIN - dnf_delay) / 4U)))
 8007e4a:	697a      	ldr	r2, [r7, #20]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e4e:	1ad3      	subs	r3, r2, r3
 8007e50:	3b32      	subs	r3, #50	@ 0x32
 8007e52:	089b      	lsrs	r3, r3, #2
      if ((tscl_l < i2c_charac[I2C_speed].l_min) ||
 8007e54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d268      	bcs.n	8007f2c <Compute_SCLL_SCLH+0x1c8>
      {
        continue;
      }

      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007e5e:	e061      	b.n	8007f24 <Compute_SCLL_SCLH+0x1c0>
      {
        /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
        uint32_t tscl_h = I2C_ANALOG_FILTER_DELAY_MIN + dnf_delay + (2U * ti2cclk) + ((sclh_tmp + 1U) * tpresc);
 8007e60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007e62:	005a      	lsls	r2, r3, #1
 8007e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e66:	441a      	add	r2, r3
 8007e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e6a:	3301      	adds	r3, #1
 8007e6c:	69b9      	ldr	r1, [r7, #24]
 8007e6e:	fb01 f303 	mul.w	r3, r1, r3
 8007e72:	4413      	add	r3, r2
 8007e74:	3332      	adds	r3, #50	@ 0x32
 8007e76:	613b      	str	r3, [r7, #16]

        /* tSCL = tf + tLOW + tr + tHIGH */
        uint32_t tscl = tscl_l + tscl_h + i2c_charac[I2C_speed].trise + i2c_charac[I2C_speed].tfall;
 8007e78:	697a      	ldr	r2, [r7, #20]
 8007e7a:	693b      	ldr	r3, [r7, #16]
 8007e7c:	441a      	add	r2, r3
 8007e7e:	4938      	ldr	r1, [pc, #224]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	202c      	movs	r0, #44	@ 0x2c
 8007e84:	fb00 f303 	mul.w	r3, r0, r3
 8007e88:	440b      	add	r3, r1
 8007e8a:	3320      	adds	r3, #32
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	441a      	add	r2, r3
 8007e90:	4933      	ldr	r1, [pc, #204]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	202c      	movs	r0, #44	@ 0x2c
 8007e96:	fb00 f303 	mul.w	r3, r0, r3
 8007e9a:	440b      	add	r3, r1
 8007e9c:	3324      	adds	r3, #36	@ 0x24
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4413      	add	r3, r2
 8007ea2:	60fb      	str	r3, [r7, #12]

        if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= i2c_charac[I2C_speed].h_min) && (ti2cclk < tscl_h))
 8007ea4:	68fa      	ldr	r2, [r7, #12]
 8007ea6:	69fb      	ldr	r3, [r7, #28]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d338      	bcc.n	8007f1e <Compute_SCLL_SCLH+0x1ba>
 8007eac:	68fa      	ldr	r2, [r7, #12]
 8007eae:	6a3b      	ldr	r3, [r7, #32]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d834      	bhi.n	8007f1e <Compute_SCLL_SCLH+0x1ba>
 8007eb4:	4a2a      	ldr	r2, [pc, #168]	@ (8007f60 <Compute_SCLL_SCLH+0x1fc>)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	212c      	movs	r1, #44	@ 0x2c
 8007eba:	fb01 f303 	mul.w	r3, r1, r3
 8007ebe:	4413      	add	r3, r2
 8007ec0:	331c      	adds	r3, #28
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	693a      	ldr	r2, [r7, #16]
 8007ec6:	429a      	cmp	r2, r3
 8007ec8:	d329      	bcc.n	8007f1e <Compute_SCLL_SCLH+0x1ba>
 8007eca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ecc:	693b      	ldr	r3, [r7, #16]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d225      	bcs.n	8007f1e <Compute_SCLL_SCLH+0x1ba>
        {
          int32_t clk_error = (int32_t)tscl - (int32_t)ti2cspeed;
 8007ed2:	68fa      	ldr	r2, [r7, #12]
 8007ed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ed6:	1ad3      	subs	r3, r2, r3
 8007ed8:	633b      	str	r3, [r7, #48]	@ 0x30

          if (clk_error < 0)
 8007eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	da02      	bge.n	8007ee6 <Compute_SCLL_SCLH+0x182>
          {
            clk_error = -clk_error;
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee2:	425b      	negs	r3, r3
 8007ee4:	633b      	str	r3, [r7, #48]	@ 0x30
          }

          /* look for the timings with the lowest clock error */
          if ((uint32_t)clk_error < prev_clk_error)
 8007ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ee8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d917      	bls.n	8007f1e <Compute_SCLL_SCLH+0x1ba>
          {
            prev_clk_error = (uint32_t)clk_error;
 8007eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ef0:	643b      	str	r3, [r7, #64]	@ 0x40
            valid_timing[count].scll = scll_tmp;
 8007ef2:	491c      	ldr	r1, [pc, #112]	@ (8007f64 <Compute_SCLL_SCLH+0x200>)
 8007ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007ef6:	4613      	mov	r3, r2
 8007ef8:	009b      	lsls	r3, r3, #2
 8007efa:	4413      	add	r3, r2
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	440b      	add	r3, r1
 8007f00:	3310      	adds	r3, #16
 8007f02:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8007f04:	601a      	str	r2, [r3, #0]
            valid_timing[count].sclh = sclh_tmp;
 8007f06:	4917      	ldr	r1, [pc, #92]	@ (8007f64 <Compute_SCLL_SCLH+0x200>)
 8007f08:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	330c      	adds	r3, #12
 8007f16:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007f18:	601a      	str	r2, [r3, #0]
            ret = count;
 8007f1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f1c:	647b      	str	r3, [r7, #68]	@ 0x44
      for (sclh_tmp = 0; sclh_tmp < I2C_SCLH_MAX; sclh_tmp++)
 8007f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f20:	3301      	adds	r3, #1
 8007f22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	2bff      	cmp	r3, #255	@ 0xff
 8007f28:	d99a      	bls.n	8007e60 <Compute_SCLL_SCLH+0xfc>
 8007f2a:	e000      	b.n	8007f2e <Compute_SCLL_SCLH+0x1ca>
        continue;
 8007f2c:	bf00      	nop
    for (scll_tmp = 0; scll_tmp < I2C_SCLL_MAX; scll_tmp++)
 8007f2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f30:	3301      	adds	r3, #1
 8007f32:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007f34:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007f36:	2bff      	cmp	r3, #255	@ 0xff
 8007f38:	f67f af70 	bls.w	8007e1c <Compute_SCLL_SCLH+0xb8>
  for (uint32_t count = 0; count < valid_timing_nbr; count++)
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007f3e:	3301      	adds	r3, #1
 8007f40:	637b      	str	r3, [r7, #52]	@ 0x34
 8007f42:	4b09      	ldr	r3, [pc, #36]	@ (8007f68 <Compute_SCLL_SCLH+0x204>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007f48:	429a      	cmp	r2, r3
 8007f4a:	f4ff af57 	bcc.w	8007dfc <Compute_SCLL_SCLH+0x98>
        }
      }
    }
  }

  return ret;
 8007f4e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	374c      	adds	r7, #76	@ 0x4c
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr
 8007f5c:	3b9aca00 	.word	0x3b9aca00
 8007f60:	0801b89c 	.word	0x0801b89c
 8007f64:	200002d4 	.word	0x200002d4
 8007f68:	20000aa4 	.word	0x20000aa4

08007f6c <__NVIC_EnableIRQ>:
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b083      	sub	sp, #12
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	4603      	mov	r3, r0
 8007f74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007f76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	db0b      	blt.n	8007f96 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007f7e:	79fb      	ldrb	r3, [r7, #7]
 8007f80:	f003 021f 	and.w	r2, r3, #31
 8007f84:	4907      	ldr	r1, [pc, #28]	@ (8007fa4 <__NVIC_EnableIRQ+0x38>)
 8007f86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f8a:	095b      	lsrs	r3, r3, #5
 8007f8c:	2001      	movs	r0, #1
 8007f8e:	fa00 f202 	lsl.w	r2, r0, r2
 8007f92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8007f96:	bf00      	nop
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	e000e100 	.word	0xe000e100

08007fa8 <__NVIC_SetPriority>:
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	4603      	mov	r3, r0
 8007fb0:	6039      	str	r1, [r7, #0]
 8007fb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007fb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	db0a      	blt.n	8007fd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fbc:	683b      	ldr	r3, [r7, #0]
 8007fbe:	b2da      	uxtb	r2, r3
 8007fc0:	490c      	ldr	r1, [pc, #48]	@ (8007ff4 <__NVIC_SetPriority+0x4c>)
 8007fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007fc6:	0112      	lsls	r2, r2, #4
 8007fc8:	b2d2      	uxtb	r2, r2
 8007fca:	440b      	add	r3, r1
 8007fcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007fd0:	e00a      	b.n	8007fe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	4908      	ldr	r1, [pc, #32]	@ (8007ff8 <__NVIC_SetPriority+0x50>)
 8007fd8:	79fb      	ldrb	r3, [r7, #7]
 8007fda:	f003 030f 	and.w	r3, r3, #15
 8007fde:	3b04      	subs	r3, #4
 8007fe0:	0112      	lsls	r2, r2, #4
 8007fe2:	b2d2      	uxtb	r2, r2
 8007fe4:	440b      	add	r3, r1
 8007fe6:	761a      	strb	r2, [r3, #24]
}
 8007fe8:	bf00      	nop
 8007fea:	370c      	adds	r7, #12
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	e000e100 	.word	0xe000e100
 8007ff8:	e000ed00 	.word	0xe000ed00

08007ffc <LL_ADC_DMA_GetRegAddr>:
  *         (1) Available on devices with several ADC instances.
  * @retval ADC register address
  */
#if defined(ADC_MULTIMODE_SUPPORT)
__STATIC_INLINE uint32_t LL_ADC_DMA_GetRegAddr(const ADC_TypeDef *ADCx, uint32_t Register)
{
 8007ffc:	b480      	push	{r7}
 8007ffe:	b085      	sub	sp, #20
 8008000:	af00      	add	r7, sp, #0
 8008002:	6078      	str	r0, [r7, #4]
 8008004:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Register == LL_ADC_DMA_REG_REGULAR_DATA)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d103      	bne.n	8008014 <LL_ADC_DMA_GetRegAddr+0x18>
  {
    /* Retrieve address of register DR */
    data_reg_addr = (uint32_t) &(ADCx->DR);
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	3340      	adds	r3, #64	@ 0x40
 8008010:	60fb      	str	r3, [r7, #12]
 8008012:	e001      	b.n	8008018 <LL_ADC_DMA_GetRegAddr+0x1c>
  }
  else /* (Register == LL_ADC_DMA_REG_REGULAR_DATA_MULTI) */
  {
    /* Retrieve address of register CDR */
    data_reg_addr = (uint32_t) &((__LL_ADC_COMMON_INSTANCE(ADCx))->CDR);
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <LL_ADC_DMA_GetRegAddr+0x2c>)
 8008016:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 8008018:	68fb      	ldr	r3, [r7, #12]
}
 800801a:	4618      	mov	r0, r3
 800801c:	3714      	adds	r7, #20
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	5000030c 	.word	0x5000030c

0800802c <LL_ADC_SetGainCompensation>:
  *         0           Gain compensation will be disabled and value set to 0
  *         1 -> 16393  Gain compensation will be enabled with specified value
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetGainCompensation(ADC_TypeDef *ADCx, uint32_t GainCompensation)
{
 800802c:	b480      	push	{r7}
 800802e:	b083      	sub	sp, #12
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->GCOMP, ADC_GCOMP_GCOMPCOEFF, GainCompensation);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800803c:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8008040:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008044:	683a      	ldr	r2, [r7, #0]
 8008046:	431a      	orrs	r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_GCOMP, ((GainCompensation == 0UL) ? 0UL : 1UL) << ADC_CFGR2_GCOMP_Pos);
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	691b      	ldr	r3, [r3, #16]
 8008052:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	2a00      	cmp	r2, #0
 800805a:	d002      	beq.n	8008062 <LL_ADC_SetGainCompensation+0x36>
 800805c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008060:	e000      	b.n	8008064 <LL_ADC_SetGainCompensation+0x38>
 8008062:	2200      	movs	r2, #0
 8008064:	431a      	orrs	r2, r3
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	611a      	str	r2, [r3, #16]
}
 800806a:	bf00      	nop
 800806c:	370c      	adds	r7, #12
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr

08008076 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8008076:	b480      	push	{r7}
 8008078:	b087      	sub	sp, #28
 800807a:	af00      	add	r7, sp, #0
 800807c:	60f8      	str	r0, [r7, #12]
 800807e:	60b9      	str	r1, [r7, #8]
 8008080:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3330      	adds	r3, #48	@ 0x30
 8008086:	461a      	mov	r2, r3
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	009b      	lsls	r3, r3, #2
 800808e:	f003 030c 	and.w	r3, r3, #12
 8008092:	4413      	add	r3, r2
 8008094:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008096:	697b      	ldr	r3, [r7, #20]
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	f003 031f 	and.w	r3, r3, #31
 80080a0:	211f      	movs	r1, #31
 80080a2:	fa01 f303 	lsl.w	r3, r1, r3
 80080a6:	43db      	mvns	r3, r3
 80080a8:	401a      	ands	r2, r3
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	0e9b      	lsrs	r3, r3, #26
 80080ae:	f003 011f 	and.w	r1, r3, #31
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	f003 031f 	and.w	r3, r3, #31
 80080b8:	fa01 f303 	lsl.w	r3, r1, r3
 80080bc:	431a      	orrs	r2, r3
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80080c2:	bf00      	nop
 80080c4:	371c      	adds	r7, #28
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <LL_ADC_REG_SetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDMATransfer(ADC_TypeDef *ADCx, uint32_t DMATransfer)
{
 80080ce:	b480      	push	{r7}
 80080d0:	b083      	sub	sp, #12
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG, DMATransfer);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	68db      	ldr	r3, [r3, #12]
 80080dc:	f023 0203 	bic.w	r2, r3, #3
 80080e0:	683b      	ldr	r3, [r7, #0]
 80080e2:	431a      	orrs	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	60da      	str	r2, [r3, #12]
}
 80080e8:	bf00      	nop
 80080ea:	370c      	adds	r7, #12
 80080ec:	46bd      	mov	sp, r7
 80080ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f2:	4770      	bx	lr

080080f4 <LL_ADC_REG_GetDMATransfer>:
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_NONE
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_LIMITED
  *         @arg @ref LL_ADC_REG_DMA_TRANSFER_UNLIMITED
  */
__STATIC_INLINE uint32_t LL_ADC_REG_GetDMATransfer(const ADC_TypeDef *ADCx)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b083      	sub	sp, #12
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_DMAEN | ADC_CFGR_DMACFG));
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	68db      	ldr	r3, [r3, #12]
 8008100:	f003 0303 	and.w	r3, r3, #3
}
 8008104:	4618      	mov	r0, r3
 8008106:	370c      	adds	r7, #12
 8008108:	46bd      	mov	sp, r7
 800810a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810e:	4770      	bx	lr

08008110 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8008110:	b480      	push	{r7}
 8008112:	b087      	sub	sp, #28
 8008114:	af00      	add	r7, sp, #0
 8008116:	60f8      	str	r0, [r7, #12]
 8008118:	60b9      	str	r1, [r7, #8]
 800811a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	3314      	adds	r3, #20
 8008120:	461a      	mov	r2, r3
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	0e5b      	lsrs	r3, r3, #25
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	f003 0304 	and.w	r3, r3, #4
 800812c:	4413      	add	r3, r2
 800812e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8008130:	697b      	ldr	r3, [r7, #20]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	0d1b      	lsrs	r3, r3, #20
 8008138:	f003 031f 	and.w	r3, r3, #31
 800813c:	2107      	movs	r1, #7
 800813e:	fa01 f303 	lsl.w	r3, r1, r3
 8008142:	43db      	mvns	r3, r3
 8008144:	401a      	ands	r2, r3
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	0d1b      	lsrs	r3, r3, #20
 800814a:	f003 031f 	and.w	r3, r3, #31
 800814e:	6879      	ldr	r1, [r7, #4]
 8008150:	fa01 f303 	lsl.w	r3, r1, r3
 8008154:	431a      	orrs	r2, r3
 8008156:	697b      	ldr	r3, [r7, #20]
 8008158:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800815a:	bf00      	nop
 800815c:	371c      	adds	r7, #28
 800815e:	46bd      	mov	sp, r7
 8008160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008164:	4770      	bx	lr
	...

08008168 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8008168:	b480      	push	{r7}
 800816a:	b085      	sub	sp, #20
 800816c:	af00      	add	r7, sp, #0
 800816e:	60f8      	str	r0, [r7, #12]
 8008170:	60b9      	str	r1, [r7, #8]
 8008172:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008180:	43db      	mvns	r3, r3
 8008182:	401a      	ands	r2, r3
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f003 0318 	and.w	r3, r3, #24
 800818a:	4908      	ldr	r1, [pc, #32]	@ (80081ac <LL_ADC_SetChannelSingleDiff+0x44>)
 800818c:	40d9      	lsrs	r1, r3
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	400b      	ands	r3, r1
 8008192:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008196:	431a      	orrs	r2, r3
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800819e:	bf00      	nop
 80081a0:	3714      	adds	r7, #20
 80081a2:	46bd      	mov	sp, r7
 80081a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081a8:	4770      	bx	lr
 80081aa:	bf00      	nop
 80081ac:	0007ffff 	.word	0x0007ffff

080081b0 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80081b0:	b480      	push	{r7}
 80081b2:	b083      	sub	sp, #12
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80081c2:	f023 0303 	bic.w	r3, r3, #3
 80081c6:	683a      	ldr	r2, [r7, #0]
 80081c8:	431a      	orrs	r2, r3
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	611a      	str	r2, [r3, #16]
}
 80081ce:	bf00      	nop
 80081d0:	370c      	adds	r7, #12
 80081d2:	46bd      	mov	sp, r7
 80081d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d8:	4770      	bx	lr

080081da <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80081da:	b480      	push	{r7}
 80081dc:	b083      	sub	sp, #12
 80081de:	af00      	add	r7, sp, #0
 80081e0:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	689b      	ldr	r3, [r3, #8]
 80081e6:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80081ea:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80081ee:	687a      	ldr	r2, [r7, #4]
 80081f0:	6093      	str	r3, [r2, #8]
}
 80081f2:	bf00      	nop
 80081f4:	370c      	adds	r7, #12
 80081f6:	46bd      	mov	sp, r7
 80081f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fc:	4770      	bx	lr

080081fe <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80081fe:	b480      	push	{r7}
 8008200:	b083      	sub	sp, #12
 8008202:	af00      	add	r7, sp, #0
 8008204:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 800820e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8008212:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800821a:	bf00      	nop
 800821c:	370c      	adds	r7, #12
 800821e:	46bd      	mov	sp, r7
 8008220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008224:	4770      	bx	lr

08008226 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8008226:	b480      	push	{r7}
 8008228:	b083      	sub	sp, #12
 800822a:	af00      	add	r7, sp, #0
 800822c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008236:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800823a:	f043 0201 	orr.w	r2, r3, #1
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8008242:	bf00      	nop
 8008244:	370c      	adds	r7, #12
 8008246:	46bd      	mov	sp, r7
 8008248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824c:	4770      	bx	lr

0800824e <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 800824e:	b480      	push	{r7}
 8008250:	b083      	sub	sp, #12
 8008252:	af00      	add	r7, sp, #0
 8008254:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f003 0301 	and.w	r3, r3, #1
 800825e:	2b01      	cmp	r3, #1
 8008260:	d101      	bne.n	8008266 <LL_ADC_IsEnabled+0x18>
 8008262:	2301      	movs	r3, #1
 8008264:	e000      	b.n	8008268 <LL_ADC_IsEnabled+0x1a>
 8008266:	2300      	movs	r3, #0
}
 8008268:	4618      	mov	r0, r3
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t SingleDiff)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	689b      	ldr	r3, [r3, #8]
 8008282:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8008286:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8008290:	4313      	orrs	r3, r2
 8008292:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 800829a:	bf00      	nop
 800829c:	370c      	adds	r7, #12
 800829e:	46bd      	mov	sp, r7
 80082a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a4:	4770      	bx	lr

080082a6 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(const ADC_TypeDef *ADCx)
{
 80082a6:	b480      	push	{r7}
 80082a8:	b083      	sub	sp, #12
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80082b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80082ba:	d101      	bne.n	80082c0 <LL_ADC_IsCalibrationOnGoing+0x1a>
 80082bc:	2301      	movs	r3, #1
 80082be:	e000      	b.n	80082c2 <LL_ADC_IsCalibrationOnGoing+0x1c>
 80082c0:	2300      	movs	r3, #0
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	370c      	adds	r7, #12
 80082c6:	46bd      	mov	sp, r7
 80082c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082cc:	4770      	bx	lr

080082ce <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80082ce:	b480      	push	{r7}
 80082d0:	b083      	sub	sp, #12
 80082d2:	af00      	add	r7, sp, #0
 80082d4:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80082de:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80082e2:	f043 0204 	orr.w	r2, r3, #4
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80082ea:	bf00      	nop
 80082ec:	370c      	adds	r7, #12
 80082ee:	46bd      	mov	sp, r7
 80082f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f4:	4770      	bx	lr

080082f6 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(const ADC_TypeDef *ADCx)
{
 80082f6:	b480      	push	{r7}
 80082f8:	b083      	sub	sp, #12
 80082fa:	af00      	add	r7, sp, #0
 80082fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f003 0301 	and.w	r3, r3, #1
 8008306:	2b01      	cmp	r3, #1
 8008308:	d101      	bne.n	800830e <LL_ADC_IsActiveFlag_ADRDY+0x18>
 800830a:	2301      	movs	r3, #1
 800830c:	e000      	b.n	8008310 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 800830e:	2300      	movs	r3, #0
}
 8008310:	4618      	mov	r0, r3
 8008312:	370c      	adds	r7, #12
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <LL_DMA_EnableChannel>:
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 800832a:	4a0c      	ldr	r2, [pc, #48]	@ (800835c <LL_DMA_EnableChannel+0x40>)
 800832c:	683b      	ldr	r3, [r7, #0]
 800832e:	4413      	add	r3, r2
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	4413      	add	r3, r2
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4908      	ldr	r1, [pc, #32]	@ (800835c <LL_DMA_EnableChannel+0x40>)
 800833c:	683a      	ldr	r2, [r7, #0]
 800833e:	440a      	add	r2, r1
 8008340:	7812      	ldrb	r2, [r2, #0]
 8008342:	4611      	mov	r1, r2
 8008344:	68fa      	ldr	r2, [r7, #12]
 8008346:	440a      	add	r2, r1
 8008348:	f043 0301 	orr.w	r3, r3, #1
 800834c:	6013      	str	r3, [r2, #0]
}
 800834e:	bf00      	nop
 8008350:	3714      	adds	r7, #20
 8008352:	46bd      	mov	sp, r7
 8008354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	0801b920 	.word	0x0801b920

08008360 <LL_DMA_SetDataTransferDirection>:
{
 8008360:	b480      	push	{r7}
 8008362:	b087      	sub	sp, #28
 8008364:	af00      	add	r7, sp, #0
 8008366:	60f8      	str	r0, [r7, #12]
 8008368:	60b9      	str	r1, [r7, #8]
 800836a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8008370:	4a0e      	ldr	r2, [pc, #56]	@ (80083ac <LL_DMA_SetDataTransferDirection+0x4c>)
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4413      	add	r3, r2
 8008376:	781b      	ldrb	r3, [r3, #0]
 8008378:	461a      	mov	r2, r3
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	4413      	add	r3, r2
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008384:	f023 0310 	bic.w	r3, r3, #16
 8008388:	4908      	ldr	r1, [pc, #32]	@ (80083ac <LL_DMA_SetDataTransferDirection+0x4c>)
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	440a      	add	r2, r1
 800838e:	7812      	ldrb	r2, [r2, #0]
 8008390:	4611      	mov	r1, r2
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	440a      	add	r2, r1
 8008396:	4611      	mov	r1, r2
 8008398:	687a      	ldr	r2, [r7, #4]
 800839a:	4313      	orrs	r3, r2
 800839c:	600b      	str	r3, [r1, #0]
}
 800839e:	bf00      	nop
 80083a0:	371c      	adds	r7, #28
 80083a2:	46bd      	mov	sp, r7
 80083a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	0801b920 	.word	0x0801b920

080083b0 <LL_DMA_SetMode>:
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_CIRC,
 80083c0:	4a0d      	ldr	r2, [pc, #52]	@ (80083f8 <LL_DMA_SetMode+0x48>)
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4413      	add	r3, r2
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	461a      	mov	r2, r3
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	4413      	add	r3, r2
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f023 0220 	bic.w	r2, r3, #32
 80083d4:	4908      	ldr	r1, [pc, #32]	@ (80083f8 <LL_DMA_SetMode+0x48>)
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	440b      	add	r3, r1
 80083da:	781b      	ldrb	r3, [r3, #0]
 80083dc:	4619      	mov	r1, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	440b      	add	r3, r1
 80083e2:	4619      	mov	r1, r3
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	4313      	orrs	r3, r2
 80083e8:	600b      	str	r3, [r1, #0]
}
 80083ea:	bf00      	nop
 80083ec:	371c      	adds	r7, #28
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr
 80083f6:	bf00      	nop
 80083f8:	0801b920 	.word	0x0801b920

080083fc <LL_DMA_SetPeriphIncMode>:
{
 80083fc:	b480      	push	{r7}
 80083fe:	b087      	sub	sp, #28
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PINC,
 800840c:	4a0d      	ldr	r2, [pc, #52]	@ (8008444 <LL_DMA_SetPeriphIncMode+0x48>)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	4413      	add	r3, r2
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	697b      	ldr	r3, [r7, #20]
 8008418:	4413      	add	r3, r2
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8008420:	4908      	ldr	r1, [pc, #32]	@ (8008444 <LL_DMA_SetPeriphIncMode+0x48>)
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	440b      	add	r3, r1
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	4619      	mov	r1, r3
 800842a:	697b      	ldr	r3, [r7, #20]
 800842c:	440b      	add	r3, r1
 800842e:	4619      	mov	r1, r3
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	4313      	orrs	r3, r2
 8008434:	600b      	str	r3, [r1, #0]
}
 8008436:	bf00      	nop
 8008438:	371c      	adds	r7, #28
 800843a:	46bd      	mov	sp, r7
 800843c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008440:	4770      	bx	lr
 8008442:	bf00      	nop
 8008444:	0801b920 	.word	0x0801b920

08008448 <LL_DMA_SetMemoryIncMode>:
{
 8008448:	b480      	push	{r7}
 800844a:	b087      	sub	sp, #28
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MINC,
 8008458:	4a0d      	ldr	r2, [pc, #52]	@ (8008490 <LL_DMA_SetMemoryIncMode+0x48>)
 800845a:	68bb      	ldr	r3, [r7, #8]
 800845c:	4413      	add	r3, r2
 800845e:	781b      	ldrb	r3, [r3, #0]
 8008460:	461a      	mov	r2, r3
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	4413      	add	r3, r2
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800846c:	4908      	ldr	r1, [pc, #32]	@ (8008490 <LL_DMA_SetMemoryIncMode+0x48>)
 800846e:	68bb      	ldr	r3, [r7, #8]
 8008470:	440b      	add	r3, r1
 8008472:	781b      	ldrb	r3, [r3, #0]
 8008474:	4619      	mov	r1, r3
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	440b      	add	r3, r1
 800847a:	4619      	mov	r1, r3
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	4313      	orrs	r3, r2
 8008480:	600b      	str	r3, [r1, #0]
}
 8008482:	bf00      	nop
 8008484:	371c      	adds	r7, #28
 8008486:	46bd      	mov	sp, r7
 8008488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848c:	4770      	bx	lr
 800848e:	bf00      	nop
 8008490:	0801b920 	.word	0x0801b920

08008494 <LL_DMA_SetPeriphSize>:
{
 8008494:	b480      	push	{r7}
 8008496:	b087      	sub	sp, #28
 8008498:	af00      	add	r7, sp, #0
 800849a:	60f8      	str	r0, [r7, #12]
 800849c:	60b9      	str	r1, [r7, #8]
 800849e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PSIZE,
 80084a4:	4a0d      	ldr	r2, [pc, #52]	@ (80084dc <LL_DMA_SetPeriphSize+0x48>)
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	4413      	add	r3, r2
 80084aa:	781b      	ldrb	r3, [r3, #0]
 80084ac:	461a      	mov	r2, r3
 80084ae:	697b      	ldr	r3, [r7, #20]
 80084b0:	4413      	add	r3, r2
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80084b8:	4908      	ldr	r1, [pc, #32]	@ (80084dc <LL_DMA_SetPeriphSize+0x48>)
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	440b      	add	r3, r1
 80084be:	781b      	ldrb	r3, [r3, #0]
 80084c0:	4619      	mov	r1, r3
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	440b      	add	r3, r1
 80084c6:	4619      	mov	r1, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	600b      	str	r3, [r1, #0]
}
 80084ce:	bf00      	nop
 80084d0:	371c      	adds	r7, #28
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr
 80084da:	bf00      	nop
 80084dc:	0801b920 	.word	0x0801b920

080084e0 <LL_DMA_SetMemorySize>:
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_MSIZE,
 80084f0:	4a0d      	ldr	r2, [pc, #52]	@ (8008528 <LL_DMA_SetMemorySize+0x48>)
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	4413      	add	r3, r2
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	461a      	mov	r2, r3
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	4413      	add	r3, r2
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8008504:	4908      	ldr	r1, [pc, #32]	@ (8008528 <LL_DMA_SetMemorySize+0x48>)
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	440b      	add	r3, r1
 800850a:	781b      	ldrb	r3, [r3, #0]
 800850c:	4619      	mov	r1, r3
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	440b      	add	r3, r1
 8008512:	4619      	mov	r1, r3
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	4313      	orrs	r3, r2
 8008518:	600b      	str	r3, [r1, #0]
}
 800851a:	bf00      	nop
 800851c:	371c      	adds	r7, #28
 800851e:	46bd      	mov	sp, r7
 8008520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008524:	4770      	bx	lr
 8008526:	bf00      	nop
 8008528:	0801b920 	.word	0x0801b920

0800852c <LL_DMA_SetChannelPriorityLevel>:
{
 800852c:	b480      	push	{r7}
 800852e:	b087      	sub	sp, #28
 8008530:	af00      	add	r7, sp, #0
 8008532:	60f8      	str	r0, [r7, #12]
 8008534:	60b9      	str	r1, [r7, #8]
 8008536:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_PL,
 800853c:	4a0d      	ldr	r2, [pc, #52]	@ (8008574 <LL_DMA_SetChannelPriorityLevel+0x48>)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	4413      	add	r3, r2
 8008542:	781b      	ldrb	r3, [r3, #0]
 8008544:	461a      	mov	r2, r3
 8008546:	697b      	ldr	r3, [r7, #20]
 8008548:	4413      	add	r3, r2
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8008550:	4908      	ldr	r1, [pc, #32]	@ (8008574 <LL_DMA_SetChannelPriorityLevel+0x48>)
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	440b      	add	r3, r1
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	440b      	add	r3, r1
 800855e:	4619      	mov	r1, r3
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	4313      	orrs	r3, r2
 8008564:	600b      	str	r3, [r1, #0]
}
 8008566:	bf00      	nop
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	0801b920 	.word	0x0801b920

08008578 <LL_DMA_SetDataLength>:
{
 8008578:	b480      	push	{r7}
 800857a:	b087      	sub	sp, #28
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 8008588:	4a0d      	ldr	r2, [pc, #52]	@ (80085c0 <LL_DMA_SetDataLength+0x48>)
 800858a:	68bb      	ldr	r3, [r7, #8]
 800858c:	4413      	add	r3, r2
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	461a      	mov	r2, r3
 8008592:	697b      	ldr	r3, [r7, #20]
 8008594:	4413      	add	r3, r2
 8008596:	685b      	ldr	r3, [r3, #4]
 8008598:	0c1b      	lsrs	r3, r3, #16
 800859a:	041b      	lsls	r3, r3, #16
 800859c:	4908      	ldr	r1, [pc, #32]	@ (80085c0 <LL_DMA_SetDataLength+0x48>)
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	440a      	add	r2, r1
 80085a2:	7812      	ldrb	r2, [r2, #0]
 80085a4:	4611      	mov	r1, r2
 80085a6:	697a      	ldr	r2, [r7, #20]
 80085a8:	440a      	add	r2, r1
 80085aa:	4611      	mov	r1, r2
 80085ac:	687a      	ldr	r2, [r7, #4]
 80085ae:	4313      	orrs	r3, r2
 80085b0:	604b      	str	r3, [r1, #4]
}
 80085b2:	bf00      	nop
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr
 80085be:	bf00      	nop
 80085c0:	0801b920 	.word	0x0801b920

080085c4 <LL_DMA_ConfigAddresses>:
{
 80085c4:	b480      	push	{r7}
 80085c6:	b087      	sub	sp, #28
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	60b9      	str	r1, [r7, #8]
 80085ce:	607a      	str	r2, [r7, #4]
 80085d0:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80085d6:	6a3b      	ldr	r3, [r7, #32]
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d114      	bne.n	8008606 <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80085dc:	4a17      	ldr	r2, [pc, #92]	@ (800863c <LL_DMA_ConfigAddresses+0x78>)
 80085de:	68bb      	ldr	r3, [r7, #8]
 80085e0:	4413      	add	r3, r2
 80085e2:	781b      	ldrb	r3, [r3, #0]
 80085e4:	461a      	mov	r2, r3
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	4413      	add	r3, r2
 80085ea:	461a      	mov	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80085f0:	4a12      	ldr	r2, [pc, #72]	@ (800863c <LL_DMA_ConfigAddresses+0x78>)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	4413      	add	r3, r2
 80085f6:	781b      	ldrb	r3, [r3, #0]
 80085f8:	461a      	mov	r2, r3
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	4413      	add	r3, r2
 80085fe:	461a      	mov	r2, r3
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	6093      	str	r3, [r2, #8]
}
 8008604:	e013      	b.n	800862e <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 8008606:	4a0d      	ldr	r2, [pc, #52]	@ (800863c <LL_DMA_ConfigAddresses+0x78>)
 8008608:	68bb      	ldr	r3, [r7, #8]
 800860a:	4413      	add	r3, r2
 800860c:	781b      	ldrb	r3, [r3, #0]
 800860e:	461a      	mov	r2, r3
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	4413      	add	r3, r2
 8008614:	461a      	mov	r2, r3
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 800861a:	4a08      	ldr	r2, [pc, #32]	@ (800863c <LL_DMA_ConfigAddresses+0x78>)
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	4413      	add	r3, r2
 8008620:	781b      	ldrb	r3, [r3, #0]
 8008622:	461a      	mov	r2, r3
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	4413      	add	r3, r2
 8008628:	461a      	mov	r2, r3
 800862a:	683b      	ldr	r3, [r7, #0]
 800862c:	60d3      	str	r3, [r2, #12]
}
 800862e:	bf00      	nop
 8008630:	371c      	adds	r7, #28
 8008632:	46bd      	mov	sp, r7
 8008634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008638:	4770      	bx	lr
 800863a:	bf00      	nop
 800863c:	0801b920 	.word	0x0801b920

08008640 <LL_DMA_SetPeriphRequest>:
{
 8008640:	b480      	push	{r7}
 8008642:	b087      	sub	sp, #28
 8008644:	af00      	add	r7, sp, #0
 8008646:	60f8      	str	r0, [r7, #12]
 8008648:	60b9      	str	r1, [r7, #8]
 800864a:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	0a9b      	lsrs	r3, r3, #10
 8008650:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8008654:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8008658:	00db      	lsls	r3, r3, #3
 800865a:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800865c:	68ba      	ldr	r2, [r7, #8]
 800865e:	697b      	ldr	r3, [r7, #20]
 8008660:	4413      	add	r3, r2
 8008662:	009b      	lsls	r3, r3, #2
 8008664:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008668:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8008672:	68ba      	ldr	r2, [r7, #8]
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	4413      	add	r3, r2
 8008678:	009b      	lsls	r3, r3, #2
 800867a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800867e:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	430a      	orrs	r2, r1
 8008686:	601a      	str	r2, [r3, #0]
}
 8008688:	bf00      	nop
 800868a:	371c      	adds	r7, #28
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <LL_AHB1_GRP1_EnableClock>:
{
 8008694:	b480      	push	{r7}
 8008696:	b085      	sub	sp, #20
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800869c:	4b08      	ldr	r3, [pc, #32]	@ (80086c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800869e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086a0:	4907      	ldr	r1, [pc, #28]	@ (80086c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80086a8:	4b05      	ldr	r3, [pc, #20]	@ (80086c0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80086aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	4013      	ands	r3, r2
 80086b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80086b2:	68fb      	ldr	r3, [r7, #12]
}
 80086b4:	bf00      	nop
 80086b6:	3714      	adds	r7, #20
 80086b8:	46bd      	mov	sp, r7
 80086ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086be:	4770      	bx	lr
 80086c0:	40021000 	.word	0x40021000

080086c4 <LL_AHB2_GRP1_EnableClock>:
{
 80086c4:	b480      	push	{r7}
 80086c6:	b085      	sub	sp, #20
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80086cc:	4b08      	ldr	r3, [pc, #32]	@ (80086f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086ce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086d0:	4907      	ldr	r1, [pc, #28]	@ (80086f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	4313      	orrs	r3, r2
 80086d6:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80086d8:	4b05      	ldr	r3, [pc, #20]	@ (80086f0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80086da:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4013      	ands	r3, r2
 80086e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80086e2:	68fb      	ldr	r3, [r7, #12]
}
 80086e4:	bf00      	nop
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40021000 	.word	0x40021000

080086f4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80086f4:	b480      	push	{r7}
 80086f6:	b08b      	sub	sp, #44	@ 0x2c
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	60f8      	str	r0, [r7, #12]
 80086fc:	60b9      	str	r1, [r7, #8]
 80086fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681a      	ldr	r2, [r3, #0]
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008708:	697b      	ldr	r3, [r7, #20]
 800870a:	fa93 f3a3 	rbit	r3, r3
 800870e:	613b      	str	r3, [r7, #16]
  return result;
 8008710:	693b      	ldr	r3, [r7, #16]
 8008712:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d101      	bne.n	800871e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800871a:	2320      	movs	r3, #32
 800871c:	e003      	b.n	8008726 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	fab3 f383 	clz	r3, r3
 8008724:	b2db      	uxtb	r3, r3
 8008726:	005b      	lsls	r3, r3, #1
 8008728:	2103      	movs	r1, #3
 800872a:	fa01 f303 	lsl.w	r3, r1, r3
 800872e:	43db      	mvns	r3, r3
 8008730:	401a      	ands	r2, r3
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8008736:	6a3b      	ldr	r3, [r7, #32]
 8008738:	fa93 f3a3 	rbit	r3, r3
 800873c:	61fb      	str	r3, [r7, #28]
  return result;
 800873e:	69fb      	ldr	r3, [r7, #28]
 8008740:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008744:	2b00      	cmp	r3, #0
 8008746:	d101      	bne.n	800874c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8008748:	2320      	movs	r3, #32
 800874a:	e003      	b.n	8008754 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800874c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874e:	fab3 f383 	clz	r3, r3
 8008752:	b2db      	uxtb	r3, r3
 8008754:	005b      	lsls	r3, r3, #1
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	431a      	orrs	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	601a      	str	r2, [r3, #0]
}
 8008762:	bf00      	nop
 8008764:	372c      	adds	r7, #44	@ 0x2c
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr

0800876e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 800876e:	b480      	push	{r7}
 8008770:	b085      	sub	sp, #20
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	685a      	ldr	r2, [r3, #4]
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	43db      	mvns	r3, r3
 8008782:	401a      	ands	r2, r3
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	6879      	ldr	r1, [r7, #4]
 8008788:	fb01 f303 	mul.w	r3, r1, r3
 800878c:	431a      	orrs	r2, r3
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	605a      	str	r2, [r3, #4]
}
 8008792:	bf00      	nop
 8008794:	3714      	adds	r7, #20
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800879e:	b480      	push	{r7}
 80087a0:	b08b      	sub	sp, #44	@ 0x2c
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	60f8      	str	r0, [r7, #12]
 80087a6:	60b9      	str	r1, [r7, #8]
 80087a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80087aa:	68fb      	ldr	r3, [r7, #12]
 80087ac:	689a      	ldr	r2, [r3, #8]
 80087ae:	68bb      	ldr	r3, [r7, #8]
 80087b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087b2:	697b      	ldr	r3, [r7, #20]
 80087b4:	fa93 f3a3 	rbit	r3, r3
 80087b8:	613b      	str	r3, [r7, #16]
  return result;
 80087ba:	693b      	ldr	r3, [r7, #16]
 80087bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80087be:	69bb      	ldr	r3, [r7, #24]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d101      	bne.n	80087c8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80087c4:	2320      	movs	r3, #32
 80087c6:	e003      	b.n	80087d0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80087c8:	69bb      	ldr	r3, [r7, #24]
 80087ca:	fab3 f383 	clz	r3, r3
 80087ce:	b2db      	uxtb	r3, r3
 80087d0:	005b      	lsls	r3, r3, #1
 80087d2:	2103      	movs	r1, #3
 80087d4:	fa01 f303 	lsl.w	r3, r1, r3
 80087d8:	43db      	mvns	r3, r3
 80087da:	401a      	ands	r2, r3
 80087dc:	68bb      	ldr	r3, [r7, #8]
 80087de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80087e0:	6a3b      	ldr	r3, [r7, #32]
 80087e2:	fa93 f3a3 	rbit	r3, r3
 80087e6:	61fb      	str	r3, [r7, #28]
  return result;
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80087ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d101      	bne.n	80087f6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80087f2:	2320      	movs	r3, #32
 80087f4:	e003      	b.n	80087fe <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80087f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80087f8:	fab3 f383 	clz	r3, r3
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	6879      	ldr	r1, [r7, #4]
 8008802:	fa01 f303 	lsl.w	r3, r1, r3
 8008806:	431a      	orrs	r2, r3
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800880c:	bf00      	nop
 800880e:	372c      	adds	r7, #44	@ 0x2c
 8008810:	46bd      	mov	sp, r7
 8008812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008816:	4770      	bx	lr

08008818 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8008818:	b480      	push	{r7}
 800881a:	b08b      	sub	sp, #44	@ 0x2c
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	68da      	ldr	r2, [r3, #12]
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	fa93 f3a3 	rbit	r3, r3
 8008832:	613b      	str	r3, [r7, #16]
  return result;
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	2b00      	cmp	r3, #0
 800883c:	d101      	bne.n	8008842 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800883e:	2320      	movs	r3, #32
 8008840:	e003      	b.n	800884a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	fab3 f383 	clz	r3, r3
 8008848:	b2db      	uxtb	r3, r3
 800884a:	005b      	lsls	r3, r3, #1
 800884c:	2103      	movs	r1, #3
 800884e:	fa01 f303 	lsl.w	r3, r1, r3
 8008852:	43db      	mvns	r3, r3
 8008854:	401a      	ands	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800885a:	6a3b      	ldr	r3, [r7, #32]
 800885c:	fa93 f3a3 	rbit	r3, r3
 8008860:	61fb      	str	r3, [r7, #28]
  return result;
 8008862:	69fb      	ldr	r3, [r7, #28]
 8008864:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8008866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800886c:	2320      	movs	r3, #32
 800886e:	e003      	b.n	8008878 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8008870:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008872:	fab3 f383 	clz	r3, r3
 8008876:	b2db      	uxtb	r3, r3
 8008878:	005b      	lsls	r3, r3, #1
 800887a:	6879      	ldr	r1, [r7, #4]
 800887c:	fa01 f303 	lsl.w	r3, r1, r3
 8008880:	431a      	orrs	r2, r3
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	60da      	str	r2, [r3, #12]
}
 8008886:	bf00      	nop
 8008888:	372c      	adds	r7, #44	@ 0x2c
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr

08008892 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8008892:	b480      	push	{r7}
 8008894:	b083      	sub	sp, #12
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	683a      	ldr	r2, [r7, #0]
 80088a0:	619a      	str	r2, [r3, #24]
}
 80088a2:	bf00      	nop
 80088a4:	370c      	adds	r7, #12
 80088a6:	46bd      	mov	sp, r7
 80088a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ac:	4770      	bx	lr

080088ae <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80088ae:	b480      	push	{r7}
 80088b0:	b083      	sub	sp, #12
 80088b2:	af00      	add	r7, sp, #0
 80088b4:	6078      	str	r0, [r7, #4]
 80088b6:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	683a      	ldr	r2, [r7, #0]
 80088bc:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80088be:	bf00      	nop
 80088c0:	370c      	adds	r7, #12
 80088c2:	46bd      	mov	sp, r7
 80088c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c8:	4770      	bx	lr
	...

080088cc <LL_EXTI_EnableIT_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 80088cc:	b480      	push	{r7}
 80088ce:	b083      	sub	sp, #12
 80088d0:	af00      	add	r7, sp, #0
 80088d2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 80088d4:	4b05      	ldr	r3, [pc, #20]	@ (80088ec <LL_EXTI_EnableIT_0_31+0x20>)
 80088d6:	681a      	ldr	r2, [r3, #0]
 80088d8:	4904      	ldr	r1, [pc, #16]	@ (80088ec <LL_EXTI_EnableIT_0_31+0x20>)
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4313      	orrs	r3, r2
 80088de:	600b      	str	r3, [r1, #0]
}
 80088e0:	bf00      	nop
 80088e2:	370c      	adds	r7, #12
 80088e4:	46bd      	mov	sp, r7
 80088e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ea:	4770      	bx	lr
 80088ec:	40010400 	.word	0x40010400

080088f0 <LL_EXTI_EnableFallingTrig_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b083      	sub	sp, #12
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80088f8:	4b05      	ldr	r3, [pc, #20]	@ (8008910 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80088fa:	68da      	ldr	r2, [r3, #12]
 80088fc:	4904      	ldr	r1, [pc, #16]	@ (8008910 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4313      	orrs	r3, r2
 8008902:	60cb      	str	r3, [r1, #12]
}
 8008904:	bf00      	nop
 8008906:	370c      	adds	r7, #12
 8008908:	46bd      	mov	sp, r7
 800890a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890e:	4770      	bx	lr
 8008910:	40010400 	.word	0x40010400

08008914 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8008914:	b480      	push	{r7}
 8008916:	b087      	sub	sp, #28
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0x3U], (Line >> 16U), Port << (POSITION_VAL((Line >> 16U)) & 0x1FU) );
 800891e:	4a18      	ldr	r2, [pc, #96]	@ (8008980 <LL_SYSCFG_SetEXTISource+0x6c>)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	f003 0303 	and.w	r3, r3, #3
 8008926:	3302      	adds	r3, #2
 8008928:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	0c1b      	lsrs	r3, r3, #16
 8008930:	43db      	mvns	r3, r3
 8008932:	ea02 0103 	and.w	r1, r2, r3
 8008936:	683b      	ldr	r3, [r7, #0]
 8008938:	0c1b      	lsrs	r3, r3, #16
 800893a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800893c:	693b      	ldr	r3, [r7, #16]
 800893e:	fa93 f3a3 	rbit	r3, r3
 8008942:	60fb      	str	r3, [r7, #12]
  return result;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8008948:	697b      	ldr	r3, [r7, #20]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <LL_SYSCFG_SetEXTISource+0x3e>
    return 32U;
 800894e:	2320      	movs	r3, #32
 8008950:	e003      	b.n	800895a <LL_SYSCFG_SetEXTISource+0x46>
  return __builtin_clz(value);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	fab3 f383 	clz	r3, r3
 8008958:	b2db      	uxtb	r3, r3
 800895a:	f003 031f 	and.w	r3, r3, #31
 800895e:	687a      	ldr	r2, [r7, #4]
 8008960:	409a      	lsls	r2, r3
 8008962:	4807      	ldr	r0, [pc, #28]	@ (8008980 <LL_SYSCFG_SetEXTISource+0x6c>)
 8008964:	683b      	ldr	r3, [r7, #0]
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	430a      	orrs	r2, r1
 800896c:	3302      	adds	r3, #2
 800896e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8008972:	bf00      	nop
 8008974:	371c      	adds	r7, #28
 8008976:	46bd      	mov	sp, r7
 8008978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897c:	4770      	bx	lr
 800897e:	bf00      	nop
 8008980:	40010000 	.word	0x40010000

08008984 <LL_RCC_SetADCClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ADCxSource)
{
 8008984:	b480      	push	{r7}
 8008986:	b083      	sub	sp, #12
 8008988:	af00      	add	r7, sp, #0
 800898a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, 3U << ((ADCxSource & 0x001F0000U) >> 16U), ((ADCxSource & 0x000000FFU) << ((ADCxSource & 0x001F0000U) >> 16U)));
 800898c:	4b0e      	ldr	r3, [pc, #56]	@ (80089c8 <LL_RCC_SetADCClockSource+0x44>)
 800898e:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	0c1b      	lsrs	r3, r3, #16
 8008996:	f003 031f 	and.w	r3, r3, #31
 800899a:	2103      	movs	r1, #3
 800899c:	fa01 f303 	lsl.w	r3, r1, r3
 80089a0:	43db      	mvns	r3, r3
 80089a2:	401a      	ands	r2, r3
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	b2d9      	uxtb	r1, r3
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	0c1b      	lsrs	r3, r3, #16
 80089ac:	f003 031f 	and.w	r3, r3, #31
 80089b0:	fa01 f303 	lsl.w	r3, r1, r3
 80089b4:	4904      	ldr	r1, [pc, #16]	@ (80089c8 <LL_RCC_SetADCClockSource+0x44>)
 80089b6:	4313      	orrs	r3, r2
 80089b8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
}
 80089bc:	bf00      	nop
 80089be:	370c      	adds	r7, #12
 80089c0:	46bd      	mov	sp, r7
 80089c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c6:	4770      	bx	lr
 80089c8:	40021000 	.word	0x40021000

080089cc <BSP_USBPD_PWR_Init>:
  * @brief  Global initialization of PWR resource used by USB-PD
  * @param  PortNum Type-C port identifier
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_Init(uint32_t PortNum)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b086      	sub	sp, #24
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80089d4:	2300      	movs	r3, #0
 80089d6:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d003      	beq.n	80089e6 <BSP_USBPD_PWR_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80089de:	f06f 0301 	mvn.w	r3, #1
 80089e2:	60fb      	str	r3, [r7, #12]
 80089e4:	e066      	b.n	8008ab4 <BSP_USBPD_PWR_Init+0xe8>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_Init --");
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	b2d9      	uxtb	r1, r3
 80089ea:	2318      	movs	r3, #24
 80089ec:	9300      	str	r3, [sp, #0]
 80089ee:	4b34      	ldr	r3, [pc, #208]	@ (8008ac0 <BSP_USBPD_PWR_Init+0xf4>)
 80089f0:	2200      	movs	r2, #0
 80089f2:	2006      	movs	r0, #6
 80089f4:	f005 fe08 	bl	800e608 <USBPD_TRACE_Add>

    if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 0U)
 80089f8:	4932      	ldr	r1, [pc, #200]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 80089fa:	687a      	ldr	r2, [r7, #4]
 80089fc:	4613      	mov	r3, r2
 80089fe:	005b      	lsls	r3, r3, #1
 8008a00:	4413      	add	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	440b      	add	r3, r1
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d153      	bne.n	8008ab4 <BSP_USBPD_PWR_Init+0xe8>
    {
      /* Initialisation according to HW configuration type of port */
      switch (USBPD_PWR_Port_Configs[PortNum].Type)
 8008a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8008ac8 <BSP_USBPD_PWR_Init+0xfc>)
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008a14:	2b02      	cmp	r3, #2
 8008a16:	d13d      	bne.n	8008a94 <BSP_USBPD_PWR_Init+0xc8>
      {
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
          /* Set default Role to SRC */
          USBPD_PWR_Port_Status[PortNum].PwrRole = POWER_ROLE_SOURCE;
 8008a18:	492a      	ldr	r1, [pc, #168]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 8008a1a:	687a      	ldr	r2, [r7, #4]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	005b      	lsls	r3, r3, #1
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	440b      	add	r3, r1
 8008a26:	3302      	adds	r3, #2
 8008a28:	2200      	movs	r2, #0
 8008a2a:	701a      	strb	r2, [r3, #0]

          /* Set default Power Mode to Hibernate */
          USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_HIBERNATE;
 8008a2c:	4925      	ldr	r1, [pc, #148]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 8008a2e:	687a      	ldr	r2, [r7, #4]
 8008a30:	4613      	mov	r3, r2
 8008a32:	005b      	lsls	r3, r3, #1
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	3303      	adds	r3, #3
 8008a3c:	2201      	movs	r2, #1
 8008a3e:	701a      	strb	r2, [r3, #0]

          /* Reset port callback for VBUS detection event */
          USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = NULL;
 8008a40:	4920      	ldr	r1, [pc, #128]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	4613      	mov	r3, r2
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	4413      	add	r3, r2
 8008a4a:	009b      	lsls	r3, r3, #2
 8008a4c:	440b      	add	r3, r1
 8008a4e:	3308      	adds	r3, #8
 8008a50:	2200      	movs	r2, #0
 8008a52:	601a      	str	r2, [r3, #0]

          /* Reset last detected fault Tick */
          USBPD_PWR_Port_Status[PortNum].LastFaultTick = 0;
 8008a54:	491b      	ldr	r1, [pc, #108]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 8008a56:	687a      	ldr	r2, [r7, #4]
 8008a58:	4613      	mov	r3, r2
 8008a5a:	005b      	lsls	r3, r3, #1
 8008a5c:	4413      	add	r3, r2
 8008a5e:	009b      	lsls	r3, r3, #2
 8008a60:	440b      	add	r3, r1
 8008a62:	3304      	adds	r3, #4
 8008a64:	2200      	movs	r2, #0
 8008a66:	601a      	str	r2, [r3, #0]
#if !defined(USBPD_CONFIG_MX)
          /* Initialize required GPIOs */
          PWR_TCPP0203_GPIOConfigInit(PortNum);
 8008a68:	6878      	ldr	r0, [r7, #4]
 8008a6a:	f000 fb91 	bl	8009190 <PWR_TCPP0203_GPIOConfigInit>

          /* Initialize EXTI for FLGn signal */
          PWR_TCPP0203_ITConfigInit(PortNum);
 8008a6e:	6878      	ldr	r0, [r7, #4]
 8008a70:	f000 fd2e 	bl	80094d0 <PWR_TCPP0203_ITConfigInit>

          /* Enable component */
          TCPP0203_PORT0_ENABLE_GPIO_SET();
 8008a74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8008a78:	4814      	ldr	r0, [pc, #80]	@ (8008acc <BSP_USBPD_PWR_Init+0x100>)
 8008a7a:	f7ff ff0a 	bl	8008892 <LL_GPIO_SetOutputPin>
#endif /* !USBPD_CONFIG_MX */
          /* Initialize required BUS for communication */
          ret = PWR_TCPP0203_BUSConfigInit(PortNum, USBPD_PWR_Port_Configs[PortNum].Address);
 8008a7e:	4a12      	ldr	r2, [pc, #72]	@ (8008ac8 <BSP_USBPD_PWR_Init+0xfc>)
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	4413      	add	r3, r2
 8008a86:	785b      	ldrb	r3, [r3, #1]
 8008a88:	4619      	mov	r1, r3
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 fd70 	bl	8009570 <PWR_TCPP0203_BUSConfigInit>
 8008a90:	60f8      	str	r0, [r7, #12]
          break;
 8008a92:	e003      	b.n	8008a9c <BSP_USBPD_PWR_Init+0xd0>

        case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
        case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
        default:
          ret = BSP_ERROR_WRONG_PARAM;
 8008a94:	f06f 0301 	mvn.w	r3, #1
 8008a98:	60fb      	str	r3, [r7, #12]
          break;
 8008a9a:	bf00      	nop
      }

      if (ret == BSP_ERROR_NONE)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d108      	bne.n	8008ab4 <BSP_USBPD_PWR_Init+0xe8>
      {
        /* Set Initialisation flag */
        USBPD_PWR_Port_Status[PortNum].IsInitialized = 1U;
 8008aa2:	4908      	ldr	r1, [pc, #32]	@ (8008ac4 <BSP_USBPD_PWR_Init+0xf8>)
 8008aa4:	687a      	ldr	r2, [r7, #4]
 8008aa6:	4613      	mov	r3, r2
 8008aa8:	005b      	lsls	r3, r3, #1
 8008aaa:	4413      	add	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	440b      	add	r3, r1
 8008ab0:	2201      	movs	r2, #1
 8008ab2:	701a      	strb	r2, [r3, #0]
      }
    }
  }
  return ret;
 8008ab4:	68fb      	ldr	r3, [r7, #12]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3710      	adds	r7, #16
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	0801ae0c 	.word	0x0801ae0c
 8008ac4:	20000ab0 	.word	0x20000ab0
 8008ac8:	20000070 	.word	0x20000070
 8008acc:	48000800 	.word	0x48000800

08008ad0 <BSP_USBPD_PWR_SetRole>:
  *         @arg @ref POWER_ROLE_SOURCE
  *         @arg @ref POWER_ROLE_SINK
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetRole(uint32_t PortNum, USBPD_PWR_PowerRoleTypeDef Role)
{
 8008ad0:	b590      	push	{r4, r7, lr}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af02      	add	r7, sp, #8
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	460b      	mov	r3, r1
 8008ada:	70fb      	strb	r3, [r7, #3]
  int32_t ret = BSP_ERROR_NONE;
 8008adc:	2300      	movs	r3, #0
 8008ade:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d003      	beq.n	8008aee <BSP_USBPD_PWR_SetRole+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ae6:	f06f 0301 	mvn.w	r3, #1
 8008aea:	60fb      	str	r3, [r7, #12]
 8008aec:	e046      	b.n	8008b7c <BSP_USBPD_PWR_SetRole+0xac>
  }
  else
  {
    switch (Role)
 8008aee:	78fb      	ldrb	r3, [r7, #3]
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d13e      	bne.n	8008b72 <BSP_USBPD_PWR_SetRole+0xa2>
    {
      case POWER_ROLE_SOURCE:
        /* Port Role is now SRC */
        BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetRole : SRC --");
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	b2d9      	uxtb	r1, r3
 8008af8:	2321      	movs	r3, #33	@ 0x21
 8008afa:	9300      	str	r3, [sp, #0]
 8008afc:	4b22      	ldr	r3, [pc, #136]	@ (8008b88 <BSP_USBPD_PWR_SetRole+0xb8>)
 8008afe:	2200      	movs	r2, #0
 8008b00:	2006      	movs	r0, #6
 8008b02:	f005 fd81 	bl	800e608 <USBPD_TRACE_Add>
        /* Set port power Role */
        USBPD_PWR_Port_Status[PortNum].PwrRole = Role;
 8008b06:	4921      	ldr	r1, [pc, #132]	@ (8008b8c <BSP_USBPD_PWR_SetRole+0xbc>)
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	4613      	mov	r3, r2
 8008b0c:	005b      	lsls	r3, r3, #1
 8008b0e:	4413      	add	r3, r2
 8008b10:	009b      	lsls	r3, r3, #2
 8008b12:	440b      	add	r3, r1
 8008b14:	3302      	adds	r3, #2
 8008b16:	78fa      	ldrb	r2, [r7, #3]
 8008b18:	701a      	strb	r2, [r3, #0]

        /* Ensure that TCPP0203 mode is not set to Hibernate */
        if (USBPD_PWR_Port_Status[PortNum].PwrSavingMode == USBPD_PWR_MODE_HIBERNATE)
 8008b1a:	491c      	ldr	r1, [pc, #112]	@ (8008b8c <BSP_USBPD_PWR_SetRole+0xbc>)
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	4613      	mov	r3, r2
 8008b20:	005b      	lsls	r3, r3, #1
 8008b22:	4413      	add	r3, r2
 8008b24:	009b      	lsls	r3, r3, #2
 8008b26:	440b      	add	r3, r1
 8008b28:	3303      	adds	r3, #3
 8008b2a:	781b      	ldrb	r3, [r3, #0]
 8008b2c:	2b01      	cmp	r3, #1
 8008b2e:	d124      	bne.n	8008b7a <BSP_USBPD_PWR_SetRole+0xaa>
        {
          if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008b30:	4a17      	ldr	r2, [pc, #92]	@ (8008b90 <BSP_USBPD_PWR_SetRole+0xc0>)
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b38:	699c      	ldr	r4, [r3, #24]
 8008b3a:	687a      	ldr	r2, [r7, #4]
 8008b3c:	4613      	mov	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4413      	add	r3, r2
 8008b42:	00db      	lsls	r3, r3, #3
 8008b44:	4a13      	ldr	r2, [pc, #76]	@ (8008b94 <BSP_USBPD_PWR_SetRole+0xc4>)
 8008b46:	4413      	add	r3, r2
 8008b48:	2120      	movs	r1, #32
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	47a0      	blx	r4
 8008b4e:	4603      	mov	r3, r0
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d003      	beq.n	8008b5c <BSP_USBPD_PWR_SetRole+0x8c>
                                                           TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b54:	f06f 0304 	mvn.w	r3, #4
 8008b58:	60fb      	str	r3, [r7, #12]
          else
          {
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
          }
        }
        break;
 8008b5a:	e00e      	b.n	8008b7a <BSP_USBPD_PWR_SetRole+0xaa>
            USBPD_PWR_Port_Status[PortNum].PwrSavingMode = USBPD_PWR_MODE_LOWPOWER;
 8008b5c:	490b      	ldr	r1, [pc, #44]	@ (8008b8c <BSP_USBPD_PWR_SetRole+0xbc>)
 8008b5e:	687a      	ldr	r2, [r7, #4]
 8008b60:	4613      	mov	r3, r2
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	4413      	add	r3, r2
 8008b66:	009b      	lsls	r3, r3, #2
 8008b68:	440b      	add	r3, r1
 8008b6a:	3303      	adds	r3, #3
 8008b6c:	2202      	movs	r2, #2
 8008b6e:	701a      	strb	r2, [r3, #0]
        break;
 8008b70:	e003      	b.n	8008b7a <BSP_USBPD_PWR_SetRole+0xaa>

      case POWER_ROLE_SINK:
      default:
        ret = BSP_ERROR_WRONG_PARAM;
 8008b72:	f06f 0301 	mvn.w	r3, #1
 8008b76:	60fb      	str	r3, [r7, #12]
        break;
 8008b78:	e000      	b.n	8008b7c <BSP_USBPD_PWR_SetRole+0xac>
        break;
 8008b7a:	bf00      	nop
    }
  }

  return ret;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	3714      	adds	r7, #20
 8008b82:	46bd      	mov	sp, r7
 8008b84:	bd90      	pop	{r4, r7, pc}
 8008b86:	bf00      	nop
 8008b88:	0801ae44 	.word	0x0801ae44
 8008b8c:	20000ab0 	.word	0x20000ab0
 8008b90:	20000ae4 	.word	0x20000ae4
 8008b94:	20000abc 	.word	0x20000abc

08008b98 <BSP_USBPD_PWR_SetPowerMode>:
  *         @arg @ref USBPD_PWR_MODE_LOWPOWER
  *         @arg @ref USBPD_PWR_MODE_NORMAL
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_SetPowerMode(uint32_t PortNum, USBPD_PWR_PowerModeTypeDef PwrMode)
{
 8008b98:	b590      	push	{r4, r7, lr}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af02      	add	r7, sp, #8
 8008b9e:	6078      	str	r0, [r7, #4]
 8008ba0:	460b      	mov	r3, r1
 8008ba2:	70fb      	strb	r3, [r7, #3]
  uint8_t flg_reg;
  int32_t ret = BSP_ERROR_NONE;
 8008ba4:	2300      	movs	r3, #0
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d003      	beq.n	8008bb6 <BSP_USBPD_PWR_SetPowerMode+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008bae:	f06f 0301 	mvn.w	r3, #1
 8008bb2:	60fb      	str	r3, [r7, #12]
 8008bb4:	e0ee      	b.n	8008d94 <BSP_USBPD_PWR_SetPowerMode+0x1fc>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_SetPowerMode --");
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	b2d9      	uxtb	r1, r3
 8008bba:	2320      	movs	r3, #32
 8008bbc:	9300      	str	r3, [sp, #0]
 8008bbe:	4b78      	ldr	r3, [pc, #480]	@ (8008da0 <BSP_USBPD_PWR_SetPowerMode+0x208>)
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	2006      	movs	r0, #6
 8008bc4:	f005 fd20 	bl	800e608 <USBPD_TRACE_Add>

    /* Evaluate requested Power config for port */
    switch (PwrMode)
 8008bc8:	78fb      	ldrb	r3, [r7, #3]
 8008bca:	2b03      	cmp	r3, #3
 8008bcc:	f200 80cd 	bhi.w	8008d6a <BSP_USBPD_PWR_SetPowerMode+0x1d2>
 8008bd0:	a201      	add	r2, pc, #4	@ (adr r2, 8008bd8 <BSP_USBPD_PWR_SetPowerMode+0x40>)
 8008bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bd6:	bf00      	nop
 8008bd8:	08008be9 	.word	0x08008be9
 8008bdc:	08008c15 	.word	0x08008c15
 8008be0:	08008cef 	.word	0x08008cef
 8008be4:	08008d2d 	.word	0x08008d2d
    {
      case USBPD_PWR_MODE_OFF:
        /* Port should enter OFF mode : Reset TCPP0203 Reg0 */
        if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 8008be8:	4a6e      	ldr	r2, [pc, #440]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bf0:	6899      	ldr	r1, [r3, #8]
 8008bf2:	687a      	ldr	r2, [r7, #4]
 8008bf4:	4613      	mov	r3, r2
 8008bf6:	009b      	lsls	r3, r3, #2
 8008bf8:	4413      	add	r3, r2
 8008bfa:	00db      	lsls	r3, r3, #3
 8008bfc:	4a6a      	ldr	r2, [pc, #424]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008bfe:	4413      	add	r3, r2
 8008c00:	4618      	mov	r0, r3
 8008c02:	4788      	blx	r1
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	f000 80b3 	beq.w	8008d72 <BSP_USBPD_PWR_SetPowerMode+0x1da>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c0c:	f06f 0304 	mvn.w	r3, #4
 8008c10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008c12:	e0ae      	b.n	8008d72 <BSP_USBPD_PWR_SetPowerMode+0x1da>
      case USBPD_PWR_MODE_HIBERNATE:
        /* Port Mode is Hibernate : (Default state at startup)
             - Gate Driver Provider OFF
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Hibernate --");
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	b2d9      	uxtb	r1, r3
 8008c18:	230f      	movs	r3, #15
 8008c1a:	9300      	str	r3, [sp, #0]
 8008c1c:	4b63      	ldr	r3, [pc, #396]	@ (8008dac <BSP_USBPD_PWR_SetPowerMode+0x214>)
 8008c1e:	2200      	movs	r2, #0
 8008c20:	2006      	movs	r0, #6
 8008c22:	f005 fcf1 	bl	800e608 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008c26:	4a5f      	ldr	r2, [pc, #380]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c2e:	699c      	ldr	r4, [r3, #24]
 8008c30:	687a      	ldr	r2, [r7, #4]
 8008c32:	4613      	mov	r3, r2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	4413      	add	r3, r2
 8008c38:	00db      	lsls	r3, r3, #3
 8008c3a:	4a5b      	ldr	r2, [pc, #364]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008c3c:	4413      	add	r3, r2
 8008c3e:	2100      	movs	r1, #0
 8008c40:	4618      	mov	r0, r3
 8008c42:	47a0      	blx	r4
 8008c44:	4603      	mov	r3, r0
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d002      	beq.n	8008c50 <BSP_USBPD_PWR_SetPowerMode+0xb8>
                                                         TCPP0203_POWER_MODE_HIBERNATE) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008c4a:	f06f 0304 	mvn.w	r3, #4
 8008c4e:	60fb      	str	r3, [r7, #12]
        }

        /* Check if VBUS is present (in case of SNK VBUS powered device) */
        /* Read Flags register (FLGn) */
        if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 8008c50:	4a54      	ldr	r2, [pc, #336]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c58:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4613      	mov	r3, r2
 8008c5e:	009b      	lsls	r3, r3, #2
 8008c60:	4413      	add	r3, r2
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	4a50      	ldr	r2, [pc, #320]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008c66:	4413      	add	r3, r2
 8008c68:	f107 020b 	add.w	r2, r7, #11
 8008c6c:	4611      	mov	r1, r2
 8008c6e:	4618      	mov	r0, r3
 8008c70:	47a0      	blx	r4
 8008c72:	4603      	mov	r3, r0
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d17e      	bne.n	8008d76 <BSP_USBPD_PWR_SetPowerMode+0x1de>
        {
          /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
             it is expected that a VBUS_OK condition is detected.
             In this case, if any, vBus Detection callback could be called */
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 8008c78:	7afb      	ldrb	r3, [r7, #11]
 8008c7a:	f003 0320 	and.w	r3, r3, #32
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d079      	beq.n	8008d76 <BSP_USBPD_PWR_SetPowerMode+0x1de>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8008c82:	494b      	ldr	r1, [pc, #300]	@ (8008db0 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8008c84:	687a      	ldr	r2, [r7, #4]
 8008c86:	4613      	mov	r3, r2
 8008c88:	005b      	lsls	r3, r3, #1
 8008c8a:	4413      	add	r3, r2
 8008c8c:	009b      	lsls	r3, r3, #2
 8008c8e:	440b      	add	r3, r1
 8008c90:	3308      	adds	r3, #8
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d06e      	beq.n	8008d76 <BSP_USBPD_PWR_SetPowerMode+0x1de>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP02 behavior on CC lines */
              /* Switch to Low Power mode */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	b2d9      	uxtb	r1, r3
 8008c9c:	230f      	movs	r3, #15
 8008c9e:	9300      	str	r3, [sp, #0]
 8008ca0:	4b44      	ldr	r3, [pc, #272]	@ (8008db4 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	2006      	movs	r0, #6
 8008ca6:	f005 fcaf 	bl	800e608 <USBPD_TRACE_Add>
              if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008caa:	4a3e      	ldr	r2, [pc, #248]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cb2:	699c      	ldr	r4, [r3, #24]
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	4613      	mov	r3, r2
 8008cb8:	009b      	lsls	r3, r3, #2
 8008cba:	4413      	add	r3, r2
 8008cbc:	00db      	lsls	r3, r3, #3
 8008cbe:	4a3a      	ldr	r2, [pc, #232]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008cc0:	4413      	add	r3, r2
 8008cc2:	2120      	movs	r1, #32
 8008cc4:	4618      	mov	r0, r3
 8008cc6:	47a0      	blx	r4
 8008cc8:	4603      	mov	r3, r0
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d002      	beq.n	8008cd4 <BSP_USBPD_PWR_SetPowerMode+0x13c>
                                                               TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
              {
                ret = BSP_ERROR_COMPONENT_FAILURE;
 8008cce:	f06f 0304 	mvn.w	r3, #4
 8008cd2:	60fb      	str	r3, [r7, #12]
              }

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 8008cd4:	4936      	ldr	r1, [pc, #216]	@ (8008db0 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	4613      	mov	r3, r2
 8008cda:	005b      	lsls	r3, r3, #1
 8008cdc:	4413      	add	r3, r2
 8008cde:	009b      	lsls	r3, r3, #2
 8008ce0:	440b      	add	r3, r1
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	4798      	blx	r3
          else
          {
            /* VBUS indication not present in FLGn flags : nothing more to be done */
          }
        }
        break;
 8008cec:	e043      	b.n	8008d76 <BSP_USBPD_PWR_SetPowerMode+0x1de>
      case USBPD_PWR_MODE_LOWPOWER:
        /* Port Mode is Low Power :
             - Gate Driver Consumer or Provider controlled by I2C
             - waiting for VBUS_OK in FLGn (interrupt)
        */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Low Power --");
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	b2d9      	uxtb	r1, r3
 8008cf2:	230f      	movs	r3, #15
 8008cf4:	9300      	str	r3, [sp, #0]
 8008cf6:	4b2f      	ldr	r3, [pc, #188]	@ (8008db4 <BSP_USBPD_PWR_SetPowerMode+0x21c>)
 8008cf8:	2200      	movs	r2, #0
 8008cfa:	2006      	movs	r0, #6
 8008cfc:	f005 fc84 	bl	800e608 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008d00:	4a28      	ldr	r2, [pc, #160]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d08:	699c      	ldr	r4, [r3, #24]
 8008d0a:	687a      	ldr	r2, [r7, #4]
 8008d0c:	4613      	mov	r3, r2
 8008d0e:	009b      	lsls	r3, r3, #2
 8008d10:	4413      	add	r3, r2
 8008d12:	00db      	lsls	r3, r3, #3
 8008d14:	4a24      	ldr	r2, [pc, #144]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008d16:	4413      	add	r3, r2
 8008d18:	2120      	movs	r1, #32
 8008d1a:	4618      	mov	r0, r3
 8008d1c:	47a0      	blx	r4
 8008d1e:	4603      	mov	r3, r0
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d02a      	beq.n	8008d7a <BSP_USBPD_PWR_SetPowerMode+0x1e2>
                                                         TCPP0203_POWER_MODE_LOWPOWER) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d24:	f06f 0304 	mvn.w	r3, #4
 8008d28:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008d2a:	e026      	b.n	8008d7a <BSP_USBPD_PWR_SetPowerMode+0x1e2>

      case USBPD_PWR_MODE_NORMAL:
        /* Port Mode is Normal : No power saving measure (Explicit contract in place) */
        BSP_USBPD_PWR_TRACE(PortNum, "-- Normal --");
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	b2d9      	uxtb	r1, r3
 8008d30:	230c      	movs	r3, #12
 8008d32:	9300      	str	r3, [sp, #0]
 8008d34:	4b20      	ldr	r3, [pc, #128]	@ (8008db8 <BSP_USBPD_PWR_SetPowerMode+0x220>)
 8008d36:	2200      	movs	r2, #0
 8008d38:	2006      	movs	r0, #6
 8008d3a:	f005 fc65 	bl	800e608 <USBPD_TRACE_Add>
        if (USBPD_PWR_PortCompDrv[PortNum]->SetPowerMode(&USBPD_PWR_PortCompObj[PortNum],
 8008d3e:	4a19      	ldr	r2, [pc, #100]	@ (8008da4 <BSP_USBPD_PWR_SetPowerMode+0x20c>)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008d46:	699c      	ldr	r4, [r3, #24]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	4613      	mov	r3, r2
 8008d4c:	009b      	lsls	r3, r3, #2
 8008d4e:	4413      	add	r3, r2
 8008d50:	00db      	lsls	r3, r3, #3
 8008d52:	4a15      	ldr	r2, [pc, #84]	@ (8008da8 <BSP_USBPD_PWR_SetPowerMode+0x210>)
 8008d54:	4413      	add	r3, r2
 8008d56:	2110      	movs	r1, #16
 8008d58:	4618      	mov	r0, r3
 8008d5a:	47a0      	blx	r4
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d00d      	beq.n	8008d7e <BSP_USBPD_PWR_SetPowerMode+0x1e6>
                                                         TCPP0203_POWER_MODE_NORMAL) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8008d62:	f06f 0304 	mvn.w	r3, #4
 8008d66:	60fb      	str	r3, [r7, #12]
        }
        break;
 8008d68:	e009      	b.n	8008d7e <BSP_USBPD_PWR_SetPowerMode+0x1e6>

      default:
        ret = BSP_ERROR_WRONG_PARAM;
 8008d6a:	f06f 0301 	mvn.w	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]
        break;
 8008d70:	e006      	b.n	8008d80 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8008d72:	bf00      	nop
 8008d74:	e004      	b.n	8008d80 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8008d76:	bf00      	nop
 8008d78:	e002      	b.n	8008d80 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8008d7a:	bf00      	nop
 8008d7c:	e000      	b.n	8008d80 <BSP_USBPD_PWR_SetPowerMode+0x1e8>
        break;
 8008d7e:	bf00      	nop
    }

    /* Set port low power operating mode */
    USBPD_PWR_Port_Status[PortNum].PwrSavingMode = PwrMode;
 8008d80:	490b      	ldr	r1, [pc, #44]	@ (8008db0 <BSP_USBPD_PWR_SetPowerMode+0x218>)
 8008d82:	687a      	ldr	r2, [r7, #4]
 8008d84:	4613      	mov	r3, r2
 8008d86:	005b      	lsls	r3, r3, #1
 8008d88:	4413      	add	r3, r2
 8008d8a:	009b      	lsls	r3, r3, #2
 8008d8c:	440b      	add	r3, r1
 8008d8e:	3303      	adds	r3, #3
 8008d90:	78fa      	ldrb	r2, [r7, #3]
 8008d92:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8008d94:	68fb      	ldr	r3, [r7, #12]
}
 8008d96:	4618      	mov	r0, r3
 8008d98:	3714      	adds	r7, #20
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd90      	pop	{r4, r7, pc}
 8008d9e:	bf00      	nop
 8008da0:	0801ae68 	.word	0x0801ae68
 8008da4:	20000ae4 	.word	0x20000ae4
 8008da8:	20000abc 	.word	0x20000abc
 8008dac:	0801ae8c 	.word	0x0801ae8c
 8008db0:	20000ab0 	.word	0x20000ab0
 8008db4:	0801ae9c 	.word	0x0801ae9c
 8008db8:	0801aeac 	.word	0x0801aeac

08008dbc <BSP_USBPD_PWR_VBUSInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSInit(uint32_t PortNum)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b086      	sub	sp, #24
 8008dc0:	af02      	add	r7, sp, #8
 8008dc2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d003      	beq.n	8008dd2 <BSP_USBPD_PWR_VBUSInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008dca:	f06f 0301 	mvn.w	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	e027      	b.n	8008e22 <BSP_USBPD_PWR_VBUSInit+0x66>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSInit --");
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	b2d9      	uxtb	r1, r3
 8008dd6:	231c      	movs	r3, #28
 8008dd8:	9300      	str	r3, [sp, #0]
 8008dda:	4b14      	ldr	r3, [pc, #80]	@ (8008e2c <BSP_USBPD_PWR_VBUSInit+0x70>)
 8008ddc:	2200      	movs	r2, #0
 8008dde:	2006      	movs	r0, #6
 8008de0:	f005 fc12 	bl	800e608 <USBPD_TRACE_Add>

    /* Initialize required HW for VBUS management */
    switch (USBPD_PWR_Port_Configs[PortNum].Type)
 8008de4:	4a12      	ldr	r2, [pc, #72]	@ (8008e30 <BSP_USBPD_PWR_VBUSInit+0x74>)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008dec:	2b02      	cmp	r3, #2
 8008dee:	d114      	bne.n	8008e1a <BSP_USBPD_PWR_VBUSInit+0x5e>
    {
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        /* Switch to Normal mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_NORMAL);
 8008df0:	2103      	movs	r1, #3
 8008df2:	6878      	ldr	r0, [r7, #4]
 8008df4:	f7ff fed0 	bl	8008b98 <BSP_USBPD_PWR_SetPowerMode>
 8008df8:	60f8      	str	r0, [r7, #12]

#if !defined(USBPD_CONFIG_MX)
        /* Configure and start adc once */
        if (adc_configured == 0U)
 8008dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8008e34 <BSP_USBPD_PWR_VBUSInit+0x78>)
 8008dfc:	781b      	ldrb	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d106      	bne.n	8008e10 <BSP_USBPD_PWR_VBUSInit+0x54>
        {
          PWR_TCPP0203_Configure_ADC();
 8008e02:	f000 fa09 	bl	8009218 <PWR_TCPP0203_Configure_ADC>
          PWR_TCPP0203_Activate_ADC();
 8008e06:	f000 fafd 	bl	8009404 <PWR_TCPP0203_Activate_ADC>
          adc_configured = 1U;
 8008e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <BSP_USBPD_PWR_VBUSInit+0x78>)
 8008e0c:	2201      	movs	r2, #1
 8008e0e:	701a      	strb	r2, [r3, #0]
        }

        /*  Start Conversion */
        LL_ADC_REG_StartConversion(VISENSE_ADC_INSTANCE);
 8008e10:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8008e14:	f7ff fa5b 	bl	80082ce <LL_ADC_REG_StartConversion>
#endif /* !USBPD_CONFIG_MX */
        break;
 8008e18:	e003      	b.n	8008e22 <BSP_USBPD_PWR_VBUSInit+0x66>

      case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
      default:
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8008e1a:	f06f 030a 	mvn.w	r3, #10
 8008e1e:	60fb      	str	r3, [r7, #12]
        break;
 8008e20:	bf00      	nop
    }
  }
  return ret;
 8008e22:	68fb      	ldr	r3, [r7, #12]
}
 8008e24:	4618      	mov	r0, r3
 8008e26:	3710      	adds	r7, #16
 8008e28:	46bd      	mov	sp, r7
 8008e2a:	bd80      	pop	{r7, pc}
 8008e2c:	0801aee0 	.word	0x0801aee0
 8008e30:	20000070 	.word	0x20000070
 8008e34:	20000aac 	.word	0x20000aac

08008e38 <BSP_USBPD_PWR_VBUSDeInit>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSDeInit(uint32_t PortNum)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b086      	sub	sp, #24
 8008e3c:	af02      	add	r7, sp, #8
 8008e3e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d003      	beq.n	8008e4e <BSP_USBPD_PWR_VBUSDeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008e46:	f06f 0301 	mvn.w	r3, #1
 8008e4a:	60fb      	str	r3, [r7, #12]
 8008e4c:	e018      	b.n	8008e80 <BSP_USBPD_PWR_VBUSDeInit+0x48>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSDeInit --");
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	b2d9      	uxtb	r1, r3
 8008e52:	231e      	movs	r3, #30
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	4b0d      	ldr	r3, [pc, #52]	@ (8008e8c <BSP_USBPD_PWR_VBUSDeInit+0x54>)
 8008e58:	2200      	movs	r2, #0
 8008e5a:	2006      	movs	r0, #6
 8008e5c:	f005 fbd4 	bl	800e608 <USBPD_TRACE_Add>

    /* De-Initialize required HW for VBUS management */
    switch (USBPD_PWR_Port_Configs[PortNum].Type)
 8008e60:	4a0b      	ldr	r2, [pc, #44]	@ (8008e90 <BSP_USBPD_PWR_VBUSDeInit+0x58>)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8008e68:	2b02      	cmp	r3, #2
 8008e6a:	d105      	bne.n	8008e78 <BSP_USBPD_PWR_VBUSDeInit+0x40>
    {
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
        /* Switch to Low Power mode */
        ret = BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 8008e6c:	2102      	movs	r1, #2
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f7ff fe92 	bl	8008b98 <BSP_USBPD_PWR_SetPowerMode>
 8008e74:	60f8      	str	r0, [r7, #12]
        break;
 8008e76:	e003      	b.n	8008e80 <BSP_USBPD_PWR_VBUSDeInit+0x48>

      case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
      case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
      default:
        ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 8008e78:	f06f 030a 	mvn.w	r3, #10
 8008e7c:	60fb      	str	r3, [r7, #12]
        break;
 8008e7e:	bf00      	nop
    }
  }
  return ret;
 8008e80:	68fb      	ldr	r3, [r7, #12]
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3710      	adds	r7, #16
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	0801af00 	.word	0x0801af00
 8008e90:	20000070 	.word	0x20000070

08008e94 <BSP_USBPD_PWR_VBUSOn>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOn(uint32_t PortNum)
{
 8008e94:	b590      	push	{r4, r7, lr}
 8008e96:	b087      	sub	sp, #28
 8008e98:	af02      	add	r7, sp, #8
 8008e9a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008e9c:	2300      	movs	r3, #0
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d003      	beq.n	8008eae <BSP_USBPD_PWR_VBUSOn+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008ea6:	f06f 0301 	mvn.w	r3, #1
 8008eaa:	60fb      	str	r3, [r7, #12]
 8008eac:	e035      	b.n	8008f1a <BSP_USBPD_PWR_VBUSOn+0x86>
  }
  else
  {
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOn --");
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	b2d9      	uxtb	r1, r3
 8008eb2:	231a      	movs	r3, #26
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008f24 <BSP_USBPD_PWR_VBUSOn+0x90>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	2006      	movs	r0, #6
 8008ebc:	f005 fba4 	bl	800e608 <USBPD_TRACE_Add>
    /* Port Role is now SRC : Close Gate Driver Provider */
    if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 8008ec0:	4919      	ldr	r1, [pc, #100]	@ (8008f28 <BSP_USBPD_PWR_VBUSOn+0x94>)
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	4613      	mov	r3, r2
 8008ec6:	005b      	lsls	r3, r3, #1
 8008ec8:	4413      	add	r3, r2
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	440b      	add	r3, r1
 8008ece:	3302      	adds	r3, #2
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d11e      	bne.n	8008f14 <BSP_USBPD_PWR_VBUSOn+0x80>
    {
      if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 8008ed6:	4a15      	ldr	r2, [pc, #84]	@ (8008f2c <BSP_USBPD_PWR_VBUSOn+0x98>)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ede:	691c      	ldr	r4, [r3, #16]
 8008ee0:	687a      	ldr	r2, [r7, #4]
 8008ee2:	4613      	mov	r3, r2
 8008ee4:	009b      	lsls	r3, r3, #2
 8008ee6:	4413      	add	r3, r2
 8008ee8:	00db      	lsls	r3, r3, #3
 8008eea:	4a11      	ldr	r2, [pc, #68]	@ (8008f30 <BSP_USBPD_PWR_VBUSOn+0x9c>)
 8008eec:	4413      	add	r3, r2
 8008eee:	2104      	movs	r1, #4
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	47a0      	blx	r4
 8008ef4:	4603      	mov	r3, r0
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d002      	beq.n	8008f00 <BSP_USBPD_PWR_VBUSOn+0x6c>
                                                                TCPP0203_GD_PROVIDER_SWITCH_CLOSED) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008efa:	f06f 0304 	mvn.w	r3, #4
 8008efe:	60fb      	str	r3, [r7, #12]
      }
      BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC --");
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	b2d9      	uxtb	r1, r3
 8008f04:	231b      	movs	r3, #27
 8008f06:	9300      	str	r3, [sp, #0]
 8008f08:	4b0a      	ldr	r3, [pc, #40]	@ (8008f34 <BSP_USBPD_PWR_VBUSOn+0xa0>)
 8008f0a:	2200      	movs	r2, #0
 8008f0c:	2006      	movs	r0, #6
 8008f0e:	f005 fb7b 	bl	800e608 <USBPD_TRACE_Add>
 8008f12:	e002      	b.n	8008f1a <BSP_USBPD_PWR_VBUSOn+0x86>
    }
    else
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f14:	f06f 0304 	mvn.w	r3, #4
 8008f18:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
}
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3714      	adds	r7, #20
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd90      	pop	{r4, r7, pc}
 8008f24:	0801af20 	.word	0x0801af20
 8008f28:	20000ab0 	.word	0x20000ab0
 8008f2c:	20000ae4 	.word	0x20000ae4
 8008f30:	20000abc 	.word	0x20000abc
 8008f34:	0801af3c 	.word	0x0801af3c

08008f38 <BSP_USBPD_PWR_VBUSOff>:
  *         This parameter can take one of the following values:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSOff(uint32_t PortNum)
{
 8008f38:	b590      	push	{r4, r7, lr}
 8008f3a:	b089      	sub	sp, #36	@ 0x24
 8008f3c:	af02      	add	r7, sp, #8
 8008f3e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8008f40:	2300      	movs	r3, #0
 8008f42:	617b      	str	r3, [r7, #20]
#if (BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0)
  uint32_t vbus;
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d003      	beq.n	8008f52 <BSP_USBPD_PWR_VBUSOff+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008f4a:	f06f 0301 	mvn.w	r3, #1
 8008f4e:	617b      	str	r3, [r7, #20]
 8008f50:	e069      	b.n	8009026 <BSP_USBPD_PWR_VBUSOff+0xee>
  }
  else
  {
    /* Open Gate driver provider */
    BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_VBUSOff --");
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	b2d9      	uxtb	r1, r3
 8008f56:	231b      	movs	r3, #27
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	4b35      	ldr	r3, [pc, #212]	@ (8009030 <BSP_USBPD_PWR_VBUSOff+0xf8>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	2006      	movs	r0, #6
 8008f60:	f005 fb52 	bl	800e608 <USBPD_TRACE_Add>
    if (USBPD_PWR_PortCompDrv[PortNum]->SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 8008f64:	4a33      	ldr	r2, [pc, #204]	@ (8009034 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f6c:	691c      	ldr	r4, [r3, #16]
 8008f6e:	687a      	ldr	r2, [r7, #4]
 8008f70:	4613      	mov	r3, r2
 8008f72:	009b      	lsls	r3, r3, #2
 8008f74:	4413      	add	r3, r2
 8008f76:	00db      	lsls	r3, r3, #3
 8008f78:	4a2f      	ldr	r2, [pc, #188]	@ (8009038 <BSP_USBPD_PWR_VBUSOff+0x100>)
 8008f7a:	4413      	add	r3, r2
 8008f7c:	2100      	movs	r1, #0
 8008f7e:	4618      	mov	r0, r3
 8008f80:	47a0      	blx	r4
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d003      	beq.n	8008f90 <BSP_USBPD_PWR_VBUSOff+0x58>
                                                              TCPP0203_GD_PROVIDER_SWITCH_OPEN) != TCPP0203_OK)
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008f88:	f06f 0304 	mvn.w	r3, #4
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e04a      	b.n	8009026 <BSP_USBPD_PWR_VBUSOff+0xee>
    }
#if (BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0)
    else
    {
      /* Set Discharge On */
      if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 8008f90:	4a28      	ldr	r2, [pc, #160]	@ (8009034 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f98:	69dc      	ldr	r4, [r3, #28]
 8008f9a:	687a      	ldr	r2, [r7, #4]
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	00db      	lsls	r3, r3, #3
 8008fa4:	4a24      	ldr	r2, [pc, #144]	@ (8009038 <BSP_USBPD_PWR_VBUSOff+0x100>)
 8008fa6:	4413      	add	r3, r2
 8008fa8:	2140      	movs	r1, #64	@ 0x40
 8008faa:	4618      	mov	r0, r3
 8008fac:	47a0      	blx	r4
 8008fae:	4603      	mov	r3, r0
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d003      	beq.n	8008fbc <BSP_USBPD_PWR_VBUSOff+0x84>
                                                           TCPP0203_VBUS_DISCHARGE_ON) != TCPP0203_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008fb4:	f06f 0304 	mvn.w	r3, #4
 8008fb8:	617b      	str	r3, [r7, #20]
 8008fba:	e034      	b.n	8009026 <BSP_USBPD_PWR_VBUSOff+0xee>
      }
      else
      {
        /* Wait VBUS level becomes lower than USBPD_PWR_LOW_VBUS_THRESHOLD */
        uint8_t counter = 0;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	74fb      	strb	r3, [r7, #19]

        (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 8008fc0:	f107 030c 	add.w	r3, r7, #12
 8008fc4:	4619      	mov	r1, r3
 8008fc6:	6878      	ldr	r0, [r7, #4]
 8008fc8:	f000 f872 	bl	80090b0 <BSP_USBPD_PWR_VBUSGetVoltage>

        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 8008fcc:	e00b      	b.n	8008fe6 <BSP_USBPD_PWR_VBUSOff+0xae>
        {
          counter++;
 8008fce:	7cfb      	ldrb	r3, [r7, #19]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	74fb      	strb	r3, [r7, #19]
          HAL_Delay(20);
 8008fd4:	2014      	movs	r0, #20
 8008fd6:	f000 fdd1 	bl	8009b7c <HAL_Delay>
          (void)BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &vbus);
 8008fda:	f107 030c 	add.w	r3, r7, #12
 8008fde:	4619      	mov	r1, r3
 8008fe0:	6878      	ldr	r0, [r7, #4]
 8008fe2:	f000 f865 	bl	80090b0 <BSP_USBPD_PWR_VBUSGetVoltage>
        while ((vbus >= (USBPD_PWR_LOW_VBUS_THRESHOLD - 200U)) && (counter < 20U))
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	f240 2225 	movw	r2, #549	@ 0x225
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d902      	bls.n	8008ff6 <BSP_USBPD_PWR_VBUSOff+0xbe>
 8008ff0:	7cfb      	ldrb	r3, [r7, #19]
 8008ff2:	2b13      	cmp	r3, #19
 8008ff4:	d9eb      	bls.n	8008fce <BSP_USBPD_PWR_VBUSOff+0x96>
        }

        /* Set Discharge Off */
        if (USBPD_PWR_PortCompDrv[PortNum]->SetVBusDischarge(&USBPD_PWR_PortCompObj[PortNum],
 8008ff6:	4a0f      	ldr	r2, [pc, #60]	@ (8009034 <BSP_USBPD_PWR_VBUSOff+0xfc>)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffe:	69dc      	ldr	r4, [r3, #28]
 8009000:	687a      	ldr	r2, [r7, #4]
 8009002:	4613      	mov	r3, r2
 8009004:	009b      	lsls	r3, r3, #2
 8009006:	4413      	add	r3, r2
 8009008:	00db      	lsls	r3, r3, #3
 800900a:	4a0b      	ldr	r2, [pc, #44]	@ (8009038 <BSP_USBPD_PWR_VBUSOff+0x100>)
 800900c:	4413      	add	r3, r2
 800900e:	2100      	movs	r1, #0
 8009010:	4618      	mov	r0, r3
 8009012:	47a0      	blx	r4
 8009014:	4603      	mov	r3, r0
 8009016:	2b00      	cmp	r3, #0
 8009018:	d002      	beq.n	8009020 <BSP_USBPD_PWR_VBUSOff+0xe8>
                                                             TCPP0203_VBUS_DISCHARGE_OFF) != TCPP0203_OK)
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800901a:	f06f 0304 	mvn.w	r3, #4
 800901e:	617b      	str	r3, [r7, #20]
        }

        HAL_Delay(30);
 8009020:	201e      	movs	r0, #30
 8009022:	f000 fdab 	bl	8009b7c <HAL_Delay>
      }
    }
#endif /* BSP_USBPD_PWR_DONT_WAIT_VBUSOFF_DISCHARGE == 0 */
  }
  return ret;
 8009026:	697b      	ldr	r3, [r7, #20]
}
 8009028:	4618      	mov	r0, r3
 800902a:	371c      	adds	r7, #28
 800902c:	46bd      	mov	sp, r7
 800902e:	bd90      	pop	{r4, r7, pc}
 8009030:	0801af58 	.word	0x0801af58
 8009034:	20000ae4 	.word	0x20000ae4
 8009038:	20000abc 	.word	0x20000abc

0800903c <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>:
  */
int32_t BSP_USBPD_PWR_VBUSSetVoltage_Fixed(uint32_t PortNum,
                                           uint32_t VbusTargetInmv,
                                           uint32_t OperatingCurrent,
                                           uint32_t MaxOperatingCurrent)
{
 800903c:	b480      	push	{r7}
 800903e:	b087      	sub	sp, #28
 8009040:	af00      	add	r7, sp, #0
 8009042:	60f8      	str	r0, [r7, #12]
 8009044:	60b9      	str	r1, [r7, #8]
 8009046:	607a      	str	r2, [r7, #4]
 8009048:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800904a:	2300      	movs	r3, #0
 800904c:	617b      	str	r3, [r7, #20]
  UNUSED(MaxOperatingCurrent);
  UNUSED(OperatingCurrent);
  UNUSED(VbusTargetInmv);

  /* Check if instance is valid */
  if (PortNum >= USBPD_PWR_INSTANCES_NBR)
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d002      	beq.n	800905a <BSP_USBPD_PWR_VBUSSetVoltage_Fixed+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009054:	f06f 0301 	mvn.w	r3, #1
 8009058:	617b      	str	r3, [r7, #20]
  }
  return ret;
 800905a:	697b      	ldr	r3, [r7, #20]
}
 800905c:	4618      	mov	r0, r3
 800905e:	371c      	adds	r7, #28
 8009060:	46bd      	mov	sp, r7
 8009062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009066:	4770      	bx	lr

08009068 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>:
  * @param  pfnVBUSDetectCallback callback function pointer
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_RegisterVBUSDetectCallback(uint32_t PortNum,
                                                 USBPD_PWR_VBUSDetectCallbackFunc *pfnVBUSDetectCallback)
{
 8009068:	b480      	push	{r7}
 800906a:	b085      	sub	sp, #20
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
 8009070:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8009072:	2300      	movs	r3, #0
 8009074:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pfnVBUSDetectCallback))
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x1a>
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d103      	bne.n	800908a <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8009082:	f06f 0301 	mvn.w	r3, #1
 8009086:	60fb      	str	r3, [r7, #12]
 8009088:	e009      	b.n	800909e <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x36>
  }
  else
  {
    /* Set port callback for VBUS detection event */
    USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback = pfnVBUSDetectCallback;
 800908a:	4908      	ldr	r1, [pc, #32]	@ (80090ac <BSP_USBPD_PWR_RegisterVBUSDetectCallback+0x44>)
 800908c:	687a      	ldr	r2, [r7, #4]
 800908e:	4613      	mov	r3, r2
 8009090:	005b      	lsls	r3, r3, #1
 8009092:	4413      	add	r3, r2
 8009094:	009b      	lsls	r3, r3, #2
 8009096:	440b      	add	r3, r1
 8009098:	3308      	adds	r3, #8
 800909a:	683a      	ldr	r2, [r7, #0]
 800909c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800909e:	68fb      	ldr	r3, [r7, #12]
}
 80090a0:	4618      	mov	r0, r3
 80090a2:	3714      	adds	r7, #20
 80090a4:	46bd      	mov	sp, r7
 80090a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090aa:	4770      	bx	lr
 80090ac:	20000ab0 	.word	0x20000ab0

080090b0 <BSP_USBPD_PWR_VBUSGetVoltage>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pVoltage Pointer on measured voltage level (in mV)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetVoltage(uint32_t PortNum, uint32_t *pVoltage)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80090ba:	2300      	movs	r3, #0
 80090bc:	60fb      	str	r3, [r7, #12]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pVoltage))
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d102      	bne.n	80090ca <BSP_USBPD_PWR_VBUSGetVoltage+0x1a>
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d103      	bne.n	80090d2 <BSP_USBPD_PWR_VBUSGetVoltage+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80090ca:	f06f 0301 	mvn.w	r3, #1
 80090ce:	60fb      	str	r3, [r7, #12]
 80090d0:	e00f      	b.n	80090f2 <BSP_USBPD_PWR_VBUSGetVoltage+0x42>
  }
  else
  {
    uint32_t voltage;
    static __IO uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_VSENSE];
 80090d2:	4b0a      	ldr	r3, [pc, #40]	@ (80090fc <BSP_USBPD_PWR_VBUSGetVoltage+0x4c>)
 80090d4:	881a      	ldrh	r2, [r3, #0]
 80090d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009100 <BSP_USBPD_PWR_VBUSGetVoltage+0x50>)
 80090d8:	801a      	strh	r2, [r3, #0]
    voltage = PWR_TCPP0203_ConvertADCDataToVoltage(adc_value, SRC1M1_VSENSE_RA, SRC1M1_VSENSE_RB);
 80090da:	4b09      	ldr	r3, [pc, #36]	@ (8009100 <BSP_USBPD_PWR_VBUSGetVoltage+0x50>)
 80090dc:	881b      	ldrh	r3, [r3, #0]
 80090de:	b29b      	uxth	r3, r3
 80090e0:	2228      	movs	r2, #40	@ 0x28
 80090e2:	21c8      	movs	r1, #200	@ 0xc8
 80090e4:	4618      	mov	r0, r3
 80090e6:	f000 fc7b 	bl	80099e0 <PWR_TCPP0203_ConvertADCDataToVoltage>
 80090ea:	60b8      	str	r0, [r7, #8]

    *pVoltage = voltage;
 80090ec:	683b      	ldr	r3, [r7, #0]
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	601a      	str	r2, [r3, #0]
  }
  return ret;
 80090f2:	68fb      	ldr	r3, [r7, #12]
}
 80090f4:	4618      	mov	r0, r3
 80090f6:	3710      	adds	r7, #16
 80090f8:	46bd      	mov	sp, r7
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	20000aa8 	.word	0x20000aa8
 8009100:	20000ae8 	.word	0x20000ae8

08009104 <BSP_USBPD_PWR_VBUSGetCurrent>:
  *         @arg @ref USBPD_PWR_TYPE_C_PORT_1
  * @param  pCurrent Pointer on measured current level (in mA)
  * @retval BSP status
  */
int32_t BSP_USBPD_PWR_VBUSGetCurrent(uint32_t PortNum, int32_t *pCurrent)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
 800910c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800910e:	2300      	movs	r3, #0
 8009110:	617b      	str	r3, [r7, #20]

  /* Check if instance is valid */
  if ((PortNum >= USBPD_PWR_INSTANCES_NBR) || (NULL == pCurrent))
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d102      	bne.n	800911e <BSP_USBPD_PWR_VBUSGetCurrent+0x1a>
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <BSP_USBPD_PWR_VBUSGetCurrent+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800911e:	f06f 0301 	mvn.w	r3, #1
 8009122:	617b      	str	r3, [r7, #20]
 8009124:	e00c      	b.n	8009140 <BSP_USBPD_PWR_VBUSGetCurrent+0x3c>
  }
  else
  {
    int32_t current;
    uint16_t adc_value;
    adc_value = (uint16_t) usbpd_pwr_adcx_buff[ADCBUF_ISENSE];
 8009126:	4b09      	ldr	r3, [pc, #36]	@ (800914c <BSP_USBPD_PWR_VBUSGetCurrent+0x48>)
 8009128:	885b      	ldrh	r3, [r3, #2]
 800912a:	827b      	strh	r3, [r7, #18]
    current = PWR_TCPP0203_ConvertADCDataToCurrent(adc_value, SRC1M1_ISENSE_GA, SRC1M1_ISENSE_RS);
 800912c:	8a7b      	ldrh	r3, [r7, #18]
 800912e:	2207      	movs	r2, #7
 8009130:	212a      	movs	r1, #42	@ 0x2a
 8009132:	4618      	mov	r0, r3
 8009134:	f000 fc80 	bl	8009a38 <PWR_TCPP0203_ConvertADCDataToCurrent>
 8009138:	60f8      	str	r0, [r7, #12]

    *pCurrent = current;
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	68fa      	ldr	r2, [r7, #12]
 800913e:	601a      	str	r2, [r3, #0]
  }
  return ret;
 8009140:	697b      	ldr	r3, [r7, #20]
}
 8009142:	4618      	mov	r0, r3
 8009144:	3718      	adds	r7, #24
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	20000aa8 	.word	0x20000aa8

08009150 <BSP_USBPD_PWR_EventCallback>:
  *         any PWR related event detection mechanism)
  * @param  PortNum Type-C port identifier
  * @retval None
  */
void BSP_USBPD_PWR_EventCallback(uint32_t PortNum)
{
 8009150:	b580      	push	{r7, lr}
 8009152:	b084      	sub	sp, #16
 8009154:	af02      	add	r7, sp, #8
 8009156:	6078      	str	r0, [r7, #4]
  BSP_USBPD_PWR_TRACE(PortNum, "-- BSP_USBPD_PWR_EventCallback --");
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	b2d9      	uxtb	r1, r3
 800915c:	2321      	movs	r3, #33	@ 0x21
 800915e:	9300      	str	r3, [sp, #0]
 8009160:	4b09      	ldr	r3, [pc, #36]	@ (8009188 <BSP_USBPD_PWR_EventCallback+0x38>)
 8009162:	2200      	movs	r2, #0
 8009164:	2006      	movs	r0, #6
 8009166:	f005 fa4f 	bl	800e608 <USBPD_TRACE_Add>

  /* Handle USBPD PWR event */
  switch (USBPD_PWR_Port_Configs[PortNum].Type)
 800916a:	4a08      	ldr	r2, [pc, #32]	@ (800918c <BSP_USBPD_PWR_EventCallback+0x3c>)
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009172:	2b02      	cmp	r3, #2
 8009174:	d103      	bne.n	800917e <BSP_USBPD_PWR_EventCallback+0x2e>
  {
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP02:
      /* In case of TCPP0203, this callback could be called when an event is detected
         on FLGn line */
      PWR_TCPP0203_EventCallback(PortNum);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f000 fa9e 	bl	80096b8 <PWR_TCPP0203_EventCallback>
      break;
 800917c:	e000      	b.n	8009180 <BSP_USBPD_PWR_EventCallback+0x30>

    case USBPD_PWR_HW_CONFIG_TYPE_DEFAULT:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP01:
    case USBPD_PWR_HW_CONFIG_TYPE_TCPP03:
    default:
      break;
 800917e:	bf00      	nop
  }
}
 8009180:	bf00      	nop
 8009182:	3708      	adds	r7, #8
 8009184:	46bd      	mov	sp, r7
 8009186:	bd80      	pop	{r7, pc}
 8009188:	0801b050 	.word	0x0801b050
 800918c:	20000070 	.word	0x20000070

08009190 <PWR_TCPP0203_GPIOConfigInit>:
  * @note   GPIO used for TCPP0203 operation includes VBUS measurement, ENABLE pin driving
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_GPIOConfigInit(uint32_t PortNum)
{
 8009190:	b580      	push	{r7, lr}
 8009192:	b082      	sub	sp, #8
 8009194:	af00      	add	r7, sp, #0
 8009196:	6078      	str	r0, [r7, #4]
  UNUSED(PortNum);

  /* Configure ENABLE GPIO */
  TCPP0203_PORT0_ENABLE_GPIO_CLK_ENABLE();
 8009198:	2004      	movs	r0, #4
 800919a:	f7ff fa93 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
  /* Configure IO in output push-pull mode to drive ENABLE */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_MODE);
 800919e:	2201      	movs	r2, #1
 80091a0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091a4:	481b      	ldr	r0, [pc, #108]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091a6:	f7ff faa5 	bl	80086f4 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinOutputType(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN,
 80091aa:	2200      	movs	r2, #0
 80091ac:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091b0:	4818      	ldr	r0, [pc, #96]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091b2:	f7ff fadc 	bl	800876e <LL_GPIO_SetPinOutputType>
                           TCPP0203_PORT0_ENABLE_GPIO_OUTPUT);
  LL_GPIO_SetPinSpeed(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, LL_GPIO_SPEED_FREQ_LOW);
 80091b6:	2200      	movs	r2, #0
 80091b8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091bc:	4815      	ldr	r0, [pc, #84]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091be:	f7ff faee 	bl	800879e <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinPull(TCPP0203_PORT0_ENABLE_GPIO_PORT, TCPP0203_PORT0_ENABLE_GPIO_PIN, TCPP0203_PORT0_ENABLE_GPIO_PUPD);
 80091c2:	2200      	movs	r2, #0
 80091c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091c8:	4812      	ldr	r0, [pc, #72]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091ca:	f7ff fb25 	bl	8008818 <LL_GPIO_SetPinPull>

  /* Set ENABLE to default state */
  TCPP0203_PORT0_ENABLE_GPIO_DEFVALUE();
 80091ce:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80091d2:	4810      	ldr	r0, [pc, #64]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091d4:	f7ff fb6b 	bl	80088ae <LL_GPIO_ResetOutputPin>

  /* Configure IANA GPIO */
  TCPP0203_PORT0_IANA_GPIO_CLK_ENABLE();
 80091d8:	2004      	movs	r0, #4
 80091da:	f7ff fa73 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_IANA_GPIO_PORT, TCPP0203_PORT0_IANA_GPIO_PIN, TCPP0203_PORT0_IANA_GPIO_MODE);
 80091de:	2203      	movs	r2, #3
 80091e0:	2102      	movs	r1, #2
 80091e2:	480c      	ldr	r0, [pc, #48]	@ (8009214 <PWR_TCPP0203_GPIOConfigInit+0x84>)
 80091e4:	f7ff fa86 	bl	80086f4 <LL_GPIO_SetPinMode>

  /* Configure VBUS Connector sensing GPIO */
  TCPP0203_PORT0_VBUSC_GPIO_CLK_ENABLE();
 80091e8:	2001      	movs	r0, #1
 80091ea:	f7ff fa6b 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSC_GPIO_PORT, TCPP0203_PORT0_VBUSC_GPIO_PIN, TCPP0203_PORT0_VBUSC_GPIO_MODE);
 80091ee:	2203      	movs	r2, #3
 80091f0:	2101      	movs	r1, #1
 80091f2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80091f6:	f7ff fa7d 	bl	80086f4 <LL_GPIO_SetPinMode>

  /* Configure VBUS Provider sensing GPIO */
  TCPP0203_PORT0_VBUSPROV_GPIO_CLK_ENABLE();
 80091fa:	2001      	movs	r0, #1
 80091fc:	f7ff fa62 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
  /* Configure GPIO in Analog mode */
  LL_GPIO_SetPinMode(TCPP0203_PORT0_VBUSPROV_GPIO_PORT, TCPP0203_PORT0_VBUSPROV_GPIO_PIN,
 8009200:	2203      	movs	r2, #3
 8009202:	2102      	movs	r1, #2
 8009204:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8009208:	f7ff fa74 	bl	80086f4 <LL_GPIO_SetPinMode>
                     TCPP0203_PORT0_VBUSPROV_GPIO_MODE);
}
 800920c:	bf00      	nop
 800920e:	3708      	adds	r7, #8
 8009210:	46bd      	mov	sp, r7
 8009212:	bd80      	pop	{r7, pc}
 8009214:	48000800 	.word	0x48000800

08009218 <PWR_TCPP0203_Configure_ADC>:
  * @brief  Configure ADC (ADC instance for Vsense and Isense: VISENSE_ADC_INSTANCE) and GPIO used by ADC channels.
  * @param  None
  * @retval None
  */
static void PWR_TCPP0203_Configure_ADC(void)
{
 8009218:	b580      	push	{r7, lr}
 800921a:	b090      	sub	sp, #64	@ 0x40
 800921c:	af02      	add	r7, sp, #8
  uint32_t Timeout ; /* Variable used for Timeout management */
#endif /* USE_TIMEOUT */

  /* Init with LL driver */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_RCC_SetADCClockSource(LL_RCC_ADC12_CLKSOURCE_SYSCLK);
 800921e:	4870      	ldr	r0, [pc, #448]	@ (80093e0 <PWR_TCPP0203_Configure_ADC+0x1c8>)
 8009220:	f7ff fbb0 	bl	8008984 <LL_RCC_SetADCClockSource>
#endif /* USE_STM32G4XX_NUCLEO */


  /* DMA controller clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMAMUX1);
 8009224:	2004      	movs	r0, #4
 8009226:	f7ff fa35 	bl	8008694 <LL_AHB1_GRP1_EnableClock>
#endif /* USE_STM32G4XX_NUCLEO */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800922a:	2001      	movs	r0, #1
 800922c:	f7ff fa32 	bl	8008694 <LL_AHB1_GRP1_EnableClock>

  LL_ADC_InitTypeDef ADC_InitStruct = {0U};
 8009230:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8009234:	2200      	movs	r2, #0
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	605a      	str	r2, [r3, #4]
 800923a:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0U};
 800923c:	f107 0310 	add.w	r3, r7, #16
 8009240:	2200      	movs	r2, #0
 8009242:	601a      	str	r2, [r3, #0]
 8009244:	605a      	str	r2, [r3, #4]
 8009246:	609a      	str	r2, [r3, #8]
 8009248:	60da      	str	r2, [r3, #12]
 800924a:	611a      	str	r2, [r3, #16]
 800924c:	615a      	str	r2, [r3, #20]
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0U};
 800924e:	463b      	mov	r3, r7
 8009250:	2200      	movs	r2, #0
 8009252:	601a      	str	r2, [r3, #0]
 8009254:	605a      	str	r2, [r3, #4]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	60da      	str	r2, [r3, #12]
#endif /* USE_STM32G4XX_NUCLEO */

  /* Peripheral clock enable */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_ADC12);
 800925a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800925e:	f7ff fa31 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
#else
#error "missing value definition for your your board"
#endif /* USE_STM32G4XX_NUCLEO */

  /* VISENSE_ADC_INSTANCE DMA Init */
  LL_DMA_SetDataTransferDirection(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8009262:	2200      	movs	r2, #0
 8009264:	2100      	movs	r1, #0
 8009266:	485f      	ldr	r0, [pc, #380]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 8009268:	f7ff f87a 	bl	8008360 <LL_DMA_SetDataTransferDirection>
  LL_DMA_SetChannelPriorityLevel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PRIORITY_LOW);
 800926c:	2200      	movs	r2, #0
 800926e:	2100      	movs	r1, #0
 8009270:	485c      	ldr	r0, [pc, #368]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 8009272:	f7ff f95b 	bl	800852c <LL_DMA_SetChannelPriorityLevel>
  LL_DMA_SetMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MODE_CIRCULAR);
 8009276:	2220      	movs	r2, #32
 8009278:	2100      	movs	r1, #0
 800927a:	485a      	ldr	r0, [pc, #360]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800927c:	f7ff f898 	bl	80083b0 <LL_DMA_SetMode>
  LL_DMA_SetPeriphIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PERIPH_NOINCREMENT);
 8009280:	2200      	movs	r2, #0
 8009282:	2100      	movs	r1, #0
 8009284:	4857      	ldr	r0, [pc, #348]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 8009286:	f7ff f8b9 	bl	80083fc <LL_DMA_SetPeriphIncMode>
  LL_DMA_SetMemoryIncMode(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MEMORY_INCREMENT);
 800928a:	2280      	movs	r2, #128	@ 0x80
 800928c:	2100      	movs	r1, #0
 800928e:	4855      	ldr	r0, [pc, #340]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 8009290:	f7ff f8da 	bl	8008448 <LL_DMA_SetMemoryIncMode>
  LL_DMA_SetPeriphSize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_PDATAALIGN_HALFWORD);
 8009294:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009298:	2100      	movs	r1, #0
 800929a:	4852      	ldr	r0, [pc, #328]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 800929c:	f7ff f8fa 	bl	8008494 <LL_DMA_SetPeriphSize>
  LL_DMA_SetMemorySize(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, LL_DMA_MDATAALIGN_HALFWORD);
 80092a0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80092a4:	2100      	movs	r1, #0
 80092a6:	484f      	ldr	r0, [pc, #316]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 80092a8:	f7ff f91a 	bl	80084e0 <LL_DMA_SetMemorySize>

#if defined(USE_STM32G4XX_NUCLEO)
  LL_DMA_SetPeriphRequest(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_DMA_REQ);
 80092ac:	2205      	movs	r2, #5
 80092ae:	2100      	movs	r1, #0
 80092b0:	484c      	ldr	r0, [pc, #304]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 80092b2:	f7ff f9c5 	bl	8008640 <LL_DMA_SetPeriphRequest>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_DMAMUX_SetRequestID(DMAMUX1, VISENSE_DMAMUX_CHANNEL, VISENSE_DMA_REQ);
#endif /* USE_STM32G4XX_NUCLEO */

  /* Set DMA transfer addresses of source and destination */
  LL_DMA_ConfigAddresses(VISENSE_DMA_INSTANCE,
 80092b6:	2100      	movs	r1, #0
 80092b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80092bc:	f7fe fe9e 	bl	8007ffc <LL_ADC_DMA_GetRegAddr>
 80092c0:	4602      	mov	r2, r0
 80092c2:	4949      	ldr	r1, [pc, #292]	@ (80093e8 <PWR_TCPP0203_Configure_ADC+0x1d0>)
 80092c4:	2300      	movs	r3, #0
 80092c6:	9300      	str	r3, [sp, #0]
 80092c8:	460b      	mov	r3, r1
 80092ca:	2100      	movs	r1, #0
 80092cc:	4845      	ldr	r0, [pc, #276]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 80092ce:	f7ff f979 	bl	80085c4 <LL_DMA_ConfigAddresses>
                         LL_ADC_DMA_GetRegAddr(VISENSE_ADC_INSTANCE, LL_ADC_DMA_REG_REGULAR_DATA),
                         (uint32_t)usbpd_pwr_adcx_buff,
                         LL_DMA_DIRECTION_PERIPH_TO_MEMORY);

  /* Set DMA transfer size */
  LL_DMA_SetDataLength(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL, VISENSE_ADC_BUFFER_SIZE);
 80092d2:	2202      	movs	r2, #2
 80092d4:	2100      	movs	r1, #0
 80092d6:	4843      	ldr	r0, [pc, #268]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 80092d8:	f7ff f94e 	bl	8008578 <LL_DMA_SetDataLength>

  /* Activation of DMA ---------------------------------------------------------*/
  /* Enable the DMA transfer */
  LL_DMA_EnableChannel(VISENSE_DMA_INSTANCE, VISENSE_DMA_CHANNEL);
 80092dc:	2100      	movs	r1, #0
 80092de:	4841      	ldr	r0, [pc, #260]	@ (80093e4 <PWR_TCPP0203_Configure_ADC+0x1cc>)
 80092e0:	f7ff f81c 	bl	800831c <LL_DMA_EnableChannel>
  */
#if defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerConfigurable(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_FIXED);
  ADC_InitStruct.Clock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
#endif /* USE_STM32G0XX_NUCLEO */
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_12B;
 80092e4:	2300      	movs	r3, #0
 80092e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  ADC_InitStruct.DataAlignment = LL_ADC_DATA_ALIGN_RIGHT;
 80092e8:	2300      	movs	r3, #0
 80092ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80092ec:	2300      	movs	r3, #0
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
  LL_ADC_Init(VISENSE_ADC_INSTANCE, &ADC_InitStruct);
 80092f0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80092f4:	4619      	mov	r1, r3
 80092f6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80092fa:	f004 fb79 	bl	800d9f0 <LL_ADC_Init>

  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80092fe:	2300      	movs	r3, #0
 8009300:	613b      	str	r3, [r7, #16]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8009302:	2301      	movs	r3, #1
 8009304:	617b      	str	r3, [r7, #20]
  ADC_REG_InitStruct.SequencerDiscont = LL_ADC_REG_SEQ_DISCONT_DISABLE;
 8009306:	2300      	movs	r3, #0
 8009308:	61bb      	str	r3, [r7, #24]
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 800930a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800930e:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.DMATransfer = LL_ADC_REG_DMA_TRANSFER_UNLIMITED;
 8009310:	2303      	movs	r3, #3
 8009312:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_OVERWRITTEN;
 8009314:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8009318:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_ADC_REG_Init(VISENSE_ADC_INSTANCE, &ADC_REG_InitStruct);
 800931a:	f107 0310 	add.w	r3, r7, #16
 800931e:	4619      	mov	r1, r3
 8009320:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009324:	f004 fb8a 	bl	800da3c <LL_ADC_REG_Init>
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_SetGainCompensation(VISENSE_ADC_INSTANCE, 0U);
 8009328:	2100      	movs	r1, #0
 800932a:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800932e:	f7fe fe7d 	bl	800802c <LL_ADC_SetGainCompensation>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_REG_SetSequencerScanDirection(VISENSE_ADC_INSTANCE, LL_ADC_REG_SEQ_SCAN_DIR_FORWARD);
  LL_ADC_SetTriggerFrequencyMode(VISENSE_ADC_INSTANCE, LL_ADC_CLOCK_FREQ_MODE_HIGH);
  LL_ADC_REG_SetSequencerChAdd(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL | ISENSE_ADC_CHANNEL);
#endif /* USE_STM32G4XX_NUCLEO */
  LL_ADC_SetOverSamplingScope(VISENSE_ADC_INSTANCE, LL_ADC_OVS_DISABLE);
 8009332:	2100      	movs	r1, #0
 8009334:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009338:	f7fe ff3a 	bl	80081b0 <LL_ADC_SetOverSamplingScope>
#if defined(USE_STM32G4XX_NUCLEO)
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_SYNC_PCLK_DIV4;
 800933c:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
 8009340:	603b      	str	r3, [r7, #0]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8009342:	2300      	movs	r3, #0
 8009344:	607b      	str	r3, [r7, #4]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(VISENSE_ADC_INSTANCE), &ADC_CommonInitStruct);
 8009346:	463b      	mov	r3, r7
 8009348:	4619      	mov	r1, r3
 800934a:	4828      	ldr	r0, [pc, #160]	@ (80093ec <PWR_TCPP0203_Configure_ADC+0x1d4>)
 800934c:	f004 fb10 	bl	800d970 <LL_ADC_CommonInit>
  LL_ADC_DisableIT_EOS(VISENSE_ADC_INSTANCE);
#endif /* USE_STM32G4XX_NUCLEO */

#if defined(USE_STM32G4XX_NUCLEO)
  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
 8009350:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009354:	f7fe ff41 	bl	80081da <LL_ADC_DisableDeepPowerDown>
#endif /* USE_STM32G4XX_NUCLEO */
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 8009358:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800935c:	f7fe ff4f 	bl	80081fe <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially                    */
  /*       CPU processing cycles (depends on compilation optimization).     */
  /* Note: If system core clock frequency is below 200kHz, wait time        */
  /*       is only a few CPU processing cycles.                             */
  uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2U))) / 10U);
 8009360:	4b23      	ldr	r3, [pc, #140]	@ (80093f0 <PWR_TCPP0203_Configure_ADC+0x1d8>)
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	099b      	lsrs	r3, r3, #6
 8009366:	4a23      	ldr	r2, [pc, #140]	@ (80093f4 <PWR_TCPP0203_Configure_ADC+0x1dc>)
 8009368:	fba2 2303 	umull	r2, r3, r2, r3
 800936c:	099a      	lsrs	r2, r3, #6
 800936e:	4613      	mov	r3, r2
 8009370:	009b      	lsls	r3, r3, #2
 8009372:	4413      	add	r3, r2
 8009374:	009b      	lsls	r3, r3, #2
 8009376:	461a      	mov	r2, r3
 8009378:	4b1f      	ldr	r3, [pc, #124]	@ (80093f8 <PWR_TCPP0203_Configure_ADC+0x1e0>)
 800937a:	fba3 2302 	umull	r2, r3, r3, r2
 800937e:	08db      	lsrs	r3, r3, #3
 8009380:	637b      	str	r3, [r7, #52]	@ 0x34
  while (wait_loop_index != 0U)
 8009382:	e002      	b.n	800938a <PWR_TCPP0203_Configure_ADC+0x172>
  {
    wait_loop_index--;
 8009384:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009386:	3b01      	subs	r3, #1
 8009388:	637b      	str	r3, [r7, #52]	@ 0x34
  while (wait_loop_index != 0U)
 800938a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1f9      	bne.n	8009384 <PWR_TCPP0203_Configure_ADC+0x16c>
  }

  /** Configure Regular Channels
  */
#if defined(USE_STM32G4XX_NUCLEO)
  LL_ADC_REG_SetSequencerRanks(VISENSE_ADC_INSTANCE, VSENSE_ADC_RANK, VSENSE_ADC_CHANNEL);
 8009390:	4a1a      	ldr	r2, [pc, #104]	@ (80093fc <PWR_TCPP0203_Configure_ADC+0x1e4>)
 8009392:	2106      	movs	r1, #6
 8009394:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009398:	f7fe fe6d 	bl	8008076 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 800939c:	2206      	movs	r2, #6
 800939e:	4917      	ldr	r1, [pc, #92]	@ (80093fc <PWR_TCPP0203_Configure_ADC+0x1e4>)
 80093a0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80093a4:	f7fe feb4 	bl	8008110 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SINGLE_ENDED);
 80093a8:	227f      	movs	r2, #127	@ 0x7f
 80093aa:	4914      	ldr	r1, [pc, #80]	@ (80093fc <PWR_TCPP0203_Configure_ADC+0x1e4>)
 80093ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80093b0:	f7fe feda 	bl	8008168 <LL_ADC_SetChannelSingleDiff>

  LL_ADC_REG_SetSequencerRanks(VISENSE_ADC_INSTANCE, ISENSE_ADC_RANK, ISENSE_ADC_CHANNEL);
 80093b4:	4a12      	ldr	r2, [pc, #72]	@ (8009400 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80093b6:	210c      	movs	r1, #12
 80093b8:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80093bc:	f7fe fe5b 	bl	8008076 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_247CYCLES_5);
 80093c0:	2206      	movs	r2, #6
 80093c2:	490f      	ldr	r1, [pc, #60]	@ (8009400 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80093c4:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80093c8:	f7fe fea2 	bl	8008110 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(VISENSE_ADC_INSTANCE, ISENSE_ADC_CHANNEL, LL_ADC_SINGLE_ENDED);
 80093cc:	227f      	movs	r2, #127	@ 0x7f
 80093ce:	490c      	ldr	r1, [pc, #48]	@ (8009400 <PWR_TCPP0203_Configure_ADC+0x1e8>)
 80093d0:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80093d4:	f7fe fec8 	bl	8008168 <LL_ADC_SetChannelSingleDiff>
#elif defined(USE_STM32G0XX_NUCLEO)
  LL_ADC_SetChannelSamplingTime(VISENSE_ADC_INSTANCE, VSENSE_ADC_CHANNEL, LL_ADC_SAMPLINGTIME_COMMON_1);
#endif /* USE_STM32G4XX_NUCLEO */
}
 80093d8:	bf00      	nop
 80093da:	3738      	adds	r7, #56	@ 0x38
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	001c0002 	.word	0x001c0002
 80093e4:	40020000 	.word	0x40020000
 80093e8:	20000aa8 	.word	0x20000aa8
 80093ec:	50000300 	.word	0x50000300
 80093f0:	20000004 	.word	0x20000004
 80093f4:	053e2d63 	.word	0x053e2d63
 80093f8:	cccccccd 	.word	0xcccccccd
 80093fc:	04300002 	.word	0x04300002
 8009400:	1d500080 	.word	0x1d500080

08009404 <PWR_TCPP0203_Activate_ADC>:
  *         - ADC group injected
  *           Feature not available          (feature not available on this STM32 series)
  * @retval None
  */
static void PWR_TCPP0203_Activate_ADC(void)
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b082      	sub	sp, #8
 8009408:	af00      	add	r7, sp, #0
  __IO uint32_t wait_loop_index = 0U;
 800940a:	2300      	movs	r3, #0
 800940c:	607b      	str	r3, [r7, #4]
  /*       implemented anyway to show the best practice usages                */
  /*       corresponding to reference manual procedure.                       */
  /*       Software can be optimized by removing some of these checks, if     */
  /*       they are not relevant considering previous settings and actions    */
  /*       in user application.                                               */
  if (0U == LL_ADC_IsEnabled(VISENSE_ADC_INSTANCE))
 800940e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009412:	f7fe ff1c 	bl	800824e <LL_ADC_IsEnabled>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d14e      	bne.n	80094ba <PWR_TCPP0203_Activate_ADC+0xb6>
  {
#if defined(STM32G474xx)
    LL_ADC_DisableDeepPowerDown(VISENSE_ADC_INSTANCE);
#endif /* STM32G474xx */
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(VISENSE_ADC_INSTANCE);
 800941c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009420:	f7fe feed 	bl	80081fe <LL_ADC_EnableInternalRegulator>
    /* Compute number of CPU cycles to wait for, from delay in us.            */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    /* Note: If system core clock frequency is below 200kHz, wait time        */
    /*       is only a few CPU processing cycles.                             */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000u * 2u))) / 10u);
 8009424:	4b27      	ldr	r3, [pc, #156]	@ (80094c4 <PWR_TCPP0203_Activate_ADC+0xc0>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	099b      	lsrs	r3, r3, #6
 800942a:	4a27      	ldr	r2, [pc, #156]	@ (80094c8 <PWR_TCPP0203_Activate_ADC+0xc4>)
 800942c:	fba2 2303 	umull	r2, r3, r2, r3
 8009430:	099a      	lsrs	r2, r3, #6
 8009432:	4613      	mov	r3, r2
 8009434:	009b      	lsls	r3, r3, #2
 8009436:	4413      	add	r3, r2
 8009438:	009b      	lsls	r3, r3, #2
 800943a:	461a      	mov	r2, r3
 800943c:	4b23      	ldr	r3, [pc, #140]	@ (80094cc <PWR_TCPP0203_Activate_ADC+0xc8>)
 800943e:	fba3 2302 	umull	r2, r3, r3, r2
 8009442:	08db      	lsrs	r3, r3, #3
 8009444:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 8009446:	e002      	b.n	800944e <PWR_TCPP0203_Activate_ADC+0x4a>
    {
      wait_loop_index--;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	3b01      	subs	r3, #1
 800944c:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d1f9      	bne.n	8009448 <PWR_TCPP0203_Activate_ADC+0x44>
    /* Note: Specificity of this STM32 series: Calibration factor is           */
    /*       available in data register and also transferred by DMA.           */
    /*       To not insert ADC calibration factor among ADC conversion data   */
    /*       in DMA destination address, DMA transfer must be disabled during */
    /*       calibration.                                                     */
    backup_setting_adc_dma_transfer = LL_ADC_REG_GetDMATransfer(VISENSE_ADC_INSTANCE);
 8009454:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009458:	f7fe fe4c 	bl	80080f4 <LL_ADC_REG_GetDMATransfer>
 800945c:	4603      	mov	r3, r0
 800945e:	603b      	str	r3, [r7, #0]
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, LL_ADC_REG_DMA_TRANSFER_NONE);
 8009460:	2100      	movs	r1, #0
 8009462:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009466:	f7fe fe32 	bl	80080ce <LL_ADC_REG_SetDMATransfer>

#if !defined (STM32G474xx)
    /* Run ADC self calibration */
    LL_ADC_StartCalibration(VISENSE_ADC_INSTANCE, ADC_SINGLE_ENDED);
 800946a:	217f      	movs	r1, #127	@ 0x7f
 800946c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8009470:	f7fe ff00 	bl	8008274 <LL_ADC_StartCalibration>
    /* Poll for ADC effectively calibrated */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_CALIBRATION_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U != LL_ADC_IsCalibrationOnGoing(VISENSE_ADC_INSTANCE))
 8009474:	bf00      	nop
 8009476:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800947a:	f7fe ff14 	bl	80082a6 <LL_ADC_IsCalibrationOnGoing>
 800947e:	4603      	mov	r3, r0
 8009480:	2b00      	cmp	r3, #0
 8009482:	d1f8      	bne.n	8009476 <PWR_TCPP0203_Activate_ADC+0x72>
      }
#endif /* USE_TIMEOUT */
    }

    /* Restore ADC DMA transfer request after calibration */
    LL_ADC_REG_SetDMATransfer(VISENSE_ADC_INSTANCE, backup_setting_adc_dma_transfer);
 8009484:	683b      	ldr	r3, [r7, #0]
 8009486:	4619      	mov	r1, r3
 8009488:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800948c:	f7fe fe1f 	bl	80080ce <LL_ADC_REG_SetDMATransfer>

    /* Delay between ADC end of calibration and ADC enable.                   */
    /* Note: Variable divided by 2 to compensate partially                    */
    /*       CPU processing cycles (depends on compilation optimization).     */
    wait_loop_index = (ADC_DELAY_CALIB_ENABLE_CPU_CYCLES >> 1U);
 8009490:	2340      	movs	r3, #64	@ 0x40
 8009492:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 8009494:	e002      	b.n	800949c <PWR_TCPP0203_Activate_ADC+0x98>
    {
      wait_loop_index--;
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	3b01      	subs	r3, #1
 800949a:	607b      	str	r3, [r7, #4]
    while (0U != wait_loop_index)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	d1f9      	bne.n	8009496 <PWR_TCPP0203_Activate_ADC+0x92>
    }

    /* Enable ADC */
    LL_ADC_Enable(VISENSE_ADC_INSTANCE);
 80094a2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80094a6:	f7fe febe 	bl	8008226 <LL_ADC_Enable>
    /* Poll for ADC ready to convert */
#if (USE_TIMEOUT == 1)
    Timeout = ADC_ENABLE_TIMEOUT_MS;
#endif /* USE_TIMEOUT */

    while (0U == LL_ADC_IsActiveFlag_ADRDY(VISENSE_ADC_INSTANCE))
 80094aa:	bf00      	nop
 80094ac:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80094b0:	f7fe ff21 	bl	80082f6 <LL_ADC_IsActiveFlag_ADRDY>
 80094b4:	4603      	mov	r3, r0
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d0f8      	beq.n	80094ac <PWR_TCPP0203_Activate_ADC+0xa8>
  /*       using function:                                                    */
  /*       "LL_ADC_REG_StartConversion();"                                    */

  /* Operation on ADC hierarchical scope: ADC group injected -----------------*/
  /* Note: Feature not available on this STM32 series */
}
 80094ba:	bf00      	nop
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	20000004 	.word	0x20000004
 80094c8:	053e2d63 	.word	0x053e2d63
 80094cc:	cccccccd 	.word	0xcccccccd

080094d0 <PWR_TCPP0203_ITConfigInit>:
  * @note   Corresponds to EXTI mapped onto FLGn pin of TCPP0203
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_ITConfigInit(uint32_t PortNum)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
  if (USBPD_PWR_Port_Status[PortNum].IsItEnabled == 0U)
 80094d8:	4921      	ldr	r1, [pc, #132]	@ (8009560 <PWR_TCPP0203_ITConfigInit+0x90>)
 80094da:	687a      	ldr	r2, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	005b      	lsls	r3, r3, #1
 80094e0:	4413      	add	r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	3301      	adds	r3, #1
 80094e8:	781b      	ldrb	r3, [r3, #0]
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d133      	bne.n	8009556 <PWR_TCPP0203_ITConfigInit+0x86>
  {
    USBPD_PWR_Port_Status[PortNum].IsItEnabled = 1U;
 80094ee:	491c      	ldr	r1, [pc, #112]	@ (8009560 <PWR_TCPP0203_ITConfigInit+0x90>)
 80094f0:	687a      	ldr	r2, [r7, #4]
 80094f2:	4613      	mov	r3, r2
 80094f4:	005b      	lsls	r3, r3, #1
 80094f6:	4413      	add	r3, r2
 80094f8:	009b      	lsls	r3, r3, #2
 80094fa:	440b      	add	r3, r1
 80094fc:	3301      	adds	r3, #1
 80094fe:	2201      	movs	r2, #1
 8009500:	701a      	strb	r2, [r3, #0]

    /* Enable the GPIO EXTI clock */
    TCPP0203_PORT0_FLG_GPIO_CLK_ENABLE();
 8009502:	2004      	movs	r0, #4
 8009504:	f7ff f8de 	bl	80086c4 <LL_AHB2_GRP1_EnableClock>
    /* Configure IO */
    LL_GPIO_SetPinMode(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_MODE);
 8009508:	2200      	movs	r2, #0
 800950a:	2120      	movs	r1, #32
 800950c:	4815      	ldr	r0, [pc, #84]	@ (8009564 <PWR_TCPP0203_ITConfigInit+0x94>)
 800950e:	f7ff f8f1 	bl	80086f4 <LL_GPIO_SetPinMode>
    LL_GPIO_SetPinPull(TCPP0203_PORT0_FLG_GPIO_PORT, TCPP0203_PORT0_FLG_GPIO_PIN, TCPP0203_PORT0_FLG_GPIO_PUPD);
 8009512:	2201      	movs	r2, #1
 8009514:	2120      	movs	r1, #32
 8009516:	4813      	ldr	r0, [pc, #76]	@ (8009564 <PWR_TCPP0203_ITConfigInit+0x94>)
 8009518:	f7ff f97e 	bl	8008818 <LL_GPIO_SetPinPull>
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800951c:	4b12      	ldr	r3, [pc, #72]	@ (8009568 <PWR_TCPP0203_ITConfigInit+0x98>)
 800951e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009520:	4a11      	ldr	r2, [pc, #68]	@ (8009568 <PWR_TCPP0203_ITConfigInit+0x98>)
 8009522:	f043 0301 	orr.w	r3, r3, #1
 8009526:	6613      	str	r3, [r2, #96]	@ 0x60
 8009528:	4b0f      	ldr	r3, [pc, #60]	@ (8009568 <PWR_TCPP0203_ITConfigInit+0x98>)
 800952a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800952c:	f003 0301 	and.w	r3, r3, #1
 8009530:	60fb      	str	r3, [r7, #12]
 8009532:	68fb      	ldr	r3, [r7, #12]

    /* Connect External Line to the GPIO*/
    TCPP0203_PORT0_FLG_SET_EXTI();
 8009534:	490d      	ldr	r1, [pc, #52]	@ (800956c <PWR_TCPP0203_ITConfigInit+0x9c>)
 8009536:	2002      	movs	r0, #2
 8009538:	f7ff f9ec 	bl	8008914 <LL_SYSCFG_SetEXTISource>

    /* Enable a falling trigger EXTI line x Interrupt */
    TCPP0203_PORT0_FLG_EXTI_ENABLE();
 800953c:	2020      	movs	r0, #32
 800953e:	f7ff f9c5 	bl	80088cc <LL_EXTI_EnableIT_0_31>
    TCPP0203_PORT0_FLG_TRIG_ENABLE();
 8009542:	2020      	movs	r0, #32
 8009544:	f7ff f9d4 	bl	80088f0 <LL_EXTI_EnableFallingTrig_0_31>

    /* Configure NVIC for EXTIx_IRQn */
    NVIC_SetPriority(TCPP0203_PORT0_FLG_EXTI_IRQN, TCPP0203_PORT0_FLG_IT_PRIORITY);
 8009548:	210c      	movs	r1, #12
 800954a:	2017      	movs	r0, #23
 800954c:	f7fe fd2c 	bl	8007fa8 <__NVIC_SetPriority>
    NVIC_EnableIRQ(TCPP0203_PORT0_FLG_EXTI_IRQN);
 8009550:	2017      	movs	r0, #23
 8009552:	f7fe fd0b 	bl	8007f6c <__NVIC_EnableIRQ>
  }
}
 8009556:	bf00      	nop
 8009558:	3710      	adds	r7, #16
 800955a:	46bd      	mov	sp, r7
 800955c:	bd80      	pop	{r7, pc}
 800955e:	bf00      	nop
 8009560:	20000ab0 	.word	0x20000ab0
 8009564:	48000800 	.word	0x48000800
 8009568:	40021000 	.word	0x40021000
 800956c:	00f00001 	.word	0x00f00001

08009570 <PWR_TCPP0203_BUSConfigInit>:
  * @param  PortNum   Port number
  * @param  Address   I2C Address
  * @retval BSP status
  */
static int32_t PWR_TCPP0203_BUSConfigInit(uint32_t PortNum, uint16_t Address)
{
 8009570:	b590      	push	{r4, r7, lr}
 8009572:	b08b      	sub	sp, #44	@ 0x2c
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
 8009578:	460b      	mov	r3, r1
 800957a:	807b      	strh	r3, [r7, #2]
  int32_t                  ret = BSP_ERROR_NONE;
 800957c:	2300      	movs	r3, #0
 800957e:	627b      	str	r3, [r7, #36]	@ 0x24
  TCPP0203_IO_t            TCPP0203IOCtx;
  uint8_t                  tcpp_type;

  /* Configure the TCPP0203 I2C driver */
  TCPP0203IOCtx.Address     = Address;
 8009580:	887b      	ldrh	r3, [r7, #2]
 8009582:	82bb      	strh	r3, [r7, #20]
  TCPP0203IOCtx.Init        = BSP_I2C_Init;
 8009584:	4b43      	ldr	r3, [pc, #268]	@ (8009694 <PWR_TCPP0203_BUSConfigInit+0x124>)
 8009586:	60fb      	str	r3, [r7, #12]
  TCPP0203IOCtx.DeInit      = BSP_I2C_DeInit;
 8009588:	4b43      	ldr	r3, [pc, #268]	@ (8009698 <PWR_TCPP0203_BUSConfigInit+0x128>)
 800958a:	613b      	str	r3, [r7, #16]
  TCPP0203IOCtx.ReadReg     = BSP_I2C_ReadReg;
 800958c:	4b43      	ldr	r3, [pc, #268]	@ (800969c <PWR_TCPP0203_BUSConfigInit+0x12c>)
 800958e:	61fb      	str	r3, [r7, #28]
  TCPP0203IOCtx.WriteReg    = BSP_I2C_WriteReg;
 8009590:	4b43      	ldr	r3, [pc, #268]	@ (80096a0 <PWR_TCPP0203_BUSConfigInit+0x130>)
 8009592:	61bb      	str	r3, [r7, #24]
  TCPP0203IOCtx.GetTick     = BSP_GetTick;
 8009594:	4b43      	ldr	r3, [pc, #268]	@ (80096a4 <PWR_TCPP0203_BUSConfigInit+0x134>)
 8009596:	623b      	str	r3, [r7, #32]

  /* Register the component on BUS IO */
  if (TCPP0203_RegisterBusIO(&USBPD_PWR_PortCompObj[PortNum], &TCPP0203IOCtx) != TCPP0203_OK)
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	4613      	mov	r3, r2
 800959c:	009b      	lsls	r3, r3, #2
 800959e:	4413      	add	r3, r2
 80095a0:	00db      	lsls	r3, r3, #3
 80095a2:	4a41      	ldr	r2, [pc, #260]	@ (80096a8 <PWR_TCPP0203_BUSConfigInit+0x138>)
 80095a4:	4413      	add	r3, r2
 80095a6:	f107 020c 	add.w	r2, r7, #12
 80095aa:	4611      	mov	r1, r2
 80095ac:	4618      	mov	r0, r3
 80095ae:	f7fd fd17 	bl	8006fe0 <TCPP0203_RegisterBusIO>
 80095b2:	4603      	mov	r3, r0
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d003      	beq.n	80095c0 <PWR_TCPP0203_BUSConfigInit+0x50>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80095b8:	f06f 0307 	mvn.w	r3, #7
 80095bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80095be:	e064      	b.n	800968a <PWR_TCPP0203_BUSConfigInit+0x11a>
  }
  else
  {
    /* Initialisation step */
    USBPD_PWR_PortCompDrv[PortNum] = &TCPP0203_Driver;
 80095c0:	4a3a      	ldr	r2, [pc, #232]	@ (80096ac <PWR_TCPP0203_BUSConfigInit+0x13c>)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	493a      	ldr	r1, [pc, #232]	@ (80096b0 <PWR_TCPP0203_BUSConfigInit+0x140>)
 80095c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (USBPD_PWR_PortCompDrv[PortNum]->Init(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 80095ca:	4a38      	ldr	r2, [pc, #224]	@ (80096ac <PWR_TCPP0203_BUSConfigInit+0x13c>)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095d2:	6819      	ldr	r1, [r3, #0]
 80095d4:	687a      	ldr	r2, [r7, #4]
 80095d6:	4613      	mov	r3, r2
 80095d8:	009b      	lsls	r3, r3, #2
 80095da:	4413      	add	r3, r2
 80095dc:	00db      	lsls	r3, r3, #3
 80095de:	4a32      	ldr	r2, [pc, #200]	@ (80096a8 <PWR_TCPP0203_BUSConfigInit+0x138>)
 80095e0:	4413      	add	r3, r2
 80095e2:	4618      	mov	r0, r3
 80095e4:	4788      	blx	r1
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d002      	beq.n	80095f2 <PWR_TCPP0203_BUSConfigInit+0x82>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80095ec:	f06f 0304 	mvn.w	r3, #4
 80095f0:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Read the component type */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadTCPPType(&USBPD_PWR_PortCompObj[PortNum], &tcpp_type) != TCPP0203_OK)
 80095f2:	4a2e      	ldr	r2, [pc, #184]	@ (80096ac <PWR_TCPP0203_BUSConfigInit+0x13c>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80095fa:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 80095fc:	687a      	ldr	r2, [r7, #4]
 80095fe:	4613      	mov	r3, r2
 8009600:	009b      	lsls	r3, r3, #2
 8009602:	4413      	add	r3, r2
 8009604:	00db      	lsls	r3, r3, #3
 8009606:	4a28      	ldr	r2, [pc, #160]	@ (80096a8 <PWR_TCPP0203_BUSConfigInit+0x138>)
 8009608:	4413      	add	r3, r2
 800960a:	f107 020b 	add.w	r2, r7, #11
 800960e:	4611      	mov	r1, r2
 8009610:	4618      	mov	r0, r3
 8009612:	47a0      	blx	r4
 8009614:	4603      	mov	r3, r0
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <PWR_TCPP0203_BUSConfigInit+0xb2>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800961a:	f06f 0304 	mvn.w	r3, #4
 800961e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009620:	e033      	b.n	800968a <PWR_TCPP0203_BUSConfigInit+0x11a>
    }
    /* Check the component type */
    else if ((tcpp_type != TCPP0203_DEVICE_TYPE_02)
 8009622:	7afb      	ldrb	r3, [r7, #11]
 8009624:	2b80      	cmp	r3, #128	@ 0x80
 8009626:	d006      	beq.n	8009636 <PWR_TCPP0203_BUSConfigInit+0xc6>
             && (tcpp_type != TCPP0203_DEVICE_TYPE_03))
 8009628:	7afb      	ldrb	r3, [r7, #11]
 800962a:	2b00      	cmp	r3, #0
 800962c:	d003      	beq.n	8009636 <PWR_TCPP0203_BUSConfigInit+0xc6>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800962e:	f06f 0306 	mvn.w	r3, #6
 8009632:	627b      	str	r3, [r7, #36]	@ 0x24
 8009634:	e029      	b.n	800968a <PWR_TCPP0203_BUSConfigInit+0x11a>
    }
    /* Check the component type is same as declared in config */
    else if (((USBPD_PWR_HW_CONFIG_TYPE_TCPP02 == USBPD_PWR_Port_Configs[PortNum].Type)
 8009636:	4a1f      	ldr	r2, [pc, #124]	@ (80096b4 <PWR_TCPP0203_BUSConfigInit+0x144>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800963e:	2b02      	cmp	r3, #2
 8009640:	d102      	bne.n	8009648 <PWR_TCPP0203_BUSConfigInit+0xd8>
              && (tcpp_type != TCPP0203_DEVICE_TYPE_02))
 8009642:	7afb      	ldrb	r3, [r7, #11]
 8009644:	2b80      	cmp	r3, #128	@ 0x80
 8009646:	d108      	bne.n	800965a <PWR_TCPP0203_BUSConfigInit+0xea>
             || ((USBPD_PWR_HW_CONFIG_TYPE_TCPP03 == USBPD_PWR_Port_Configs[PortNum].Type)
 8009648:	4a1a      	ldr	r2, [pc, #104]	@ (80096b4 <PWR_TCPP0203_BUSConfigInit+0x144>)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8009650:	2b03      	cmp	r3, #3
 8009652:	d106      	bne.n	8009662 <PWR_TCPP0203_BUSConfigInit+0xf2>
                 && (tcpp_type != TCPP0203_DEVICE_TYPE_03)))
 8009654:	7afb      	ldrb	r3, [r7, #11]
 8009656:	2b00      	cmp	r3, #0
 8009658:	d003      	beq.n	8009662 <PWR_TCPP0203_BUSConfigInit+0xf2>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800965a:	f06f 0306 	mvn.w	r3, #6
 800965e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009660:	e013      	b.n	800968a <PWR_TCPP0203_BUSConfigInit+0x11a>
    }
    /* Reset TCPP0203 Reg0 register */
    else if (USBPD_PWR_PortCompDrv[PortNum]->Reset(&USBPD_PWR_PortCompObj[PortNum]) != TCPP0203_OK)
 8009662:	4a12      	ldr	r2, [pc, #72]	@ (80096ac <PWR_TCPP0203_BUSConfigInit+0x13c>)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800966a:	6899      	ldr	r1, [r3, #8]
 800966c:	687a      	ldr	r2, [r7, #4]
 800966e:	4613      	mov	r3, r2
 8009670:	009b      	lsls	r3, r3, #2
 8009672:	4413      	add	r3, r2
 8009674:	00db      	lsls	r3, r3, #3
 8009676:	4a0c      	ldr	r2, [pc, #48]	@ (80096a8 <PWR_TCPP0203_BUSConfigInit+0x138>)
 8009678:	4413      	add	r3, r2
 800967a:	4618      	mov	r0, r3
 800967c:	4788      	blx	r1
 800967e:	4603      	mov	r3, r0
 8009680:	2b00      	cmp	r3, #0
 8009682:	d002      	beq.n	800968a <PWR_TCPP0203_BUSConfigInit+0x11a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8009684:	f06f 0304 	mvn.w	r3, #4
 8009688:	627b      	str	r3, [r7, #36]	@ 0x24
    else
    {
      /* Registration completed */
    }
  }
  return ret;
 800968a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800968c:	4618      	mov	r0, r3
 800968e:	372c      	adds	r7, #44	@ 0x2c
 8009690:	46bd      	mov	sp, r7
 8009692:	bd90      	pop	{r4, r7, pc}
 8009694:	0800786d 	.word	0x0800786d
 8009698:	080078c9 	.word	0x080078c9
 800969c:	08007961 	.word	0x08007961
 80096a0:	080078f9 	.word	0x080078f9
 80096a4:	080079c5 	.word	0x080079c5
 80096a8:	20000abc 	.word	0x20000abc
 80096ac:	20000ae4 	.word	0x20000ae4
 80096b0:	20000008 	.word	0x20000008
 80096b4:	20000070 	.word	0x20000070

080096b8 <PWR_TCPP0203_EventCallback>:
  * @brief  Handle Event callback
  * @param  PortNum   Port number
  * @retval None
  */
static void PWR_TCPP0203_EventCallback(uint32_t PortNum)
{
 80096b8:	b590      	push	{r4, r7, lr}
 80096ba:	b08b      	sub	sp, #44	@ 0x2c
 80096bc:	af02      	add	r7, sp, #8
 80096be:	6078      	str	r0, [r7, #4]
  uint8_t flg_reg;

  /* In case of TCPP0203, this callback could be called when an event is detected
     on FLGn line */
  if (USBPD_PWR_Port_Status[PortNum].IsInitialized == 1U)
 80096c0:	49b0      	ldr	r1, [pc, #704]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 80096c2:	687a      	ldr	r2, [r7, #4]
 80096c4:	4613      	mov	r3, r2
 80096c6:	005b      	lsls	r3, r3, #1
 80096c8:	4413      	add	r3, r2
 80096ca:	009b      	lsls	r3, r3, #2
 80096cc:	440b      	add	r3, r1
 80096ce:	781b      	ldrb	r3, [r3, #0]
 80096d0:	2b01      	cmp	r3, #1
 80096d2:	f040 817e 	bne.w	80099d2 <PWR_TCPP0203_EventCallback+0x31a>
  {
    /* Read Flags register (FLGn) */
    if (USBPD_PWR_PortCompDrv[PortNum]->ReadFlagRegister(&USBPD_PWR_PortCompObj[PortNum], &flg_reg) == TCPP0203_OK)
 80096d6:	4aac      	ldr	r2, [pc, #688]	@ (8009988 <PWR_TCPP0203_EventCallback+0x2d0>)
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096de:	6e5c      	ldr	r4, [r3, #100]	@ 0x64
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	4613      	mov	r3, r2
 80096e4:	009b      	lsls	r3, r3, #2
 80096e6:	4413      	add	r3, r2
 80096e8:	00db      	lsls	r3, r3, #3
 80096ea:	4aa8      	ldr	r2, [pc, #672]	@ (800998c <PWR_TCPP0203_EventCallback+0x2d4>)
 80096ec:	4413      	add	r3, r2
 80096ee:	f107 021b 	add.w	r2, r7, #27
 80096f2:	4611      	mov	r1, r2
 80096f4:	4618      	mov	r0, r3
 80096f6:	47a0      	blx	r4
 80096f8:	4603      	mov	r3, r0
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	f040 8169 	bne.w	80099d2 <PWR_TCPP0203_EventCallback+0x31a>
    {
#ifdef _TRACE
      char _str[13];
      (void)sprintf(_str, "Reg2_0x%02x", flg_reg);
 8009700:	7efb      	ldrb	r3, [r7, #27]
 8009702:	461a      	mov	r2, r3
 8009704:	f107 030c 	add.w	r3, r7, #12
 8009708:	49a1      	ldr	r1, [pc, #644]	@ (8009990 <PWR_TCPP0203_EventCallback+0x2d8>)
 800970a:	4618      	mov	r0, r3
 800970c:	f010 ff5c 	bl	801a5c8 <siprintf>
      BSP_USBPD_PWR_TRACE(PortNum, _str);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	b2d9      	uxtb	r1, r3
 8009714:	f107 030c 	add.w	r3, r7, #12
 8009718:	220c      	movs	r2, #12
 800971a:	9200      	str	r2, [sp, #0]
 800971c:	2200      	movs	r2, #0
 800971e:	2006      	movs	r0, #6
 8009720:	f004 ff72 	bl	800e608 <USBPD_TRACE_Add>
#endif /* _TRACE */

      /* If FLGn has been set to 0 in LOW POWER or HIBERNATE mode,
         it is expected that a VBUS_OK condition is detected.
         In this case, if any, vBus Detection callback could be called */
      switch (USBPD_PWR_Port_Status[PortNum].PwrSavingMode)
 8009724:	4997      	ldr	r1, [pc, #604]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009726:	687a      	ldr	r2, [r7, #4]
 8009728:	4613      	mov	r3, r2
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	009b      	lsls	r3, r3, #2
 8009730:	440b      	add	r3, r1
 8009732:	3303      	adds	r3, #3
 8009734:	781b      	ldrb	r3, [r3, #0]
 8009736:	2b03      	cmp	r3, #3
 8009738:	d05b      	beq.n	80097f2 <PWR_TCPP0203_EventCallback+0x13a>
 800973a:	2b03      	cmp	r3, #3
 800973c:	f300 813a 	bgt.w	80099b4 <PWR_TCPP0203_EventCallback+0x2fc>
 8009740:	2b01      	cmp	r3, #1
 8009742:	d002      	beq.n	800974a <PWR_TCPP0203_EventCallback+0x92>
 8009744:	2b02      	cmp	r3, #2
 8009746:	d02c      	beq.n	80097a2 <PWR_TCPP0203_EventCallback+0xea>
 8009748:	e134      	b.n	80099b4 <PWR_TCPP0203_EventCallback+0x2fc>
      {
        case USBPD_PWR_MODE_HIBERNATE:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 800974a:	7efb      	ldrb	r3, [r7, #27]
 800974c:	f003 0320 	and.w	r3, r3, #32
 8009750:	2b00      	cmp	r3, #0
 8009752:	d01c      	beq.n	800978e <PWR_TCPP0203_EventCallback+0xd6>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 8009754:	498b      	ldr	r1, [pc, #556]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	4613      	mov	r3, r2
 800975a:	005b      	lsls	r3, r3, #1
 800975c:	4413      	add	r3, r2
 800975e:	009b      	lsls	r3, r3, #2
 8009760:	440b      	add	r3, r1
 8009762:	3308      	adds	r3, #8
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 812e 	beq.w	80099c8 <PWR_TCPP0203_EventCallback+0x310>
            {
              /* In case of TCPP03 in Hibernate Mode (SNK config),
                 Mode is set to Low power to enable TCPP03 behavior on CC lines */
              /* Switch to Low Power mode */
              (void)BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 800976c:	2102      	movs	r1, #2
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f7ff fa12 	bl	8008b98 <BSP_USBPD_PWR_SetPowerMode>

              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 8009774:	4983      	ldr	r1, [pc, #524]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009776:	687a      	ldr	r2, [r7, #4]
 8009778:	4613      	mov	r3, r2
 800977a:	005b      	lsls	r3, r3, #1
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	440b      	add	r3, r1
 8009782:	3308      	adds	r3, #8
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	2100      	movs	r1, #0
 8009788:	6878      	ldr	r0, [r7, #4]
 800978a:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 800978c:	e11c      	b.n	80099c8 <PWR_TCPP0203_EventCallback+0x310>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	b2d9      	uxtb	r1, r3
 8009792:	2315      	movs	r3, #21
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4b7f      	ldr	r3, [pc, #508]	@ (8009994 <PWR_TCPP0203_EventCallback+0x2dc>)
 8009798:	2200      	movs	r2, #0
 800979a:	2006      	movs	r0, #6
 800979c:	f004 ff34 	bl	800e608 <USBPD_TRACE_Add>
          break;
 80097a0:	e112      	b.n	80099c8 <PWR_TCPP0203_EventCallback+0x310>
        }

        case USBPD_PWR_MODE_LOWPOWER:
        {
          if ((flg_reg & TCPP0203_FLAG_VBUS_OK_SET) == TCPP0203_FLAG_VBUS_OK_SET)
 80097a2:	7efb      	ldrb	r3, [r7, #27]
 80097a4:	f003 0320 	and.w	r3, r3, #32
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d018      	beq.n	80097de <PWR_TCPP0203_EventCallback+0x126>
          {
            if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 80097ac:	4975      	ldr	r1, [pc, #468]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	4613      	mov	r3, r2
 80097b2:	005b      	lsls	r3, r3, #1
 80097b4:	4413      	add	r3, r2
 80097b6:	009b      	lsls	r3, r3, #2
 80097b8:	440b      	add	r3, r1
 80097ba:	3308      	adds	r3, #8
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	f000 8104 	beq.w	80099cc <PWR_TCPP0203_EventCallback+0x314>
            {
              USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_CONNECTED);
 80097c4:	496f      	ldr	r1, [pc, #444]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 80097c6:	687a      	ldr	r2, [r7, #4]
 80097c8:	4613      	mov	r3, r2
 80097ca:	005b      	lsls	r3, r3, #1
 80097cc:	4413      	add	r3, r2
 80097ce:	009b      	lsls	r3, r3, #2
 80097d0:	440b      	add	r3, r1
 80097d2:	3308      	adds	r3, #8
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	2100      	movs	r1, #0
 80097d8:	6878      	ldr	r0, [r7, #4]
 80097da:	4798      	blx	r3
          else
          {
            /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
          }
          break;
 80097dc:	e0f6      	b.n	80099cc <PWR_TCPP0203_EventCallback+0x314>
            BSP_USBPD_PWR_TRACE(PortNum, "-- Wrong detection --");
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	b2d9      	uxtb	r1, r3
 80097e2:	2315      	movs	r3, #21
 80097e4:	9300      	str	r3, [sp, #0]
 80097e6:	4b6b      	ldr	r3, [pc, #428]	@ (8009994 <PWR_TCPP0203_EventCallback+0x2dc>)
 80097e8:	2200      	movs	r2, #0
 80097ea:	2006      	movs	r0, #6
 80097ec:	f004 ff0c 	bl	800e608 <USBPD_TRACE_Add>
          break;
 80097f0:	e0ec      	b.n	80099cc <PWR_TCPP0203_EventCallback+0x314>
        }

        case USBPD_PWR_MODE_NORMAL:
        {
          uint32_t tickfault = HAL_GetTick();
 80097f2:	f000 f9b7 	bl	8009b64 <HAL_GetTick>
 80097f6:	61f8      	str	r0, [r7, #28]
          uint8_t recoveryword;

          /* In all other cases (NORMAL mode), FLGn signals fault detection events. */
          /* Check type of error raised in FLGn */
          if ((flg_reg & TCPP0203_FLAG_OCP_VCONN_SET) == TCPP0203_FLAG_OCP_VCONN_SET)
 80097f8:	7efb      	ldrb	r3, [r7, #27]
 80097fa:	f003 0301 	and.w	r3, r3, #1
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d008      	beq.n	8009814 <PWR_TCPP0203_EventCallback+0x15c>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VCONN detected --");
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	b2d9      	uxtb	r1, r3
 8009806:	2318      	movs	r3, #24
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	4b63      	ldr	r3, [pc, #396]	@ (8009998 <PWR_TCPP0203_EventCallback+0x2e0>)
 800980c:	2200      	movs	r2, #0
 800980e:	2006      	movs	r0, #6
 8009810:	f004 fefa 	bl	800e608 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OCP_VBUS_SET) == TCPP0203_FLAG_OCP_VBUS_SET)
 8009814:	7efb      	ldrb	r3, [r7, #27]
 8009816:	f003 0302 	and.w	r3, r3, #2
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8087 	beq.w	800992e <PWR_TCPP0203_EventCallback+0x276>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OCP VBUS detected --");
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	b2d9      	uxtb	r1, r3
 8009824:	2317      	movs	r3, #23
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	4b5c      	ldr	r3, [pc, #368]	@ (800999c <PWR_TCPP0203_EventCallback+0x2e4>)
 800982a:	2200      	movs	r2, #0
 800982c:	2006      	movs	r0, #6
 800982e:	f004 feeb 	bl	800e608 <USBPD_TRACE_Add>

            /* Check if detected fault could be recovered */
            /* In case of OCP fault, allow to restart and check if a 2nd OCP fault occurs in a limited time */
            if ((tickfault > USBPD_PWR_Port_Status[PortNum].LastFaultTick)
 8009832:	4954      	ldr	r1, [pc, #336]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009834:	687a      	ldr	r2, [r7, #4]
 8009836:	4613      	mov	r3, r2
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	4413      	add	r3, r2
 800983c:	009b      	lsls	r3, r3, #2
 800983e:	440b      	add	r3, r1
 8009840:	3304      	adds	r3, #4
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	69fa      	ldr	r2, [r7, #28]
 8009846:	429a      	cmp	r2, r3
 8009848:	d967      	bls.n	800991a <PWR_TCPP0203_EventCallback+0x262>
                && ((tickfault - USBPD_PWR_Port_Status[PortNum].LastFaultTick) > USBPD_PWR_FAULT_MIN_TIME_RECOVERY))
 800984a:	494e      	ldr	r1, [pc, #312]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 800984c:	687a      	ldr	r2, [r7, #4]
 800984e:	4613      	mov	r3, r2
 8009850:	005b      	lsls	r3, r3, #1
 8009852:	4413      	add	r3, r2
 8009854:	009b      	lsls	r3, r3, #2
 8009856:	440b      	add	r3, r1
 8009858:	3304      	adds	r3, #4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	69fa      	ldr	r2, [r7, #28]
 800985e:	1ad3      	subs	r3, r2, r3
 8009860:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009864:	d959      	bls.n	800991a <PWR_TCPP0203_EventCallback+0x262>
            {
              /* Send Recovery word to TCPP0203 :
                 GDC and GDP open (TCPP0203_GD_PROVIDER_SWITCH_OPEN is 0) */
              BSP_USBPD_PWR_TRACE(PortNum, "-- Send Recovery Word --");
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	b2d9      	uxtb	r1, r3
 800986a:	2318      	movs	r3, #24
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4b4c      	ldr	r3, [pc, #304]	@ (80099a0 <PWR_TCPP0203_EventCallback+0x2e8>)
 8009870:	2200      	movs	r2, #0
 8009872:	2006      	movs	r0, #6
 8009874:	f004 fec8 	bl	800e608 <USBPD_TRACE_Add>
              recoveryword = TCPP0203_GD_CONSUMER_SWITCH_OPEN | TCPP0203_POWER_MODE_NORMAL;
 8009878:	2318      	movs	r3, #24
 800987a:	72fb      	strb	r3, [r7, #11]
              (void)TCPP0203_WriteCtrlRegister(&USBPD_PWR_PortCompObj[PortNum], &recoveryword);
 800987c:	687a      	ldr	r2, [r7, #4]
 800987e:	4613      	mov	r3, r2
 8009880:	009b      	lsls	r3, r3, #2
 8009882:	4413      	add	r3, r2
 8009884:	00db      	lsls	r3, r3, #3
 8009886:	4a41      	ldr	r2, [pc, #260]	@ (800998c <PWR_TCPP0203_EventCallback+0x2d4>)
 8009888:	4413      	add	r3, r2
 800988a:	f107 020b 	add.w	r2, r7, #11
 800988e:	4611      	mov	r1, r2
 8009890:	4618      	mov	r0, r3
 8009892:	f7fd feb9 	bl	8007608 <TCPP0203_WriteCtrlRegister>

              /* In case PWR Role is SRC, try to restore VBUS as soon as possible */
              if (USBPD_PWR_Port_Status[PortNum].PwrRole == POWER_ROLE_SOURCE)
 8009896:	493b      	ldr	r1, [pc, #236]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009898:	687a      	ldr	r2, [r7, #4]
 800989a:	4613      	mov	r3, r2
 800989c:	005b      	lsls	r3, r3, #1
 800989e:	4413      	add	r3, r2
 80098a0:	009b      	lsls	r3, r3, #2
 80098a2:	440b      	add	r3, r1
 80098a4:	3302      	adds	r3, #2
 80098a6:	781b      	ldrb	r3, [r3, #0]
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d11f      	bne.n	80098ec <PWR_TCPP0203_EventCallback+0x234>
              {
                (void)TCPP0203_SetPowerMode(&USBPD_PWR_PortCompObj[PortNum], TCPP0203_POWER_MODE_NORMAL);
 80098ac:	687a      	ldr	r2, [r7, #4]
 80098ae:	4613      	mov	r3, r2
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	00db      	lsls	r3, r3, #3
 80098b6:	4a35      	ldr	r2, [pc, #212]	@ (800998c <PWR_TCPP0203_EventCallback+0x2d4>)
 80098b8:	4413      	add	r3, r2
 80098ba:	2110      	movs	r1, #16
 80098bc:	4618      	mov	r0, r3
 80098be:	f7fd fcc7 	bl	8007250 <TCPP0203_SetPowerMode>
                (void)TCPP0203_SetGateDriverProvider(&USBPD_PWR_PortCompObj[PortNum],
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	4613      	mov	r3, r2
 80098c6:	009b      	lsls	r3, r3, #2
 80098c8:	4413      	add	r3, r2
 80098ca:	00db      	lsls	r3, r3, #3
 80098cc:	4a2f      	ldr	r2, [pc, #188]	@ (800998c <PWR_TCPP0203_EventCallback+0x2d4>)
 80098ce:	4413      	add	r3, r2
 80098d0:	2104      	movs	r1, #4
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fd fc51 	bl	800717a <TCPP0203_SetGateDriverProvider>
                                                     TCPP0203_GD_PROVIDER_SWITCH_CLOSED);
                BSP_USBPD_PWR_TRACE(PortNum, "-- GDP/GDC setting : SRC (Restored) --");
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	b2d9      	uxtb	r1, r3
 80098dc:	2326      	movs	r3, #38	@ 0x26
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	4b30      	ldr	r3, [pc, #192]	@ (80099a4 <PWR_TCPP0203_EventCallback+0x2ec>)
 80098e2:	2200      	movs	r2, #0
 80098e4:	2006      	movs	r0, #6
 80098e6:	f004 fe8f 	bl	800e608 <USBPD_TRACE_Add>
 80098ea:	e016      	b.n	800991a <PWR_TCPP0203_EventCallback+0x262>
              }
              else
              {
                if (USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback != NULL)
 80098ec:	4925      	ldr	r1, [pc, #148]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	4613      	mov	r3, r2
 80098f2:	005b      	lsls	r3, r3, #1
 80098f4:	4413      	add	r3, r2
 80098f6:	009b      	lsls	r3, r3, #2
 80098f8:	440b      	add	r3, r1
 80098fa:	3308      	adds	r3, #8
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d00b      	beq.n	800991a <PWR_TCPP0203_EventCallback+0x262>
                {
                  /* Notify Error thanks to callback */
                  USBPD_PWR_Port_Status[PortNum].VBUSDetectCallback(PortNum, VBUS_NOT_CONNECTED);
 8009902:	4920      	ldr	r1, [pc, #128]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 8009904:	687a      	ldr	r2, [r7, #4]
 8009906:	4613      	mov	r3, r2
 8009908:	005b      	lsls	r3, r3, #1
 800990a:	4413      	add	r3, r2
 800990c:	009b      	lsls	r3, r3, #2
 800990e:	440b      	add	r3, r1
 8009910:	3308      	adds	r3, #8
 8009912:	681b      	ldr	r3, [r3, #0]
 8009914:	2101      	movs	r1, #1
 8009916:	6878      	ldr	r0, [r7, #4]
 8009918:	4798      	blx	r3
                }
              }
            }
            USBPD_PWR_Port_Status[PortNum].LastFaultTick = tickfault;
 800991a:	491a      	ldr	r1, [pc, #104]	@ (8009984 <PWR_TCPP0203_EventCallback+0x2cc>)
 800991c:	687a      	ldr	r2, [r7, #4]
 800991e:	4613      	mov	r3, r2
 8009920:	005b      	lsls	r3, r3, #1
 8009922:	4413      	add	r3, r2
 8009924:	009b      	lsls	r3, r3, #2
 8009926:	440b      	add	r3, r1
 8009928:	3304      	adds	r3, #4
 800992a:	69fa      	ldr	r2, [r7, #28]
 800992c:	601a      	str	r2, [r3, #0]
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_VBUS_SET) == TCPP0203_FLAG_OVP_VBUS_SET)
 800992e:	7efb      	ldrb	r3, [r7, #27]
 8009930:	f003 0304 	and.w	r3, r3, #4
 8009934:	2b00      	cmp	r3, #0
 8009936:	d008      	beq.n	800994a <PWR_TCPP0203_EventCallback+0x292>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP VBUS detected --");
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	b2d9      	uxtb	r1, r3
 800993c:	2317      	movs	r3, #23
 800993e:	9300      	str	r3, [sp, #0]
 8009940:	4b19      	ldr	r3, [pc, #100]	@ (80099a8 <PWR_TCPP0203_EventCallback+0x2f0>)
 8009942:	2200      	movs	r2, #0
 8009944:	2006      	movs	r0, #6
 8009946:	f004 fe5f 	bl	800e608 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OTP_SET) == TCPP0203_FLAG_OTP_SET)
 800994a:	7efb      	ldrb	r3, [r7, #27]
 800994c:	f003 0310 	and.w	r3, r3, #16
 8009950:	2b00      	cmp	r3, #0
 8009952:	d008      	beq.n	8009966 <PWR_TCPP0203_EventCallback+0x2ae>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- Over Temp detected --");
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	b2d9      	uxtb	r1, r3
 8009958:	2318      	movs	r3, #24
 800995a:	9300      	str	r3, [sp, #0]
 800995c:	4b13      	ldr	r3, [pc, #76]	@ (80099ac <PWR_TCPP0203_EventCallback+0x2f4>)
 800995e:	2200      	movs	r2, #0
 8009960:	2006      	movs	r0, #6
 8009962:	f004 fe51 	bl	800e608 <USBPD_TRACE_Add>
          }
          if ((flg_reg & TCPP0203_FLAG_OVP_CC_SET) == TCPP0203_FLAG_OVP_CC_SET)
 8009966:	7efb      	ldrb	r3, [r7, #27]
 8009968:	f003 0308 	and.w	r3, r3, #8
 800996c:	2b00      	cmp	r3, #0
 800996e:	d02f      	beq.n	80099d0 <PWR_TCPP0203_EventCallback+0x318>
          {
            BSP_USBPD_PWR_TRACE(PortNum, "-- OVP CC detected --");
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	b2d9      	uxtb	r1, r3
 8009974:	2315      	movs	r3, #21
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	4b0d      	ldr	r3, [pc, #52]	@ (80099b0 <PWR_TCPP0203_EventCallback+0x2f8>)
 800997a:	2200      	movs	r2, #0
 800997c:	2006      	movs	r0, #6
 800997e:	f004 fe43 	bl	800e608 <USBPD_TRACE_Add>
          }
          break;
 8009982:	e025      	b.n	80099d0 <PWR_TCPP0203_EventCallback+0x318>
 8009984:	20000ab0 	.word	0x20000ab0
 8009988:	20000ae4 	.word	0x20000ae4
 800998c:	20000abc 	.word	0x20000abc
 8009990:	0801b074 	.word	0x0801b074
 8009994:	0801b080 	.word	0x0801b080
 8009998:	0801b098 	.word	0x0801b098
 800999c:	0801b0b4 	.word	0x0801b0b4
 80099a0:	0801b0cc 	.word	0x0801b0cc
 80099a4:	0801b0e8 	.word	0x0801b0e8
 80099a8:	0801b110 	.word	0x0801b110
 80099ac:	0801b128 	.word	0x0801b128
 80099b0:	0801b144 	.word	0x0801b144
        }

        default:
        {
          /* Unexpected port state */
          BSP_USBPD_PWR_TRACE(PortNum, "-- Unexpected State for FLGn event --");
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	b2d9      	uxtb	r1, r3
 80099b8:	2325      	movs	r3, #37	@ 0x25
 80099ba:	9300      	str	r3, [sp, #0]
 80099bc:	4b07      	ldr	r3, [pc, #28]	@ (80099dc <PWR_TCPP0203_EventCallback+0x324>)
 80099be:	2200      	movs	r2, #0
 80099c0:	2006      	movs	r0, #6
 80099c2:	f004 fe21 	bl	800e608 <USBPD_TRACE_Add>
          break;
 80099c6:	e004      	b.n	80099d2 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 80099c8:	bf00      	nop
 80099ca:	e002      	b.n	80099d2 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 80099cc:	bf00      	nop
 80099ce:	e000      	b.n	80099d2 <PWR_TCPP0203_EventCallback+0x31a>
          break;
 80099d0:	bf00      	nop
        }
      }
    }
  }
}
 80099d2:	bf00      	nop
 80099d4:	3724      	adds	r7, #36	@ 0x24
 80099d6:	46bd      	mov	sp, r7
 80099d8:	bd90      	pop	{r4, r7, pc}
 80099da:	bf00      	nop
 80099dc:	0801b15c 	.word	0x0801b15c

080099e0 <PWR_TCPP0203_ConvertADCDataToVoltage>:
  * @param  Ra       value of Ra resistance
  * @param  Rb       value of Rb resistance
  * @retval analog voltage (unit: mV)
  */
static uint32_t PWR_TCPP0203_ConvertADCDataToVoltage(uint32_t ADCData, uint32_t Ra, uint32_t Rb)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b087      	sub	sp, #28
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	60f8      	str	r0, [r7, #12]
 80099e8:	60b9      	str	r1, [r7, #8]
 80099ea:	607a      	str	r2, [r7, #4]
  uint32_t voltage;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if (Rb == 0u)
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2b00      	cmp	r3, #0
 80099f0:	d102      	bne.n	80099f8 <PWR_TCPP0203_ConvertADCDataToVoltage+0x18>
  {
    voltage = 0u;
 80099f2:	2300      	movs	r3, #0
 80099f4:	617b      	str	r3, [r7, #20]
 80099f6:	e016      	b.n	8009a26 <PWR_TCPP0203_ConvertADCDataToVoltage+0x46>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f640 42e4 	movw	r2, #3300	@ 0xce4
 80099fe:	fb03 f202 	mul.w	r2, r3, r2
 8009a02:	4b0c      	ldr	r3, [pc, #48]	@ (8009a34 <PWR_TCPP0203_ConvertADCDataToVoltage+0x54>)
 8009a04:	fba3 1302 	umull	r1, r3, r3, r2
 8009a08:	1ad2      	subs	r2, r2, r3
 8009a0a:	0852      	lsrs	r2, r2, #1
 8009a0c:	4413      	add	r3, r2
 8009a0e:	0adb      	lsrs	r3, r3, #11
 8009a10:	613b      	str	r3, [r7, #16]
    voltage = vadc * (Ra + Rb) / Rb;
 8009a12:	68ba      	ldr	r2, [r7, #8]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	4413      	add	r3, r2
 8009a18:	693a      	ldr	r2, [r7, #16]
 8009a1a:	fb03 f202 	mul.w	r2, r3, r2
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a24:	617b      	str	r3, [r7, #20]
  }

  return voltage;
 8009a26:	697b      	ldr	r3, [r7, #20]
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	371c      	adds	r7, #28
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr
 8009a34:	00100101 	.word	0x00100101

08009a38 <PWR_TCPP0203_ConvertADCDataToCurrent>:
  * @param  Ga       value of TCPP0X Iana gain in V/V
  * @param  Rs       value of shunt resistor in milliohm
  * @retval VBUS analog current (unit: mA)
  */
static int32_t PWR_TCPP0203_ConvertADCDataToCurrent(uint32_t ADCData, uint32_t Ga, uint32_t Rs)
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b087      	sub	sp, #28
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	607a      	str	r2, [r7, #4]
  int32_t current;
  uint32_t vadc;

  /* Avoid dividing by zero */
  if ((Ga == 0u) || (Rs == 0u))
 8009a44:	68bb      	ldr	r3, [r7, #8]
 8009a46:	2b00      	cmp	r3, #0
 8009a48:	d002      	beq.n	8009a50 <PWR_TCPP0203_ConvertADCDataToCurrent+0x18>
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	2b00      	cmp	r3, #0
 8009a4e:	d102      	bne.n	8009a56 <PWR_TCPP0203_ConvertADCDataToCurrent+0x1e>
  {
    current = 0u;
 8009a50:	2300      	movs	r3, #0
 8009a52:	617b      	str	r3, [r7, #20]
 8009a54:	e018      	b.n	8009a88 <PWR_TCPP0203_ConvertADCDataToCurrent+0x50>
  }
  else
  {
    vadc = (ADCData * VDD_VALUE) / ADC_FULL_SCALE;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	f640 42e4 	movw	r2, #3300	@ 0xce4
 8009a5c:	fb03 f202 	mul.w	r2, r3, r2
 8009a60:	4b0d      	ldr	r3, [pc, #52]	@ (8009a98 <PWR_TCPP0203_ConvertADCDataToCurrent+0x60>)
 8009a62:	fba3 1302 	umull	r1, r3, r3, r2
 8009a66:	1ad2      	subs	r2, r2, r3
 8009a68:	0852      	lsrs	r2, r2, #1
 8009a6a:	4413      	add	r3, r2
 8009a6c:	0adb      	lsrs	r3, r3, #11
 8009a6e:	613b      	str	r3, [r7, #16]
    current = (int32_t)((vadc * 1000u) / (Ga * Rs));
 8009a70:	693b      	ldr	r3, [r7, #16]
 8009a72:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009a76:	fb03 f202 	mul.w	r2, r3, r2
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	6879      	ldr	r1, [r7, #4]
 8009a7e:	fb01 f303 	mul.w	r3, r1, r3
 8009a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a86:	617b      	str	r3, [r7, #20]
  }

  return current;
 8009a88:	697b      	ldr	r3, [r7, #20]
}
 8009a8a:	4618      	mov	r0, r3
 8009a8c:	371c      	adds	r7, #28
 8009a8e:	46bd      	mov	sp, r7
 8009a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a94:	4770      	bx	lr
 8009a96:	bf00      	nop
 8009a98:	00100101 	.word	0x00100101

08009a9c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009a9c:	b580      	push	{r7, lr}
 8009a9e:	b082      	sub	sp, #8
 8009aa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8009aa2:	2300      	movs	r3, #0
 8009aa4:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009aa6:	2003      	movs	r0, #3
 8009aa8:	f000 f952 	bl	8009d50 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009aac:	200f      	movs	r0, #15
 8009aae:	f000 f80d 	bl	8009acc <HAL_InitTick>
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d002      	beq.n	8009abe <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8009ab8:	2301      	movs	r3, #1
 8009aba:	71fb      	strb	r3, [r7, #7]
 8009abc:	e001      	b.n	8009ac2 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8009abe:	f7fd f85f 	bl	8006b80 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8009ac2:	79fb      	ldrb	r3, [r7, #7]

}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3708      	adds	r7, #8
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b084      	sub	sp, #16
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8009ad8:	4b16      	ldr	r3, [pc, #88]	@ (8009b34 <HAL_InitTick+0x68>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d022      	beq.n	8009b26 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8009ae0:	4b15      	ldr	r3, [pc, #84]	@ (8009b38 <HAL_InitTick+0x6c>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b13      	ldr	r3, [pc, #76]	@ (8009b34 <HAL_InitTick+0x68>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8009aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8009af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8009af4:	4618      	mov	r0, r3
 8009af6:	f000 f954 	bl	8009da2 <HAL_SYSTICK_Config>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d10f      	bne.n	8009b20 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2b0f      	cmp	r3, #15
 8009b04:	d809      	bhi.n	8009b1a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009b06:	2200      	movs	r2, #0
 8009b08:	6879      	ldr	r1, [r7, #4]
 8009b0a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b0e:	f000 f92a 	bl	8009d66 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8009b12:	4a0a      	ldr	r2, [pc, #40]	@ (8009b3c <HAL_InitTick+0x70>)
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	6013      	str	r3, [r2, #0]
 8009b18:	e007      	b.n	8009b2a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	73fb      	strb	r3, [r7, #15]
 8009b1e:	e004      	b.n	8009b2a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8009b20:	2301      	movs	r3, #1
 8009b22:	73fb      	strb	r3, [r7, #15]
 8009b24:	e001      	b.n	8009b2a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8009b26:	2301      	movs	r3, #1
 8009b28:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8009b2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3710      	adds	r7, #16
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}
 8009b34:	20000078 	.word	0x20000078
 8009b38:	20000004 	.word	0x20000004
 8009b3c:	20000074 	.word	0x20000074

08009b40 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009b40:	b480      	push	{r7}
 8009b42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009b44:	4b05      	ldr	r3, [pc, #20]	@ (8009b5c <HAL_IncTick+0x1c>)
 8009b46:	681a      	ldr	r2, [r3, #0]
 8009b48:	4b05      	ldr	r3, [pc, #20]	@ (8009b60 <HAL_IncTick+0x20>)
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	4a03      	ldr	r2, [pc, #12]	@ (8009b5c <HAL_IncTick+0x1c>)
 8009b50:	6013      	str	r3, [r2, #0]
}
 8009b52:	bf00      	nop
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr
 8009b5c:	20000aec 	.word	0x20000aec
 8009b60:	20000078 	.word	0x20000078

08009b64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009b64:	b480      	push	{r7}
 8009b66:	af00      	add	r7, sp, #0
  return uwTick;
 8009b68:	4b03      	ldr	r3, [pc, #12]	@ (8009b78 <HAL_GetTick+0x14>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
}
 8009b6c:	4618      	mov	r0, r3
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000aec 	.word	0x20000aec

08009b7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b084      	sub	sp, #16
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009b84:	f7ff ffee 	bl	8009b64 <HAL_GetTick>
 8009b88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b94:	d004      	beq.n	8009ba0 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8009b96:	4b09      	ldr	r3, [pc, #36]	@ (8009bbc <HAL_Delay+0x40>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	68fa      	ldr	r2, [r7, #12]
 8009b9c:	4413      	add	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8009ba0:	bf00      	nop
 8009ba2:	f7ff ffdf 	bl	8009b64 <HAL_GetTick>
 8009ba6:	4602      	mov	r2, r0
 8009ba8:	68bb      	ldr	r3, [r7, #8]
 8009baa:	1ad3      	subs	r3, r2, r3
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	429a      	cmp	r2, r3
 8009bb0:	d8f7      	bhi.n	8009ba2 <HAL_Delay+0x26>
  {
  }
}
 8009bb2:	bf00      	nop
 8009bb4:	bf00      	nop
 8009bb6:	3710      	adds	r7, #16
 8009bb8:	46bd      	mov	sp, r7
 8009bba:	bd80      	pop	{r7, pc}
 8009bbc:	20000078 	.word	0x20000078

08009bc0 <__NVIC_SetPriorityGrouping>:
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b085      	sub	sp, #20
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f003 0307 	and.w	r3, r3, #7
 8009bce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8009c04 <__NVIC_SetPriorityGrouping+0x44>)
 8009bd2:	68db      	ldr	r3, [r3, #12]
 8009bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009bd6:	68ba      	ldr	r2, [r7, #8]
 8009bd8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009be8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8009bec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009bf2:	4a04      	ldr	r2, [pc, #16]	@ (8009c04 <__NVIC_SetPriorityGrouping+0x44>)
 8009bf4:	68bb      	ldr	r3, [r7, #8]
 8009bf6:	60d3      	str	r3, [r2, #12]
}
 8009bf8:	bf00      	nop
 8009bfa:	3714      	adds	r7, #20
 8009bfc:	46bd      	mov	sp, r7
 8009bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c02:	4770      	bx	lr
 8009c04:	e000ed00 	.word	0xe000ed00

08009c08 <__NVIC_GetPriorityGrouping>:
{
 8009c08:	b480      	push	{r7}
 8009c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009c0c:	4b04      	ldr	r3, [pc, #16]	@ (8009c20 <__NVIC_GetPriorityGrouping+0x18>)
 8009c0e:	68db      	ldr	r3, [r3, #12]
 8009c10:	0a1b      	lsrs	r3, r3, #8
 8009c12:	f003 0307 	and.w	r3, r3, #7
}
 8009c16:	4618      	mov	r0, r3
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1e:	4770      	bx	lr
 8009c20:	e000ed00 	.word	0xe000ed00

08009c24 <__NVIC_SetPriority>:
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	6039      	str	r1, [r7, #0]
 8009c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	db0a      	blt.n	8009c4e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	b2da      	uxtb	r2, r3
 8009c3c:	490c      	ldr	r1, [pc, #48]	@ (8009c70 <__NVIC_SetPriority+0x4c>)
 8009c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009c42:	0112      	lsls	r2, r2, #4
 8009c44:	b2d2      	uxtb	r2, r2
 8009c46:	440b      	add	r3, r1
 8009c48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009c4c:	e00a      	b.n	8009c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	b2da      	uxtb	r2, r3
 8009c52:	4908      	ldr	r1, [pc, #32]	@ (8009c74 <__NVIC_SetPriority+0x50>)
 8009c54:	79fb      	ldrb	r3, [r7, #7]
 8009c56:	f003 030f 	and.w	r3, r3, #15
 8009c5a:	3b04      	subs	r3, #4
 8009c5c:	0112      	lsls	r2, r2, #4
 8009c5e:	b2d2      	uxtb	r2, r2
 8009c60:	440b      	add	r3, r1
 8009c62:	761a      	strb	r2, [r3, #24]
}
 8009c64:	bf00      	nop
 8009c66:	370c      	adds	r7, #12
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	e000e100 	.word	0xe000e100
 8009c74:	e000ed00 	.word	0xe000ed00

08009c78 <NVIC_EncodePriority>:
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b089      	sub	sp, #36	@ 0x24
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	f003 0307 	and.w	r3, r3, #7
 8009c8a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	f1c3 0307 	rsb	r3, r3, #7
 8009c92:	2b04      	cmp	r3, #4
 8009c94:	bf28      	it	cs
 8009c96:	2304      	movcs	r3, #4
 8009c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	2b06      	cmp	r3, #6
 8009ca0:	d902      	bls.n	8009ca8 <NVIC_EncodePriority+0x30>
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	3b03      	subs	r3, #3
 8009ca6:	e000      	b.n	8009caa <NVIC_EncodePriority+0x32>
 8009ca8:	2300      	movs	r3, #0
 8009caa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cac:	f04f 32ff 	mov.w	r2, #4294967295
 8009cb0:	69bb      	ldr	r3, [r7, #24]
 8009cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cb6:	43da      	mvns	r2, r3
 8009cb8:	68bb      	ldr	r3, [r7, #8]
 8009cba:	401a      	ands	r2, r3
 8009cbc:	697b      	ldr	r3, [r7, #20]
 8009cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8009cca:	43d9      	mvns	r1, r3
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009cd0:	4313      	orrs	r3, r2
}
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	3724      	adds	r7, #36	@ 0x24
 8009cd6:	46bd      	mov	sp, r7
 8009cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cdc:	4770      	bx	lr
	...

08009ce0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8009ce0:	b480      	push	{r7}
 8009ce2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8009ce4:	f3bf 8f4f 	dsb	sy
}
 8009ce8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8009cea:	4b06      	ldr	r3, [pc, #24]	@ (8009d04 <__NVIC_SystemReset+0x24>)
 8009cec:	68db      	ldr	r3, [r3, #12]
 8009cee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8009cf2:	4904      	ldr	r1, [pc, #16]	@ (8009d04 <__NVIC_SystemReset+0x24>)
 8009cf4:	4b04      	ldr	r3, [pc, #16]	@ (8009d08 <__NVIC_SystemReset+0x28>)
 8009cf6:	4313      	orrs	r3, r2
 8009cf8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8009cfa:	f3bf 8f4f 	dsb	sy
}
 8009cfe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8009d00:	bf00      	nop
 8009d02:	e7fd      	b.n	8009d00 <__NVIC_SystemReset+0x20>
 8009d04:	e000ed00 	.word	0xe000ed00
 8009d08:	05fa0004 	.word	0x05fa0004

08009d0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b082      	sub	sp, #8
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	3b01      	subs	r3, #1
 8009d18:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009d1c:	d301      	bcc.n	8009d22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009d1e:	2301      	movs	r3, #1
 8009d20:	e00f      	b.n	8009d42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009d22:	4a0a      	ldr	r2, [pc, #40]	@ (8009d4c <SysTick_Config+0x40>)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	3b01      	subs	r3, #1
 8009d28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009d2a:	210f      	movs	r1, #15
 8009d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d30:	f7ff ff78 	bl	8009c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009d34:	4b05      	ldr	r3, [pc, #20]	@ (8009d4c <SysTick_Config+0x40>)
 8009d36:	2200      	movs	r2, #0
 8009d38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009d3a:	4b04      	ldr	r3, [pc, #16]	@ (8009d4c <SysTick_Config+0x40>)
 8009d3c:	2207      	movs	r2, #7
 8009d3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
 8009d4a:	bf00      	nop
 8009d4c:	e000e010 	.word	0xe000e010

08009d50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009d50:	b580      	push	{r7, lr}
 8009d52:	b082      	sub	sp, #8
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009d58:	6878      	ldr	r0, [r7, #4]
 8009d5a:	f7ff ff31 	bl	8009bc0 <__NVIC_SetPriorityGrouping>
}
 8009d5e:	bf00      	nop
 8009d60:	3708      	adds	r7, #8
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}

08009d66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009d66:	b580      	push	{r7, lr}
 8009d68:	b086      	sub	sp, #24
 8009d6a:	af00      	add	r7, sp, #0
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	60b9      	str	r1, [r7, #8]
 8009d70:	607a      	str	r2, [r7, #4]
 8009d72:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009d74:	f7ff ff48 	bl	8009c08 <__NVIC_GetPriorityGrouping>
 8009d78:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	68b9      	ldr	r1, [r7, #8]
 8009d7e:	6978      	ldr	r0, [r7, #20]
 8009d80:	f7ff ff7a 	bl	8009c78 <NVIC_EncodePriority>
 8009d84:	4602      	mov	r2, r0
 8009d86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f7ff ff49 	bl	8009c24 <__NVIC_SetPriority>
}
 8009d92:	bf00      	nop
 8009d94:	3718      	adds	r7, #24
 8009d96:	46bd      	mov	sp, r7
 8009d98:	bd80      	pop	{r7, pc}

08009d9a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8009d9a:	b580      	push	{r7, lr}
 8009d9c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8009d9e:	f7ff ff9f 	bl	8009ce0 <__NVIC_SystemReset>

08009da2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009da2:	b580      	push	{r7, lr}
 8009da4:	b082      	sub	sp, #8
 8009da6:	af00      	add	r7, sp, #0
 8009da8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ffae 	bl	8009d0c <SysTick_Config>
 8009db0:	4603      	mov	r3, r0
}
 8009db2:	4618      	mov	r0, r3
 8009db4:	3708      	adds	r7, #8
 8009db6:	46bd      	mov	sp, r7
 8009db8:	bd80      	pop	{r7, pc}
	...

08009dbc <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b086      	sub	sp, #24
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	60f8      	str	r0, [r7, #12]
 8009dc4:	60b9      	str	r1, [r7, #8]
 8009dc6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009dce:	4b2f      	ldr	r3, [pc, #188]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	2b01      	cmp	r3, #1
 8009dd4:	d101      	bne.n	8009dda <HAL_FLASH_Program+0x1e>
 8009dd6:	2302      	movs	r3, #2
 8009dd8:	e053      	b.n	8009e82 <HAL_FLASH_Program+0xc6>
 8009dda:	4b2c      	ldr	r3, [pc, #176]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009ddc:	2201      	movs	r2, #1
 8009dde:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009de0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009de4:	f000 f892 	bl	8009f0c <FLASH_WaitForLastOperation>
 8009de8:	4603      	mov	r3, r0
 8009dea:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8009dec:	7dfb      	ldrb	r3, [r7, #23]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d143      	bne.n	8009e7a <HAL_FLASH_Program+0xbe>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009df2:	4b26      	ldr	r3, [pc, #152]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009df4:	2200      	movs	r2, #0
 8009df6:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8009df8:	4b25      	ldr	r3, [pc, #148]	@ (8009e90 <HAL_FLASH_Program+0xd4>)
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d009      	beq.n	8009e18 <HAL_FLASH_Program+0x5c>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8009e04:	4b22      	ldr	r3, [pc, #136]	@ (8009e90 <HAL_FLASH_Program+0xd4>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a21      	ldr	r2, [pc, #132]	@ (8009e90 <HAL_FLASH_Program+0xd4>)
 8009e0a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009e0e:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8009e10:	4b1e      	ldr	r3, [pc, #120]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009e12:	2202      	movs	r2, #2
 8009e14:	771a      	strb	r2, [r3, #28]
 8009e16:	e002      	b.n	8009e1e <HAL_FLASH_Program+0x62>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8009e18:	4b1c      	ldr	r3, [pc, #112]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009e1a:	2200      	movs	r2, #0
 8009e1c:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d107      	bne.n	8009e34 <HAL_FLASH_Program+0x78>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8009e24:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e28:	68b8      	ldr	r0, [r7, #8]
 8009e2a:	f000 f8c1 	bl	8009fb0 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	613b      	str	r3, [r7, #16]
 8009e32:	e010      	b.n	8009e56 <HAL_FLASH_Program+0x9a>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	2b01      	cmp	r3, #1
 8009e38:	d002      	beq.n	8009e40 <HAL_FLASH_Program+0x84>
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	2b02      	cmp	r3, #2
 8009e3e:	d10a      	bne.n	8009e56 <HAL_FLASH_Program+0x9a>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	4619      	mov	r1, r3
 8009e44:	68b8      	ldr	r0, [r7, #8]
 8009e46:	f000 f8d9 	bl	8009ffc <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d102      	bne.n	8009e56 <HAL_FLASH_Program+0x9a>
      {
        prog_bit = FLASH_CR_FSTPG;
 8009e50:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8009e54:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009e56:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8009e5a:	f000 f857 	bl	8009f0c <FLASH_WaitForLastOperation>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8009e62:	693b      	ldr	r3, [r7, #16]
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	d006      	beq.n	8009e76 <HAL_FLASH_Program+0xba>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8009e68:	4b09      	ldr	r3, [pc, #36]	@ (8009e90 <HAL_FLASH_Program+0xd4>)
 8009e6a:	695a      	ldr	r2, [r3, #20]
 8009e6c:	693b      	ldr	r3, [r7, #16]
 8009e6e:	43db      	mvns	r3, r3
 8009e70:	4907      	ldr	r1, [pc, #28]	@ (8009e90 <HAL_FLASH_Program+0xd4>)
 8009e72:	4013      	ands	r3, r2
 8009e74:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8009e76:	f000 f9d1 	bl	800a21c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009e7a:	4b04      	ldr	r3, [pc, #16]	@ (8009e8c <HAL_FLASH_Program+0xd0>)
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8009e80:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e82:	4618      	mov	r0, r3
 8009e84:	3718      	adds	r7, #24
 8009e86:	46bd      	mov	sp, r7
 8009e88:	bd80      	pop	{r7, pc}
 8009e8a:	bf00      	nop
 8009e8c:	2000007c 	.word	0x2000007c
 8009e90:	40022000 	.word	0x40022000

08009e94 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009e94:	b480      	push	{r7}
 8009e96:	b083      	sub	sp, #12
 8009e98:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8009ecc <HAL_FLASH_Unlock+0x38>)
 8009ea0:	695b      	ldr	r3, [r3, #20]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	da0b      	bge.n	8009ebe <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009ea6:	4b09      	ldr	r3, [pc, #36]	@ (8009ecc <HAL_FLASH_Unlock+0x38>)
 8009ea8:	4a09      	ldr	r2, [pc, #36]	@ (8009ed0 <HAL_FLASH_Unlock+0x3c>)
 8009eaa:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009eac:	4b07      	ldr	r3, [pc, #28]	@ (8009ecc <HAL_FLASH_Unlock+0x38>)
 8009eae:	4a09      	ldr	r2, [pc, #36]	@ (8009ed4 <HAL_FLASH_Unlock+0x40>)
 8009eb0:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009eb2:	4b06      	ldr	r3, [pc, #24]	@ (8009ecc <HAL_FLASH_Unlock+0x38>)
 8009eb4:	695b      	ldr	r3, [r3, #20]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	da01      	bge.n	8009ebe <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009ebe:	79fb      	ldrb	r3, [r7, #7]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	370c      	adds	r7, #12
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eca:	4770      	bx	lr
 8009ecc:	40022000 	.word	0x40022000
 8009ed0:	45670123 	.word	0x45670123
 8009ed4:	cdef89ab 	.word	0xcdef89ab

08009ed8 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8009ee2:	4b09      	ldr	r3, [pc, #36]	@ (8009f08 <HAL_FLASH_Lock+0x30>)
 8009ee4:	695b      	ldr	r3, [r3, #20]
 8009ee6:	4a08      	ldr	r2, [pc, #32]	@ (8009f08 <HAL_FLASH_Lock+0x30>)
 8009ee8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009eec:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8009eee:	4b06      	ldr	r3, [pc, #24]	@ (8009f08 <HAL_FLASH_Lock+0x30>)
 8009ef0:	695b      	ldr	r3, [r3, #20]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	da01      	bge.n	8009efa <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8009efa:	79fb      	ldrb	r3, [r7, #7]
}
 8009efc:	4618      	mov	r0, r3
 8009efe:	370c      	adds	r7, #12
 8009f00:	46bd      	mov	sp, r7
 8009f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f06:	4770      	bx	lr
 8009f08:	40022000 	.word	0x40022000

08009f0c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8009f0c:	b580      	push	{r7, lr}
 8009f0e:	b084      	sub	sp, #16
 8009f10:	af00      	add	r7, sp, #0
 8009f12:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8009f14:	f7ff fe26 	bl	8009b64 <HAL_GetTick>
 8009f18:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009f1a:	e009      	b.n	8009f30 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8009f1c:	f7ff fe22 	bl	8009b64 <HAL_GetTick>
 8009f20:	4602      	mov	r2, r0
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	1ad3      	subs	r3, r2, r3
 8009f26:	687a      	ldr	r2, [r7, #4]
 8009f28:	429a      	cmp	r2, r3
 8009f2a:	d201      	bcs.n	8009f30 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8009f2c:	2303      	movs	r3, #3
 8009f2e:	e037      	b.n	8009fa0 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8009f30:	4b1d      	ldr	r3, [pc, #116]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f32:	691b      	ldr	r3, [r3, #16]
 8009f34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009f38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f3c:	d0ee      	beq.n	8009f1c <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8009f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f40:	691a      	ldr	r2, [r3, #16]
 8009f42:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8009f46:	4013      	ands	r3, r2
 8009f48:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8009f4a:	68bb      	ldr	r3, [r7, #8]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d01d      	beq.n	8009f8c <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8009f50:	4b16      	ldr	r3, [pc, #88]	@ (8009fac <FLASH_WaitForLastOperation+0xa0>)
 8009f52:	685a      	ldr	r2, [r3, #4]
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	4313      	orrs	r3, r2
 8009f58:	4a14      	ldr	r2, [pc, #80]	@ (8009fac <FLASH_WaitForLastOperation+0xa0>)
 8009f5a:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8009f5c:	68bb      	ldr	r3, [r7, #8]
 8009f5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f62:	d307      	bcc.n	8009f74 <FLASH_WaitForLastOperation+0x68>
 8009f64:	4b10      	ldr	r3, [pc, #64]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f66:	699a      	ldr	r2, [r3, #24]
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8009f6e:	490e      	ldr	r1, [pc, #56]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f70:	4313      	orrs	r3, r2
 8009f72:	618b      	str	r3, [r1, #24]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d004      	beq.n	8009f88 <FLASH_WaitForLastOperation+0x7c>
 8009f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f80:	68bb      	ldr	r3, [r7, #8]
 8009f82:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8009f86:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8009f88:	2301      	movs	r3, #1
 8009f8a:	e009      	b.n	8009fa0 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8009f8c:	4b06      	ldr	r3, [pc, #24]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b01      	cmp	r3, #1
 8009f96:	d102      	bne.n	8009f9e <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009f98:	4b03      	ldr	r3, [pc, #12]	@ (8009fa8 <FLASH_WaitForLastOperation+0x9c>)
 8009f9a:	2201      	movs	r2, #1
 8009f9c:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8009f9e:	2300      	movs	r3, #0
}
 8009fa0:	4618      	mov	r0, r3
 8009fa2:	3710      	adds	r7, #16
 8009fa4:	46bd      	mov	sp, r7
 8009fa6:	bd80      	pop	{r7, pc}
 8009fa8:	40022000 	.word	0x40022000
 8009fac:	2000007c 	.word	0x2000007c

08009fb0 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009fb0:	b480      	push	{r7}
 8009fb2:	b085      	sub	sp, #20
 8009fb4:	af00      	add	r7, sp, #0
 8009fb6:	60f8      	str	r0, [r7, #12]
 8009fb8:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8009fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff8 <FLASH_Program_DoubleWord+0x48>)
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	4a0d      	ldr	r2, [pc, #52]	@ (8009ff8 <FLASH_Program_DoubleWord+0x48>)
 8009fc2:	f043 0301 	orr.w	r3, r3, #1
 8009fc6:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8009fce:	f3bf 8f6f 	isb	sy
}
 8009fd2:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8009fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009fd8:	f04f 0200 	mov.w	r2, #0
 8009fdc:	f04f 0300 	mov.w	r3, #0
 8009fe0:	000a      	movs	r2, r1
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	68f9      	ldr	r1, [r7, #12]
 8009fe6:	3104      	adds	r1, #4
 8009fe8:	4613      	mov	r3, r2
 8009fea:	600b      	str	r3, [r1, #0]
}
 8009fec:	bf00      	nop
 8009fee:	3714      	adds	r7, #20
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr
 8009ff8:	40022000 	.word	0x40022000

08009ffc <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b089      	sub	sp, #36	@ 0x24
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 800a006:	2340      	movs	r3, #64	@ 0x40
 800a008:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 800a00e:	683b      	ldr	r3, [r7, #0]
 800a010:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 800a012:	4b14      	ldr	r3, [pc, #80]	@ (800a064 <FLASH_Program_Fast+0x68>)
 800a014:	695b      	ldr	r3, [r3, #20]
 800a016:	4a13      	ldr	r2, [pc, #76]	@ (800a064 <FLASH_Program_Fast+0x68>)
 800a018:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a01c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800a01e:	f3ef 8310 	mrs	r3, PRIMASK
 800a022:	60fb      	str	r3, [r7, #12]
  return(result);
 800a024:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 800a026:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800a028:	b672      	cpsid	i
}
 800a02a:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 800a02c:	697b      	ldr	r3, [r7, #20]
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	69bb      	ldr	r3, [r7, #24]
 800a032:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800a034:	69bb      	ldr	r3, [r7, #24]
 800a036:	3304      	adds	r3, #4
 800a038:	61bb      	str	r3, [r7, #24]
    src_addr++;
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	3304      	adds	r3, #4
 800a03e:	617b      	str	r3, [r7, #20]
    row_index--;
 800a040:	7ffb      	ldrb	r3, [r7, #31]
 800a042:	3b01      	subs	r3, #1
 800a044:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 800a046:	7ffb      	ldrb	r3, [r7, #31]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d1ef      	bne.n	800a02c <FLASH_Program_Fast+0x30>
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	f383 8810 	msr	PRIMASK, r3
}
 800a056:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800a058:	bf00      	nop
 800a05a:	3724      	adds	r7, #36	@ 0x24
 800a05c:	46bd      	mov	sp, r7
 800a05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a062:	4770      	bx	lr
 800a064:	40022000 	.word	0x40022000

0800a068 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800a072:	4b47      	ldr	r3, [pc, #284]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a074:	781b      	ldrb	r3, [r3, #0]
 800a076:	2b01      	cmp	r3, #1
 800a078:	d101      	bne.n	800a07e <HAL_FLASHEx_Erase+0x16>
 800a07a:	2302      	movs	r3, #2
 800a07c:	e083      	b.n	800a186 <HAL_FLASHEx_Erase+0x11e>
 800a07e:	4b44      	ldr	r3, [pc, #272]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a080:	2201      	movs	r2, #1
 800a082:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a084:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a088:	f7ff ff40 	bl	8009f0c <FLASH_WaitForLastOperation>
 800a08c:	4603      	mov	r3, r0
 800a08e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 800a090:	7bfb      	ldrb	r3, [r7, #15]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d173      	bne.n	800a17e <HAL_FLASHEx_Erase+0x116>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800a096:	4b3e      	ldr	r3, [pc, #248]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a098:	2200      	movs	r2, #0
 800a09a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800a09c:	4b3d      	ldr	r3, [pc, #244]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d013      	beq.n	800a0d0 <HAL_FLASHEx_Erase+0x68>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a0a8:	4b3a      	ldr	r3, [pc, #232]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d009      	beq.n	800a0c8 <HAL_FLASHEx_Erase+0x60>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 800a0b4:	4b37      	ldr	r3, [pc, #220]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	4a36      	ldr	r2, [pc, #216]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0be:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 800a0c0:	4b33      	ldr	r3, [pc, #204]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a0c2:	2203      	movs	r2, #3
 800a0c4:	771a      	strb	r2, [r3, #28]
 800a0c6:	e016      	b.n	800a0f6 <HAL_FLASHEx_Erase+0x8e>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 800a0c8:	4b31      	ldr	r3, [pc, #196]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a0ca:	2201      	movs	r2, #1
 800a0cc:	771a      	strb	r2, [r3, #28]
 800a0ce:	e012      	b.n	800a0f6 <HAL_FLASHEx_Erase+0x8e>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800a0d0:	4b30      	ldr	r3, [pc, #192]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	d009      	beq.n	800a0f0 <HAL_FLASHEx_Erase+0x88>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800a0dc:	4b2d      	ldr	r3, [pc, #180]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	4a2c      	ldr	r2, [pc, #176]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a0e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800a0e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 800a0e8:	4b29      	ldr	r3, [pc, #164]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a0ea:	2202      	movs	r2, #2
 800a0ec:	771a      	strb	r2, [r3, #28]
 800a0ee:	e002      	b.n	800a0f6 <HAL_FLASHEx_Erase+0x8e>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a0f0:	4b27      	ldr	r3, [pc, #156]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a0f2:	2200      	movs	r2, #0
 800a0f4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	2b01      	cmp	r3, #1
 800a0fc:	d111      	bne.n	800a122 <HAL_FLASHEx_Erase+0xba>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685b      	ldr	r3, [r3, #4]
 800a102:	4618      	mov	r0, r3
 800a104:	f000 f848 	bl	800a198 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a108:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a10c:	f7ff fefe 	bl	8009f0c <FLASH_WaitForLastOperation>
 800a110:	4603      	mov	r3, r0
 800a112:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 800a114:	4b1f      	ldr	r3, [pc, #124]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a116:	695b      	ldr	r3, [r3, #20]
 800a118:	4a1e      	ldr	r2, [pc, #120]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a11a:	f023 0304 	bic.w	r3, r3, #4
 800a11e:	6153      	str	r3, [r2, #20]
 800a120:	e02b      	b.n	800a17a <HAL_FLASHEx_Erase+0x112>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	f04f 32ff 	mov.w	r2, #4294967295
 800a128:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	60bb      	str	r3, [r7, #8]
 800a130:	e01b      	b.n	800a16a <HAL_FLASHEx_Erase+0x102>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	4619      	mov	r1, r3
 800a138:	68b8      	ldr	r0, [r7, #8]
 800a13a:	f000 f84b 	bl	800a1d4 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800a13e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800a142:	f7ff fee3 	bl	8009f0c <FLASH_WaitForLastOperation>
 800a146:	4603      	mov	r3, r0
 800a148:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800a14a:	4b12      	ldr	r3, [pc, #72]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	4a11      	ldr	r2, [pc, #68]	@ (800a194 <HAL_FLASHEx_Erase+0x12c>)
 800a150:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 800a154:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 800a156:	7bfb      	ldrb	r3, [r7, #15]
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d003      	beq.n	800a164 <HAL_FLASHEx_Erase+0xfc>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	68ba      	ldr	r2, [r7, #8]
 800a160:	601a      	str	r2, [r3, #0]
          break;
 800a162:	e00a      	b.n	800a17a <HAL_FLASHEx_Erase+0x112>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	3301      	adds	r3, #1
 800a168:	60bb      	str	r3, [r7, #8]
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	689a      	ldr	r2, [r3, #8]
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	68db      	ldr	r3, [r3, #12]
 800a172:	4413      	add	r3, r2
 800a174:	68ba      	ldr	r2, [r7, #8]
 800a176:	429a      	cmp	r2, r3
 800a178:	d3db      	bcc.n	800a132 <HAL_FLASHEx_Erase+0xca>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800a17a:	f000 f84f 	bl	800a21c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800a17e:	4b04      	ldr	r3, [pc, #16]	@ (800a190 <HAL_FLASHEx_Erase+0x128>)
 800a180:	2200      	movs	r2, #0
 800a182:	701a      	strb	r2, [r3, #0]

  return status;
 800a184:	7bfb      	ldrb	r3, [r7, #15]
}
 800a186:	4618      	mov	r0, r3
 800a188:	3710      	adds	r7, #16
 800a18a:	46bd      	mov	sp, r7
 800a18c:	bd80      	pop	{r7, pc}
 800a18e:	bf00      	nop
 800a190:	2000007c 	.word	0x2000007c
 800a194:	40022000 	.word	0x40022000

0800a198 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800a198:	b480      	push	{r7}
 800a19a:	b083      	sub	sp, #12
 800a19c:	af00      	add	r7, sp, #0
 800a19e:	6078      	str	r0, [r7, #4]
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d005      	beq.n	800a1b6 <FLASH_MassErase+0x1e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 800a1aa:	4b09      	ldr	r3, [pc, #36]	@ (800a1d0 <FLASH_MassErase+0x38>)
 800a1ac:	695b      	ldr	r3, [r3, #20]
 800a1ae:	4a08      	ldr	r2, [pc, #32]	@ (800a1d0 <FLASH_MassErase+0x38>)
 800a1b0:	f043 0304 	orr.w	r3, r3, #4
 800a1b4:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a1b6:	4b06      	ldr	r3, [pc, #24]	@ (800a1d0 <FLASH_MassErase+0x38>)
 800a1b8:	695b      	ldr	r3, [r3, #20]
 800a1ba:	4a05      	ldr	r2, [pc, #20]	@ (800a1d0 <FLASH_MassErase+0x38>)
 800a1bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a1c0:	6153      	str	r3, [r2, #20]
}
 800a1c2:	bf00      	nop
 800a1c4:	370c      	adds	r7, #12
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1cc:	4770      	bx	lr
 800a1ce:	bf00      	nop
 800a1d0:	40022000 	.word	0x40022000

0800a1d4 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800a1d4:	b480      	push	{r7}
 800a1d6:	b083      	sub	sp, #12
 800a1d8:	af00      	add	r7, sp, #0
 800a1da:	6078      	str	r0, [r7, #4]
 800a1dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800a1de:	4b0e      	ldr	r3, [pc, #56]	@ (800a218 <FLASH_PageErase+0x44>)
 800a1e0:	695b      	ldr	r3, [r3, #20]
 800a1e2:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	00db      	lsls	r3, r3, #3
 800a1ea:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800a1ee:	490a      	ldr	r1, [pc, #40]	@ (800a218 <FLASH_PageErase+0x44>)
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800a1f4:	4b08      	ldr	r3, [pc, #32]	@ (800a218 <FLASH_PageErase+0x44>)
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	4a07      	ldr	r2, [pc, #28]	@ (800a218 <FLASH_PageErase+0x44>)
 800a1fa:	f043 0302 	orr.w	r3, r3, #2
 800a1fe:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800a200:	4b05      	ldr	r3, [pc, #20]	@ (800a218 <FLASH_PageErase+0x44>)
 800a202:	695b      	ldr	r3, [r3, #20]
 800a204:	4a04      	ldr	r2, [pc, #16]	@ (800a218 <FLASH_PageErase+0x44>)
 800a206:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a20a:	6153      	str	r3, [r2, #20]
}
 800a20c:	bf00      	nop
 800a20e:	370c      	adds	r7, #12
 800a210:	46bd      	mov	sp, r7
 800a212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a216:	4770      	bx	lr
 800a218:	40022000 	.word	0x40022000

0800a21c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800a21c:	b480      	push	{r7}
 800a21e:	b083      	sub	sp, #12
 800a220:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800a222:	4b21      	ldr	r3, [pc, #132]	@ (800a2a8 <FLASH_FlushCaches+0x8c>)
 800a224:	7f1b      	ldrb	r3, [r3, #28]
 800a226:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 800a228:	79fb      	ldrb	r3, [r7, #7]
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d002      	beq.n	800a234 <FLASH_FlushCaches+0x18>
 800a22e:	79fb      	ldrb	r3, [r7, #7]
 800a230:	2b03      	cmp	r3, #3
 800a232:	d117      	bne.n	800a264 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800a234:	4b1d      	ldr	r3, [pc, #116]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	4a1c      	ldr	r2, [pc, #112]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a23a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a23e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800a240:	4b1a      	ldr	r3, [pc, #104]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	4a19      	ldr	r2, [pc, #100]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a246:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a24a:	6013      	str	r3, [r2, #0]
 800a24c:	4b17      	ldr	r3, [pc, #92]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	4a16      	ldr	r2, [pc, #88]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a252:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800a256:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800a258:	4b14      	ldr	r3, [pc, #80]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4a13      	ldr	r2, [pc, #76]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a25e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800a262:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 800a264:	79fb      	ldrb	r3, [r7, #7]
 800a266:	2b02      	cmp	r3, #2
 800a268:	d002      	beq.n	800a270 <FLASH_FlushCaches+0x54>
 800a26a:	79fb      	ldrb	r3, [r7, #7]
 800a26c:	2b03      	cmp	r3, #3
 800a26e:	d111      	bne.n	800a294 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800a270:	4b0e      	ldr	r3, [pc, #56]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	4a0d      	ldr	r2, [pc, #52]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a276:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a27a:	6013      	str	r3, [r2, #0]
 800a27c:	4b0b      	ldr	r3, [pc, #44]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	4a0a      	ldr	r2, [pc, #40]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a282:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a286:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800a288:	4b08      	ldr	r3, [pc, #32]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	4a07      	ldr	r2, [pc, #28]	@ (800a2ac <FLASH_FlushCaches+0x90>)
 800a28e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800a292:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800a294:	4b04      	ldr	r3, [pc, #16]	@ (800a2a8 <FLASH_FlushCaches+0x8c>)
 800a296:	2200      	movs	r2, #0
 800a298:	771a      	strb	r2, [r3, #28]
}
 800a29a:	bf00      	nop
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr
 800a2a6:	bf00      	nop
 800a2a8:	2000007c 	.word	0x2000007c
 800a2ac:	40022000 	.word	0x40022000

0800a2b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a2b0:	b480      	push	{r7}
 800a2b2:	b087      	sub	sp, #28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a2be:	e15a      	b.n	800a576 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681a      	ldr	r2, [r3, #0]
 800a2c4:	2101      	movs	r1, #1
 800a2c6:	697b      	ldr	r3, [r7, #20]
 800a2c8:	fa01 f303 	lsl.w	r3, r1, r3
 800a2cc:	4013      	ands	r3, r2
 800a2ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	f000 814c 	beq.w	800a570 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a2d8:	683b      	ldr	r3, [r7, #0]
 800a2da:	685b      	ldr	r3, [r3, #4]
 800a2dc:	f003 0303 	and.w	r3, r3, #3
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d005      	beq.n	800a2f0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800a2ec:	2b02      	cmp	r3, #2
 800a2ee:	d130      	bne.n	800a352 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	689b      	ldr	r3, [r3, #8]
 800a2f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a2f6:	697b      	ldr	r3, [r7, #20]
 800a2f8:	005b      	lsls	r3, r3, #1
 800a2fa:	2203      	movs	r2, #3
 800a2fc:	fa02 f303 	lsl.w	r3, r2, r3
 800a300:	43db      	mvns	r3, r3
 800a302:	693a      	ldr	r2, [r7, #16]
 800a304:	4013      	ands	r3, r2
 800a306:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a308:	683b      	ldr	r3, [r7, #0]
 800a30a:	68da      	ldr	r2, [r3, #12]
 800a30c:	697b      	ldr	r3, [r7, #20]
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	fa02 f303 	lsl.w	r3, r2, r3
 800a314:	693a      	ldr	r2, [r7, #16]
 800a316:	4313      	orrs	r3, r2
 800a318:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a326:	2201      	movs	r2, #1
 800a328:	697b      	ldr	r3, [r7, #20]
 800a32a:	fa02 f303 	lsl.w	r3, r2, r3
 800a32e:	43db      	mvns	r3, r3
 800a330:	693a      	ldr	r2, [r7, #16]
 800a332:	4013      	ands	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a336:	683b      	ldr	r3, [r7, #0]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	091b      	lsrs	r3, r3, #4
 800a33c:	f003 0201 	and.w	r2, r3, #1
 800a340:	697b      	ldr	r3, [r7, #20]
 800a342:	fa02 f303 	lsl.w	r3, r2, r3
 800a346:	693a      	ldr	r2, [r7, #16]
 800a348:	4313      	orrs	r3, r2
 800a34a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	f003 0303 	and.w	r3, r3, #3
 800a35a:	2b03      	cmp	r3, #3
 800a35c:	d017      	beq.n	800a38e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	005b      	lsls	r3, r3, #1
 800a368:	2203      	movs	r2, #3
 800a36a:	fa02 f303 	lsl.w	r3, r2, r3
 800a36e:	43db      	mvns	r3, r3
 800a370:	693a      	ldr	r2, [r7, #16]
 800a372:	4013      	ands	r3, r2
 800a374:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a376:	683b      	ldr	r3, [r7, #0]
 800a378:	689a      	ldr	r2, [r3, #8]
 800a37a:	697b      	ldr	r3, [r7, #20]
 800a37c:	005b      	lsls	r3, r3, #1
 800a37e:	fa02 f303 	lsl.w	r3, r2, r3
 800a382:	693a      	ldr	r2, [r7, #16]
 800a384:	4313      	orrs	r3, r2
 800a386:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a38e:	683b      	ldr	r3, [r7, #0]
 800a390:	685b      	ldr	r3, [r3, #4]
 800a392:	f003 0303 	and.w	r3, r3, #3
 800a396:	2b02      	cmp	r3, #2
 800a398:	d123      	bne.n	800a3e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a39a:	697b      	ldr	r3, [r7, #20]
 800a39c:	08da      	lsrs	r2, r3, #3
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	3208      	adds	r2, #8
 800a3a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a3a8:	697b      	ldr	r3, [r7, #20]
 800a3aa:	f003 0307 	and.w	r3, r3, #7
 800a3ae:	009b      	lsls	r3, r3, #2
 800a3b0:	220f      	movs	r2, #15
 800a3b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a3b6:	43db      	mvns	r3, r3
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	4013      	ands	r3, r2
 800a3bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	691a      	ldr	r2, [r3, #16]
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f003 0307 	and.w	r3, r3, #7
 800a3c8:	009b      	lsls	r3, r3, #2
 800a3ca:	fa02 f303 	lsl.w	r3, r2, r3
 800a3ce:	693a      	ldr	r2, [r7, #16]
 800a3d0:	4313      	orrs	r3, r2
 800a3d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a3d4:	697b      	ldr	r3, [r7, #20]
 800a3d6:	08da      	lsrs	r2, r3, #3
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	3208      	adds	r2, #8
 800a3dc:	6939      	ldr	r1, [r7, #16]
 800a3de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a3e8:	697b      	ldr	r3, [r7, #20]
 800a3ea:	005b      	lsls	r3, r3, #1
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	fa02 f303 	lsl.w	r3, r2, r3
 800a3f2:	43db      	mvns	r3, r3
 800a3f4:	693a      	ldr	r2, [r7, #16]
 800a3f6:	4013      	ands	r3, r2
 800a3f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	f003 0203 	and.w	r2, r3, #3
 800a402:	697b      	ldr	r3, [r7, #20]
 800a404:	005b      	lsls	r3, r3, #1
 800a406:	fa02 f303 	lsl.w	r3, r2, r3
 800a40a:	693a      	ldr	r2, [r7, #16]
 800a40c:	4313      	orrs	r3, r2
 800a40e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	693a      	ldr	r2, [r7, #16]
 800a414:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	685b      	ldr	r3, [r3, #4]
 800a41a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a41e:	2b00      	cmp	r3, #0
 800a420:	f000 80a6 	beq.w	800a570 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a424:	4b5b      	ldr	r3, [pc, #364]	@ (800a594 <HAL_GPIO_Init+0x2e4>)
 800a426:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a428:	4a5a      	ldr	r2, [pc, #360]	@ (800a594 <HAL_GPIO_Init+0x2e4>)
 800a42a:	f043 0301 	orr.w	r3, r3, #1
 800a42e:	6613      	str	r3, [r2, #96]	@ 0x60
 800a430:	4b58      	ldr	r3, [pc, #352]	@ (800a594 <HAL_GPIO_Init+0x2e4>)
 800a432:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a434:	f003 0301 	and.w	r3, r3, #1
 800a438:	60bb      	str	r3, [r7, #8]
 800a43a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a43c:	4a56      	ldr	r2, [pc, #344]	@ (800a598 <HAL_GPIO_Init+0x2e8>)
 800a43e:	697b      	ldr	r3, [r7, #20]
 800a440:	089b      	lsrs	r3, r3, #2
 800a442:	3302      	adds	r3, #2
 800a444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a448:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	f003 0303 	and.w	r3, r3, #3
 800a450:	009b      	lsls	r3, r3, #2
 800a452:	220f      	movs	r2, #15
 800a454:	fa02 f303 	lsl.w	r3, r2, r3
 800a458:	43db      	mvns	r3, r3
 800a45a:	693a      	ldr	r2, [r7, #16]
 800a45c:	4013      	ands	r3, r2
 800a45e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a466:	d01f      	beq.n	800a4a8 <HAL_GPIO_Init+0x1f8>
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	4a4c      	ldr	r2, [pc, #304]	@ (800a59c <HAL_GPIO_Init+0x2ec>)
 800a46c:	4293      	cmp	r3, r2
 800a46e:	d019      	beq.n	800a4a4 <HAL_GPIO_Init+0x1f4>
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4a4b      	ldr	r2, [pc, #300]	@ (800a5a0 <HAL_GPIO_Init+0x2f0>)
 800a474:	4293      	cmp	r3, r2
 800a476:	d013      	beq.n	800a4a0 <HAL_GPIO_Init+0x1f0>
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	4a4a      	ldr	r2, [pc, #296]	@ (800a5a4 <HAL_GPIO_Init+0x2f4>)
 800a47c:	4293      	cmp	r3, r2
 800a47e:	d00d      	beq.n	800a49c <HAL_GPIO_Init+0x1ec>
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	4a49      	ldr	r2, [pc, #292]	@ (800a5a8 <HAL_GPIO_Init+0x2f8>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d007      	beq.n	800a498 <HAL_GPIO_Init+0x1e8>
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	4a48      	ldr	r2, [pc, #288]	@ (800a5ac <HAL_GPIO_Init+0x2fc>)
 800a48c:	4293      	cmp	r3, r2
 800a48e:	d101      	bne.n	800a494 <HAL_GPIO_Init+0x1e4>
 800a490:	2305      	movs	r3, #5
 800a492:	e00a      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a494:	2306      	movs	r3, #6
 800a496:	e008      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a498:	2304      	movs	r3, #4
 800a49a:	e006      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a49c:	2303      	movs	r3, #3
 800a49e:	e004      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a4a0:	2302      	movs	r3, #2
 800a4a2:	e002      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a4a4:	2301      	movs	r3, #1
 800a4a6:	e000      	b.n	800a4aa <HAL_GPIO_Init+0x1fa>
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	697a      	ldr	r2, [r7, #20]
 800a4ac:	f002 0203 	and.w	r2, r2, #3
 800a4b0:	0092      	lsls	r2, r2, #2
 800a4b2:	4093      	lsls	r3, r2
 800a4b4:	693a      	ldr	r2, [r7, #16]
 800a4b6:	4313      	orrs	r3, r2
 800a4b8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a4ba:	4937      	ldr	r1, [pc, #220]	@ (800a598 <HAL_GPIO_Init+0x2e8>)
 800a4bc:	697b      	ldr	r3, [r7, #20]
 800a4be:	089b      	lsrs	r3, r3, #2
 800a4c0:	3302      	adds	r3, #2
 800a4c2:	693a      	ldr	r2, [r7, #16]
 800a4c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800a4c8:	4b39      	ldr	r3, [pc, #228]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a4ca:	689b      	ldr	r3, [r3, #8]
 800a4cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	43db      	mvns	r3, r3
 800a4d2:	693a      	ldr	r2, [r7, #16]
 800a4d4:	4013      	ands	r3, r2
 800a4d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	685b      	ldr	r3, [r3, #4]
 800a4dc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d003      	beq.n	800a4ec <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 800a4e4:	693a      	ldr	r2, [r7, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	4313      	orrs	r3, r2
 800a4ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800a4ec:	4a30      	ldr	r2, [pc, #192]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800a4f2:	4b2f      	ldr	r3, [pc, #188]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	693a      	ldr	r2, [r7, #16]
 800a4fe:	4013      	ands	r3, r2
 800a500:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a502:	683b      	ldr	r3, [r7, #0]
 800a504:	685b      	ldr	r3, [r3, #4]
 800a506:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d003      	beq.n	800a516 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	4313      	orrs	r3, r2
 800a514:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800a516:	4a26      	ldr	r2, [pc, #152]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800a51c:	4b24      	ldr	r3, [pc, #144]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	43db      	mvns	r3, r3
 800a526:	693a      	ldr	r2, [r7, #16]
 800a528:	4013      	ands	r3, r2
 800a52a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	685b      	ldr	r3, [r3, #4]
 800a530:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a534:	2b00      	cmp	r3, #0
 800a536:	d003      	beq.n	800a540 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800a538:	693a      	ldr	r2, [r7, #16]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	4313      	orrs	r3, r2
 800a53e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800a540:	4a1b      	ldr	r2, [pc, #108]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a542:	693b      	ldr	r3, [r7, #16]
 800a544:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800a546:	4b1a      	ldr	r3, [pc, #104]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	43db      	mvns	r3, r3
 800a550:	693a      	ldr	r2, [r7, #16]
 800a552:	4013      	ands	r3, r2
 800a554:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	685b      	ldr	r3, [r3, #4]
 800a55a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d003      	beq.n	800a56a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800a562:	693a      	ldr	r2, [r7, #16]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	4313      	orrs	r3, r2
 800a568:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800a56a:	4a11      	ldr	r2, [pc, #68]	@ (800a5b0 <HAL_GPIO_Init+0x300>)
 800a56c:	693b      	ldr	r3, [r7, #16]
 800a56e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800a570:	697b      	ldr	r3, [r7, #20]
 800a572:	3301      	adds	r3, #1
 800a574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800a576:	683b      	ldr	r3, [r7, #0]
 800a578:	681a      	ldr	r2, [r3, #0]
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	fa22 f303 	lsr.w	r3, r2, r3
 800a580:	2b00      	cmp	r3, #0
 800a582:	f47f ae9d 	bne.w	800a2c0 <HAL_GPIO_Init+0x10>
  }
}
 800a586:	bf00      	nop
 800a588:	bf00      	nop
 800a58a:	371c      	adds	r7, #28
 800a58c:	46bd      	mov	sp, r7
 800a58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a592:	4770      	bx	lr
 800a594:	40021000 	.word	0x40021000
 800a598:	40010000 	.word	0x40010000
 800a59c:	48000400 	.word	0x48000400
 800a5a0:	48000800 	.word	0x48000800
 800a5a4:	48000c00 	.word	0x48000c00
 800a5a8:	48001000 	.word	0x48001000
 800a5ac:	48001400 	.word	0x48001400
 800a5b0:	40010400 	.word	0x40010400

0800a5b4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	6078      	str	r0, [r7, #4]
 800a5bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 800a5c2:	e0bd      	b.n	800a740 <HAL_GPIO_DeInit+0x18c>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1UL << position);
 800a5c4:	2201      	movs	r2, #1
 800a5c6:	697b      	ldr	r3, [r7, #20]
 800a5c8:	fa02 f303 	lsl.w	r3, r2, r3
 800a5cc:	683a      	ldr	r2, [r7, #0]
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800a5d2:	693b      	ldr	r3, [r7, #16]
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f000 80b0 	beq.w	800a73a <HAL_GPIO_DeInit+0x186>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a5da:	4a60      	ldr	r2, [pc, #384]	@ (800a75c <HAL_GPIO_DeInit+0x1a8>)
 800a5dc:	697b      	ldr	r3, [r7, #20]
 800a5de:	089b      	lsrs	r3, r3, #2
 800a5e0:	3302      	adds	r3, #2
 800a5e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a5e6:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	f003 0303 	and.w	r3, r3, #3
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	220f      	movs	r2, #15
 800a5f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a5f6:	68fa      	ldr	r2, [r7, #12]
 800a5f8:	4013      	ands	r3, r2
 800a5fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800a602:	d01f      	beq.n	800a644 <HAL_GPIO_DeInit+0x90>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	4a56      	ldr	r2, [pc, #344]	@ (800a760 <HAL_GPIO_DeInit+0x1ac>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d019      	beq.n	800a640 <HAL_GPIO_DeInit+0x8c>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	4a55      	ldr	r2, [pc, #340]	@ (800a764 <HAL_GPIO_DeInit+0x1b0>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d013      	beq.n	800a63c <HAL_GPIO_DeInit+0x88>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	4a54      	ldr	r2, [pc, #336]	@ (800a768 <HAL_GPIO_DeInit+0x1b4>)
 800a618:	4293      	cmp	r3, r2
 800a61a:	d00d      	beq.n	800a638 <HAL_GPIO_DeInit+0x84>
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	4a53      	ldr	r2, [pc, #332]	@ (800a76c <HAL_GPIO_DeInit+0x1b8>)
 800a620:	4293      	cmp	r3, r2
 800a622:	d007      	beq.n	800a634 <HAL_GPIO_DeInit+0x80>
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4a52      	ldr	r2, [pc, #328]	@ (800a770 <HAL_GPIO_DeInit+0x1bc>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d101      	bne.n	800a630 <HAL_GPIO_DeInit+0x7c>
 800a62c:	2305      	movs	r3, #5
 800a62e:	e00a      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a630:	2306      	movs	r3, #6
 800a632:	e008      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a634:	2304      	movs	r3, #4
 800a636:	e006      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a638:	2303      	movs	r3, #3
 800a63a:	e004      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a63c:	2302      	movs	r3, #2
 800a63e:	e002      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a640:	2301      	movs	r3, #1
 800a642:	e000      	b.n	800a646 <HAL_GPIO_DeInit+0x92>
 800a644:	2300      	movs	r3, #0
 800a646:	697a      	ldr	r2, [r7, #20]
 800a648:	f002 0203 	and.w	r2, r2, #3
 800a64c:	0092      	lsls	r2, r2, #2
 800a64e:	4093      	lsls	r3, r2
 800a650:	68fa      	ldr	r2, [r7, #12]
 800a652:	429a      	cmp	r2, r3
 800a654:	d132      	bne.n	800a6bc <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 800a656:	4b47      	ldr	r3, [pc, #284]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a658:	681a      	ldr	r2, [r3, #0]
 800a65a:	693b      	ldr	r3, [r7, #16]
 800a65c:	43db      	mvns	r3, r3
 800a65e:	4945      	ldr	r1, [pc, #276]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a660:	4013      	ands	r3, r2
 800a662:	600b      	str	r3, [r1, #0]
        EXTI->EMR1 &= ~(iocurrent);
 800a664:	4b43      	ldr	r3, [pc, #268]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a666:	685a      	ldr	r2, [r3, #4]
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	43db      	mvns	r3, r3
 800a66c:	4941      	ldr	r1, [pc, #260]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a66e:	4013      	ands	r3, r2
 800a670:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800a672:	4b40      	ldr	r3, [pc, #256]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a674:	68da      	ldr	r2, [r3, #12]
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	43db      	mvns	r3, r3
 800a67a:	493e      	ldr	r1, [pc, #248]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a67c:	4013      	ands	r3, r2
 800a67e:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR1 &= ~(iocurrent);
 800a680:	4b3c      	ldr	r3, [pc, #240]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a682:	689a      	ldr	r2, [r3, #8]
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	43db      	mvns	r3, r3
 800a688:	493a      	ldr	r1, [pc, #232]	@ (800a774 <HAL_GPIO_DeInit+0x1c0>)
 800a68a:	4013      	ands	r3, r2
 800a68c:	608b      	str	r3, [r1, #8]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800a68e:	697b      	ldr	r3, [r7, #20]
 800a690:	f003 0303 	and.w	r3, r3, #3
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	220f      	movs	r2, #15
 800a698:	fa02 f303 	lsl.w	r3, r2, r3
 800a69c:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a69e:	4a2f      	ldr	r2, [pc, #188]	@ (800a75c <HAL_GPIO_DeInit+0x1a8>)
 800a6a0:	697b      	ldr	r3, [r7, #20]
 800a6a2:	089b      	lsrs	r3, r3, #2
 800a6a4:	3302      	adds	r3, #2
 800a6a6:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	43da      	mvns	r2, r3
 800a6ae:	482b      	ldr	r0, [pc, #172]	@ (800a75c <HAL_GPIO_DeInit+0x1a8>)
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	089b      	lsrs	r3, r3, #2
 800a6b4:	400a      	ands	r2, r1
 800a6b6:	3302      	adds	r3, #2
 800a6b8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681a      	ldr	r2, [r3, #0]
 800a6c0:	697b      	ldr	r3, [r7, #20]
 800a6c2:	005b      	lsls	r3, r3, #1
 800a6c4:	2103      	movs	r1, #3
 800a6c6:	fa01 f303 	lsl.w	r3, r1, r3
 800a6ca:	431a      	orrs	r2, r3
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u));
 800a6d0:	697b      	ldr	r3, [r7, #20]
 800a6d2:	08da      	lsrs	r2, r3, #3
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	3208      	adds	r2, #8
 800a6d8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	f003 0307 	and.w	r3, r3, #7
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	220f      	movs	r2, #15
 800a6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800a6ea:	43db      	mvns	r3, r3
 800a6ec:	697a      	ldr	r2, [r7, #20]
 800a6ee:	08d2      	lsrs	r2, r2, #3
 800a6f0:	4019      	ands	r1, r3
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	3208      	adds	r2, #8
 800a6f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	68da      	ldr	r2, [r3, #12]
 800a6fe:	697b      	ldr	r3, [r7, #20]
 800a700:	005b      	lsls	r3, r3, #1
 800a702:	2103      	movs	r1, #3
 800a704:	fa01 f303 	lsl.w	r3, r1, r3
 800a708:	43db      	mvns	r3, r3
 800a70a:	401a      	ands	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	2101      	movs	r1, #1
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	fa01 f303 	lsl.w	r3, r1, r3
 800a71c:	43db      	mvns	r3, r3
 800a71e:	401a      	ands	r2, r3
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	697b      	ldr	r3, [r7, #20]
 800a72a:	005b      	lsls	r3, r3, #1
 800a72c:	2103      	movs	r1, #3
 800a72e:	fa01 f303 	lsl.w	r3, r1, r3
 800a732:	43db      	mvns	r3, r3
 800a734:	401a      	ands	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	609a      	str	r2, [r3, #8]
    }

    position++;
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	3301      	adds	r3, #1
 800a73e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0U)
 800a740:	683a      	ldr	r2, [r7, #0]
 800a742:	697b      	ldr	r3, [r7, #20]
 800a744:	fa22 f303 	lsr.w	r3, r2, r3
 800a748:	2b00      	cmp	r3, #0
 800a74a:	f47f af3b 	bne.w	800a5c4 <HAL_GPIO_DeInit+0x10>
  }
}
 800a74e:	bf00      	nop
 800a750:	bf00      	nop
 800a752:	371c      	adds	r7, #28
 800a754:	46bd      	mov	sp, r7
 800a756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75a:	4770      	bx	lr
 800a75c:	40010000 	.word	0x40010000
 800a760:	48000400 	.word	0x48000400
 800a764:	48000800 	.word	0x48000800
 800a768:	48000c00 	.word	0x48000c00
 800a76c:	48001000 	.word	0x48001000
 800a770:	48001400 	.word	0x48001400
 800a774:	40010400 	.word	0x40010400

0800a778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
 800a780:	460b      	mov	r3, r1
 800a782:	807b      	strh	r3, [r7, #2]
 800a784:	4613      	mov	r3, r2
 800a786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a788:	787b      	ldrb	r3, [r7, #1]
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d003      	beq.n	800a796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800a78e:	887a      	ldrh	r2, [r7, #2]
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800a794:	e002      	b.n	800a79c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800a796:	887a      	ldrh	r2, [r7, #2]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a79c:	bf00      	nop
 800a79e:	370c      	adds	r7, #12
 800a7a0:	46bd      	mov	sp, r7
 800a7a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a6:	4770      	bx	lr

0800a7a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b082      	sub	sp, #8
 800a7ac:	af00      	add	r7, sp, #0
 800a7ae:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	2b00      	cmp	r3, #0
 800a7b4:	d101      	bne.n	800a7ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	e08d      	b.n	800a8d6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d106      	bne.n	800a7d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a7ce:	6878      	ldr	r0, [r7, #4]
 800a7d0:	f7fc fa00 	bl	8006bd4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2224      	movs	r2, #36	@ 0x24
 800a7d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f022 0201 	bic.w	r2, r2, #1
 800a7ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	685a      	ldr	r2, [r3, #4]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	681b      	ldr	r3, [r3, #0]
 800a7f4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800a7f8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	689a      	ldr	r2, [r3, #8]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a808:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68db      	ldr	r3, [r3, #12]
 800a80e:	2b01      	cmp	r3, #1
 800a810:	d107      	bne.n	800a822 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	689a      	ldr	r2, [r3, #8]
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a81e:	609a      	str	r2, [r3, #8]
 800a820:	e006      	b.n	800a830 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	689a      	ldr	r2, [r3, #8]
 800a826:	687b      	ldr	r3, [r7, #4]
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800a82e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	68db      	ldr	r3, [r3, #12]
 800a834:	2b02      	cmp	r3, #2
 800a836:	d108      	bne.n	800a84a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	685a      	ldr	r2, [r3, #4]
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a846:	605a      	str	r2, [r3, #4]
 800a848:	e007      	b.n	800a85a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	685a      	ldr	r2, [r3, #4]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a858:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	685b      	ldr	r3, [r3, #4]
 800a860:	687a      	ldr	r2, [r7, #4]
 800a862:	6812      	ldr	r2, [r2, #0]
 800a864:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800a868:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a86c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	68da      	ldr	r2, [r3, #12]
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800a87c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	695b      	ldr	r3, [r3, #20]
 800a886:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	699b      	ldr	r3, [r3, #24]
 800a88e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	430a      	orrs	r2, r1
 800a896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	69d9      	ldr	r1, [r3, #28]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	6a1a      	ldr	r2, [r3, #32]
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	430a      	orrs	r2, r1
 800a8a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f042 0201 	orr.w	r2, r2, #1
 800a8b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2200      	movs	r2, #0
 800a8bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	2220      	movs	r2, #32
 800a8c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	2200      	movs	r2, #0
 800a8ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800a8d4:	2300      	movs	r3, #0
}
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	3708      	adds	r7, #8
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	bd80      	pop	{r7, pc}

0800a8de <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a8de:	b580      	push	{r7, lr}
 800a8e0:	b082      	sub	sp, #8
 800a8e2:	af00      	add	r7, sp, #0
 800a8e4:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e021      	b.n	800a934 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	2224      	movs	r2, #36	@ 0x24
 800a8f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	681a      	ldr	r2, [r3, #0]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	681b      	ldr	r3, [r3, #0]
 800a902:	f022 0201 	bic.w	r2, r2, #1
 800a906:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a908:	6878      	ldr	r0, [r7, #4]
 800a90a:	f7fc f9bd 	bl	8006c88 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	2200      	movs	r2, #0
 800a912:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2200      	movs	r2, #0
 800a918:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2200      	movs	r2, #0
 800a92e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800a932:	2300      	movs	r3, #0
}
 800a934:	4618      	mov	r0, r3
 800a936:	3708      	adds	r7, #8
 800a938:	46bd      	mov	sp, r7
 800a93a:	bd80      	pop	{r7, pc}

0800a93c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b088      	sub	sp, #32
 800a940:	af02      	add	r7, sp, #8
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	4608      	mov	r0, r1
 800a946:	4611      	mov	r1, r2
 800a948:	461a      	mov	r2, r3
 800a94a:	4603      	mov	r3, r0
 800a94c:	817b      	strh	r3, [r7, #10]
 800a94e:	460b      	mov	r3, r1
 800a950:	813b      	strh	r3, [r7, #8]
 800a952:	4613      	mov	r3, r2
 800a954:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a95c:	b2db      	uxtb	r3, r3
 800a95e:	2b20      	cmp	r3, #32
 800a960:	f040 80f9 	bne.w	800ab56 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800a964:	6a3b      	ldr	r3, [r7, #32]
 800a966:	2b00      	cmp	r3, #0
 800a968:	d002      	beq.n	800a970 <HAL_I2C_Mem_Write+0x34>
 800a96a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d105      	bne.n	800a97c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a976:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e0ed      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800a982:	2b01      	cmp	r3, #1
 800a984:	d101      	bne.n	800a98a <HAL_I2C_Mem_Write+0x4e>
 800a986:	2302      	movs	r3, #2
 800a988:	e0e6      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	2201      	movs	r2, #1
 800a98e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800a992:	f7ff f8e7 	bl	8009b64 <HAL_GetTick>
 800a996:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	9300      	str	r3, [sp, #0]
 800a99c:	2319      	movs	r3, #25
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800a9a4:	68f8      	ldr	r0, [r7, #12]
 800a9a6:	f000 fadd 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d001      	beq.n	800a9b4 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e0d1      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	2221      	movs	r2, #33	@ 0x21
 800a9b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2240      	movs	r2, #64	@ 0x40
 800a9c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	6a3a      	ldr	r2, [r7, #32]
 800a9ce:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a9d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a9dc:	88f8      	ldrh	r0, [r7, #6]
 800a9de:	893a      	ldrh	r2, [r7, #8]
 800a9e0:	8979      	ldrh	r1, [r7, #10]
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	9301      	str	r3, [sp, #4]
 800a9e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e8:	9300      	str	r3, [sp, #0]
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	68f8      	ldr	r0, [r7, #12]
 800a9ee:	f000 f9ed 	bl	800adcc <I2C_RequestMemoryWrite>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d005      	beq.n	800aa04 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800aa00:	2301      	movs	r3, #1
 800aa02:	e0a9      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa08:	b29b      	uxth	r3, r3
 800aa0a:	2bff      	cmp	r3, #255	@ 0xff
 800aa0c:	d90e      	bls.n	800aa2c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	22ff      	movs	r2, #255	@ 0xff
 800aa12:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	8979      	ldrh	r1, [r7, #10]
 800aa1c:	2300      	movs	r3, #0
 800aa1e:	9300      	str	r3, [sp, #0]
 800aa20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aa24:	68f8      	ldr	r0, [r7, #12]
 800aa26:	f000 fc61 	bl	800b2ec <I2C_TransferConfig>
 800aa2a:	e00f      	b.n	800aa4c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa30:	b29a      	uxth	r2, r3
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa3a:	b2da      	uxtb	r2, r3
 800aa3c:	8979      	ldrh	r1, [r7, #10]
 800aa3e:	2300      	movs	r3, #0
 800aa40:	9300      	str	r3, [sp, #0]
 800aa42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aa46:	68f8      	ldr	r0, [r7, #12]
 800aa48:	f000 fc50 	bl	800b2ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aa4c:	697a      	ldr	r2, [r7, #20]
 800aa4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa50:	68f8      	ldr	r0, [r7, #12]
 800aa52:	f000 fae0 	bl	800b016 <I2C_WaitOnTXISFlagUntilTimeout>
 800aa56:	4603      	mov	r3, r0
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d001      	beq.n	800aa60 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800aa5c:	2301      	movs	r3, #1
 800aa5e:	e07b      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa64:	781a      	ldrb	r2, [r3, #0]
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa70:	1c5a      	adds	r2, r3, #1
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa7a:	b29b      	uxth	r3, r3
 800aa7c:	3b01      	subs	r3, #1
 800aa7e:	b29a      	uxth	r2, r3
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa88:	3b01      	subs	r3, #1
 800aa8a:	b29a      	uxth	r2, r3
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d034      	beq.n	800ab04 <HAL_I2C_Mem_Write+0x1c8>
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d130      	bne.n	800ab04 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800aaa2:	697b      	ldr	r3, [r7, #20]
 800aaa4:	9300      	str	r3, [sp, #0]
 800aaa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa8:	2200      	movs	r2, #0
 800aaaa:	2180      	movs	r1, #128	@ 0x80
 800aaac:	68f8      	ldr	r0, [r7, #12]
 800aaae:	f000 fa59 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d001      	beq.n	800aabc <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800aab8:	2301      	movs	r3, #1
 800aaba:	e04d      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aac0:	b29b      	uxth	r3, r3
 800aac2:	2bff      	cmp	r3, #255	@ 0xff
 800aac4:	d90e      	bls.n	800aae4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	22ff      	movs	r2, #255	@ 0xff
 800aaca:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aad0:	b2da      	uxtb	r2, r3
 800aad2:	8979      	ldrh	r1, [r7, #10]
 800aad4:	2300      	movs	r3, #0
 800aad6:	9300      	str	r3, [sp, #0]
 800aad8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800aadc:	68f8      	ldr	r0, [r7, #12]
 800aade:	f000 fc05 	bl	800b2ec <I2C_TransferConfig>
 800aae2:	e00f      	b.n	800ab04 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae8:	b29a      	uxth	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	8979      	ldrh	r1, [r7, #10]
 800aaf6:	2300      	movs	r3, #0
 800aaf8:	9300      	str	r3, [sp, #0]
 800aafa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800aafe:	68f8      	ldr	r0, [r7, #12]
 800ab00:	f000 fbf4 	bl	800b2ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d19e      	bne.n	800aa4c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab0e:	697a      	ldr	r2, [r7, #20]
 800ab10:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ab12:	68f8      	ldr	r0, [r7, #12]
 800ab14:	f000 fac6 	bl	800b0a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	d001      	beq.n	800ab22 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800ab1e:	2301      	movs	r3, #1
 800ab20:	e01a      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	2220      	movs	r2, #32
 800ab28:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	6859      	ldr	r1, [r3, #4]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681a      	ldr	r2, [r3, #0]
 800ab34:	4b0a      	ldr	r3, [pc, #40]	@ (800ab60 <HAL_I2C_Mem_Write+0x224>)
 800ab36:	400b      	ands	r3, r1
 800ab38:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	2220      	movs	r2, #32
 800ab3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	2200      	movs	r2, #0
 800ab46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	e000      	b.n	800ab58 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800ab56:	2302      	movs	r3, #2
  }
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3718      	adds	r7, #24
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}
 800ab60:	fe00e800 	.word	0xfe00e800

0800ab64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b088      	sub	sp, #32
 800ab68:	af02      	add	r7, sp, #8
 800ab6a:	60f8      	str	r0, [r7, #12]
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	461a      	mov	r2, r3
 800ab72:	4603      	mov	r3, r0
 800ab74:	817b      	strh	r3, [r7, #10]
 800ab76:	460b      	mov	r3, r1
 800ab78:	813b      	strh	r3, [r7, #8]
 800ab7a:	4613      	mov	r3, r2
 800ab7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	2b20      	cmp	r3, #32
 800ab88:	f040 80fd 	bne.w	800ad86 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab8c:	6a3b      	ldr	r3, [r7, #32]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d002      	beq.n	800ab98 <HAL_I2C_Mem_Read+0x34>
 800ab92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d105      	bne.n	800aba4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	e0f1      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800abaa:	2b01      	cmp	r3, #1
 800abac:	d101      	bne.n	800abb2 <HAL_I2C_Mem_Read+0x4e>
 800abae:	2302      	movs	r3, #2
 800abb0:	e0ea      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2201      	movs	r2, #1
 800abb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800abba:	f7fe ffd3 	bl	8009b64 <HAL_GetTick>
 800abbe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	9300      	str	r3, [sp, #0]
 800abc4:	2319      	movs	r3, #25
 800abc6:	2201      	movs	r2, #1
 800abc8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800abcc:	68f8      	ldr	r0, [r7, #12]
 800abce:	f000 f9c9 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800abd2:	4603      	mov	r3, r0
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d001      	beq.n	800abdc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
 800abda:	e0d5      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2222      	movs	r2, #34	@ 0x22
 800abe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	2240      	movs	r2, #64	@ 0x40
 800abe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800abec:	68fb      	ldr	r3, [r7, #12]
 800abee:	2200      	movs	r2, #0
 800abf0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	6a3a      	ldr	r2, [r7, #32]
 800abf6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800abfc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	2200      	movs	r2, #0
 800ac02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800ac04:	88f8      	ldrh	r0, [r7, #6]
 800ac06:	893a      	ldrh	r2, [r7, #8]
 800ac08:	8979      	ldrh	r1, [r7, #10]
 800ac0a:	697b      	ldr	r3, [r7, #20]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	4603      	mov	r3, r0
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	f000 f92d 	bl	800ae74 <I2C_RequestMemoryRead>
 800ac1a:	4603      	mov	r3, r0
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d005      	beq.n	800ac2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800ac28:	2301      	movs	r3, #1
 800ac2a:	e0ad      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac30:	b29b      	uxth	r3, r3
 800ac32:	2bff      	cmp	r3, #255	@ 0xff
 800ac34:	d90e      	bls.n	800ac54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	22ff      	movs	r2, #255	@ 0xff
 800ac3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac40:	b2da      	uxtb	r2, r3
 800ac42:	8979      	ldrh	r1, [r7, #10]
 800ac44:	4b52      	ldr	r3, [pc, #328]	@ (800ad90 <HAL_I2C_Mem_Read+0x22c>)
 800ac46:	9300      	str	r3, [sp, #0]
 800ac48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f000 fb4d 	bl	800b2ec <I2C_TransferConfig>
 800ac52:	e00f      	b.n	800ac74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac58:	b29a      	uxth	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac62:	b2da      	uxtb	r2, r3
 800ac64:	8979      	ldrh	r1, [r7, #10]
 800ac66:	4b4a      	ldr	r3, [pc, #296]	@ (800ad90 <HAL_I2C_Mem_Read+0x22c>)
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ac6e:	68f8      	ldr	r0, [r7, #12]
 800ac70:	f000 fb3c 	bl	800b2ec <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800ac74:	697b      	ldr	r3, [r7, #20]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac7a:	2200      	movs	r2, #0
 800ac7c:	2104      	movs	r1, #4
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 f970 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e07c      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac98:	b2d2      	uxtb	r2, r2
 800ac9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aca0:	1c5a      	adds	r2, r3, #1
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acaa:	3b01      	subs	r3, #1
 800acac:	b29a      	uxth	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acb6:	b29b      	uxth	r3, r3
 800acb8:	3b01      	subs	r3, #1
 800acba:	b29a      	uxth	r2, r3
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acc4:	b29b      	uxth	r3, r3
 800acc6:	2b00      	cmp	r3, #0
 800acc8:	d034      	beq.n	800ad34 <HAL_I2C_Mem_Read+0x1d0>
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d130      	bne.n	800ad34 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800acd2:	697b      	ldr	r3, [r7, #20]
 800acd4:	9300      	str	r3, [sp, #0]
 800acd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acd8:	2200      	movs	r2, #0
 800acda:	2180      	movs	r1, #128	@ 0x80
 800acdc:	68f8      	ldr	r0, [r7, #12]
 800acde:	f000 f941 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800ace2:	4603      	mov	r3, r0
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d001      	beq.n	800acec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800ace8:	2301      	movs	r3, #1
 800acea:	e04d      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800acf0:	b29b      	uxth	r3, r3
 800acf2:	2bff      	cmp	r3, #255	@ 0xff
 800acf4:	d90e      	bls.n	800ad14 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	22ff      	movs	r2, #255	@ 0xff
 800acfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad00:	b2da      	uxtb	r2, r3
 800ad02:	8979      	ldrh	r1, [r7, #10]
 800ad04:	2300      	movs	r3, #0
 800ad06:	9300      	str	r3, [sp, #0]
 800ad08:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800ad0c:	68f8      	ldr	r0, [r7, #12]
 800ad0e:	f000 faed 	bl	800b2ec <I2C_TransferConfig>
 800ad12:	e00f      	b.n	800ad34 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad18:	b29a      	uxth	r2, r3
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ad22:	b2da      	uxtb	r2, r3
 800ad24:	8979      	ldrh	r1, [r7, #10]
 800ad26:	2300      	movs	r3, #0
 800ad28:	9300      	str	r3, [sp, #0]
 800ad2a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800ad2e:	68f8      	ldr	r0, [r7, #12]
 800ad30:	f000 fadc 	bl	800b2ec <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	d19a      	bne.n	800ac74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ad42:	68f8      	ldr	r0, [r7, #12]
 800ad44:	f000 f9ae 	bl	800b0a4 <I2C_WaitOnSTOPFlagUntilTimeout>
 800ad48:	4603      	mov	r3, r0
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d001      	beq.n	800ad52 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800ad4e:	2301      	movs	r3, #1
 800ad50:	e01a      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2220      	movs	r2, #32
 800ad58:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	6859      	ldr	r1, [r3, #4]
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	681a      	ldr	r2, [r3, #0]
 800ad64:	4b0b      	ldr	r3, [pc, #44]	@ (800ad94 <HAL_I2C_Mem_Read+0x230>)
 800ad66:	400b      	ands	r3, r1
 800ad68:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2220      	movs	r2, #32
 800ad6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2200      	movs	r2, #0
 800ad76:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ad82:	2300      	movs	r3, #0
 800ad84:	e000      	b.n	800ad88 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800ad86:	2302      	movs	r3, #2
  }
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3718      	adds	r7, #24
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}
 800ad90:	80002400 	.word	0x80002400
 800ad94:	fe00e800 	.word	0xfe00e800

0800ad98 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800ad98:	b480      	push	{r7}
 800ad9a:	b083      	sub	sp, #12
 800ad9c:	af00      	add	r7, sp, #0
 800ad9e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800ada6:	b2db      	uxtb	r3, r3
}
 800ada8:	4618      	mov	r0, r3
 800adaa:	370c      	adds	r7, #12
 800adac:	46bd      	mov	sp, r7
 800adae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb2:	4770      	bx	lr

0800adb4 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800adb4:	b480      	push	{r7}
 800adb6:	b083      	sub	sp, #12
 800adb8:	af00      	add	r7, sp, #0
 800adba:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800adc0:	4618      	mov	r0, r3
 800adc2:	370c      	adds	r7, #12
 800adc4:	46bd      	mov	sp, r7
 800adc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adca:	4770      	bx	lr

0800adcc <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800adcc:	b580      	push	{r7, lr}
 800adce:	b086      	sub	sp, #24
 800add0:	af02      	add	r7, sp, #8
 800add2:	60f8      	str	r0, [r7, #12]
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	461a      	mov	r2, r3
 800adda:	4603      	mov	r3, r0
 800addc:	817b      	strh	r3, [r7, #10]
 800adde:	460b      	mov	r3, r1
 800ade0:	813b      	strh	r3, [r7, #8]
 800ade2:	4613      	mov	r3, r2
 800ade4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800ade6:	88fb      	ldrh	r3, [r7, #6]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	8979      	ldrh	r1, [r7, #10]
 800adec:	4b20      	ldr	r3, [pc, #128]	@ (800ae70 <I2C_RequestMemoryWrite+0xa4>)
 800adee:	9300      	str	r3, [sp, #0]
 800adf0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 fa79 	bl	800b2ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adfa:	69fa      	ldr	r2, [r7, #28]
 800adfc:	69b9      	ldr	r1, [r7, #24]
 800adfe:	68f8      	ldr	r0, [r7, #12]
 800ae00:	f000 f909 	bl	800b016 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae04:	4603      	mov	r3, r0
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d001      	beq.n	800ae0e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	e02c      	b.n	800ae68 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae0e:	88fb      	ldrh	r3, [r7, #6]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d105      	bne.n	800ae20 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae14:	893b      	ldrh	r3, [r7, #8]
 800ae16:	b2da      	uxtb	r2, r3
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	629a      	str	r2, [r3, #40]	@ 0x28
 800ae1e:	e015      	b.n	800ae4c <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800ae20:	893b      	ldrh	r3, [r7, #8]
 800ae22:	0a1b      	lsrs	r3, r3, #8
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	b2da      	uxtb	r2, r3
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae2e:	69fa      	ldr	r2, [r7, #28]
 800ae30:	69b9      	ldr	r1, [r7, #24]
 800ae32:	68f8      	ldr	r0, [r7, #12]
 800ae34:	f000 f8ef 	bl	800b016 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae38:	4603      	mov	r3, r0
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d001      	beq.n	800ae42 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	e012      	b.n	800ae68 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800ae42:	893b      	ldrh	r3, [r7, #8]
 800ae44:	b2da      	uxtb	r2, r3
 800ae46:	68fb      	ldr	r3, [r7, #12]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	9300      	str	r3, [sp, #0]
 800ae50:	69bb      	ldr	r3, [r7, #24]
 800ae52:	2200      	movs	r2, #0
 800ae54:	2180      	movs	r1, #128	@ 0x80
 800ae56:	68f8      	ldr	r0, [r7, #12]
 800ae58:	f000 f884 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800ae5c:	4603      	mov	r3, r0
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d001      	beq.n	800ae66 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800ae62:	2301      	movs	r3, #1
 800ae64:	e000      	b.n	800ae68 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800ae66:	2300      	movs	r3, #0
}
 800ae68:	4618      	mov	r0, r3
 800ae6a:	3710      	adds	r7, #16
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	80002000 	.word	0x80002000

0800ae74 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b086      	sub	sp, #24
 800ae78:	af02      	add	r7, sp, #8
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	4608      	mov	r0, r1
 800ae7e:	4611      	mov	r1, r2
 800ae80:	461a      	mov	r2, r3
 800ae82:	4603      	mov	r3, r0
 800ae84:	817b      	strh	r3, [r7, #10]
 800ae86:	460b      	mov	r3, r1
 800ae88:	813b      	strh	r3, [r7, #8]
 800ae8a:	4613      	mov	r3, r2
 800ae8c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800ae8e:	88fb      	ldrh	r3, [r7, #6]
 800ae90:	b2da      	uxtb	r2, r3
 800ae92:	8979      	ldrh	r1, [r7, #10]
 800ae94:	4b20      	ldr	r3, [pc, #128]	@ (800af18 <I2C_RequestMemoryRead+0xa4>)
 800ae96:	9300      	str	r3, [sp, #0]
 800ae98:	2300      	movs	r3, #0
 800ae9a:	68f8      	ldr	r0, [r7, #12]
 800ae9c:	f000 fa26 	bl	800b2ec <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aea0:	69fa      	ldr	r2, [r7, #28]
 800aea2:	69b9      	ldr	r1, [r7, #24]
 800aea4:	68f8      	ldr	r0, [r7, #12]
 800aea6:	f000 f8b6 	bl	800b016 <I2C_WaitOnTXISFlagUntilTimeout>
 800aeaa:	4603      	mov	r3, r0
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d001      	beq.n	800aeb4 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800aeb0:	2301      	movs	r3, #1
 800aeb2:	e02c      	b.n	800af0e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aeb4:	88fb      	ldrh	r3, [r7, #6]
 800aeb6:	2b01      	cmp	r3, #1
 800aeb8:	d105      	bne.n	800aec6 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aeba:	893b      	ldrh	r3, [r7, #8]
 800aebc:	b2da      	uxtb	r2, r3
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	629a      	str	r2, [r3, #40]	@ 0x28
 800aec4:	e015      	b.n	800aef2 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800aec6:	893b      	ldrh	r3, [r7, #8]
 800aec8:	0a1b      	lsrs	r3, r3, #8
 800aeca:	b29b      	uxth	r3, r3
 800aecc:	b2da      	uxtb	r2, r3
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aed4:	69fa      	ldr	r2, [r7, #28]
 800aed6:	69b9      	ldr	r1, [r7, #24]
 800aed8:	68f8      	ldr	r0, [r7, #12]
 800aeda:	f000 f89c 	bl	800b016 <I2C_WaitOnTXISFlagUntilTimeout>
 800aede:	4603      	mov	r3, r0
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d001      	beq.n	800aee8 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800aee4:	2301      	movs	r3, #1
 800aee6:	e012      	b.n	800af0e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800aee8:	893b      	ldrh	r3, [r7, #8]
 800aeea:	b2da      	uxtb	r2, r3
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800aef2:	69fb      	ldr	r3, [r7, #28]
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	69bb      	ldr	r3, [r7, #24]
 800aef8:	2200      	movs	r2, #0
 800aefa:	2140      	movs	r1, #64	@ 0x40
 800aefc:	68f8      	ldr	r0, [r7, #12]
 800aefe:	f000 f831 	bl	800af64 <I2C_WaitOnFlagUntilTimeout>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d001      	beq.n	800af0c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800af08:	2301      	movs	r3, #1
 800af0a:	e000      	b.n	800af0e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800af0c:	2300      	movs	r3, #0
}
 800af0e:	4618      	mov	r0, r3
 800af10:	3710      	adds	r7, #16
 800af12:	46bd      	mov	sp, r7
 800af14:	bd80      	pop	{r7, pc}
 800af16:	bf00      	nop
 800af18:	80002000 	.word	0x80002000

0800af1c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800af1c:	b480      	push	{r7}
 800af1e:	b083      	sub	sp, #12
 800af20:	af00      	add	r7, sp, #0
 800af22:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	699b      	ldr	r3, [r3, #24]
 800af2a:	f003 0302 	and.w	r3, r3, #2
 800af2e:	2b02      	cmp	r3, #2
 800af30:	d103      	bne.n	800af3a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2200      	movs	r2, #0
 800af38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	699b      	ldr	r3, [r3, #24]
 800af40:	f003 0301 	and.w	r3, r3, #1
 800af44:	2b01      	cmp	r3, #1
 800af46:	d007      	beq.n	800af58 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	699a      	ldr	r2, [r3, #24]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f042 0201 	orr.w	r2, r2, #1
 800af56:	619a      	str	r2, [r3, #24]
  }
}
 800af58:	bf00      	nop
 800af5a:	370c      	adds	r7, #12
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr

0800af64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	60f8      	str	r0, [r7, #12]
 800af6c:	60b9      	str	r1, [r7, #8]
 800af6e:	603b      	str	r3, [r7, #0]
 800af70:	4613      	mov	r3, r2
 800af72:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af74:	e03b      	b.n	800afee <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800af76:	69ba      	ldr	r2, [r7, #24]
 800af78:	6839      	ldr	r1, [r7, #0]
 800af7a:	68f8      	ldr	r0, [r7, #12]
 800af7c:	f000 f8d6 	bl	800b12c <I2C_IsErrorOccurred>
 800af80:	4603      	mov	r3, r0
 800af82:	2b00      	cmp	r3, #0
 800af84:	d001      	beq.n	800af8a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800af86:	2301      	movs	r3, #1
 800af88:	e041      	b.n	800b00e <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af90:	d02d      	beq.n	800afee <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af92:	f7fe fde7 	bl	8009b64 <HAL_GetTick>
 800af96:	4602      	mov	r2, r0
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	1ad3      	subs	r3, r2, r3
 800af9c:	683a      	ldr	r2, [r7, #0]
 800af9e:	429a      	cmp	r2, r3
 800afa0:	d302      	bcc.n	800afa8 <I2C_WaitOnFlagUntilTimeout+0x44>
 800afa2:	683b      	ldr	r3, [r7, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d122      	bne.n	800afee <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	699a      	ldr	r2, [r3, #24]
 800afae:	68bb      	ldr	r3, [r7, #8]
 800afb0:	4013      	ands	r3, r2
 800afb2:	68ba      	ldr	r2, [r7, #8]
 800afb4:	429a      	cmp	r2, r3
 800afb6:	bf0c      	ite	eq
 800afb8:	2301      	moveq	r3, #1
 800afba:	2300      	movne	r3, #0
 800afbc:	b2db      	uxtb	r3, r3
 800afbe:	461a      	mov	r2, r3
 800afc0:	79fb      	ldrb	r3, [r7, #7]
 800afc2:	429a      	cmp	r2, r3
 800afc4:	d113      	bne.n	800afee <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800afca:	f043 0220 	orr.w	r2, r3, #32
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	2220      	movs	r2, #32
 800afd6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800afda:	68fb      	ldr	r3, [r7, #12]
 800afdc:	2200      	movs	r2, #0
 800afde:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	2200      	movs	r2, #0
 800afe6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800afea:	2301      	movs	r3, #1
 800afec:	e00f      	b.n	800b00e <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	699a      	ldr	r2, [r3, #24]
 800aff4:	68bb      	ldr	r3, [r7, #8]
 800aff6:	4013      	ands	r3, r2
 800aff8:	68ba      	ldr	r2, [r7, #8]
 800affa:	429a      	cmp	r2, r3
 800affc:	bf0c      	ite	eq
 800affe:	2301      	moveq	r3, #1
 800b000:	2300      	movne	r3, #0
 800b002:	b2db      	uxtb	r3, r3
 800b004:	461a      	mov	r2, r3
 800b006:	79fb      	ldrb	r3, [r7, #7]
 800b008:	429a      	cmp	r2, r3
 800b00a:	d0b4      	beq.n	800af76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b00c:	2300      	movs	r3, #0
}
 800b00e:	4618      	mov	r0, r3
 800b010:	3710      	adds	r7, #16
 800b012:	46bd      	mov	sp, r7
 800b014:	bd80      	pop	{r7, pc}

0800b016 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b016:	b580      	push	{r7, lr}
 800b018:	b084      	sub	sp, #16
 800b01a:	af00      	add	r7, sp, #0
 800b01c:	60f8      	str	r0, [r7, #12]
 800b01e:	60b9      	str	r1, [r7, #8]
 800b020:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b022:	e033      	b.n	800b08c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b024:	687a      	ldr	r2, [r7, #4]
 800b026:	68b9      	ldr	r1, [r7, #8]
 800b028:	68f8      	ldr	r0, [r7, #12]
 800b02a:	f000 f87f 	bl	800b12c <I2C_IsErrorOccurred>
 800b02e:	4603      	mov	r3, r0
 800b030:	2b00      	cmp	r3, #0
 800b032:	d001      	beq.n	800b038 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b034:	2301      	movs	r3, #1
 800b036:	e031      	b.n	800b09c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b03e:	d025      	beq.n	800b08c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b040:	f7fe fd90 	bl	8009b64 <HAL_GetTick>
 800b044:	4602      	mov	r2, r0
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	68ba      	ldr	r2, [r7, #8]
 800b04c:	429a      	cmp	r2, r3
 800b04e:	d302      	bcc.n	800b056 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b050:	68bb      	ldr	r3, [r7, #8]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d11a      	bne.n	800b08c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	681b      	ldr	r3, [r3, #0]
 800b05a:	699b      	ldr	r3, [r3, #24]
 800b05c:	f003 0302 	and.w	r3, r3, #2
 800b060:	2b02      	cmp	r3, #2
 800b062:	d013      	beq.n	800b08c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b068:	f043 0220 	orr.w	r2, r3, #32
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2220      	movs	r2, #32
 800b074:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	2200      	movs	r2, #0
 800b07c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	e007      	b.n	800b09c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	699b      	ldr	r3, [r3, #24]
 800b092:	f003 0302 	and.w	r3, r3, #2
 800b096:	2b02      	cmp	r3, #2
 800b098:	d1c4      	bne.n	800b024 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b09a:	2300      	movs	r3, #0
}
 800b09c:	4618      	mov	r0, r3
 800b09e:	3710      	adds	r7, #16
 800b0a0:	46bd      	mov	sp, r7
 800b0a2:	bd80      	pop	{r7, pc}

0800b0a4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b084      	sub	sp, #16
 800b0a8:	af00      	add	r7, sp, #0
 800b0aa:	60f8      	str	r0, [r7, #12]
 800b0ac:	60b9      	str	r1, [r7, #8]
 800b0ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b0b0:	e02f      	b.n	800b112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b0b2:	687a      	ldr	r2, [r7, #4]
 800b0b4:	68b9      	ldr	r1, [r7, #8]
 800b0b6:	68f8      	ldr	r0, [r7, #12]
 800b0b8:	f000 f838 	bl	800b12c <I2C_IsErrorOccurred>
 800b0bc:	4603      	mov	r3, r0
 800b0be:	2b00      	cmp	r3, #0
 800b0c0:	d001      	beq.n	800b0c6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e02d      	b.n	800b122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0c6:	f7fe fd4d 	bl	8009b64 <HAL_GetTick>
 800b0ca:	4602      	mov	r2, r0
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	429a      	cmp	r2, r3
 800b0d4:	d302      	bcc.n	800b0dc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d11a      	bne.n	800b112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	f003 0320 	and.w	r3, r3, #32
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d013      	beq.n	800b112 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b0ea:	68fb      	ldr	r3, [r7, #12]
 800b0ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b0ee:	f043 0220 	orr.w	r2, r3, #32
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2220      	movs	r2, #32
 800b0fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	2200      	movs	r2, #0
 800b10a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b10e:	2301      	movs	r3, #1
 800b110:	e007      	b.n	800b122 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	681b      	ldr	r3, [r3, #0]
 800b116:	699b      	ldr	r3, [r3, #24]
 800b118:	f003 0320 	and.w	r3, r3, #32
 800b11c:	2b20      	cmp	r3, #32
 800b11e:	d1c8      	bne.n	800b0b2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b120:	2300      	movs	r3, #0
}
 800b122:	4618      	mov	r0, r3
 800b124:	3710      	adds	r7, #16
 800b126:	46bd      	mov	sp, r7
 800b128:	bd80      	pop	{r7, pc}
	...

0800b12c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b08a      	sub	sp, #40	@ 0x28
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b138:	2300      	movs	r3, #0
 800b13a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	699b      	ldr	r3, [r3, #24]
 800b144:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b146:	2300      	movs	r3, #0
 800b148:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b14e:	69bb      	ldr	r3, [r7, #24]
 800b150:	f003 0310 	and.w	r3, r3, #16
 800b154:	2b00      	cmp	r3, #0
 800b156:	d068      	beq.n	800b22a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b158:	68fb      	ldr	r3, [r7, #12]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2210      	movs	r2, #16
 800b15e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b160:	e049      	b.n	800b1f6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b168:	d045      	beq.n	800b1f6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b16a:	f7fe fcfb 	bl	8009b64 <HAL_GetTick>
 800b16e:	4602      	mov	r2, r0
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	1ad3      	subs	r3, r2, r3
 800b174:	68ba      	ldr	r2, [r7, #8]
 800b176:	429a      	cmp	r2, r3
 800b178:	d302      	bcc.n	800b180 <I2C_IsErrorOccurred+0x54>
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d13a      	bne.n	800b1f6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	685b      	ldr	r3, [r3, #4]
 800b186:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b18a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b192:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	699b      	ldr	r3, [r3, #24]
 800b19a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b19e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b1a2:	d121      	bne.n	800b1e8 <I2C_IsErrorOccurred+0xbc>
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b1aa:	d01d      	beq.n	800b1e8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b1ac:	7cfb      	ldrb	r3, [r7, #19]
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d01a      	beq.n	800b1e8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	681b      	ldr	r3, [r3, #0]
 800b1b6:	685a      	ldr	r2, [r3, #4]
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b1c0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b1c2:	f7fe fccf 	bl	8009b64 <HAL_GetTick>
 800b1c6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1c8:	e00e      	b.n	800b1e8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b1ca:	f7fe fccb 	bl	8009b64 <HAL_GetTick>
 800b1ce:	4602      	mov	r2, r0
 800b1d0:	69fb      	ldr	r3, [r7, #28]
 800b1d2:	1ad3      	subs	r3, r2, r3
 800b1d4:	2b19      	cmp	r3, #25
 800b1d6:	d907      	bls.n	800b1e8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b1d8:	6a3b      	ldr	r3, [r7, #32]
 800b1da:	f043 0320 	orr.w	r3, r3, #32
 800b1de:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b1e6:	e006      	b.n	800b1f6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	699b      	ldr	r3, [r3, #24]
 800b1ee:	f003 0320 	and.w	r3, r3, #32
 800b1f2:	2b20      	cmp	r3, #32
 800b1f4:	d1e9      	bne.n	800b1ca <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	699b      	ldr	r3, [r3, #24]
 800b1fc:	f003 0320 	and.w	r3, r3, #32
 800b200:	2b20      	cmp	r3, #32
 800b202:	d003      	beq.n	800b20c <I2C_IsErrorOccurred+0xe0>
 800b204:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d0aa      	beq.n	800b162 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b20c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b210:	2b00      	cmp	r3, #0
 800b212:	d103      	bne.n	800b21c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	2220      	movs	r2, #32
 800b21a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b21c:	6a3b      	ldr	r3, [r7, #32]
 800b21e:	f043 0304 	orr.w	r3, r3, #4
 800b222:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b224:	2301      	movs	r3, #1
 800b226:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	699b      	ldr	r3, [r3, #24]
 800b230:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b232:	69bb      	ldr	r3, [r7, #24]
 800b234:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d00b      	beq.n	800b254 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b23c:	6a3b      	ldr	r3, [r7, #32]
 800b23e:	f043 0301 	orr.w	r3, r3, #1
 800b242:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b24c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b24e:	2301      	movs	r3, #1
 800b250:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b254:	69bb      	ldr	r3, [r7, #24]
 800b256:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b25a:	2b00      	cmp	r3, #0
 800b25c:	d00b      	beq.n	800b276 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b25e:	6a3b      	ldr	r3, [r7, #32]
 800b260:	f043 0308 	orr.w	r3, r3, #8
 800b264:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b26e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b270:	2301      	movs	r3, #1
 800b272:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b276:	69bb      	ldr	r3, [r7, #24]
 800b278:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d00b      	beq.n	800b298 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b280:	6a3b      	ldr	r3, [r7, #32]
 800b282:	f043 0302 	orr.w	r3, r3, #2
 800b286:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b290:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b292:	2301      	movs	r3, #1
 800b294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800b298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d01c      	beq.n	800b2da <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b2a0:	68f8      	ldr	r0, [r7, #12]
 800b2a2:	f7ff fe3b 	bl	800af1c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	6859      	ldr	r1, [r3, #4]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681a      	ldr	r2, [r3, #0]
 800b2b0:	4b0d      	ldr	r3, [pc, #52]	@ (800b2e8 <I2C_IsErrorOccurred+0x1bc>)
 800b2b2:	400b      	ands	r3, r1
 800b2b4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b2ba:	6a3b      	ldr	r3, [r7, #32]
 800b2bc:	431a      	orrs	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	2220      	movs	r2, #32
 800b2c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800b2da:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3728      	adds	r7, #40	@ 0x28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	fe00e800 	.word	0xfe00e800

0800b2ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b2ec:	b480      	push	{r7}
 800b2ee:	b087      	sub	sp, #28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	60f8      	str	r0, [r7, #12]
 800b2f4:	607b      	str	r3, [r7, #4]
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	817b      	strh	r3, [r7, #10]
 800b2fa:	4613      	mov	r3, r2
 800b2fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b2fe:	897b      	ldrh	r3, [r7, #10]
 800b300:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b304:	7a7b      	ldrb	r3, [r7, #9]
 800b306:	041b      	lsls	r3, r3, #16
 800b308:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b30c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b312:	6a3b      	ldr	r3, [r7, #32]
 800b314:	4313      	orrs	r3, r2
 800b316:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b31a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	685a      	ldr	r2, [r3, #4]
 800b322:	6a3b      	ldr	r3, [r7, #32]
 800b324:	0d5b      	lsrs	r3, r3, #21
 800b326:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800b32a:	4b08      	ldr	r3, [pc, #32]	@ (800b34c <I2C_TransferConfig+0x60>)
 800b32c:	430b      	orrs	r3, r1
 800b32e:	43db      	mvns	r3, r3
 800b330:	ea02 0103 	and.w	r1, r2, r3
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	697a      	ldr	r2, [r7, #20]
 800b33a:	430a      	orrs	r2, r1
 800b33c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b33e:	bf00      	nop
 800b340:	371c      	adds	r7, #28
 800b342:	46bd      	mov	sp, r7
 800b344:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b348:	4770      	bx	lr
 800b34a:	bf00      	nop
 800b34c:	03ff63ff 	.word	0x03ff63ff

0800b350 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b350:	b480      	push	{r7}
 800b352:	b083      	sub	sp, #12
 800b354:	af00      	add	r7, sp, #0
 800b356:	6078      	str	r0, [r7, #4]
 800b358:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b360:	b2db      	uxtb	r3, r3
 800b362:	2b20      	cmp	r3, #32
 800b364:	d138      	bne.n	800b3d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b36c:	2b01      	cmp	r3, #1
 800b36e:	d101      	bne.n	800b374 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b370:	2302      	movs	r3, #2
 800b372:	e032      	b.n	800b3da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	2201      	movs	r2, #1
 800b378:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	2224      	movs	r2, #36	@ 0x24
 800b380:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681a      	ldr	r2, [r3, #0]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f022 0201 	bic.w	r2, r2, #1
 800b392:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800b3a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	681b      	ldr	r3, [r3, #0]
 800b3a8:	6819      	ldr	r1, [r3, #0]
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	683a      	ldr	r2, [r7, #0]
 800b3b0:	430a      	orrs	r2, r1
 800b3b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	681a      	ldr	r2, [r3, #0]
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	f042 0201 	orr.w	r2, r2, #1
 800b3c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	e000      	b.n	800b3da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b3d8:	2302      	movs	r3, #2
  }
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	370c      	adds	r7, #12
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3e4:	4770      	bx	lr

0800b3e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b3e6:	b480      	push	{r7}
 800b3e8:	b085      	sub	sp, #20
 800b3ea:	af00      	add	r7, sp, #0
 800b3ec:	6078      	str	r0, [r7, #4]
 800b3ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b3f6:	b2db      	uxtb	r3, r3
 800b3f8:	2b20      	cmp	r3, #32
 800b3fa:	d139      	bne.n	800b470 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b402:	2b01      	cmp	r3, #1
 800b404:	d101      	bne.n	800b40a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b406:	2302      	movs	r3, #2
 800b408:	e033      	b.n	800b472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	2201      	movs	r2, #1
 800b40e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2224      	movs	r2, #36	@ 0x24
 800b416:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	681a      	ldr	r2, [r3, #0]
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	f022 0201 	bic.w	r2, r2, #1
 800b428:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800b438:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	021b      	lsls	r3, r3, #8
 800b43e:	68fa      	ldr	r2, [r7, #12]
 800b440:	4313      	orrs	r3, r2
 800b442:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	68fa      	ldr	r2, [r7, #12]
 800b44a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f042 0201 	orr.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	2200      	movs	r2, #0
 800b468:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b46c:	2300      	movs	r3, #0
 800b46e:	e000      	b.n	800b472 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b470:	2302      	movs	r3, #2
  }
}
 800b472:	4618      	mov	r0, r3
 800b474:	3714      	adds	r7, #20
 800b476:	46bd      	mov	sp, r7
 800b478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b47c:	4770      	bx	lr
	...

0800b480 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800b480:	b480      	push	{r7}
 800b482:	b085      	sub	sp, #20
 800b484:	af00      	add	r7, sp, #0
 800b486:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d141      	bne.n	800b512 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b48e:	4b4b      	ldr	r3, [pc, #300]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b496:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b49a:	d131      	bne.n	800b500 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b49c:	4b47      	ldr	r3, [pc, #284]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b49e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b4a2:	4a46      	ldr	r2, [pc, #280]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4a4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b4a8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b4ac:	4b43      	ldr	r3, [pc, #268]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b4b4:	4a41      	ldr	r2, [pc, #260]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b4ba:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b4bc:	4b40      	ldr	r3, [pc, #256]	@ (800b5c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2232      	movs	r2, #50	@ 0x32
 800b4c2:	fb02 f303 	mul.w	r3, r2, r3
 800b4c6:	4a3f      	ldr	r2, [pc, #252]	@ (800b5c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b4c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4cc:	0c9b      	lsrs	r3, r3, #18
 800b4ce:	3301      	adds	r3, #1
 800b4d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4d2:	e002      	b.n	800b4da <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	3b01      	subs	r3, #1
 800b4d8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b4da:	4b38      	ldr	r3, [pc, #224]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4dc:	695b      	ldr	r3, [r3, #20]
 800b4de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4e6:	d102      	bne.n	800b4ee <HAL_PWREx_ControlVoltageScaling+0x6e>
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d1f2      	bne.n	800b4d4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b4ee:	4b33      	ldr	r3, [pc, #204]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b4f0:	695b      	ldr	r3, [r3, #20]
 800b4f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b4f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b4fa:	d158      	bne.n	800b5ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e057      	b.n	800b5b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b500:	4b2e      	ldr	r3, [pc, #184]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b502:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b506:	4a2d      	ldr	r2, [pc, #180]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b508:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b50c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b510:	e04d      	b.n	800b5ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b518:	d141      	bne.n	800b59e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800b51a:	4b28      	ldr	r3, [pc, #160]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800b522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b526:	d131      	bne.n	800b58c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b528:	4b24      	ldr	r3, [pc, #144]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b52a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b52e:	4a23      	ldr	r2, [pc, #140]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b530:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b534:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800b538:	4b20      	ldr	r3, [pc, #128]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b540:	4a1e      	ldr	r2, [pc, #120]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b542:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800b546:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800b548:	4b1d      	ldr	r3, [pc, #116]	@ (800b5c0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	2232      	movs	r2, #50	@ 0x32
 800b54e:	fb02 f303 	mul.w	r3, r2, r3
 800b552:	4a1c      	ldr	r2, [pc, #112]	@ (800b5c4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 800b554:	fba2 2303 	umull	r2, r3, r2, r3
 800b558:	0c9b      	lsrs	r3, r3, #18
 800b55a:	3301      	adds	r3, #1
 800b55c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b55e:	e002      	b.n	800b566 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	3b01      	subs	r3, #1
 800b564:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800b566:	4b15      	ldr	r3, [pc, #84]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b568:	695b      	ldr	r3, [r3, #20]
 800b56a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b56e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b572:	d102      	bne.n	800b57a <HAL_PWREx_ControlVoltageScaling+0xfa>
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d1f2      	bne.n	800b560 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800b57a:	4b10      	ldr	r3, [pc, #64]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b57c:	695b      	ldr	r3, [r3, #20]
 800b57e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b582:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b586:	d112      	bne.n	800b5ae <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800b588:	2303      	movs	r3, #3
 800b58a:	e011      	b.n	800b5b0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800b58c:	4b0b      	ldr	r3, [pc, #44]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b58e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b592:	4a0a      	ldr	r2, [pc, #40]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b598:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800b59c:	e007      	b.n	800b5ae <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800b59e:	4b07      	ldr	r3, [pc, #28]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800b5a6:	4a05      	ldr	r2, [pc, #20]	@ (800b5bc <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800b5a8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b5ac:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800b5ae:	2300      	movs	r3, #0
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3714      	adds	r7, #20
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ba:	4770      	bx	lr
 800b5bc:	40007000 	.word	0x40007000
 800b5c0:	20000004 	.word	0x20000004
 800b5c4:	431bde83 	.word	0x431bde83

0800b5c8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 800b5c8:	b480      	push	{r7}
 800b5ca:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800b5cc:	4b05      	ldr	r3, [pc, #20]	@ (800b5e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b5ce:	689b      	ldr	r3, [r3, #8]
 800b5d0:	4a04      	ldr	r2, [pc, #16]	@ (800b5e4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800b5d2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b5d6:	6093      	str	r3, [r2, #8]
}
 800b5d8:	bf00      	nop
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr
 800b5e2:	bf00      	nop
 800b5e4:	40007000 	.word	0x40007000

0800b5e8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d101      	bne.n	800b5fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	e2fe      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	f003 0301 	and.w	r3, r3, #1
 800b602:	2b00      	cmp	r3, #0
 800b604:	d075      	beq.n	800b6f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b606:	4b97      	ldr	r3, [pc, #604]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b608:	689b      	ldr	r3, [r3, #8]
 800b60a:	f003 030c 	and.w	r3, r3, #12
 800b60e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b610:	4b94      	ldr	r3, [pc, #592]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b612:	68db      	ldr	r3, [r3, #12]
 800b614:	f003 0303 	and.w	r3, r3, #3
 800b618:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800b61a:	69bb      	ldr	r3, [r7, #24]
 800b61c:	2b0c      	cmp	r3, #12
 800b61e:	d102      	bne.n	800b626 <HAL_RCC_OscConfig+0x3e>
 800b620:	697b      	ldr	r3, [r7, #20]
 800b622:	2b03      	cmp	r3, #3
 800b624:	d002      	beq.n	800b62c <HAL_RCC_OscConfig+0x44>
 800b626:	69bb      	ldr	r3, [r7, #24]
 800b628:	2b08      	cmp	r3, #8
 800b62a:	d10b      	bne.n	800b644 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b62c:	4b8d      	ldr	r3, [pc, #564]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b634:	2b00      	cmp	r3, #0
 800b636:	d05b      	beq.n	800b6f0 <HAL_RCC_OscConfig+0x108>
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	685b      	ldr	r3, [r3, #4]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d157      	bne.n	800b6f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800b640:	2301      	movs	r3, #1
 800b642:	e2d9      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	685b      	ldr	r3, [r3, #4]
 800b648:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b64c:	d106      	bne.n	800b65c <HAL_RCC_OscConfig+0x74>
 800b64e:	4b85      	ldr	r3, [pc, #532]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	4a84      	ldr	r2, [pc, #528]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b658:	6013      	str	r3, [r2, #0]
 800b65a:	e01d      	b.n	800b698 <HAL_RCC_OscConfig+0xb0>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	685b      	ldr	r3, [r3, #4]
 800b660:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b664:	d10c      	bne.n	800b680 <HAL_RCC_OscConfig+0x98>
 800b666:	4b7f      	ldr	r3, [pc, #508]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	4a7e      	ldr	r2, [pc, #504]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b66c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b670:	6013      	str	r3, [r2, #0]
 800b672:	4b7c      	ldr	r3, [pc, #496]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	4a7b      	ldr	r2, [pc, #492]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b678:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b67c:	6013      	str	r3, [r2, #0]
 800b67e:	e00b      	b.n	800b698 <HAL_RCC_OscConfig+0xb0>
 800b680:	4b78      	ldr	r3, [pc, #480]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a77      	ldr	r2, [pc, #476]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b686:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b68a:	6013      	str	r3, [r2, #0]
 800b68c:	4b75      	ldr	r3, [pc, #468]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b68e:	681b      	ldr	r3, [r3, #0]
 800b690:	4a74      	ldr	r2, [pc, #464]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b692:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b696:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	685b      	ldr	r3, [r3, #4]
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d013      	beq.n	800b6c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6a0:	f7fe fa60 	bl	8009b64 <HAL_GetTick>
 800b6a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6a6:	e008      	b.n	800b6ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6a8:	f7fe fa5c 	bl	8009b64 <HAL_GetTick>
 800b6ac:	4602      	mov	r2, r0
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	1ad3      	subs	r3, r2, r3
 800b6b2:	2b64      	cmp	r3, #100	@ 0x64
 800b6b4:	d901      	bls.n	800b6ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800b6b6:	2303      	movs	r3, #3
 800b6b8:	e29e      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800b6ba:	4b6a      	ldr	r3, [pc, #424]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d0f0      	beq.n	800b6a8 <HAL_RCC_OscConfig+0xc0>
 800b6c6:	e014      	b.n	800b6f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b6c8:	f7fe fa4c 	bl	8009b64 <HAL_GetTick>
 800b6cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b6ce:	e008      	b.n	800b6e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b6d0:	f7fe fa48 	bl	8009b64 <HAL_GetTick>
 800b6d4:	4602      	mov	r2, r0
 800b6d6:	693b      	ldr	r3, [r7, #16]
 800b6d8:	1ad3      	subs	r3, r2, r3
 800b6da:	2b64      	cmp	r3, #100	@ 0x64
 800b6dc:	d901      	bls.n	800b6e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b6de:	2303      	movs	r3, #3
 800b6e0:	e28a      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800b6e2:	4b60      	ldr	r3, [pc, #384]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d1f0      	bne.n	800b6d0 <HAL_RCC_OscConfig+0xe8>
 800b6ee:	e000      	b.n	800b6f2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b6f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	f003 0302 	and.w	r3, r3, #2
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d075      	beq.n	800b7ea <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b6fe:	4b59      	ldr	r3, [pc, #356]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b700:	689b      	ldr	r3, [r3, #8]
 800b702:	f003 030c 	and.w	r3, r3, #12
 800b706:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b708:	4b56      	ldr	r3, [pc, #344]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b70a:	68db      	ldr	r3, [r3, #12]
 800b70c:	f003 0303 	and.w	r3, r3, #3
 800b710:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	2b0c      	cmp	r3, #12
 800b716:	d102      	bne.n	800b71e <HAL_RCC_OscConfig+0x136>
 800b718:	697b      	ldr	r3, [r7, #20]
 800b71a:	2b02      	cmp	r3, #2
 800b71c:	d002      	beq.n	800b724 <HAL_RCC_OscConfig+0x13c>
 800b71e:	69bb      	ldr	r3, [r7, #24]
 800b720:	2b04      	cmp	r3, #4
 800b722:	d11f      	bne.n	800b764 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b724:	4b4f      	ldr	r3, [pc, #316]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d005      	beq.n	800b73c <HAL_RCC_OscConfig+0x154>
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	68db      	ldr	r3, [r3, #12]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d101      	bne.n	800b73c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 800b738:	2301      	movs	r3, #1
 800b73a:	e25d      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b73c:	4b49      	ldr	r3, [pc, #292]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	691b      	ldr	r3, [r3, #16]
 800b748:	061b      	lsls	r3, r3, #24
 800b74a:	4946      	ldr	r1, [pc, #280]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b74c:	4313      	orrs	r3, r2
 800b74e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800b750:	4b45      	ldr	r3, [pc, #276]	@ (800b868 <HAL_RCC_OscConfig+0x280>)
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	4618      	mov	r0, r3
 800b756:	f7fe f9b9 	bl	8009acc <HAL_InitTick>
 800b75a:	4603      	mov	r3, r0
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d043      	beq.n	800b7e8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800b760:	2301      	movs	r3, #1
 800b762:	e249      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	68db      	ldr	r3, [r3, #12]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d023      	beq.n	800b7b4 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b76c:	4b3d      	ldr	r3, [pc, #244]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	4a3c      	ldr	r2, [pc, #240]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b772:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b776:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b778:	f7fe f9f4 	bl	8009b64 <HAL_GetTick>
 800b77c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b77e:	e008      	b.n	800b792 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b780:	f7fe f9f0 	bl	8009b64 <HAL_GetTick>
 800b784:	4602      	mov	r2, r0
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	1ad3      	subs	r3, r2, r3
 800b78a:	2b02      	cmp	r3, #2
 800b78c:	d901      	bls.n	800b792 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800b78e:	2303      	movs	r3, #3
 800b790:	e232      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800b792:	4b34      	ldr	r3, [pc, #208]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d0f0      	beq.n	800b780 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b79e:	4b31      	ldr	r3, [pc, #196]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b7a0:	685b      	ldr	r3, [r3, #4]
 800b7a2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	691b      	ldr	r3, [r3, #16]
 800b7aa:	061b      	lsls	r3, r3, #24
 800b7ac:	492d      	ldr	r1, [pc, #180]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b7ae:	4313      	orrs	r3, r2
 800b7b0:	604b      	str	r3, [r1, #4]
 800b7b2:	e01a      	b.n	800b7ea <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b7b4:	4b2b      	ldr	r3, [pc, #172]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	4a2a      	ldr	r2, [pc, #168]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b7ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b7be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b7c0:	f7fe f9d0 	bl	8009b64 <HAL_GetTick>
 800b7c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b7c6:	e008      	b.n	800b7da <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b7c8:	f7fe f9cc 	bl	8009b64 <HAL_GetTick>
 800b7cc:	4602      	mov	r2, r0
 800b7ce:	693b      	ldr	r3, [r7, #16]
 800b7d0:	1ad3      	subs	r3, r2, r3
 800b7d2:	2b02      	cmp	r3, #2
 800b7d4:	d901      	bls.n	800b7da <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800b7d6:	2303      	movs	r3, #3
 800b7d8:	e20e      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800b7da:	4b22      	ldr	r3, [pc, #136]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d1f0      	bne.n	800b7c8 <HAL_RCC_OscConfig+0x1e0>
 800b7e6:	e000      	b.n	800b7ea <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800b7e8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f003 0308 	and.w	r3, r3, #8
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d041      	beq.n	800b87a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	695b      	ldr	r3, [r3, #20]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d01c      	beq.n	800b838 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b7fe:	4b19      	ldr	r3, [pc, #100]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b800:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b804:	4a17      	ldr	r2, [pc, #92]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b806:	f043 0301 	orr.w	r3, r3, #1
 800b80a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b80e:	f7fe f9a9 	bl	8009b64 <HAL_GetTick>
 800b812:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b814:	e008      	b.n	800b828 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b816:	f7fe f9a5 	bl	8009b64 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	1ad3      	subs	r3, r2, r3
 800b820:	2b02      	cmp	r3, #2
 800b822:	d901      	bls.n	800b828 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800b824:	2303      	movs	r3, #3
 800b826:	e1e7      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800b828:	4b0e      	ldr	r3, [pc, #56]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b82a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b82e:	f003 0302 	and.w	r3, r3, #2
 800b832:	2b00      	cmp	r3, #0
 800b834:	d0ef      	beq.n	800b816 <HAL_RCC_OscConfig+0x22e>
 800b836:	e020      	b.n	800b87a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b838:	4b0a      	ldr	r3, [pc, #40]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b83a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b83e:	4a09      	ldr	r2, [pc, #36]	@ (800b864 <HAL_RCC_OscConfig+0x27c>)
 800b840:	f023 0301 	bic.w	r3, r3, #1
 800b844:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b848:	f7fe f98c 	bl	8009b64 <HAL_GetTick>
 800b84c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b84e:	e00d      	b.n	800b86c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b850:	f7fe f988 	bl	8009b64 <HAL_GetTick>
 800b854:	4602      	mov	r2, r0
 800b856:	693b      	ldr	r3, [r7, #16]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	2b02      	cmp	r3, #2
 800b85c:	d906      	bls.n	800b86c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800b85e:	2303      	movs	r3, #3
 800b860:	e1ca      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
 800b862:	bf00      	nop
 800b864:	40021000 	.word	0x40021000
 800b868:	20000074 	.word	0x20000074
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800b86c:	4b8c      	ldr	r3, [pc, #560]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b86e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800b872:	f003 0302 	and.w	r3, r3, #2
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1ea      	bne.n	800b850 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	f003 0304 	and.w	r3, r3, #4
 800b882:	2b00      	cmp	r3, #0
 800b884:	f000 80a6 	beq.w	800b9d4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b888:	2300      	movs	r3, #0
 800b88a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800b88c:	4b84      	ldr	r3, [pc, #528]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b88e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b894:	2b00      	cmp	r3, #0
 800b896:	d101      	bne.n	800b89c <HAL_RCC_OscConfig+0x2b4>
 800b898:	2301      	movs	r3, #1
 800b89a:	e000      	b.n	800b89e <HAL_RCC_OscConfig+0x2b6>
 800b89c:	2300      	movs	r3, #0
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d00d      	beq.n	800b8be <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b8a2:	4b7f      	ldr	r3, [pc, #508]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b8a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8a6:	4a7e      	ldr	r2, [pc, #504]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b8a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b8ac:	6593      	str	r3, [r2, #88]	@ 0x58
 800b8ae:	4b7c      	ldr	r3, [pc, #496]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b8b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b8b6:	60fb      	str	r3, [r7, #12]
 800b8b8:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800b8ba:	2301      	movs	r3, #1
 800b8bc:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8be:	4b79      	ldr	r3, [pc, #484]	@ (800baa4 <HAL_RCC_OscConfig+0x4bc>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d118      	bne.n	800b8fc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b8ca:	4b76      	ldr	r3, [pc, #472]	@ (800baa4 <HAL_RCC_OscConfig+0x4bc>)
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a75      	ldr	r2, [pc, #468]	@ (800baa4 <HAL_RCC_OscConfig+0x4bc>)
 800b8d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b8d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b8d6:	f7fe f945 	bl	8009b64 <HAL_GetTick>
 800b8da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8dc:	e008      	b.n	800b8f0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b8de:	f7fe f941 	bl	8009b64 <HAL_GetTick>
 800b8e2:	4602      	mov	r2, r0
 800b8e4:	693b      	ldr	r3, [r7, #16]
 800b8e6:	1ad3      	subs	r3, r2, r3
 800b8e8:	2b02      	cmp	r3, #2
 800b8ea:	d901      	bls.n	800b8f0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	e183      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800b8f0:	4b6c      	ldr	r3, [pc, #432]	@ (800baa4 <HAL_RCC_OscConfig+0x4bc>)
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d0f0      	beq.n	800b8de <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	689b      	ldr	r3, [r3, #8]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d108      	bne.n	800b916 <HAL_RCC_OscConfig+0x32e>
 800b904:	4b66      	ldr	r3, [pc, #408]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b90a:	4a65      	ldr	r2, [pc, #404]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b90c:	f043 0301 	orr.w	r3, r3, #1
 800b910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b914:	e024      	b.n	800b960 <HAL_RCC_OscConfig+0x378>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	689b      	ldr	r3, [r3, #8]
 800b91a:	2b05      	cmp	r3, #5
 800b91c:	d110      	bne.n	800b940 <HAL_RCC_OscConfig+0x358>
 800b91e:	4b60      	ldr	r3, [pc, #384]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b920:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b924:	4a5e      	ldr	r2, [pc, #376]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b926:	f043 0304 	orr.w	r3, r3, #4
 800b92a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b92e:	4b5c      	ldr	r3, [pc, #368]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b930:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b934:	4a5a      	ldr	r2, [pc, #360]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b936:	f043 0301 	orr.w	r3, r3, #1
 800b93a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b93e:	e00f      	b.n	800b960 <HAL_RCC_OscConfig+0x378>
 800b940:	4b57      	ldr	r3, [pc, #348]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b942:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b946:	4a56      	ldr	r2, [pc, #344]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b948:	f023 0301 	bic.w	r3, r3, #1
 800b94c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800b950:	4b53      	ldr	r3, [pc, #332]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b956:	4a52      	ldr	r2, [pc, #328]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b958:	f023 0304 	bic.w	r3, r3, #4
 800b95c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	689b      	ldr	r3, [r3, #8]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d016      	beq.n	800b996 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b968:	f7fe f8fc 	bl	8009b64 <HAL_GetTick>
 800b96c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b96e:	e00a      	b.n	800b986 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b970:	f7fe f8f8 	bl	8009b64 <HAL_GetTick>
 800b974:	4602      	mov	r2, r0
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	1ad3      	subs	r3, r2, r3
 800b97a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b97e:	4293      	cmp	r3, r2
 800b980:	d901      	bls.n	800b986 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800b982:	2303      	movs	r3, #3
 800b984:	e138      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800b986:	4b46      	ldr	r3, [pc, #280]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b98c:	f003 0302 	and.w	r3, r3, #2
 800b990:	2b00      	cmp	r3, #0
 800b992:	d0ed      	beq.n	800b970 <HAL_RCC_OscConfig+0x388>
 800b994:	e015      	b.n	800b9c2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b996:	f7fe f8e5 	bl	8009b64 <HAL_GetTick>
 800b99a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b99c:	e00a      	b.n	800b9b4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b99e:	f7fe f8e1 	bl	8009b64 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	693b      	ldr	r3, [r7, #16]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b9ac:	4293      	cmp	r3, r2
 800b9ae:	d901      	bls.n	800b9b4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800b9b0:	2303      	movs	r3, #3
 800b9b2:	e121      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800b9b4:	4b3a      	ldr	r3, [pc, #232]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b9b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b9ba:	f003 0302 	and.w	r3, r3, #2
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d1ed      	bne.n	800b99e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b9c2:	7ffb      	ldrb	r3, [r7, #31]
 800b9c4:	2b01      	cmp	r3, #1
 800b9c6:	d105      	bne.n	800b9d4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b9c8:	4b35      	ldr	r3, [pc, #212]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b9ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b9cc:	4a34      	ldr	r2, [pc, #208]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b9ce:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9d2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	681b      	ldr	r3, [r3, #0]
 800b9d8:	f003 0320 	and.w	r3, r3, #32
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d03c      	beq.n	800ba5a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d01c      	beq.n	800ba22 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800b9e8:	4b2d      	ldr	r3, [pc, #180]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b9ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800b9ee:	4a2c      	ldr	r2, [pc, #176]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800b9f0:	f043 0301 	orr.w	r3, r3, #1
 800b9f4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b9f8:	f7fe f8b4 	bl	8009b64 <HAL_GetTick>
 800b9fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800b9fe:	e008      	b.n	800ba12 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba00:	f7fe f8b0 	bl	8009b64 <HAL_GetTick>
 800ba04:	4602      	mov	r2, r0
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	1ad3      	subs	r3, r2, r3
 800ba0a:	2b02      	cmp	r3, #2
 800ba0c:	d901      	bls.n	800ba12 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800ba0e:	2303      	movs	r3, #3
 800ba10:	e0f2      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800ba12:	4b23      	ldr	r3, [pc, #140]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba14:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba18:	f003 0302 	and.w	r3, r3, #2
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d0ef      	beq.n	800ba00 <HAL_RCC_OscConfig+0x418>
 800ba20:	e01b      	b.n	800ba5a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800ba22:	4b1f      	ldr	r3, [pc, #124]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba28:	4a1d      	ldr	r2, [pc, #116]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba2a:	f023 0301 	bic.w	r3, r3, #1
 800ba2e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ba32:	f7fe f897 	bl	8009b64 <HAL_GetTick>
 800ba36:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba38:	e008      	b.n	800ba4c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ba3a:	f7fe f893 	bl	8009b64 <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	693b      	ldr	r3, [r7, #16]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	2b02      	cmp	r3, #2
 800ba46:	d901      	bls.n	800ba4c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800ba48:	2303      	movs	r3, #3
 800ba4a:	e0d5      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800ba4c:	4b14      	ldr	r3, [pc, #80]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800ba52:	f003 0302 	and.w	r3, r3, #2
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d1ef      	bne.n	800ba3a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	69db      	ldr	r3, [r3, #28]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	f000 80c9 	beq.w	800bbf6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800ba64:	4b0e      	ldr	r3, [pc, #56]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	f003 030c 	and.w	r3, r3, #12
 800ba6c:	2b0c      	cmp	r3, #12
 800ba6e:	f000 8083 	beq.w	800bb78 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	2b02      	cmp	r3, #2
 800ba78:	d15e      	bne.n	800bb38 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ba7a:	4b09      	ldr	r3, [pc, #36]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	4a08      	ldr	r2, [pc, #32]	@ (800baa0 <HAL_RCC_OscConfig+0x4b8>)
 800ba80:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800ba84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ba86:	f7fe f86d 	bl	8009b64 <HAL_GetTick>
 800ba8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800ba8c:	e00c      	b.n	800baa8 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800ba8e:	f7fe f869 	bl	8009b64 <HAL_GetTick>
 800ba92:	4602      	mov	r2, r0
 800ba94:	693b      	ldr	r3, [r7, #16]
 800ba96:	1ad3      	subs	r3, r2, r3
 800ba98:	2b02      	cmp	r3, #2
 800ba9a:	d905      	bls.n	800baa8 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800ba9c:	2303      	movs	r3, #3
 800ba9e:	e0ab      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
 800baa0:	40021000 	.word	0x40021000
 800baa4:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800baa8:	4b55      	ldr	r3, [pc, #340]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d1ec      	bne.n	800ba8e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bab4:	4b52      	ldr	r3, [pc, #328]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bab6:	68da      	ldr	r2, [r3, #12]
 800bab8:	4b52      	ldr	r3, [pc, #328]	@ (800bc04 <HAL_RCC_OscConfig+0x61c>)
 800baba:	4013      	ands	r3, r2
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	6a11      	ldr	r1, [r2, #32]
 800bac0:	687a      	ldr	r2, [r7, #4]
 800bac2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800bac4:	3a01      	subs	r2, #1
 800bac6:	0112      	lsls	r2, r2, #4
 800bac8:	4311      	orrs	r1, r2
 800baca:	687a      	ldr	r2, [r7, #4]
 800bacc:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800bace:	0212      	lsls	r2, r2, #8
 800bad0:	4311      	orrs	r1, r2
 800bad2:	687a      	ldr	r2, [r7, #4]
 800bad4:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800bad6:	0852      	lsrs	r2, r2, #1
 800bad8:	3a01      	subs	r2, #1
 800bada:	0552      	lsls	r2, r2, #21
 800badc:	4311      	orrs	r1, r2
 800bade:	687a      	ldr	r2, [r7, #4]
 800bae0:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bae2:	0852      	lsrs	r2, r2, #1
 800bae4:	3a01      	subs	r2, #1
 800bae6:	0652      	lsls	r2, r2, #25
 800bae8:	4311      	orrs	r1, r2
 800baea:	687a      	ldr	r2, [r7, #4]
 800baec:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800baee:	06d2      	lsls	r2, r2, #27
 800baf0:	430a      	orrs	r2, r1
 800baf2:	4943      	ldr	r1, [pc, #268]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800baf4:	4313      	orrs	r3, r2
 800baf6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800baf8:	4b41      	ldr	r3, [pc, #260]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	4a40      	ldr	r2, [pc, #256]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bafe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb02:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800bb04:	4b3e      	ldr	r3, [pc, #248]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb06:	68db      	ldr	r3, [r3, #12]
 800bb08:	4a3d      	ldr	r2, [pc, #244]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb0a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800bb0e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb10:	f7fe f828 	bl	8009b64 <HAL_GetTick>
 800bb14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb16:	e008      	b.n	800bb2a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb18:	f7fe f824 	bl	8009b64 <HAL_GetTick>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	1ad3      	subs	r3, r2, r3
 800bb22:	2b02      	cmp	r3, #2
 800bb24:	d901      	bls.n	800bb2a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800bb26:	2303      	movs	r3, #3
 800bb28:	e066      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bb2a:	4b35      	ldr	r3, [pc, #212]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb2c:	681b      	ldr	r3, [r3, #0]
 800bb2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d0f0      	beq.n	800bb18 <HAL_RCC_OscConfig+0x530>
 800bb36:	e05e      	b.n	800bbf6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bb38:	4b31      	ldr	r3, [pc, #196]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a30      	ldr	r2, [pc, #192]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb3e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800bb42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bb44:	f7fe f80e 	bl	8009b64 <HAL_GetTick>
 800bb48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb4a:	e008      	b.n	800bb5e <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800bb4c:	f7fe f80a 	bl	8009b64 <HAL_GetTick>
 800bb50:	4602      	mov	r2, r0
 800bb52:	693b      	ldr	r3, [r7, #16]
 800bb54:	1ad3      	subs	r3, r2, r3
 800bb56:	2b02      	cmp	r3, #2
 800bb58:	d901      	bls.n	800bb5e <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800bb5a:	2303      	movs	r3, #3
 800bb5c:	e04c      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800bb5e:	4b28      	ldr	r3, [pc, #160]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1f0      	bne.n	800bb4c <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800bb6a:	4b25      	ldr	r3, [pc, #148]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb6c:	68da      	ldr	r2, [r3, #12]
 800bb6e:	4924      	ldr	r1, [pc, #144]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb70:	4b25      	ldr	r3, [pc, #148]	@ (800bc08 <HAL_RCC_OscConfig+0x620>)
 800bb72:	4013      	ands	r3, r2
 800bb74:	60cb      	str	r3, [r1, #12]
 800bb76:	e03e      	b.n	800bbf6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	69db      	ldr	r3, [r3, #28]
 800bb7c:	2b01      	cmp	r3, #1
 800bb7e:	d101      	bne.n	800bb84 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800bb80:	2301      	movs	r3, #1
 800bb82:	e039      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800bb84:	4b1e      	ldr	r3, [pc, #120]	@ (800bc00 <HAL_RCC_OscConfig+0x618>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bb8a:	697b      	ldr	r3, [r7, #20]
 800bb8c:	f003 0203 	and.w	r2, r3, #3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	6a1b      	ldr	r3, [r3, #32]
 800bb94:	429a      	cmp	r2, r3
 800bb96:	d12c      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bba2:	3b01      	subs	r3, #1
 800bba4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800bba6:	429a      	cmp	r2, r3
 800bba8:	d123      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bbb4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800bbb6:	429a      	cmp	r2, r3
 800bbb8:	d11b      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbba:	697b      	ldr	r3, [r7, #20]
 800bbbc:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbc4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800bbc6:	429a      	cmp	r2, r3
 800bbc8:	d113      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbca:	697b      	ldr	r3, [r7, #20]
 800bbcc:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bbd4:	085b      	lsrs	r3, r3, #1
 800bbd6:	3b01      	subs	r3, #1
 800bbd8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d109      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bbe8:	085b      	lsrs	r3, r3, #1
 800bbea:	3b01      	subs	r3, #1
 800bbec:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800bbee:	429a      	cmp	r2, r3
 800bbf0:	d001      	beq.n	800bbf6 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800bbf2:	2301      	movs	r3, #1
 800bbf4:	e000      	b.n	800bbf8 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800bbf6:	2300      	movs	r3, #0
}
 800bbf8:	4618      	mov	r0, r3
 800bbfa:	3720      	adds	r7, #32
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	bd80      	pop	{r7, pc}
 800bc00:	40021000 	.word	0x40021000
 800bc04:	019f800c 	.word	0x019f800c
 800bc08:	feeefffc 	.word	0xfeeefffc

0800bc0c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
 800bc14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800bc16:	2300      	movs	r3, #0
 800bc18:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d101      	bne.n	800bc24 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800bc20:	2301      	movs	r3, #1
 800bc22:	e11e      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800bc24:	4b91      	ldr	r3, [pc, #580]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	f003 030f 	and.w	r3, r3, #15
 800bc2c:	683a      	ldr	r2, [r7, #0]
 800bc2e:	429a      	cmp	r2, r3
 800bc30:	d910      	bls.n	800bc54 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bc32:	4b8e      	ldr	r3, [pc, #568]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	f023 020f 	bic.w	r2, r3, #15
 800bc3a:	498c      	ldr	r1, [pc, #560]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	4313      	orrs	r3, r2
 800bc40:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bc42:	4b8a      	ldr	r3, [pc, #552]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	f003 030f 	and.w	r3, r3, #15
 800bc4a:	683a      	ldr	r2, [r7, #0]
 800bc4c:	429a      	cmp	r2, r3
 800bc4e:	d001      	beq.n	800bc54 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800bc50:	2301      	movs	r3, #1
 800bc52:	e106      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	681b      	ldr	r3, [r3, #0]
 800bc58:	f003 0301 	and.w	r3, r3, #1
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d073      	beq.n	800bd48 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	685b      	ldr	r3, [r3, #4]
 800bc64:	2b03      	cmp	r3, #3
 800bc66:	d129      	bne.n	800bcbc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800bc68:	4b81      	ldr	r3, [pc, #516]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d101      	bne.n	800bc78 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800bc74:	2301      	movs	r3, #1
 800bc76:	e0f4      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800bc78:	f000 f988 	bl	800bf8c <RCC_GetSysClockFreqFromPLLSource>
 800bc7c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800bc7e:	693b      	ldr	r3, [r7, #16]
 800bc80:	4a7c      	ldr	r2, [pc, #496]	@ (800be74 <HAL_RCC_ClockConfig+0x268>)
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d93f      	bls.n	800bd06 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bc86:	4b7a      	ldr	r3, [pc, #488]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bc88:	689b      	ldr	r3, [r3, #8]
 800bc8a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d009      	beq.n	800bca6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d033      	beq.n	800bd06 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	d12f      	bne.n	800bd06 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bca6:	4b72      	ldr	r3, [pc, #456]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bca8:	689b      	ldr	r3, [r3, #8]
 800bcaa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcae:	4a70      	ldr	r2, [pc, #448]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bcb0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bcb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800bcb6:	2380      	movs	r3, #128	@ 0x80
 800bcb8:	617b      	str	r3, [r7, #20]
 800bcba:	e024      	b.n	800bd06 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	685b      	ldr	r3, [r3, #4]
 800bcc0:	2b02      	cmp	r3, #2
 800bcc2:	d107      	bne.n	800bcd4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800bcc4:	4b6a      	ldr	r3, [pc, #424]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d109      	bne.n	800bce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bcd0:	2301      	movs	r3, #1
 800bcd2:	e0c6      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800bcd4:	4b66      	ldr	r3, [pc, #408]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d101      	bne.n	800bce4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 800bce0:	2301      	movs	r3, #1
 800bce2:	e0be      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800bce4:	f000 f8ce 	bl	800be84 <HAL_RCC_GetSysClockFreq>
 800bce8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 800bcea:	693b      	ldr	r3, [r7, #16]
 800bcec:	4a61      	ldr	r2, [pc, #388]	@ (800be74 <HAL_RCC_ClockConfig+0x268>)
 800bcee:	4293      	cmp	r3, r2
 800bcf0:	d909      	bls.n	800bd06 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800bcf2:	4b5f      	ldr	r3, [pc, #380]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bcf4:	689b      	ldr	r3, [r3, #8]
 800bcf6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bcfa:	4a5d      	ldr	r2, [pc, #372]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bcfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd00:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800bd02:	2380      	movs	r3, #128	@ 0x80
 800bd04:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800bd06:	4b5a      	ldr	r3, [pc, #360]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd08:	689b      	ldr	r3, [r3, #8]
 800bd0a:	f023 0203 	bic.w	r2, r3, #3
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	685b      	ldr	r3, [r3, #4]
 800bd12:	4957      	ldr	r1, [pc, #348]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd14:	4313      	orrs	r3, r2
 800bd16:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800bd18:	f7fd ff24 	bl	8009b64 <HAL_GetTick>
 800bd1c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd1e:	e00a      	b.n	800bd36 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bd20:	f7fd ff20 	bl	8009b64 <HAL_GetTick>
 800bd24:	4602      	mov	r2, r0
 800bd26:	68fb      	ldr	r3, [r7, #12]
 800bd28:	1ad3      	subs	r3, r2, r3
 800bd2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bd2e:	4293      	cmp	r3, r2
 800bd30:	d901      	bls.n	800bd36 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800bd32:	2303      	movs	r3, #3
 800bd34:	e095      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bd36:	4b4e      	ldr	r3, [pc, #312]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd38:	689b      	ldr	r3, [r3, #8]
 800bd3a:	f003 020c 	and.w	r2, r3, #12
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	685b      	ldr	r3, [r3, #4]
 800bd42:	009b      	lsls	r3, r3, #2
 800bd44:	429a      	cmp	r2, r3
 800bd46:	d1eb      	bne.n	800bd20 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	f003 0302 	and.w	r3, r3, #2
 800bd50:	2b00      	cmp	r3, #0
 800bd52:	d023      	beq.n	800bd9c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d005      	beq.n	800bd6c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800bd60:	4b43      	ldr	r3, [pc, #268]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd62:	689b      	ldr	r3, [r3, #8]
 800bd64:	4a42      	ldr	r2, [pc, #264]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd66:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bd6a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	f003 0308 	and.w	r3, r3, #8
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d007      	beq.n	800bd88 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800bd78:	4b3d      	ldr	r3, [pc, #244]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800bd80:	4a3b      	ldr	r2, [pc, #236]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd82:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800bd86:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800bd88:	4b39      	ldr	r3, [pc, #228]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	689b      	ldr	r3, [r3, #8]
 800bd94:	4936      	ldr	r1, [pc, #216]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bd96:	4313      	orrs	r3, r2
 800bd98:	608b      	str	r3, [r1, #8]
 800bd9a:	e008      	b.n	800bdae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800bd9c:	697b      	ldr	r3, [r7, #20]
 800bd9e:	2b80      	cmp	r3, #128	@ 0x80
 800bda0:	d105      	bne.n	800bdae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800bda2:	4b33      	ldr	r3, [pc, #204]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bda4:	689b      	ldr	r3, [r3, #8]
 800bda6:	4a32      	ldr	r2, [pc, #200]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800bda8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800bdac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bdae:	4b2f      	ldr	r3, [pc, #188]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bdb0:	681b      	ldr	r3, [r3, #0]
 800bdb2:	f003 030f 	and.w	r3, r3, #15
 800bdb6:	683a      	ldr	r2, [r7, #0]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d21d      	bcs.n	800bdf8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bdbc:	4b2b      	ldr	r3, [pc, #172]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	f023 020f 	bic.w	r2, r3, #15
 800bdc4:	4929      	ldr	r1, [pc, #164]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	4313      	orrs	r3, r2
 800bdca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800bdcc:	f7fd feca 	bl	8009b64 <HAL_GetTick>
 800bdd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdd2:	e00a      	b.n	800bdea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800bdd4:	f7fd fec6 	bl	8009b64 <HAL_GetTick>
 800bdd8:	4602      	mov	r2, r0
 800bdda:	68fb      	ldr	r3, [r7, #12]
 800bddc:	1ad3      	subs	r3, r2, r3
 800bdde:	f241 3288 	movw	r2, #5000	@ 0x1388
 800bde2:	4293      	cmp	r3, r2
 800bde4:	d901      	bls.n	800bdea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800bde6:	2303      	movs	r3, #3
 800bde8:	e03b      	b.n	800be62 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bdea:	4b20      	ldr	r3, [pc, #128]	@ (800be6c <HAL_RCC_ClockConfig+0x260>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	f003 030f 	and.w	r3, r3, #15
 800bdf2:	683a      	ldr	r2, [r7, #0]
 800bdf4:	429a      	cmp	r2, r3
 800bdf6:	d1ed      	bne.n	800bdd4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f003 0304 	and.w	r3, r3, #4
 800be00:	2b00      	cmp	r3, #0
 800be02:	d008      	beq.n	800be16 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800be04:	4b1a      	ldr	r3, [pc, #104]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800be06:	689b      	ldr	r3, [r3, #8]
 800be08:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	68db      	ldr	r3, [r3, #12]
 800be10:	4917      	ldr	r1, [pc, #92]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800be12:	4313      	orrs	r3, r2
 800be14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	f003 0308 	and.w	r3, r3, #8
 800be1e:	2b00      	cmp	r3, #0
 800be20:	d009      	beq.n	800be36 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800be22:	4b13      	ldr	r3, [pc, #76]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	691b      	ldr	r3, [r3, #16]
 800be2e:	00db      	lsls	r3, r3, #3
 800be30:	490f      	ldr	r1, [pc, #60]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800be32:	4313      	orrs	r3, r2
 800be34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800be36:	f000 f825 	bl	800be84 <HAL_RCC_GetSysClockFreq>
 800be3a:	4602      	mov	r2, r0
 800be3c:	4b0c      	ldr	r3, [pc, #48]	@ (800be70 <HAL_RCC_ClockConfig+0x264>)
 800be3e:	689b      	ldr	r3, [r3, #8]
 800be40:	091b      	lsrs	r3, r3, #4
 800be42:	f003 030f 	and.w	r3, r3, #15
 800be46:	490c      	ldr	r1, [pc, #48]	@ (800be78 <HAL_RCC_ClockConfig+0x26c>)
 800be48:	5ccb      	ldrb	r3, [r1, r3]
 800be4a:	f003 031f 	and.w	r3, r3, #31
 800be4e:	fa22 f303 	lsr.w	r3, r2, r3
 800be52:	4a0a      	ldr	r2, [pc, #40]	@ (800be7c <HAL_RCC_ClockConfig+0x270>)
 800be54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800be56:	4b0a      	ldr	r3, [pc, #40]	@ (800be80 <HAL_RCC_ClockConfig+0x274>)
 800be58:	681b      	ldr	r3, [r3, #0]
 800be5a:	4618      	mov	r0, r3
 800be5c:	f7fd fe36 	bl	8009acc <HAL_InitTick>
 800be60:	4603      	mov	r3, r0
}
 800be62:	4618      	mov	r0, r3
 800be64:	3718      	adds	r7, #24
 800be66:	46bd      	mov	sp, r7
 800be68:	bd80      	pop	{r7, pc}
 800be6a:	bf00      	nop
 800be6c:	40022000 	.word	0x40022000
 800be70:	40021000 	.word	0x40021000
 800be74:	04c4b400 	.word	0x04c4b400
 800be78:	0801b884 	.word	0x0801b884
 800be7c:	20000004 	.word	0x20000004
 800be80:	20000074 	.word	0x20000074

0800be84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800be84:	b480      	push	{r7}
 800be86:	b087      	sub	sp, #28
 800be88:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800be8a:	4b2c      	ldr	r3, [pc, #176]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800be8c:	689b      	ldr	r3, [r3, #8]
 800be8e:	f003 030c 	and.w	r3, r3, #12
 800be92:	2b04      	cmp	r3, #4
 800be94:	d102      	bne.n	800be9c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800be96:	4b2a      	ldr	r3, [pc, #168]	@ (800bf40 <HAL_RCC_GetSysClockFreq+0xbc>)
 800be98:	613b      	str	r3, [r7, #16]
 800be9a:	e047      	b.n	800bf2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800be9c:	4b27      	ldr	r3, [pc, #156]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800be9e:	689b      	ldr	r3, [r3, #8]
 800bea0:	f003 030c 	and.w	r3, r3, #12
 800bea4:	2b08      	cmp	r3, #8
 800bea6:	d102      	bne.n	800beae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800bea8:	4b26      	ldr	r3, [pc, #152]	@ (800bf44 <HAL_RCC_GetSysClockFreq+0xc0>)
 800beaa:	613b      	str	r3, [r7, #16]
 800beac:	e03e      	b.n	800bf2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800beae:	4b23      	ldr	r3, [pc, #140]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800beb0:	689b      	ldr	r3, [r3, #8]
 800beb2:	f003 030c 	and.w	r3, r3, #12
 800beb6:	2b0c      	cmp	r3, #12
 800beb8:	d136      	bne.n	800bf28 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800beba:	4b20      	ldr	r3, [pc, #128]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bebc:	68db      	ldr	r3, [r3, #12]
 800bebe:	f003 0303 	and.w	r3, r3, #3
 800bec2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bec4:	4b1d      	ldr	r3, [pc, #116]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bec6:	68db      	ldr	r3, [r3, #12]
 800bec8:	091b      	lsrs	r3, r3, #4
 800beca:	f003 030f 	and.w	r3, r3, #15
 800bece:	3301      	adds	r3, #1
 800bed0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	2b03      	cmp	r3, #3
 800bed6:	d10c      	bne.n	800bef2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bed8:	4a1a      	ldr	r2, [pc, #104]	@ (800bf44 <HAL_RCC_GetSysClockFreq+0xc0>)
 800beda:	68bb      	ldr	r3, [r7, #8]
 800bedc:	fbb2 f3f3 	udiv	r3, r2, r3
 800bee0:	4a16      	ldr	r2, [pc, #88]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bee2:	68d2      	ldr	r2, [r2, #12]
 800bee4:	0a12      	lsrs	r2, r2, #8
 800bee6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800beea:	fb02 f303 	mul.w	r3, r2, r3
 800beee:	617b      	str	r3, [r7, #20]
      break;
 800bef0:	e00c      	b.n	800bf0c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bef2:	4a13      	ldr	r2, [pc, #76]	@ (800bf40 <HAL_RCC_GetSysClockFreq+0xbc>)
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	fbb2 f3f3 	udiv	r3, r2, r3
 800befa:	4a10      	ldr	r2, [pc, #64]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800befc:	68d2      	ldr	r2, [r2, #12]
 800befe:	0a12      	lsrs	r2, r2, #8
 800bf00:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bf04:	fb02 f303 	mul.w	r3, r2, r3
 800bf08:	617b      	str	r3, [r7, #20]
      break;
 800bf0a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bf0c:	4b0b      	ldr	r3, [pc, #44]	@ (800bf3c <HAL_RCC_GetSysClockFreq+0xb8>)
 800bf0e:	68db      	ldr	r3, [r3, #12]
 800bf10:	0e5b      	lsrs	r3, r3, #25
 800bf12:	f003 0303 	and.w	r3, r3, #3
 800bf16:	3301      	adds	r3, #1
 800bf18:	005b      	lsls	r3, r3, #1
 800bf1a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	fbb2 f3f3 	udiv	r3, r2, r3
 800bf24:	613b      	str	r3, [r7, #16]
 800bf26:	e001      	b.n	800bf2c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800bf28:	2300      	movs	r3, #0
 800bf2a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800bf2c:	693b      	ldr	r3, [r7, #16]
}
 800bf2e:	4618      	mov	r0, r3
 800bf30:	371c      	adds	r7, #28
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
 800bf3a:	bf00      	nop
 800bf3c:	40021000 	.word	0x40021000
 800bf40:	00f42400 	.word	0x00f42400
 800bf44:	016e3600 	.word	0x016e3600

0800bf48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bf4c:	4b03      	ldr	r3, [pc, #12]	@ (800bf5c <HAL_RCC_GetHCLKFreq+0x14>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
}
 800bf50:	4618      	mov	r0, r3
 800bf52:	46bd      	mov	sp, r7
 800bf54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf58:	4770      	bx	lr
 800bf5a:	bf00      	nop
 800bf5c:	20000004 	.word	0x20000004

0800bf60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bf60:	b580      	push	{r7, lr}
 800bf62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800bf64:	f7ff fff0 	bl	800bf48 <HAL_RCC_GetHCLKFreq>
 800bf68:	4602      	mov	r2, r0
 800bf6a:	4b06      	ldr	r3, [pc, #24]	@ (800bf84 <HAL_RCC_GetPCLK1Freq+0x24>)
 800bf6c:	689b      	ldr	r3, [r3, #8]
 800bf6e:	0a1b      	lsrs	r3, r3, #8
 800bf70:	f003 0307 	and.w	r3, r3, #7
 800bf74:	4904      	ldr	r1, [pc, #16]	@ (800bf88 <HAL_RCC_GetPCLK1Freq+0x28>)
 800bf76:	5ccb      	ldrb	r3, [r1, r3]
 800bf78:	f003 031f 	and.w	r3, r3, #31
 800bf7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	bd80      	pop	{r7, pc}
 800bf84:	40021000 	.word	0x40021000
 800bf88:	0801b894 	.word	0x0801b894

0800bf8c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800bf8c:	b480      	push	{r7}
 800bf8e:	b087      	sub	sp, #28
 800bf90:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800bf92:	4b1e      	ldr	r3, [pc, #120]	@ (800c00c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bf94:	68db      	ldr	r3, [r3, #12]
 800bf96:	f003 0303 	and.w	r3, r3, #3
 800bf9a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800bf9c:	4b1b      	ldr	r3, [pc, #108]	@ (800c00c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bf9e:	68db      	ldr	r3, [r3, #12]
 800bfa0:	091b      	lsrs	r3, r3, #4
 800bfa2:	f003 030f 	and.w	r3, r3, #15
 800bfa6:	3301      	adds	r3, #1
 800bfa8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800bfaa:	693b      	ldr	r3, [r7, #16]
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d10c      	bne.n	800bfca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bfb0:	4a17      	ldr	r2, [pc, #92]	@ (800c010 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfb8:	4a14      	ldr	r2, [pc, #80]	@ (800c00c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bfba:	68d2      	ldr	r2, [r2, #12]
 800bfbc:	0a12      	lsrs	r2, r2, #8
 800bfbe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bfc2:	fb02 f303 	mul.w	r3, r2, r3
 800bfc6:	617b      	str	r3, [r7, #20]
    break;
 800bfc8:	e00c      	b.n	800bfe4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800bfca:	4a12      	ldr	r2, [pc, #72]	@ (800c014 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	fbb2 f3f3 	udiv	r3, r2, r3
 800bfd2:	4a0e      	ldr	r2, [pc, #56]	@ (800c00c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bfd4:	68d2      	ldr	r2, [r2, #12]
 800bfd6:	0a12      	lsrs	r2, r2, #8
 800bfd8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bfdc:	fb02 f303 	mul.w	r3, r2, r3
 800bfe0:	617b      	str	r3, [r7, #20]
    break;
 800bfe2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800bfe4:	4b09      	ldr	r3, [pc, #36]	@ (800c00c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800bfe6:	68db      	ldr	r3, [r3, #12]
 800bfe8:	0e5b      	lsrs	r3, r3, #25
 800bfea:	f003 0303 	and.w	r3, r3, #3
 800bfee:	3301      	adds	r3, #1
 800bff0:	005b      	lsls	r3, r3, #1
 800bff2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800bff4:	697a      	ldr	r2, [r7, #20]
 800bff6:	68bb      	ldr	r3, [r7, #8]
 800bff8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bffc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800bffe:	687b      	ldr	r3, [r7, #4]
}
 800c000:	4618      	mov	r0, r3
 800c002:	371c      	adds	r7, #28
 800c004:	46bd      	mov	sp, r7
 800c006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c00a:	4770      	bx	lr
 800c00c:	40021000 	.word	0x40021000
 800c010:	016e3600 	.word	0x016e3600
 800c014:	00f42400 	.word	0x00f42400

0800c018 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c018:	b580      	push	{r7, lr}
 800c01a:	b086      	sub	sp, #24
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800c020:	2300      	movs	r3, #0
 800c022:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800c024:	2300      	movs	r3, #0
 800c026:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800c030:	2b00      	cmp	r3, #0
 800c032:	f000 8098 	beq.w	800c166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c036:	2300      	movs	r3, #0
 800c038:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c03a:	4b43      	ldr	r3, [pc, #268]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c03c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c03e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c042:	2b00      	cmp	r3, #0
 800c044:	d10d      	bne.n	800c062 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c046:	4b40      	ldr	r3, [pc, #256]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c04a:	4a3f      	ldr	r2, [pc, #252]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c04c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800c050:	6593      	str	r3, [r2, #88]	@ 0x58
 800c052:	4b3d      	ldr	r3, [pc, #244]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c054:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800c05a:	60bb      	str	r3, [r7, #8]
 800c05c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c05e:	2301      	movs	r3, #1
 800c060:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800c062:	4b3a      	ldr	r3, [pc, #232]	@ (800c14c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a39      	ldr	r2, [pc, #228]	@ (800c14c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c06c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c06e:	f7fd fd79 	bl	8009b64 <HAL_GetTick>
 800c072:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c074:	e009      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c076:	f7fd fd75 	bl	8009b64 <HAL_GetTick>
 800c07a:	4602      	mov	r2, r0
 800c07c:	68fb      	ldr	r3, [r7, #12]
 800c07e:	1ad3      	subs	r3, r2, r3
 800c080:	2b02      	cmp	r3, #2
 800c082:	d902      	bls.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 800c084:	2303      	movs	r3, #3
 800c086:	74fb      	strb	r3, [r7, #19]
        break;
 800c088:	e005      	b.n	800c096 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c08a:	4b30      	ldr	r3, [pc, #192]	@ (800c14c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c092:	2b00      	cmp	r3, #0
 800c094:	d0ef      	beq.n	800c076 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 800c096:	7cfb      	ldrb	r3, [r7, #19]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d159      	bne.n	800c150 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800c09c:	4b2a      	ldr	r3, [pc, #168]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c09e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800c0a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800c0a8:	697b      	ldr	r3, [r7, #20]
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d01e      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c0b2:	697a      	ldr	r2, [r7, #20]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d019      	beq.n	800c0ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800c0b8:	4b23      	ldr	r3, [pc, #140]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800c0c4:	4b20      	ldr	r3, [pc, #128]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0ca:	4a1f      	ldr	r2, [pc, #124]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c0d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800c0d4:	4b1c      	ldr	r3, [pc, #112]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c0da:	4a1b      	ldr	r2, [pc, #108]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c0e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800c0e4:	4a18      	ldr	r2, [pc, #96]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800c0ec:	697b      	ldr	r3, [r7, #20]
 800c0ee:	f003 0301 	and.w	r3, r3, #1
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d016      	beq.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c0f6:	f7fd fd35 	bl	8009b64 <HAL_GetTick>
 800c0fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c0fc:	e00b      	b.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c0fe:	f7fd fd31 	bl	8009b64 <HAL_GetTick>
 800c102:	4602      	mov	r2, r0
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	1ad3      	subs	r3, r2, r3
 800c108:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c10c:	4293      	cmp	r3, r2
 800c10e:	d902      	bls.n	800c116 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800c110:	2303      	movs	r3, #3
 800c112:	74fb      	strb	r3, [r7, #19]
            break;
 800c114:	e006      	b.n	800c124 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800c116:	4b0c      	ldr	r3, [pc, #48]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c118:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c11c:	f003 0302 	and.w	r3, r3, #2
 800c120:	2b00      	cmp	r3, #0
 800c122:	d0ec      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800c124:	7cfb      	ldrb	r3, [r7, #19]
 800c126:	2b00      	cmp	r3, #0
 800c128:	d10b      	bne.n	800c142 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c12a:	4b07      	ldr	r3, [pc, #28]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c12c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800c130:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c138:	4903      	ldr	r1, [pc, #12]	@ (800c148 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800c13a:	4313      	orrs	r3, r2
 800c13c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800c140:	e008      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800c142:	7cfb      	ldrb	r3, [r7, #19]
 800c144:	74bb      	strb	r3, [r7, #18]
 800c146:	e005      	b.n	800c154 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800c148:	40021000 	.word	0x40021000
 800c14c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c150:	7cfb      	ldrb	r3, [r7, #19]
 800c152:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800c154:	7c7b      	ldrb	r3, [r7, #17]
 800c156:	2b01      	cmp	r3, #1
 800c158:	d105      	bne.n	800c166 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c15a:	4ba6      	ldr	r3, [pc, #664]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c15c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c15e:	4aa5      	ldr	r2, [pc, #660]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800c164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	f003 0301 	and.w	r3, r3, #1
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d00a      	beq.n	800c188 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c172:	4ba0      	ldr	r3, [pc, #640]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c178:	f023 0203 	bic.w	r2, r3, #3
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	685b      	ldr	r3, [r3, #4]
 800c180:	499c      	ldr	r1, [pc, #624]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c182:	4313      	orrs	r3, r2
 800c184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 0302 	and.w	r3, r3, #2
 800c190:	2b00      	cmp	r3, #0
 800c192:	d00a      	beq.n	800c1aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c194:	4b97      	ldr	r3, [pc, #604]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c196:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c19a:	f023 020c 	bic.w	r2, r3, #12
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	689b      	ldr	r3, [r3, #8]
 800c1a2:	4994      	ldr	r1, [pc, #592]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1a4:	4313      	orrs	r3, r2
 800c1a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	681b      	ldr	r3, [r3, #0]
 800c1ae:	f003 0304 	and.w	r3, r3, #4
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d00a      	beq.n	800c1cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800c1b6:	4b8f      	ldr	r3, [pc, #572]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	68db      	ldr	r3, [r3, #12]
 800c1c4:	498b      	ldr	r1, [pc, #556]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1c6:	4313      	orrs	r3, r2
 800c1c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	f003 0308 	and.w	r3, r3, #8
 800c1d4:	2b00      	cmp	r3, #0
 800c1d6:	d00a      	beq.n	800c1ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800c1d8:	4b86      	ldr	r3, [pc, #536]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c1de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	691b      	ldr	r3, [r3, #16]
 800c1e6:	4983      	ldr	r1, [pc, #524]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1e8:	4313      	orrs	r3, r2
 800c1ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f003 0320 	and.w	r3, r3, #32
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d00a      	beq.n	800c210 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c1fa:	4b7e      	ldr	r3, [pc, #504]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c1fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c200:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	695b      	ldr	r3, [r3, #20]
 800c208:	497a      	ldr	r1, [pc, #488]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c20a:	4313      	orrs	r3, r2
 800c20c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00a      	beq.n	800c232 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c21c:	4b75      	ldr	r3, [pc, #468]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c21e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c222:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	699b      	ldr	r3, [r3, #24]
 800c22a:	4972      	ldr	r1, [pc, #456]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c22c:	4313      	orrs	r3, r2
 800c22e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800c232:	687b      	ldr	r3, [r7, #4]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d00a      	beq.n	800c254 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800c23e:	4b6d      	ldr	r3, [pc, #436]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c240:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c244:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	69db      	ldr	r3, [r3, #28]
 800c24c:	4969      	ldr	r1, [pc, #420]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c24e:	4313      	orrs	r3, r2
 800c250:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d00a      	beq.n	800c276 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c260:	4b64      	ldr	r3, [pc, #400]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c262:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c266:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6a1b      	ldr	r3, [r3, #32]
 800c26e:	4961      	ldr	r1, [pc, #388]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c270:	4313      	orrs	r3, r2
 800c272:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00a      	beq.n	800c298 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c282:	4b5c      	ldr	r3, [pc, #368]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c288:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c290:	4958      	ldr	r1, [pc, #352]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c292:	4313      	orrs	r3, r2
 800c294:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d015      	beq.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800c2a4:	4b53      	ldr	r3, [pc, #332]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2aa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2b2:	4950      	ldr	r1, [pc, #320]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2be:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c2c2:	d105      	bne.n	800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2c4:	4b4b      	ldr	r3, [pc, #300]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2c6:	68db      	ldr	r3, [r3, #12]
 800c2c8:	4a4a      	ldr	r2, [pc, #296]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c2ce:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d015      	beq.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800c2dc:	4b45      	ldr	r3, [pc, #276]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c2e2:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2ea:	4942      	ldr	r1, [pc, #264]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800c2fa:	d105      	bne.n	800c308 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c2fc:	4b3d      	ldr	r3, [pc, #244]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c2fe:	68db      	ldr	r3, [r3, #12]
 800c300:	4a3c      	ldr	r2, [pc, #240]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c302:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c306:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c310:	2b00      	cmp	r3, #0
 800c312:	d015      	beq.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800c314:	4b37      	ldr	r3, [pc, #220]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c316:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c31a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c322:	4934      	ldr	r1, [pc, #208]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c324:	4313      	orrs	r3, r2
 800c326:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c32e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c332:	d105      	bne.n	800c340 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c334:	4b2f      	ldr	r3, [pc, #188]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c336:	68db      	ldr	r3, [r3, #12]
 800c338:	4a2e      	ldr	r2, [pc, #184]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c33a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c33e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d015      	beq.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c34c:	4b29      	ldr	r3, [pc, #164]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c34e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c352:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c356:	687b      	ldr	r3, [r7, #4]
 800c358:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c35a:	4926      	ldr	r1, [pc, #152]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c366:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c36a:	d105      	bne.n	800c378 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c36c:	4b21      	ldr	r3, [pc, #132]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c36e:	68db      	ldr	r3, [r3, #12]
 800c370:	4a20      	ldr	r2, [pc, #128]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c372:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c376:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c380:	2b00      	cmp	r3, #0
 800c382:	d015      	beq.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c384:	4b1b      	ldr	r3, [pc, #108]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c38a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c392:	4918      	ldr	r1, [pc, #96]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c394:	4313      	orrs	r3, r2
 800c396:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c39e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800c3a2:	d105      	bne.n	800c3b0 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800c3a4:	4b13      	ldr	r3, [pc, #76]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	4a12      	ldr	r2, [pc, #72]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3aa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800c3ae:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d015      	beq.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800c3bc:	4b0d      	ldr	r3, [pc, #52]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800c3c2:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3ca:	490a      	ldr	r1, [pc, #40]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3cc:	4313      	orrs	r3, r2
 800c3ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c3d6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c3da:	d105      	bne.n	800c3e8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800c3dc:	4b05      	ldr	r3, [pc, #20]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3de:	68db      	ldr	r3, [r3, #12]
 800c3e0:	4a04      	ldr	r2, [pc, #16]	@ (800c3f4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800c3e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c3e6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800c3e8:	7cbb      	ldrb	r3, [r7, #18]
}
 800c3ea:	4618      	mov	r0, r3
 800c3ec:	3718      	adds	r7, #24
 800c3ee:	46bd      	mov	sp, r7
 800c3f0:	bd80      	pop	{r7, pc}
 800c3f2:	bf00      	nop
 800c3f4:	40021000 	.word	0x40021000

0800c3f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d101      	bne.n	800c40a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c406:	2301      	movs	r3, #1
 800c408:	e049      	b.n	800c49e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c410:	b2db      	uxtb	r3, r3
 800c412:	2b00      	cmp	r3, #0
 800c414:	d106      	bne.n	800c424 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	2200      	movs	r2, #0
 800c41a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7fa fc56 	bl	8006cd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	2202      	movs	r2, #2
 800c428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681a      	ldr	r2, [r3, #0]
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	3304      	adds	r3, #4
 800c434:	4619      	mov	r1, r3
 800c436:	4610      	mov	r0, r2
 800c438:	f000 fc3a 	bl	800ccb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2201      	movs	r2, #1
 800c440:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2201      	movs	r2, #1
 800c448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2201      	movs	r2, #1
 800c450:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	2201      	movs	r2, #1
 800c458:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2201      	movs	r2, #1
 800c460:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	2201      	movs	r2, #1
 800c468:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	2201      	movs	r2, #1
 800c470:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2201      	movs	r2, #1
 800c478:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	2201      	movs	r2, #1
 800c480:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2201      	movs	r2, #1
 800c490:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c49c:	2300      	movs	r3, #0
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}

0800c4a6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c4a6:	b580      	push	{r7, lr}
 800c4a8:	b082      	sub	sp, #8
 800c4aa:	af00      	add	r7, sp, #0
 800c4ac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	d101      	bne.n	800c4b8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c4b4:	2301      	movs	r3, #1
 800c4b6:	e049      	b.n	800c54c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800c4be:	b2db      	uxtb	r3, r3
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d106      	bne.n	800c4d2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	2200      	movs	r2, #0
 800c4c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 f841 	bl	800c554 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	2202      	movs	r2, #2
 800c4d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	681a      	ldr	r2, [r3, #0]
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	3304      	adds	r3, #4
 800c4e2:	4619      	mov	r1, r3
 800c4e4:	4610      	mov	r0, r2
 800c4e6:	f000 fbe3 	bl	800ccb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2201      	movs	r2, #1
 800c4ee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	2201      	movs	r2, #1
 800c4f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	2201      	movs	r2, #1
 800c4fe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2201      	movs	r2, #1
 800c506:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	2201      	movs	r2, #1
 800c50e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2201      	movs	r2, #1
 800c516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2201      	movs	r2, #1
 800c51e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2201      	movs	r2, #1
 800c526:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	2201      	movs	r2, #1
 800c52e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	2201      	movs	r2, #1
 800c536:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	2201      	movs	r2, #1
 800c53e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	2201      	movs	r2, #1
 800c546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800c54a:	2300      	movs	r3, #0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c566:	4770      	bx	lr

0800c568 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b084      	sub	sp, #16
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
 800c570:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d109      	bne.n	800c58c <HAL_TIM_PWM_Start+0x24>
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	2b01      	cmp	r3, #1
 800c582:	bf14      	ite	ne
 800c584:	2301      	movne	r3, #1
 800c586:	2300      	moveq	r3, #0
 800c588:	b2db      	uxtb	r3, r3
 800c58a:	e03c      	b.n	800c606 <HAL_TIM_PWM_Start+0x9e>
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b04      	cmp	r3, #4
 800c590:	d109      	bne.n	800c5a6 <HAL_TIM_PWM_Start+0x3e>
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	2b01      	cmp	r3, #1
 800c59c:	bf14      	ite	ne
 800c59e:	2301      	movne	r3, #1
 800c5a0:	2300      	moveq	r3, #0
 800c5a2:	b2db      	uxtb	r3, r3
 800c5a4:	e02f      	b.n	800c606 <HAL_TIM_PWM_Start+0x9e>
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b08      	cmp	r3, #8
 800c5aa:	d109      	bne.n	800c5c0 <HAL_TIM_PWM_Start+0x58>
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800c5b2:	b2db      	uxtb	r3, r3
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	bf14      	ite	ne
 800c5b8:	2301      	movne	r3, #1
 800c5ba:	2300      	moveq	r3, #0
 800c5bc:	b2db      	uxtb	r3, r3
 800c5be:	e022      	b.n	800c606 <HAL_TIM_PWM_Start+0x9e>
 800c5c0:	683b      	ldr	r3, [r7, #0]
 800c5c2:	2b0c      	cmp	r3, #12
 800c5c4:	d109      	bne.n	800c5da <HAL_TIM_PWM_Start+0x72>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c5cc:	b2db      	uxtb	r3, r3
 800c5ce:	2b01      	cmp	r3, #1
 800c5d0:	bf14      	ite	ne
 800c5d2:	2301      	movne	r3, #1
 800c5d4:	2300      	moveq	r3, #0
 800c5d6:	b2db      	uxtb	r3, r3
 800c5d8:	e015      	b.n	800c606 <HAL_TIM_PWM_Start+0x9e>
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	2b10      	cmp	r3, #16
 800c5de:	d109      	bne.n	800c5f4 <HAL_TIM_PWM_Start+0x8c>
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	2b01      	cmp	r3, #1
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	e008      	b.n	800c606 <HAL_TIM_PWM_Start+0x9e>
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800c5fa:	b2db      	uxtb	r3, r3
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	bf14      	ite	ne
 800c600:	2301      	movne	r3, #1
 800c602:	2300      	moveq	r3, #0
 800c604:	b2db      	uxtb	r3, r3
 800c606:	2b00      	cmp	r3, #0
 800c608:	d001      	beq.n	800c60e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800c60a:	2301      	movs	r3, #1
 800c60c:	e097      	b.n	800c73e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d104      	bne.n	800c61e <HAL_TIM_PWM_Start+0xb6>
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2202      	movs	r2, #2
 800c618:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c61c:	e023      	b.n	800c666 <HAL_TIM_PWM_Start+0xfe>
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	2b04      	cmp	r3, #4
 800c622:	d104      	bne.n	800c62e <HAL_TIM_PWM_Start+0xc6>
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	2202      	movs	r2, #2
 800c628:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c62c:	e01b      	b.n	800c666 <HAL_TIM_PWM_Start+0xfe>
 800c62e:	683b      	ldr	r3, [r7, #0]
 800c630:	2b08      	cmp	r3, #8
 800c632:	d104      	bne.n	800c63e <HAL_TIM_PWM_Start+0xd6>
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2202      	movs	r2, #2
 800c638:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c63c:	e013      	b.n	800c666 <HAL_TIM_PWM_Start+0xfe>
 800c63e:	683b      	ldr	r3, [r7, #0]
 800c640:	2b0c      	cmp	r3, #12
 800c642:	d104      	bne.n	800c64e <HAL_TIM_PWM_Start+0xe6>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2202      	movs	r2, #2
 800c648:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c64c:	e00b      	b.n	800c666 <HAL_TIM_PWM_Start+0xfe>
 800c64e:	683b      	ldr	r3, [r7, #0]
 800c650:	2b10      	cmp	r3, #16
 800c652:	d104      	bne.n	800c65e <HAL_TIM_PWM_Start+0xf6>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	2202      	movs	r2, #2
 800c658:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c65c:	e003      	b.n	800c666 <HAL_TIM_PWM_Start+0xfe>
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	2202      	movs	r2, #2
 800c662:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	2201      	movs	r2, #1
 800c66c:	6839      	ldr	r1, [r7, #0]
 800c66e:	4618      	mov	r0, r3
 800c670:	f000 ff4c 	bl	800d50c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	4a33      	ldr	r2, [pc, #204]	@ (800c748 <HAL_TIM_PWM_Start+0x1e0>)
 800c67a:	4293      	cmp	r3, r2
 800c67c:	d013      	beq.n	800c6a6 <HAL_TIM_PWM_Start+0x13e>
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	4a32      	ldr	r2, [pc, #200]	@ (800c74c <HAL_TIM_PWM_Start+0x1e4>)
 800c684:	4293      	cmp	r3, r2
 800c686:	d00e      	beq.n	800c6a6 <HAL_TIM_PWM_Start+0x13e>
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	4a30      	ldr	r2, [pc, #192]	@ (800c750 <HAL_TIM_PWM_Start+0x1e8>)
 800c68e:	4293      	cmp	r3, r2
 800c690:	d009      	beq.n	800c6a6 <HAL_TIM_PWM_Start+0x13e>
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a2f      	ldr	r2, [pc, #188]	@ (800c754 <HAL_TIM_PWM_Start+0x1ec>)
 800c698:	4293      	cmp	r3, r2
 800c69a:	d004      	beq.n	800c6a6 <HAL_TIM_PWM_Start+0x13e>
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	4a2d      	ldr	r2, [pc, #180]	@ (800c758 <HAL_TIM_PWM_Start+0x1f0>)
 800c6a2:	4293      	cmp	r3, r2
 800c6a4:	d101      	bne.n	800c6aa <HAL_TIM_PWM_Start+0x142>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	e000      	b.n	800c6ac <HAL_TIM_PWM_Start+0x144>
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d007      	beq.n	800c6c0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	681b      	ldr	r3, [r3, #0]
 800c6b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c6be:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	4a20      	ldr	r2, [pc, #128]	@ (800c748 <HAL_TIM_PWM_Start+0x1e0>)
 800c6c6:	4293      	cmp	r3, r2
 800c6c8:	d018      	beq.n	800c6fc <HAL_TIM_PWM_Start+0x194>
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c6d2:	d013      	beq.n	800c6fc <HAL_TIM_PWM_Start+0x194>
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	4a20      	ldr	r2, [pc, #128]	@ (800c75c <HAL_TIM_PWM_Start+0x1f4>)
 800c6da:	4293      	cmp	r3, r2
 800c6dc:	d00e      	beq.n	800c6fc <HAL_TIM_PWM_Start+0x194>
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	681b      	ldr	r3, [r3, #0]
 800c6e2:	4a1f      	ldr	r2, [pc, #124]	@ (800c760 <HAL_TIM_PWM_Start+0x1f8>)
 800c6e4:	4293      	cmp	r3, r2
 800c6e6:	d009      	beq.n	800c6fc <HAL_TIM_PWM_Start+0x194>
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	4a17      	ldr	r2, [pc, #92]	@ (800c74c <HAL_TIM_PWM_Start+0x1e4>)
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	d004      	beq.n	800c6fc <HAL_TIM_PWM_Start+0x194>
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a16      	ldr	r2, [pc, #88]	@ (800c750 <HAL_TIM_PWM_Start+0x1e8>)
 800c6f8:	4293      	cmp	r3, r2
 800c6fa:	d115      	bne.n	800c728 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	689a      	ldr	r2, [r3, #8]
 800c702:	4b18      	ldr	r3, [pc, #96]	@ (800c764 <HAL_TIM_PWM_Start+0x1fc>)
 800c704:	4013      	ands	r3, r2
 800c706:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c708:	68fb      	ldr	r3, [r7, #12]
 800c70a:	2b06      	cmp	r3, #6
 800c70c:	d015      	beq.n	800c73a <HAL_TIM_PWM_Start+0x1d2>
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c714:	d011      	beq.n	800c73a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	681a      	ldr	r2, [r3, #0]
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	f042 0201 	orr.w	r2, r2, #1
 800c724:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c726:	e008      	b.n	800c73a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	681b      	ldr	r3, [r3, #0]
 800c732:	f042 0201 	orr.w	r2, r2, #1
 800c736:	601a      	str	r2, [r3, #0]
 800c738:	e000      	b.n	800c73c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c73a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c73c:	2300      	movs	r3, #0
}
 800c73e:	4618      	mov	r0, r3
 800c740:	3710      	adds	r7, #16
 800c742:	46bd      	mov	sp, r7
 800c744:	bd80      	pop	{r7, pc}
 800c746:	bf00      	nop
 800c748:	40012c00 	.word	0x40012c00
 800c74c:	40013400 	.word	0x40013400
 800c750:	40014000 	.word	0x40014000
 800c754:	40014400 	.word	0x40014400
 800c758:	40014800 	.word	0x40014800
 800c75c:	40000400 	.word	0x40000400
 800c760:	40000800 	.word	0x40000800
 800c764:	00010007 	.word	0x00010007

0800c768 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c768:	b580      	push	{r7, lr}
 800c76a:	b082      	sub	sp, #8
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
 800c770:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2200      	movs	r2, #0
 800c778:	6839      	ldr	r1, [r7, #0]
 800c77a:	4618      	mov	r0, r3
 800c77c:	f000 fec6 	bl	800d50c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	4a3e      	ldr	r2, [pc, #248]	@ (800c880 <HAL_TIM_PWM_Stop+0x118>)
 800c786:	4293      	cmp	r3, r2
 800c788:	d013      	beq.n	800c7b2 <HAL_TIM_PWM_Stop+0x4a>
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a3d      	ldr	r2, [pc, #244]	@ (800c884 <HAL_TIM_PWM_Stop+0x11c>)
 800c790:	4293      	cmp	r3, r2
 800c792:	d00e      	beq.n	800c7b2 <HAL_TIM_PWM_Stop+0x4a>
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	4a3b      	ldr	r2, [pc, #236]	@ (800c888 <HAL_TIM_PWM_Stop+0x120>)
 800c79a:	4293      	cmp	r3, r2
 800c79c:	d009      	beq.n	800c7b2 <HAL_TIM_PWM_Stop+0x4a>
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	4a3a      	ldr	r2, [pc, #232]	@ (800c88c <HAL_TIM_PWM_Stop+0x124>)
 800c7a4:	4293      	cmp	r3, r2
 800c7a6:	d004      	beq.n	800c7b2 <HAL_TIM_PWM_Stop+0x4a>
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	4a38      	ldr	r2, [pc, #224]	@ (800c890 <HAL_TIM_PWM_Stop+0x128>)
 800c7ae:	4293      	cmp	r3, r2
 800c7b0:	d101      	bne.n	800c7b6 <HAL_TIM_PWM_Stop+0x4e>
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e000      	b.n	800c7b8 <HAL_TIM_PWM_Stop+0x50>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d017      	beq.n	800c7ec <HAL_TIM_PWM_Stop+0x84>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	6a1a      	ldr	r2, [r3, #32]
 800c7c2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c7c6:	4013      	ands	r3, r2
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d10f      	bne.n	800c7ec <HAL_TIM_PWM_Stop+0x84>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	6a1a      	ldr	r2, [r3, #32]
 800c7d2:	f244 4344 	movw	r3, #17476	@ 0x4444
 800c7d6:	4013      	ands	r3, r2
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d107      	bne.n	800c7ec <HAL_TIM_PWM_Stop+0x84>
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c7ea:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	6a1a      	ldr	r2, [r3, #32]
 800c7f2:	f241 1311 	movw	r3, #4369	@ 0x1111
 800c7f6:	4013      	ands	r3, r2
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d10f      	bne.n	800c81c <HAL_TIM_PWM_Stop+0xb4>
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	6a1a      	ldr	r2, [r3, #32]
 800c802:	f244 4344 	movw	r3, #17476	@ 0x4444
 800c806:	4013      	ands	r3, r2
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d107      	bne.n	800c81c <HAL_TIM_PWM_Stop+0xb4>
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	681a      	ldr	r2, [r3, #0]
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	f022 0201 	bic.w	r2, r2, #1
 800c81a:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800c81c:	683b      	ldr	r3, [r7, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d104      	bne.n	800c82c <HAL_TIM_PWM_Stop+0xc4>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2201      	movs	r2, #1
 800c826:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800c82a:	e023      	b.n	800c874 <HAL_TIM_PWM_Stop+0x10c>
 800c82c:	683b      	ldr	r3, [r7, #0]
 800c82e:	2b04      	cmp	r3, #4
 800c830:	d104      	bne.n	800c83c <HAL_TIM_PWM_Stop+0xd4>
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	2201      	movs	r2, #1
 800c836:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800c83a:	e01b      	b.n	800c874 <HAL_TIM_PWM_Stop+0x10c>
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	2b08      	cmp	r3, #8
 800c840:	d104      	bne.n	800c84c <HAL_TIM_PWM_Stop+0xe4>
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	2201      	movs	r2, #1
 800c846:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800c84a:	e013      	b.n	800c874 <HAL_TIM_PWM_Stop+0x10c>
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	2b0c      	cmp	r3, #12
 800c850:	d104      	bne.n	800c85c <HAL_TIM_PWM_Stop+0xf4>
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	2201      	movs	r2, #1
 800c856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800c85a:	e00b      	b.n	800c874 <HAL_TIM_PWM_Stop+0x10c>
 800c85c:	683b      	ldr	r3, [r7, #0]
 800c85e:	2b10      	cmp	r3, #16
 800c860:	d104      	bne.n	800c86c <HAL_TIM_PWM_Stop+0x104>
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2201      	movs	r2, #1
 800c866:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800c86a:	e003      	b.n	800c874 <HAL_TIM_PWM_Stop+0x10c>
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	2201      	movs	r2, #1
 800c870:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 800c874:	2300      	movs	r3, #0
}
 800c876:	4618      	mov	r0, r3
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
 800c87e:	bf00      	nop
 800c880:	40012c00 	.word	0x40012c00
 800c884:	40013400 	.word	0x40013400
 800c888:	40014000 	.word	0x40014000
 800c88c:	40014400 	.word	0x40014400
 800c890:	40014800 	.word	0x40014800

0800c894 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d101      	bne.n	800c8b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800c8ae:	2302      	movs	r3, #2
 800c8b0:	e0ff      	b.n	800cab2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 800c8b2:	68fb      	ldr	r3, [r7, #12]
 800c8b4:	2201      	movs	r2, #1
 800c8b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	2b14      	cmp	r3, #20
 800c8be:	f200 80f0 	bhi.w	800caa2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 800c8c2:	a201      	add	r2, pc, #4	@ (adr r2, 800c8c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800c8c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c8c8:	0800c91d 	.word	0x0800c91d
 800c8cc:	0800caa3 	.word	0x0800caa3
 800c8d0:	0800caa3 	.word	0x0800caa3
 800c8d4:	0800caa3 	.word	0x0800caa3
 800c8d8:	0800c95d 	.word	0x0800c95d
 800c8dc:	0800caa3 	.word	0x0800caa3
 800c8e0:	0800caa3 	.word	0x0800caa3
 800c8e4:	0800caa3 	.word	0x0800caa3
 800c8e8:	0800c99f 	.word	0x0800c99f
 800c8ec:	0800caa3 	.word	0x0800caa3
 800c8f0:	0800caa3 	.word	0x0800caa3
 800c8f4:	0800caa3 	.word	0x0800caa3
 800c8f8:	0800c9df 	.word	0x0800c9df
 800c8fc:	0800caa3 	.word	0x0800caa3
 800c900:	0800caa3 	.word	0x0800caa3
 800c904:	0800caa3 	.word	0x0800caa3
 800c908:	0800ca21 	.word	0x0800ca21
 800c90c:	0800caa3 	.word	0x0800caa3
 800c910:	0800caa3 	.word	0x0800caa3
 800c914:	0800caa3 	.word	0x0800caa3
 800c918:	0800ca61 	.word	0x0800ca61
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	4618      	mov	r0, r3
 800c924:	f000 fa60 	bl	800cde8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	699a      	ldr	r2, [r3, #24]
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	f042 0208 	orr.w	r2, r2, #8
 800c936:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	681b      	ldr	r3, [r3, #0]
 800c93c:	699a      	ldr	r2, [r3, #24]
 800c93e:	68fb      	ldr	r3, [r7, #12]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	f022 0204 	bic.w	r2, r2, #4
 800c946:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c948:	68fb      	ldr	r3, [r7, #12]
 800c94a:	681b      	ldr	r3, [r3, #0]
 800c94c:	6999      	ldr	r1, [r3, #24]
 800c94e:	68bb      	ldr	r3, [r7, #8]
 800c950:	691a      	ldr	r2, [r3, #16]
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	430a      	orrs	r2, r1
 800c958:	619a      	str	r2, [r3, #24]
      break;
 800c95a:	e0a5      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	68b9      	ldr	r1, [r7, #8]
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fad0 	bl	800cf08 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c968:	68fb      	ldr	r3, [r7, #12]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	699a      	ldr	r2, [r3, #24]
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c976:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c978:	68fb      	ldr	r3, [r7, #12]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	699a      	ldr	r2, [r3, #24]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800c986:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	6999      	ldr	r1, [r3, #24]
 800c98e:	68bb      	ldr	r3, [r7, #8]
 800c990:	691b      	ldr	r3, [r3, #16]
 800c992:	021a      	lsls	r2, r3, #8
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	430a      	orrs	r2, r1
 800c99a:	619a      	str	r2, [r3, #24]
      break;
 800c99c:	e084      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c99e:	68fb      	ldr	r3, [r7, #12]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	68b9      	ldr	r1, [r7, #8]
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	f000 fb39 	bl	800d01c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	69da      	ldr	r2, [r3, #28]
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	681b      	ldr	r3, [r3, #0]
 800c9b4:	f042 0208 	orr.w	r2, r2, #8
 800c9b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	69da      	ldr	r2, [r3, #28]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	681b      	ldr	r3, [r3, #0]
 800c9c4:	f022 0204 	bic.w	r2, r2, #4
 800c9c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	69d9      	ldr	r1, [r3, #28]
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	691a      	ldr	r2, [r3, #16]
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	430a      	orrs	r2, r1
 800c9da:	61da      	str	r2, [r3, #28]
      break;
 800c9dc:	e064      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	68b9      	ldr	r1, [r7, #8]
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	f000 fba1 	bl	800d12c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	69da      	ldr	r2, [r3, #28]
 800c9f0:	68fb      	ldr	r3, [r7, #12]
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800c9f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800c9fa:	68fb      	ldr	r3, [r7, #12]
 800c9fc:	681b      	ldr	r3, [r3, #0]
 800c9fe:	69da      	ldr	r2, [r3, #28]
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	69d9      	ldr	r1, [r3, #28]
 800ca10:	68bb      	ldr	r3, [r7, #8]
 800ca12:	691b      	ldr	r3, [r3, #16]
 800ca14:	021a      	lsls	r2, r3, #8
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	430a      	orrs	r2, r1
 800ca1c:	61da      	str	r2, [r3, #28]
      break;
 800ca1e:	e043      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	68b9      	ldr	r1, [r7, #8]
 800ca26:	4618      	mov	r0, r3
 800ca28:	f000 fc0a 	bl	800d240 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	681b      	ldr	r3, [r3, #0]
 800ca36:	f042 0208 	orr.w	r2, r2, #8
 800ca3a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	f022 0204 	bic.w	r2, r2, #4
 800ca4a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	691a      	ldr	r2, [r3, #16]
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	681b      	ldr	r3, [r3, #0]
 800ca5a:	430a      	orrs	r2, r1
 800ca5c:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800ca5e:	e023      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	68b9      	ldr	r1, [r7, #8]
 800ca66:	4618      	mov	r0, r3
 800ca68:	f000 fc4e 	bl	800d308 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800ca7a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	681b      	ldr	r3, [r3, #0]
 800ca86:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800ca8a:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800ca92:	68bb      	ldr	r3, [r7, #8]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	021a      	lsls	r2, r3, #8
 800ca98:	68fb      	ldr	r3, [r7, #12]
 800ca9a:	681b      	ldr	r3, [r3, #0]
 800ca9c:	430a      	orrs	r2, r1
 800ca9e:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 800caa0:	e002      	b.n	800caa8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800caa2:	2301      	movs	r3, #1
 800caa4:	75fb      	strb	r3, [r7, #23]
      break;
 800caa6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cab0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cab2:	4618      	mov	r0, r3
 800cab4:	3718      	adds	r7, #24
 800cab6:	46bd      	mov	sp, r7
 800cab8:	bd80      	pop	{r7, pc}
 800caba:	bf00      	nop

0800cabc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800cabc:	b580      	push	{r7, lr}
 800cabe:	b084      	sub	sp, #16
 800cac0:	af00      	add	r7, sp, #0
 800cac2:	6078      	str	r0, [r7, #4]
 800cac4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800cac6:	2300      	movs	r3, #0
 800cac8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800caca:	687b      	ldr	r3, [r7, #4]
 800cacc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800cad0:	2b01      	cmp	r3, #1
 800cad2:	d101      	bne.n	800cad8 <HAL_TIM_ConfigClockSource+0x1c>
 800cad4:	2302      	movs	r3, #2
 800cad6:	e0de      	b.n	800cc96 <HAL_TIM_ConfigClockSource+0x1da>
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2201      	movs	r2, #1
 800cadc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2202      	movs	r2, #2
 800cae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	689b      	ldr	r3, [r3, #8]
 800caee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800caf0:	68bb      	ldr	r3, [r7, #8]
 800caf2:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800caf6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800cafa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800cb02:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	68ba      	ldr	r2, [r7, #8]
 800cb0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800cb0c:	683b      	ldr	r3, [r7, #0]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4a63      	ldr	r2, [pc, #396]	@ (800cca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	f000 80a9 	beq.w	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cb18:	4a61      	ldr	r2, [pc, #388]	@ (800cca0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800cb1a:	4293      	cmp	r3, r2
 800cb1c:	f200 80ae 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb20:	4a60      	ldr	r2, [pc, #384]	@ (800cca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb22:	4293      	cmp	r3, r2
 800cb24:	f000 80a1 	beq.w	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cb28:	4a5e      	ldr	r2, [pc, #376]	@ (800cca4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800cb2a:	4293      	cmp	r3, r2
 800cb2c:	f200 80a6 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb30:	4a5d      	ldr	r2, [pc, #372]	@ (800cca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb32:	4293      	cmp	r3, r2
 800cb34:	f000 8099 	beq.w	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cb38:	4a5b      	ldr	r2, [pc, #364]	@ (800cca8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800cb3a:	4293      	cmp	r3, r2
 800cb3c:	f200 809e 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb40:	4a5a      	ldr	r2, [pc, #360]	@ (800ccac <HAL_TIM_ConfigClockSource+0x1f0>)
 800cb42:	4293      	cmp	r3, r2
 800cb44:	f000 8091 	beq.w	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cb48:	4a58      	ldr	r2, [pc, #352]	@ (800ccac <HAL_TIM_ConfigClockSource+0x1f0>)
 800cb4a:	4293      	cmp	r3, r2
 800cb4c:	f200 8096 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb50:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb54:	f000 8089 	beq.w	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cb58:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800cb5c:	f200 808e 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb60:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb64:	d03e      	beq.n	800cbe4 <HAL_TIM_ConfigClockSource+0x128>
 800cb66:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800cb6a:	f200 8087 	bhi.w	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb72:	f000 8086 	beq.w	800cc82 <HAL_TIM_ConfigClockSource+0x1c6>
 800cb76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb7a:	d87f      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb7c:	2b70      	cmp	r3, #112	@ 0x70
 800cb7e:	d01a      	beq.n	800cbb6 <HAL_TIM_ConfigClockSource+0xfa>
 800cb80:	2b70      	cmp	r3, #112	@ 0x70
 800cb82:	d87b      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb84:	2b60      	cmp	r3, #96	@ 0x60
 800cb86:	d050      	beq.n	800cc2a <HAL_TIM_ConfigClockSource+0x16e>
 800cb88:	2b60      	cmp	r3, #96	@ 0x60
 800cb8a:	d877      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb8c:	2b50      	cmp	r3, #80	@ 0x50
 800cb8e:	d03c      	beq.n	800cc0a <HAL_TIM_ConfigClockSource+0x14e>
 800cb90:	2b50      	cmp	r3, #80	@ 0x50
 800cb92:	d873      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb94:	2b40      	cmp	r3, #64	@ 0x40
 800cb96:	d058      	beq.n	800cc4a <HAL_TIM_ConfigClockSource+0x18e>
 800cb98:	2b40      	cmp	r3, #64	@ 0x40
 800cb9a:	d86f      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cb9c:	2b30      	cmp	r3, #48	@ 0x30
 800cb9e:	d064      	beq.n	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cba0:	2b30      	cmp	r3, #48	@ 0x30
 800cba2:	d86b      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cba4:	2b20      	cmp	r3, #32
 800cba6:	d060      	beq.n	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cba8:	2b20      	cmp	r3, #32
 800cbaa:	d867      	bhi.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d05c      	beq.n	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cbb0:	2b10      	cmp	r3, #16
 800cbb2:	d05a      	beq.n	800cc6a <HAL_TIM_ConfigClockSource+0x1ae>
 800cbb4:	e062      	b.n	800cc7c <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbba:	683b      	ldr	r3, [r7, #0]
 800cbbc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbbe:	683b      	ldr	r3, [r7, #0]
 800cbc0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbc6:	f000 fc81 	bl	800d4cc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	689b      	ldr	r3, [r3, #8]
 800cbd0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800cbd2:	68bb      	ldr	r3, [r7, #8]
 800cbd4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800cbd8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	68ba      	ldr	r2, [r7, #8]
 800cbe0:	609a      	str	r2, [r3, #8]
      break;
 800cbe2:	e04f      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800cbf0:	683b      	ldr	r3, [r7, #0]
 800cbf2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800cbf4:	f000 fc6a 	bl	800d4cc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	689a      	ldr	r2, [r3, #8]
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800cc06:	609a      	str	r2, [r3, #8]
      break;
 800cc08:	e03c      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc12:	683b      	ldr	r3, [r7, #0]
 800cc14:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc16:	461a      	mov	r2, r3
 800cc18:	f000 fbdc 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	2150      	movs	r1, #80	@ 0x50
 800cc22:	4618      	mov	r0, r3
 800cc24:	f000 fc35 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800cc28:	e02c      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc2e:	683b      	ldr	r3, [r7, #0]
 800cc30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800cc36:	461a      	mov	r2, r3
 800cc38:	f000 fbfb 	bl	800d432 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2160      	movs	r1, #96	@ 0x60
 800cc42:	4618      	mov	r0, r3
 800cc44:	f000 fc25 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800cc48:	e01c      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800cc4e:	683b      	ldr	r3, [r7, #0]
 800cc50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800cc52:	683b      	ldr	r3, [r7, #0]
 800cc54:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800cc56:	461a      	mov	r2, r3
 800cc58:	f000 fbbc 	bl	800d3d4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	2140      	movs	r1, #64	@ 0x40
 800cc62:	4618      	mov	r0, r3
 800cc64:	f000 fc15 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800cc68:	e00c      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	681a      	ldr	r2, [r3, #0]
 800cc6e:	683b      	ldr	r3, [r7, #0]
 800cc70:	681b      	ldr	r3, [r3, #0]
 800cc72:	4619      	mov	r1, r3
 800cc74:	4610      	mov	r0, r2
 800cc76:	f000 fc0c 	bl	800d492 <TIM_ITRx_SetConfig>
      break;
 800cc7a:	e003      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 800cc7c:	2301      	movs	r3, #1
 800cc7e:	73fb      	strb	r3, [r7, #15]
      break;
 800cc80:	e000      	b.n	800cc84 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 800cc82:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	2201      	movs	r2, #1
 800cc88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	2200      	movs	r2, #0
 800cc90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3710      	adds	r7, #16
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	00100070 	.word	0x00100070
 800cca4:	00100040 	.word	0x00100040
 800cca8:	00100030 	.word	0x00100030
 800ccac:	00100020 	.word	0x00100020

0800ccb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ccb0:	b480      	push	{r7}
 800ccb2:	b085      	sub	sp, #20
 800ccb4:	af00      	add	r7, sp, #0
 800ccb6:	6078      	str	r0, [r7, #4]
 800ccb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	4a42      	ldr	r2, [pc, #264]	@ (800cdcc <TIM_Base_SetConfig+0x11c>)
 800ccc4:	4293      	cmp	r3, r2
 800ccc6:	d00f      	beq.n	800cce8 <TIM_Base_SetConfig+0x38>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccce:	d00b      	beq.n	800cce8 <TIM_Base_SetConfig+0x38>
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	4a3f      	ldr	r2, [pc, #252]	@ (800cdd0 <TIM_Base_SetConfig+0x120>)
 800ccd4:	4293      	cmp	r3, r2
 800ccd6:	d007      	beq.n	800cce8 <TIM_Base_SetConfig+0x38>
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	4a3e      	ldr	r2, [pc, #248]	@ (800cdd4 <TIM_Base_SetConfig+0x124>)
 800ccdc:	4293      	cmp	r3, r2
 800ccde:	d003      	beq.n	800cce8 <TIM_Base_SetConfig+0x38>
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	4a3d      	ldr	r2, [pc, #244]	@ (800cdd8 <TIM_Base_SetConfig+0x128>)
 800cce4:	4293      	cmp	r3, r2
 800cce6:	d108      	bne.n	800ccfa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ccee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	685b      	ldr	r3, [r3, #4]
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	4313      	orrs	r3, r2
 800ccf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ccfa:	687b      	ldr	r3, [r7, #4]
 800ccfc:	4a33      	ldr	r2, [pc, #204]	@ (800cdcc <TIM_Base_SetConfig+0x11c>)
 800ccfe:	4293      	cmp	r3, r2
 800cd00:	d01b      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800cd08:	d017      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	4a30      	ldr	r2, [pc, #192]	@ (800cdd0 <TIM_Base_SetConfig+0x120>)
 800cd0e:	4293      	cmp	r3, r2
 800cd10:	d013      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	4a2f      	ldr	r2, [pc, #188]	@ (800cdd4 <TIM_Base_SetConfig+0x124>)
 800cd16:	4293      	cmp	r3, r2
 800cd18:	d00f      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	4a2e      	ldr	r2, [pc, #184]	@ (800cdd8 <TIM_Base_SetConfig+0x128>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d00b      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	4a2d      	ldr	r2, [pc, #180]	@ (800cddc <TIM_Base_SetConfig+0x12c>)
 800cd26:	4293      	cmp	r3, r2
 800cd28:	d007      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	4a2c      	ldr	r2, [pc, #176]	@ (800cde0 <TIM_Base_SetConfig+0x130>)
 800cd2e:	4293      	cmp	r3, r2
 800cd30:	d003      	beq.n	800cd3a <TIM_Base_SetConfig+0x8a>
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	4a2b      	ldr	r2, [pc, #172]	@ (800cde4 <TIM_Base_SetConfig+0x134>)
 800cd36:	4293      	cmp	r3, r2
 800cd38:	d108      	bne.n	800cd4c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cd40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	68db      	ldr	r3, [r3, #12]
 800cd46:	68fa      	ldr	r2, [r7, #12]
 800cd48:	4313      	orrs	r3, r2
 800cd4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800cd52:	683b      	ldr	r3, [r7, #0]
 800cd54:	695b      	ldr	r3, [r3, #20]
 800cd56:	4313      	orrs	r3, r2
 800cd58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cd60:	683b      	ldr	r3, [r7, #0]
 800cd62:	689a      	ldr	r2, [r3, #8]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cd68:	683b      	ldr	r3, [r7, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	4a16      	ldr	r2, [pc, #88]	@ (800cdcc <TIM_Base_SetConfig+0x11c>)
 800cd74:	4293      	cmp	r3, r2
 800cd76:	d00f      	beq.n	800cd98 <TIM_Base_SetConfig+0xe8>
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	4a17      	ldr	r2, [pc, #92]	@ (800cdd8 <TIM_Base_SetConfig+0x128>)
 800cd7c:	4293      	cmp	r3, r2
 800cd7e:	d00b      	beq.n	800cd98 <TIM_Base_SetConfig+0xe8>
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	4a16      	ldr	r2, [pc, #88]	@ (800cddc <TIM_Base_SetConfig+0x12c>)
 800cd84:	4293      	cmp	r3, r2
 800cd86:	d007      	beq.n	800cd98 <TIM_Base_SetConfig+0xe8>
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	4a15      	ldr	r2, [pc, #84]	@ (800cde0 <TIM_Base_SetConfig+0x130>)
 800cd8c:	4293      	cmp	r3, r2
 800cd8e:	d003      	beq.n	800cd98 <TIM_Base_SetConfig+0xe8>
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	4a14      	ldr	r2, [pc, #80]	@ (800cde4 <TIM_Base_SetConfig+0x134>)
 800cd94:	4293      	cmp	r3, r2
 800cd96:	d103      	bne.n	800cda0 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	691a      	ldr	r2, [r3, #16]
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	2201      	movs	r2, #1
 800cda4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	691b      	ldr	r3, [r3, #16]
 800cdaa:	f003 0301 	and.w	r3, r3, #1
 800cdae:	2b01      	cmp	r3, #1
 800cdb0:	d105      	bne.n	800cdbe <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	691b      	ldr	r3, [r3, #16]
 800cdb6:	f023 0201 	bic.w	r2, r3, #1
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	611a      	str	r2, [r3, #16]
  }
}
 800cdbe:	bf00      	nop
 800cdc0:	3714      	adds	r7, #20
 800cdc2:	46bd      	mov	sp, r7
 800cdc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc8:	4770      	bx	lr
 800cdca:	bf00      	nop
 800cdcc:	40012c00 	.word	0x40012c00
 800cdd0:	40000400 	.word	0x40000400
 800cdd4:	40000800 	.word	0x40000800
 800cdd8:	40013400 	.word	0x40013400
 800cddc:	40014000 	.word	0x40014000
 800cde0:	40014400 	.word	0x40014400
 800cde4:	40014800 	.word	0x40014800

0800cde8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cde8:	b480      	push	{r7}
 800cdea:	b087      	sub	sp, #28
 800cdec:	af00      	add	r7, sp, #0
 800cdee:	6078      	str	r0, [r7, #4]
 800cdf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a1b      	ldr	r3, [r3, #32]
 800cdf6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	6a1b      	ldr	r3, [r3, #32]
 800cdfc:	f023 0201 	bic.w	r2, r3, #1
 800ce00:	687b      	ldr	r3, [r7, #4]
 800ce02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	685b      	ldr	r3, [r3, #4]
 800ce08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	699b      	ldr	r3, [r3, #24]
 800ce0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800ce16:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800ce1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	f023 0303 	bic.w	r3, r3, #3
 800ce22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ce24:	683b      	ldr	r3, [r7, #0]
 800ce26:	681b      	ldr	r3, [r3, #0]
 800ce28:	68fa      	ldr	r2, [r7, #12]
 800ce2a:	4313      	orrs	r3, r2
 800ce2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ce2e:	697b      	ldr	r3, [r7, #20]
 800ce30:	f023 0302 	bic.w	r3, r3, #2
 800ce34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ce36:	683b      	ldr	r3, [r7, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	697a      	ldr	r2, [r7, #20]
 800ce3c:	4313      	orrs	r3, r2
 800ce3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	4a2c      	ldr	r2, [pc, #176]	@ (800cef4 <TIM_OC1_SetConfig+0x10c>)
 800ce44:	4293      	cmp	r3, r2
 800ce46:	d00f      	beq.n	800ce68 <TIM_OC1_SetConfig+0x80>
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	4a2b      	ldr	r2, [pc, #172]	@ (800cef8 <TIM_OC1_SetConfig+0x110>)
 800ce4c:	4293      	cmp	r3, r2
 800ce4e:	d00b      	beq.n	800ce68 <TIM_OC1_SetConfig+0x80>
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	4a2a      	ldr	r2, [pc, #168]	@ (800cefc <TIM_OC1_SetConfig+0x114>)
 800ce54:	4293      	cmp	r3, r2
 800ce56:	d007      	beq.n	800ce68 <TIM_OC1_SetConfig+0x80>
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	4a29      	ldr	r2, [pc, #164]	@ (800cf00 <TIM_OC1_SetConfig+0x118>)
 800ce5c:	4293      	cmp	r3, r2
 800ce5e:	d003      	beq.n	800ce68 <TIM_OC1_SetConfig+0x80>
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	4a28      	ldr	r2, [pc, #160]	@ (800cf04 <TIM_OC1_SetConfig+0x11c>)
 800ce64:	4293      	cmp	r3, r2
 800ce66:	d10c      	bne.n	800ce82 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ce68:	697b      	ldr	r3, [r7, #20]
 800ce6a:	f023 0308 	bic.w	r3, r3, #8
 800ce6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	68db      	ldr	r3, [r3, #12]
 800ce74:	697a      	ldr	r2, [r7, #20]
 800ce76:	4313      	orrs	r3, r2
 800ce78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ce7a:	697b      	ldr	r3, [r7, #20]
 800ce7c:	f023 0304 	bic.w	r3, r3, #4
 800ce80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	4a1b      	ldr	r2, [pc, #108]	@ (800cef4 <TIM_OC1_SetConfig+0x10c>)
 800ce86:	4293      	cmp	r3, r2
 800ce88:	d00f      	beq.n	800ceaa <TIM_OC1_SetConfig+0xc2>
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	4a1a      	ldr	r2, [pc, #104]	@ (800cef8 <TIM_OC1_SetConfig+0x110>)
 800ce8e:	4293      	cmp	r3, r2
 800ce90:	d00b      	beq.n	800ceaa <TIM_OC1_SetConfig+0xc2>
 800ce92:	687b      	ldr	r3, [r7, #4]
 800ce94:	4a19      	ldr	r2, [pc, #100]	@ (800cefc <TIM_OC1_SetConfig+0x114>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d007      	beq.n	800ceaa <TIM_OC1_SetConfig+0xc2>
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	4a18      	ldr	r2, [pc, #96]	@ (800cf00 <TIM_OC1_SetConfig+0x118>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d003      	beq.n	800ceaa <TIM_OC1_SetConfig+0xc2>
 800cea2:	687b      	ldr	r3, [r7, #4]
 800cea4:	4a17      	ldr	r2, [pc, #92]	@ (800cf04 <TIM_OC1_SetConfig+0x11c>)
 800cea6:	4293      	cmp	r3, r2
 800cea8:	d111      	bne.n	800cece <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ceb0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ceb8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ceba:	683b      	ldr	r3, [r7, #0]
 800cebc:	695b      	ldr	r3, [r3, #20]
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	4313      	orrs	r3, r2
 800cec2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800cec4:	683b      	ldr	r3, [r7, #0]
 800cec6:	699b      	ldr	r3, [r3, #24]
 800cec8:	693a      	ldr	r2, [r7, #16]
 800ceca:	4313      	orrs	r3, r2
 800cecc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	693a      	ldr	r2, [r7, #16]
 800ced2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	68fa      	ldr	r2, [r7, #12]
 800ced8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ceda:	683b      	ldr	r3, [r7, #0]
 800cedc:	685a      	ldr	r2, [r3, #4]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	697a      	ldr	r2, [r7, #20]
 800cee6:	621a      	str	r2, [r3, #32]
}
 800cee8:	bf00      	nop
 800ceea:	371c      	adds	r7, #28
 800ceec:	46bd      	mov	sp, r7
 800ceee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef2:	4770      	bx	lr
 800cef4:	40012c00 	.word	0x40012c00
 800cef8:	40013400 	.word	0x40013400
 800cefc:	40014000 	.word	0x40014000
 800cf00:	40014400 	.word	0x40014400
 800cf04:	40014800 	.word	0x40014800

0800cf08 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cf08:	b480      	push	{r7}
 800cf0a:	b087      	sub	sp, #28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
 800cf10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	6a1b      	ldr	r3, [r3, #32]
 800cf16:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	6a1b      	ldr	r3, [r3, #32]
 800cf1c:	f023 0210 	bic.w	r2, r3, #16
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	685b      	ldr	r3, [r3, #4]
 800cf28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	699b      	ldr	r3, [r3, #24]
 800cf2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800cf36:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800cf3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800cf42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cf44:	683b      	ldr	r3, [r7, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	021b      	lsls	r3, r3, #8
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	4313      	orrs	r3, r2
 800cf4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cf50:	697b      	ldr	r3, [r7, #20]
 800cf52:	f023 0320 	bic.w	r3, r3, #32
 800cf56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cf58:	683b      	ldr	r3, [r7, #0]
 800cf5a:	689b      	ldr	r3, [r3, #8]
 800cf5c:	011b      	lsls	r3, r3, #4
 800cf5e:	697a      	ldr	r2, [r7, #20]
 800cf60:	4313      	orrs	r3, r2
 800cf62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	4a28      	ldr	r2, [pc, #160]	@ (800d008 <TIM_OC2_SetConfig+0x100>)
 800cf68:	4293      	cmp	r3, r2
 800cf6a:	d003      	beq.n	800cf74 <TIM_OC2_SetConfig+0x6c>
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	4a27      	ldr	r2, [pc, #156]	@ (800d00c <TIM_OC2_SetConfig+0x104>)
 800cf70:	4293      	cmp	r3, r2
 800cf72:	d10d      	bne.n	800cf90 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cf7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800cf7c:	683b      	ldr	r3, [r7, #0]
 800cf7e:	68db      	ldr	r3, [r3, #12]
 800cf80:	011b      	lsls	r3, r3, #4
 800cf82:	697a      	ldr	r2, [r7, #20]
 800cf84:	4313      	orrs	r3, r2
 800cf86:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800cf88:	697b      	ldr	r3, [r7, #20]
 800cf8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cf8e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	4a1d      	ldr	r2, [pc, #116]	@ (800d008 <TIM_OC2_SetConfig+0x100>)
 800cf94:	4293      	cmp	r3, r2
 800cf96:	d00f      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xb0>
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	4a1c      	ldr	r2, [pc, #112]	@ (800d00c <TIM_OC2_SetConfig+0x104>)
 800cf9c:	4293      	cmp	r3, r2
 800cf9e:	d00b      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xb0>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	4a1b      	ldr	r2, [pc, #108]	@ (800d010 <TIM_OC2_SetConfig+0x108>)
 800cfa4:	4293      	cmp	r3, r2
 800cfa6:	d007      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xb0>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	4a1a      	ldr	r2, [pc, #104]	@ (800d014 <TIM_OC2_SetConfig+0x10c>)
 800cfac:	4293      	cmp	r3, r2
 800cfae:	d003      	beq.n	800cfb8 <TIM_OC2_SetConfig+0xb0>
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	4a19      	ldr	r2, [pc, #100]	@ (800d018 <TIM_OC2_SetConfig+0x110>)
 800cfb4:	4293      	cmp	r3, r2
 800cfb6:	d113      	bne.n	800cfe0 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800cfb8:	693b      	ldr	r3, [r7, #16]
 800cfba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800cfbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800cfc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800cfc8:	683b      	ldr	r3, [r7, #0]
 800cfca:	695b      	ldr	r3, [r3, #20]
 800cfcc:	009b      	lsls	r3, r3, #2
 800cfce:	693a      	ldr	r2, [r7, #16]
 800cfd0:	4313      	orrs	r3, r2
 800cfd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800cfd4:	683b      	ldr	r3, [r7, #0]
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	009b      	lsls	r3, r3, #2
 800cfda:	693a      	ldr	r2, [r7, #16]
 800cfdc:	4313      	orrs	r3, r2
 800cfde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	693a      	ldr	r2, [r7, #16]
 800cfe4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	68fa      	ldr	r2, [r7, #12]
 800cfea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	685a      	ldr	r2, [r3, #4]
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	621a      	str	r2, [r3, #32]
}
 800cffa:	bf00      	nop
 800cffc:	371c      	adds	r7, #28
 800cffe:	46bd      	mov	sp, r7
 800d000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d004:	4770      	bx	lr
 800d006:	bf00      	nop
 800d008:	40012c00 	.word	0x40012c00
 800d00c:	40013400 	.word	0x40013400
 800d010:	40014000 	.word	0x40014000
 800d014:	40014400 	.word	0x40014400
 800d018:	40014800 	.word	0x40014800

0800d01c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d01c:	b480      	push	{r7}
 800d01e:	b087      	sub	sp, #28
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
 800d024:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	685b      	ldr	r3, [r3, #4]
 800d03c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	69db      	ldr	r3, [r3, #28]
 800d042:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d04a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d04e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d058:	683b      	ldr	r3, [r7, #0]
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	68fa      	ldr	r2, [r7, #12]
 800d05e:	4313      	orrs	r3, r2
 800d060:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800d068:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	689b      	ldr	r3, [r3, #8]
 800d06e:	021b      	lsls	r3, r3, #8
 800d070:	697a      	ldr	r2, [r7, #20]
 800d072:	4313      	orrs	r3, r2
 800d074:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d076:	687b      	ldr	r3, [r7, #4]
 800d078:	4a27      	ldr	r2, [pc, #156]	@ (800d118 <TIM_OC3_SetConfig+0xfc>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d003      	beq.n	800d086 <TIM_OC3_SetConfig+0x6a>
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	4a26      	ldr	r2, [pc, #152]	@ (800d11c <TIM_OC3_SetConfig+0x100>)
 800d082:	4293      	cmp	r3, r2
 800d084:	d10d      	bne.n	800d0a2 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d086:	697b      	ldr	r3, [r7, #20]
 800d088:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800d08c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	68db      	ldr	r3, [r3, #12]
 800d092:	021b      	lsls	r3, r3, #8
 800d094:	697a      	ldr	r2, [r7, #20]
 800d096:	4313      	orrs	r3, r2
 800d098:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800d0a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	4a1c      	ldr	r2, [pc, #112]	@ (800d118 <TIM_OC3_SetConfig+0xfc>)
 800d0a6:	4293      	cmp	r3, r2
 800d0a8:	d00f      	beq.n	800d0ca <TIM_OC3_SetConfig+0xae>
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	4a1b      	ldr	r2, [pc, #108]	@ (800d11c <TIM_OC3_SetConfig+0x100>)
 800d0ae:	4293      	cmp	r3, r2
 800d0b0:	d00b      	beq.n	800d0ca <TIM_OC3_SetConfig+0xae>
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	4a1a      	ldr	r2, [pc, #104]	@ (800d120 <TIM_OC3_SetConfig+0x104>)
 800d0b6:	4293      	cmp	r3, r2
 800d0b8:	d007      	beq.n	800d0ca <TIM_OC3_SetConfig+0xae>
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	4a19      	ldr	r2, [pc, #100]	@ (800d124 <TIM_OC3_SetConfig+0x108>)
 800d0be:	4293      	cmp	r3, r2
 800d0c0:	d003      	beq.n	800d0ca <TIM_OC3_SetConfig+0xae>
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	4a18      	ldr	r2, [pc, #96]	@ (800d128 <TIM_OC3_SetConfig+0x10c>)
 800d0c6:	4293      	cmp	r3, r2
 800d0c8:	d113      	bne.n	800d0f2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d0ca:	693b      	ldr	r3, [r7, #16]
 800d0cc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d0d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d0d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	695b      	ldr	r3, [r3, #20]
 800d0de:	011b      	lsls	r3, r3, #4
 800d0e0:	693a      	ldr	r2, [r7, #16]
 800d0e2:	4313      	orrs	r3, r2
 800d0e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	699b      	ldr	r3, [r3, #24]
 800d0ea:	011b      	lsls	r3, r3, #4
 800d0ec:	693a      	ldr	r2, [r7, #16]
 800d0ee:	4313      	orrs	r3, r2
 800d0f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d0f2:	687b      	ldr	r3, [r7, #4]
 800d0f4:	693a      	ldr	r2, [r7, #16]
 800d0f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d0f8:	687b      	ldr	r3, [r7, #4]
 800d0fa:	68fa      	ldr	r2, [r7, #12]
 800d0fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	687b      	ldr	r3, [r7, #4]
 800d104:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	697a      	ldr	r2, [r7, #20]
 800d10a:	621a      	str	r2, [r3, #32]
}
 800d10c:	bf00      	nop
 800d10e:	371c      	adds	r7, #28
 800d110:	46bd      	mov	sp, r7
 800d112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d116:	4770      	bx	lr
 800d118:	40012c00 	.word	0x40012c00
 800d11c:	40013400 	.word	0x40013400
 800d120:	40014000 	.word	0x40014000
 800d124:	40014400 	.word	0x40014400
 800d128:	40014800 	.word	0x40014800

0800d12c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d12c:	b480      	push	{r7}
 800d12e:	b087      	sub	sp, #28
 800d130:	af00      	add	r7, sp, #0
 800d132:	6078      	str	r0, [r7, #4]
 800d134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	6a1b      	ldr	r3, [r3, #32]
 800d13a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	6a1b      	ldr	r3, [r3, #32]
 800d140:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	685b      	ldr	r3, [r3, #4]
 800d14c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	69db      	ldr	r3, [r3, #28]
 800d152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d15a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d15e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d168:	683b      	ldr	r3, [r7, #0]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	021b      	lsls	r3, r3, #8
 800d16e:	68fa      	ldr	r2, [r7, #12]
 800d170:	4313      	orrs	r3, r2
 800d172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800d17a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d17c:	683b      	ldr	r3, [r7, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	031b      	lsls	r3, r3, #12
 800d182:	697a      	ldr	r2, [r7, #20]
 800d184:	4313      	orrs	r3, r2
 800d186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	4a28      	ldr	r2, [pc, #160]	@ (800d22c <TIM_OC4_SetConfig+0x100>)
 800d18c:	4293      	cmp	r3, r2
 800d18e:	d003      	beq.n	800d198 <TIM_OC4_SetConfig+0x6c>
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	4a27      	ldr	r2, [pc, #156]	@ (800d230 <TIM_OC4_SetConfig+0x104>)
 800d194:	4293      	cmp	r3, r2
 800d196:	d10d      	bne.n	800d1b4 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d19e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800d1a0:	683b      	ldr	r3, [r7, #0]
 800d1a2:	68db      	ldr	r3, [r3, #12]
 800d1a4:	031b      	lsls	r3, r3, #12
 800d1a6:	697a      	ldr	r2, [r7, #20]
 800d1a8:	4313      	orrs	r3, r2
 800d1aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800d1ac:	697b      	ldr	r3, [r7, #20]
 800d1ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1b2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d1b4:	687b      	ldr	r3, [r7, #4]
 800d1b6:	4a1d      	ldr	r2, [pc, #116]	@ (800d22c <TIM_OC4_SetConfig+0x100>)
 800d1b8:	4293      	cmp	r3, r2
 800d1ba:	d00f      	beq.n	800d1dc <TIM_OC4_SetConfig+0xb0>
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4a1c      	ldr	r2, [pc, #112]	@ (800d230 <TIM_OC4_SetConfig+0x104>)
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	d00b      	beq.n	800d1dc <TIM_OC4_SetConfig+0xb0>
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	4a1b      	ldr	r2, [pc, #108]	@ (800d234 <TIM_OC4_SetConfig+0x108>)
 800d1c8:	4293      	cmp	r3, r2
 800d1ca:	d007      	beq.n	800d1dc <TIM_OC4_SetConfig+0xb0>
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	4a1a      	ldr	r2, [pc, #104]	@ (800d238 <TIM_OC4_SetConfig+0x10c>)
 800d1d0:	4293      	cmp	r3, r2
 800d1d2:	d003      	beq.n	800d1dc <TIM_OC4_SetConfig+0xb0>
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	4a19      	ldr	r2, [pc, #100]	@ (800d23c <TIM_OC4_SetConfig+0x110>)
 800d1d8:	4293      	cmp	r3, r2
 800d1da:	d113      	bne.n	800d204 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800d1e2:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800d1ea:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	695b      	ldr	r3, [r3, #20]
 800d1f0:	019b      	lsls	r3, r3, #6
 800d1f2:	693a      	ldr	r2, [r7, #16]
 800d1f4:	4313      	orrs	r3, r2
 800d1f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	699b      	ldr	r3, [r3, #24]
 800d1fc:	019b      	lsls	r3, r3, #6
 800d1fe:	693a      	ldr	r2, [r7, #16]
 800d200:	4313      	orrs	r3, r2
 800d202:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	693a      	ldr	r2, [r7, #16]
 800d208:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	68fa      	ldr	r2, [r7, #12]
 800d20e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	685a      	ldr	r2, [r3, #4]
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d218:	687b      	ldr	r3, [r7, #4]
 800d21a:	697a      	ldr	r2, [r7, #20]
 800d21c:	621a      	str	r2, [r3, #32]
}
 800d21e:	bf00      	nop
 800d220:	371c      	adds	r7, #28
 800d222:	46bd      	mov	sp, r7
 800d224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d228:	4770      	bx	lr
 800d22a:	bf00      	nop
 800d22c:	40012c00 	.word	0x40012c00
 800d230:	40013400 	.word	0x40013400
 800d234:	40014000 	.word	0x40014000
 800d238:	40014400 	.word	0x40014400
 800d23c:	40014800 	.word	0x40014800

0800d240 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d240:	b480      	push	{r7}
 800d242:	b087      	sub	sp, #28
 800d244:	af00      	add	r7, sp, #0
 800d246:	6078      	str	r0, [r7, #4]
 800d248:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	6a1b      	ldr	r3, [r3, #32]
 800d24e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	6a1b      	ldr	r3, [r3, #32]
 800d254:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d266:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d26e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d274:	683b      	ldr	r3, [r7, #0]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	68fa      	ldr	r2, [r7, #12]
 800d27a:	4313      	orrs	r3, r2
 800d27c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800d27e:	693b      	ldr	r3, [r7, #16]
 800d280:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 800d284:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800d286:	683b      	ldr	r3, [r7, #0]
 800d288:	689b      	ldr	r3, [r3, #8]
 800d28a:	041b      	lsls	r3, r3, #16
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	4313      	orrs	r3, r2
 800d290:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	4a17      	ldr	r2, [pc, #92]	@ (800d2f4 <TIM_OC5_SetConfig+0xb4>)
 800d296:	4293      	cmp	r3, r2
 800d298:	d00f      	beq.n	800d2ba <TIM_OC5_SetConfig+0x7a>
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	4a16      	ldr	r2, [pc, #88]	@ (800d2f8 <TIM_OC5_SetConfig+0xb8>)
 800d29e:	4293      	cmp	r3, r2
 800d2a0:	d00b      	beq.n	800d2ba <TIM_OC5_SetConfig+0x7a>
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	4a15      	ldr	r2, [pc, #84]	@ (800d2fc <TIM_OC5_SetConfig+0xbc>)
 800d2a6:	4293      	cmp	r3, r2
 800d2a8:	d007      	beq.n	800d2ba <TIM_OC5_SetConfig+0x7a>
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	4a14      	ldr	r2, [pc, #80]	@ (800d300 <TIM_OC5_SetConfig+0xc0>)
 800d2ae:	4293      	cmp	r3, r2
 800d2b0:	d003      	beq.n	800d2ba <TIM_OC5_SetConfig+0x7a>
 800d2b2:	687b      	ldr	r3, [r7, #4]
 800d2b4:	4a13      	ldr	r2, [pc, #76]	@ (800d304 <TIM_OC5_SetConfig+0xc4>)
 800d2b6:	4293      	cmp	r3, r2
 800d2b8:	d109      	bne.n	800d2ce <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800d2ba:	697b      	ldr	r3, [r7, #20]
 800d2bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d2c0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800d2c2:	683b      	ldr	r3, [r7, #0]
 800d2c4:	695b      	ldr	r3, [r3, #20]
 800d2c6:	021b      	lsls	r3, r3, #8
 800d2c8:	697a      	ldr	r2, [r7, #20]
 800d2ca:	4313      	orrs	r3, r2
 800d2cc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d2ce:	687b      	ldr	r3, [r7, #4]
 800d2d0:	697a      	ldr	r2, [r7, #20]
 800d2d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	68fa      	ldr	r2, [r7, #12]
 800d2d8:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	685a      	ldr	r2, [r3, #4]
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d2e2:	687b      	ldr	r3, [r7, #4]
 800d2e4:	693a      	ldr	r2, [r7, #16]
 800d2e6:	621a      	str	r2, [r3, #32]
}
 800d2e8:	bf00      	nop
 800d2ea:	371c      	adds	r7, #28
 800d2ec:	46bd      	mov	sp, r7
 800d2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2f2:	4770      	bx	lr
 800d2f4:	40012c00 	.word	0x40012c00
 800d2f8:	40013400 	.word	0x40013400
 800d2fc:	40014000 	.word	0x40014000
 800d300:	40014400 	.word	0x40014400
 800d304:	40014800 	.word	0x40014800

0800d308 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800d308:	b480      	push	{r7}
 800d30a:	b087      	sub	sp, #28
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	6078      	str	r0, [r7, #4]
 800d310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	6a1b      	ldr	r3, [r3, #32]
 800d316:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	6a1b      	ldr	r3, [r3, #32]
 800d31c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	685b      	ldr	r3, [r3, #4]
 800d328:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d32e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800d330:	68fb      	ldr	r3, [r7, #12]
 800d332:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800d336:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800d33a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d33c:	683b      	ldr	r3, [r7, #0]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	021b      	lsls	r3, r3, #8
 800d342:	68fa      	ldr	r2, [r7, #12]
 800d344:	4313      	orrs	r3, r2
 800d346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800d348:	693b      	ldr	r3, [r7, #16]
 800d34a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800d34e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800d350:	683b      	ldr	r3, [r7, #0]
 800d352:	689b      	ldr	r3, [r3, #8]
 800d354:	051b      	lsls	r3, r3, #20
 800d356:	693a      	ldr	r2, [r7, #16]
 800d358:	4313      	orrs	r3, r2
 800d35a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	4a18      	ldr	r2, [pc, #96]	@ (800d3c0 <TIM_OC6_SetConfig+0xb8>)
 800d360:	4293      	cmp	r3, r2
 800d362:	d00f      	beq.n	800d384 <TIM_OC6_SetConfig+0x7c>
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	4a17      	ldr	r2, [pc, #92]	@ (800d3c4 <TIM_OC6_SetConfig+0xbc>)
 800d368:	4293      	cmp	r3, r2
 800d36a:	d00b      	beq.n	800d384 <TIM_OC6_SetConfig+0x7c>
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	4a16      	ldr	r2, [pc, #88]	@ (800d3c8 <TIM_OC6_SetConfig+0xc0>)
 800d370:	4293      	cmp	r3, r2
 800d372:	d007      	beq.n	800d384 <TIM_OC6_SetConfig+0x7c>
 800d374:	687b      	ldr	r3, [r7, #4]
 800d376:	4a15      	ldr	r2, [pc, #84]	@ (800d3cc <TIM_OC6_SetConfig+0xc4>)
 800d378:	4293      	cmp	r3, r2
 800d37a:	d003      	beq.n	800d384 <TIM_OC6_SetConfig+0x7c>
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	4a14      	ldr	r2, [pc, #80]	@ (800d3d0 <TIM_OC6_SetConfig+0xc8>)
 800d380:	4293      	cmp	r3, r2
 800d382:	d109      	bne.n	800d398 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800d38a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800d38c:	683b      	ldr	r3, [r7, #0]
 800d38e:	695b      	ldr	r3, [r3, #20]
 800d390:	029b      	lsls	r3, r3, #10
 800d392:	697a      	ldr	r2, [r7, #20]
 800d394:	4313      	orrs	r3, r2
 800d396:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	697a      	ldr	r2, [r7, #20]
 800d39c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	68fa      	ldr	r2, [r7, #12]
 800d3a2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800d3a4:	683b      	ldr	r3, [r7, #0]
 800d3a6:	685a      	ldr	r2, [r3, #4]
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	693a      	ldr	r2, [r7, #16]
 800d3b0:	621a      	str	r2, [r3, #32]
}
 800d3b2:	bf00      	nop
 800d3b4:	371c      	adds	r7, #28
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3bc:	4770      	bx	lr
 800d3be:	bf00      	nop
 800d3c0:	40012c00 	.word	0x40012c00
 800d3c4:	40013400 	.word	0x40013400
 800d3c8:	40014000 	.word	0x40014000
 800d3cc:	40014400 	.word	0x40014400
 800d3d0:	40014800 	.word	0x40014800

0800d3d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b087      	sub	sp, #28
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	60f8      	str	r0, [r7, #12]
 800d3dc:	60b9      	str	r1, [r7, #8]
 800d3de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	6a1b      	ldr	r3, [r3, #32]
 800d3e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1b      	ldr	r3, [r3, #32]
 800d3ea:	f023 0201 	bic.w	r2, r3, #1
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	699b      	ldr	r3, [r3, #24]
 800d3f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800d3fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	011b      	lsls	r3, r3, #4
 800d404:	693a      	ldr	r2, [r7, #16]
 800d406:	4313      	orrs	r3, r2
 800d408:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800d40a:	697b      	ldr	r3, [r7, #20]
 800d40c:	f023 030a 	bic.w	r3, r3, #10
 800d410:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800d412:	697a      	ldr	r2, [r7, #20]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	4313      	orrs	r3, r2
 800d418:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	693a      	ldr	r2, [r7, #16]
 800d41e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	697a      	ldr	r2, [r7, #20]
 800d424:	621a      	str	r2, [r3, #32]
}
 800d426:	bf00      	nop
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr

0800d432 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800d432:	b480      	push	{r7}
 800d434:	b087      	sub	sp, #28
 800d436:	af00      	add	r7, sp, #0
 800d438:	60f8      	str	r0, [r7, #12]
 800d43a:	60b9      	str	r1, [r7, #8]
 800d43c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	6a1b      	ldr	r3, [r3, #32]
 800d442:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	6a1b      	ldr	r3, [r3, #32]
 800d448:	f023 0210 	bic.w	r2, r3, #16
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	699b      	ldr	r3, [r3, #24]
 800d454:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800d456:	693b      	ldr	r3, [r7, #16]
 800d458:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800d45c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800d45e:	687b      	ldr	r3, [r7, #4]
 800d460:	031b      	lsls	r3, r3, #12
 800d462:	693a      	ldr	r2, [r7, #16]
 800d464:	4313      	orrs	r3, r2
 800d466:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800d46e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	011b      	lsls	r3, r3, #4
 800d474:	697a      	ldr	r2, [r7, #20]
 800d476:	4313      	orrs	r3, r2
 800d478:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800d47a:	68fb      	ldr	r3, [r7, #12]
 800d47c:	693a      	ldr	r2, [r7, #16]
 800d47e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	697a      	ldr	r2, [r7, #20]
 800d484:	621a      	str	r2, [r3, #32]
}
 800d486:	bf00      	nop
 800d488:	371c      	adds	r7, #28
 800d48a:	46bd      	mov	sp, r7
 800d48c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d490:	4770      	bx	lr

0800d492 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800d492:	b480      	push	{r7}
 800d494:	b085      	sub	sp, #20
 800d496:	af00      	add	r7, sp, #0
 800d498:	6078      	str	r0, [r7, #4]
 800d49a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	689b      	ldr	r3, [r3, #8]
 800d4a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800d4a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d4ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800d4ae:	683a      	ldr	r2, [r7, #0]
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	4313      	orrs	r3, r2
 800d4b4:	f043 0307 	orr.w	r3, r3, #7
 800d4b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	68fa      	ldr	r2, [r7, #12]
 800d4be:	609a      	str	r2, [r3, #8]
}
 800d4c0:	bf00      	nop
 800d4c2:	3714      	adds	r7, #20
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ca:	4770      	bx	lr

0800d4cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800d4cc:	b480      	push	{r7}
 800d4ce:	b087      	sub	sp, #28
 800d4d0:	af00      	add	r7, sp, #0
 800d4d2:	60f8      	str	r0, [r7, #12]
 800d4d4:	60b9      	str	r1, [r7, #8]
 800d4d6:	607a      	str	r2, [r7, #4]
 800d4d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	689b      	ldr	r3, [r3, #8]
 800d4de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d4e0:	697b      	ldr	r3, [r7, #20]
 800d4e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800d4e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800d4e8:	683b      	ldr	r3, [r7, #0]
 800d4ea:	021a      	lsls	r2, r3, #8
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	431a      	orrs	r2, r3
 800d4f0:	68bb      	ldr	r3, [r7, #8]
 800d4f2:	4313      	orrs	r3, r2
 800d4f4:	697a      	ldr	r2, [r7, #20]
 800d4f6:	4313      	orrs	r3, r2
 800d4f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800d4fa:	68fb      	ldr	r3, [r7, #12]
 800d4fc:	697a      	ldr	r2, [r7, #20]
 800d4fe:	609a      	str	r2, [r3, #8]
}
 800d500:	bf00      	nop
 800d502:	371c      	adds	r7, #28
 800d504:	46bd      	mov	sp, r7
 800d506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d50a:	4770      	bx	lr

0800d50c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d50c:	b480      	push	{r7}
 800d50e:	b087      	sub	sp, #28
 800d510:	af00      	add	r7, sp, #0
 800d512:	60f8      	str	r0, [r7, #12]
 800d514:	60b9      	str	r1, [r7, #8]
 800d516:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	f003 031f 	and.w	r3, r3, #31
 800d51e:	2201      	movs	r2, #1
 800d520:	fa02 f303 	lsl.w	r3, r2, r3
 800d524:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	6a1a      	ldr	r2, [r3, #32]
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	43db      	mvns	r3, r3
 800d52e:	401a      	ands	r2, r3
 800d530:	68fb      	ldr	r3, [r7, #12]
 800d532:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d534:	68fb      	ldr	r3, [r7, #12]
 800d536:	6a1a      	ldr	r2, [r3, #32]
 800d538:	68bb      	ldr	r3, [r7, #8]
 800d53a:	f003 031f 	and.w	r3, r3, #31
 800d53e:	6879      	ldr	r1, [r7, #4]
 800d540:	fa01 f303 	lsl.w	r3, r1, r3
 800d544:	431a      	orrs	r2, r3
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	621a      	str	r2, [r3, #32]
}
 800d54a:	bf00      	nop
 800d54c:	371c      	adds	r7, #28
 800d54e:	46bd      	mov	sp, r7
 800d550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d554:	4770      	bx	lr
	...

0800d558 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d558:	b480      	push	{r7}
 800d55a:	b085      	sub	sp, #20
 800d55c:	af00      	add	r7, sp, #0
 800d55e:	6078      	str	r0, [r7, #4]
 800d560:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d568:	2b01      	cmp	r3, #1
 800d56a:	d101      	bne.n	800d570 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d56c:	2302      	movs	r3, #2
 800d56e:	e065      	b.n	800d63c <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2202      	movs	r2, #2
 800d57c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	689b      	ldr	r3, [r3, #8]
 800d58e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	681b      	ldr	r3, [r3, #0]
 800d594:	4a2c      	ldr	r2, [pc, #176]	@ (800d648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d596:	4293      	cmp	r3, r2
 800d598:	d004      	beq.n	800d5a4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4a2b      	ldr	r2, [pc, #172]	@ (800d64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d5a0:	4293      	cmp	r3, r2
 800d5a2:	d108      	bne.n	800d5b6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800d5aa:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800d5ac:	683b      	ldr	r3, [r7, #0]
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	68fa      	ldr	r2, [r7, #12]
 800d5b2:	4313      	orrs	r3, r2
 800d5b4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 800d5bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800d5c0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d5c2:	683b      	ldr	r3, [r7, #0]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	68fa      	ldr	r2, [r7, #12]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	68fa      	ldr	r2, [r7, #12]
 800d5d2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d5d4:	687b      	ldr	r3, [r7, #4]
 800d5d6:	681b      	ldr	r3, [r3, #0]
 800d5d8:	4a1b      	ldr	r2, [pc, #108]	@ (800d648 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800d5da:	4293      	cmp	r3, r2
 800d5dc:	d018      	beq.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	681b      	ldr	r3, [r3, #0]
 800d5e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d5e6:	d013      	beq.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	681b      	ldr	r3, [r3, #0]
 800d5ec:	4a18      	ldr	r2, [pc, #96]	@ (800d650 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800d5ee:	4293      	cmp	r3, r2
 800d5f0:	d00e      	beq.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	4a17      	ldr	r2, [pc, #92]	@ (800d654 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 800d5f8:	4293      	cmp	r3, r2
 800d5fa:	d009      	beq.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4a12      	ldr	r2, [pc, #72]	@ (800d64c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800d602:	4293      	cmp	r3, r2
 800d604:	d004      	beq.n	800d610 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a13      	ldr	r2, [pc, #76]	@ (800d658 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800d60c:	4293      	cmp	r3, r2
 800d60e:	d10c      	bne.n	800d62a <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800d616:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d618:	683b      	ldr	r3, [r7, #0]
 800d61a:	689b      	ldr	r3, [r3, #8]
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	4313      	orrs	r3, r2
 800d620:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	68ba      	ldr	r2, [r7, #8]
 800d628:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	2201      	movs	r2, #1
 800d62e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800d632:	687b      	ldr	r3, [r7, #4]
 800d634:	2200      	movs	r2, #0
 800d636:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d63a:	2300      	movs	r3, #0
}
 800d63c:	4618      	mov	r0, r3
 800d63e:	3714      	adds	r7, #20
 800d640:	46bd      	mov	sp, r7
 800d642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d646:	4770      	bx	lr
 800d648:	40012c00 	.word	0x40012c00
 800d64c:	40013400 	.word	0x40013400
 800d650:	40000400 	.word	0x40000400
 800d654:	40000800 	.word	0x40000800
 800d658:	40014000 	.word	0x40014000

0800d65c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800d65c:	b480      	push	{r7}
 800d65e:	b085      	sub	sp, #20
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
 800d664:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800d666:	2300      	movs	r3, #0
 800d668:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d66a:	687b      	ldr	r3, [r7, #4]
 800d66c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d670:	2b01      	cmp	r3, #1
 800d672:	d101      	bne.n	800d678 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800d674:	2302      	movs	r3, #2
 800d676:	e073      	b.n	800d760 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	2201      	movs	r2, #1
 800d67c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	68db      	ldr	r3, [r3, #12]
 800d68a:	4313      	orrs	r3, r2
 800d68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800d694:	683b      	ldr	r3, [r7, #0]
 800d696:	689b      	ldr	r3, [r3, #8]
 800d698:	4313      	orrs	r3, r2
 800d69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800d69c:	68fb      	ldr	r3, [r7, #12]
 800d69e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800d6a2:	683b      	ldr	r3, [r7, #0]
 800d6a4:	685b      	ldr	r3, [r3, #4]
 800d6a6:	4313      	orrs	r3, r2
 800d6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800d6b0:	683b      	ldr	r3, [r7, #0]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800d6b8:	68fb      	ldr	r3, [r7, #12]
 800d6ba:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800d6be:	683b      	ldr	r3, [r7, #0]
 800d6c0:	691b      	ldr	r3, [r3, #16]
 800d6c2:	4313      	orrs	r3, r2
 800d6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800d6cc:	683b      	ldr	r3, [r7, #0]
 800d6ce:	695b      	ldr	r3, [r3, #20]
 800d6d0:	4313      	orrs	r3, r2
 800d6d2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800d6da:	683b      	ldr	r3, [r7, #0]
 800d6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d6de:	4313      	orrs	r3, r2
 800d6e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800d6e2:	68fb      	ldr	r3, [r7, #12]
 800d6e4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800d6e8:	683b      	ldr	r3, [r7, #0]
 800d6ea:	699b      	ldr	r3, [r3, #24]
 800d6ec:	041b      	lsls	r3, r3, #16
 800d6ee:	4313      	orrs	r3, r2
 800d6f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800d6f8:	683b      	ldr	r3, [r7, #0]
 800d6fa:	69db      	ldr	r3, [r3, #28]
 800d6fc:	4313      	orrs	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	4a19      	ldr	r2, [pc, #100]	@ (800d76c <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800d706:	4293      	cmp	r3, r2
 800d708:	d004      	beq.n	800d714 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 800d70a:	687b      	ldr	r3, [r7, #4]
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	4a18      	ldr	r2, [pc, #96]	@ (800d770 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d11c      	bne.n	800d74e <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800d714:	68fb      	ldr	r3, [r7, #12]
 800d716:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d71e:	051b      	lsls	r3, r3, #20
 800d720:	4313      	orrs	r3, r2
 800d722:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800d724:	68fb      	ldr	r3, [r7, #12]
 800d726:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	6a1b      	ldr	r3, [r3, #32]
 800d72e:	4313      	orrs	r3, r2
 800d730:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800d732:	68fb      	ldr	r3, [r7, #12]
 800d734:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800d738:	683b      	ldr	r3, [r7, #0]
 800d73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d73c:	4313      	orrs	r3, r2
 800d73e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800d746:	683b      	ldr	r3, [r7, #0]
 800d748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d74a:	4313      	orrs	r3, r2
 800d74c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	68fa      	ldr	r2, [r7, #12]
 800d754:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2200      	movs	r2, #0
 800d75a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800d75e:	2300      	movs	r3, #0
}
 800d760:	4618      	mov	r0, r3
 800d762:	3714      	adds	r7, #20
 800d764:	46bd      	mov	sp, r7
 800d766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76a:	4770      	bx	lr
 800d76c:	40012c00 	.word	0x40012c00
 800d770:	40013400 	.word	0x40013400

0800d774 <HAL_TIMEx_ConfigBreakInput>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakInput(TIM_HandleTypeDef *htim,
                                             uint32_t BreakInput,
                                             const TIMEx_BreakInputConfigTypeDef *sBreakInputConfig)
{
 800d774:	b480      	push	{r7}
 800d776:	b08b      	sub	sp, #44	@ 0x2c
 800d778:	af00      	add	r7, sp, #0
 800d77a:	60f8      	str	r0, [r7, #12]
 800d77c:	60b9      	str	r1, [r7, #8]
 800d77e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d780:	2300      	movs	r3, #0
 800d782:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  assert_param(IS_TIM_BREAKINPUTSOURCE(sBreakInputConfig->Source));
  assert_param(IS_TIM_BREAKINPUTSOURCE_STATE(sBreakInputConfig->Enable));
  assert_param(IS_TIM_BREAKINPUTSOURCE_POLARITY(sBreakInputConfig->Polarity));

  /* Check input state */
  __HAL_LOCK(htim);
 800d786:	68fb      	ldr	r3, [r7, #12]
 800d788:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800d78c:	2b01      	cmp	r3, #1
 800d78e:	d101      	bne.n	800d794 <HAL_TIMEx_ConfigBreakInput+0x20>
 800d790:	2302      	movs	r3, #2
 800d792:	e0c1      	b.n	800d918 <HAL_TIMEx_ConfigBreakInput+0x1a4>
 800d794:	68fb      	ldr	r3, [r7, #12]
 800d796:	2201      	movs	r2, #1
 800d798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (sBreakInputConfig->Source)
 800d79c:	687b      	ldr	r3, [r7, #4]
 800d79e:	681b      	ldr	r3, [r3, #0]
 800d7a0:	3b01      	subs	r3, #1
 800d7a2:	2b0f      	cmp	r3, #15
 800d7a4:	d854      	bhi.n	800d850 <HAL_TIMEx_ConfigBreakInput+0xdc>
 800d7a6:	a201      	add	r2, pc, #4	@ (adr r2, 800d7ac <HAL_TIMEx_ConfigBreakInput+0x38>)
 800d7a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ac:	0800d7ed 	.word	0x0800d7ed
 800d7b0:	0800d801 	.word	0x0800d801
 800d7b4:	0800d851 	.word	0x0800d851
 800d7b8:	0800d815 	.word	0x0800d815
 800d7bc:	0800d851 	.word	0x0800d851
 800d7c0:	0800d851 	.word	0x0800d851
 800d7c4:	0800d851 	.word	0x0800d851
 800d7c8:	0800d829 	.word	0x0800d829
 800d7cc:	0800d851 	.word	0x0800d851
 800d7d0:	0800d851 	.word	0x0800d851
 800d7d4:	0800d851 	.word	0x0800d851
 800d7d8:	0800d851 	.word	0x0800d851
 800d7dc:	0800d851 	.word	0x0800d851
 800d7e0:	0800d851 	.word	0x0800d851
 800d7e4:	0800d851 	.word	0x0800d851
 800d7e8:	0800d83d 	.word	0x0800d83d
  {
    case TIM_BREAKINPUTSOURCE_BKIN:
    {
      bkin_enable_mask = TIM1_AF1_BKINE;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKINE_Pos;
 800d7f0:	2300      	movs	r3, #0
 800d7f2:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKINP;
 800d7f4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d7f8:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKINP_Pos;
 800d7fa:	2309      	movs	r3, #9
 800d7fc:	617b      	str	r3, [r7, #20]
      break;
 800d7fe:	e030      	b.n	800d862 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
    case TIM_BREAKINPUTSOURCE_COMP1:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP1E;
 800d800:	2302      	movs	r3, #2
 800d802:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP1E_Pos;
 800d804:	2301      	movs	r3, #1
 800d806:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP1P;
 800d808:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d80c:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP1P_Pos;
 800d80e:	230a      	movs	r3, #10
 800d810:	617b      	str	r3, [r7, #20]
      break;
 800d812:	e026      	b.n	800d862 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#if defined (COMP2)
    case TIM_BREAKINPUTSOURCE_COMP2:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP2E;
 800d814:	2304      	movs	r3, #4
 800d816:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP2E_Pos;
 800d818:	2302      	movs	r3, #2
 800d81a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP2P;
 800d81c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800d820:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP2P_Pos;
 800d822:	230b      	movs	r3, #11
 800d824:	617b      	str	r3, [r7, #20]
      break;
 800d826:	e01c      	b.n	800d862 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP2 */
    case TIM_BREAKINPUTSOURCE_COMP3:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP3E;
 800d828:	2308      	movs	r3, #8
 800d82a:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP3E_Pos;
 800d82c:	2303      	movs	r3, #3
 800d82e:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP3P;
 800d830:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800d834:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP3P_Pos;
 800d836:	230c      	movs	r3, #12
 800d838:	617b      	str	r3, [r7, #20]
      break;
 800d83a:	e012      	b.n	800d862 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#if defined (COMP4)
    case TIM_BREAKINPUTSOURCE_COMP4:
    {
      bkin_enable_mask = TIM1_AF1_BKCMP4E;
 800d83c:	2310      	movs	r3, #16
 800d83e:	623b      	str	r3, [r7, #32]
      bkin_enable_bitpos = TIM1_AF1_BKCMP4E_Pos;
 800d840:	2304      	movs	r3, #4
 800d842:	61bb      	str	r3, [r7, #24]
      bkin_polarity_mask = TIM1_AF1_BKCMP4P;
 800d844:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800d848:	61fb      	str	r3, [r7, #28]
      bkin_polarity_bitpos = TIM1_AF1_BKCMP4P_Pos;
 800d84a:	230d      	movs	r3, #13
 800d84c:	617b      	str	r3, [r7, #20]
      break;
 800d84e:	e008      	b.n	800d862 <HAL_TIMEx_ConfigBreakInput+0xee>
    }
#endif /* COMP7 */

    default:
    {
      bkin_enable_mask = 0U;
 800d850:	2300      	movs	r3, #0
 800d852:	623b      	str	r3, [r7, #32]
      bkin_polarity_mask = 0U;
 800d854:	2300      	movs	r3, #0
 800d856:	61fb      	str	r3, [r7, #28]
      bkin_enable_bitpos = 0U;
 800d858:	2300      	movs	r3, #0
 800d85a:	61bb      	str	r3, [r7, #24]
      bkin_polarity_bitpos = 0U;
 800d85c:	2300      	movs	r3, #0
 800d85e:	617b      	str	r3, [r7, #20]
      break;
 800d860:	bf00      	nop
    }
  }

  switch (BreakInput)
 800d862:	68bb      	ldr	r3, [r7, #8]
 800d864:	2b01      	cmp	r3, #1
 800d866:	d003      	beq.n	800d870 <HAL_TIMEx_ConfigBreakInput+0xfc>
 800d868:	68bb      	ldr	r3, [r7, #8]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	d025      	beq.n	800d8ba <HAL_TIMEx_ConfigBreakInput+0x146>
 800d86e:	e049      	b.n	800d904 <HAL_TIMEx_ConfigBreakInput+0x190>
  {
    case TIM_BREAKINPUT_BRK:
    {
      /* Get the TIMx_AF1 register value */
      tmporx = htim->Instance->AF1;
 800d870:	68fb      	ldr	r3, [r7, #12]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d876:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d878:	6a3b      	ldr	r3, [r7, #32]
 800d87a:	43db      	mvns	r3, r3
 800d87c:	693a      	ldr	r2, [r7, #16]
 800d87e:	4013      	ands	r3, r2
 800d880:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	685a      	ldr	r2, [r3, #4]
 800d886:	69bb      	ldr	r3, [r7, #24]
 800d888:	409a      	lsls	r2, r3
 800d88a:	6a3b      	ldr	r3, [r7, #32]
 800d88c:	4013      	ands	r3, r2
 800d88e:	693a      	ldr	r2, [r7, #16]
 800d890:	4313      	orrs	r3, r2
 800d892:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800d894:	69fb      	ldr	r3, [r7, #28]
 800d896:	43db      	mvns	r3, r3
 800d898:	693a      	ldr	r2, [r7, #16]
 800d89a:	4013      	ands	r3, r2
 800d89c:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	689a      	ldr	r2, [r3, #8]
 800d8a2:	697b      	ldr	r3, [r7, #20]
 800d8a4:	409a      	lsls	r2, r3
 800d8a6:	69fb      	ldr	r3, [r7, #28]
 800d8a8:	4013      	ands	r3, r2
 800d8aa:	693a      	ldr	r2, [r7, #16]
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF1 */
      htim->Instance->AF1 = tmporx;
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	693a      	ldr	r2, [r7, #16]
 800d8b6:	661a      	str	r2, [r3, #96]	@ 0x60
      break;
 800d8b8:	e028      	b.n	800d90c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    case TIM_BREAKINPUT_BRK2:
    {
      /* Get the TIMx_AF2 register value */
      tmporx = htim->Instance->AF2;
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d8c0:	613b      	str	r3, [r7, #16]

      /* Enable the break input */
      tmporx &= ~bkin_enable_mask;
 800d8c2:	6a3b      	ldr	r3, [r7, #32]
 800d8c4:	43db      	mvns	r3, r3
 800d8c6:	693a      	ldr	r2, [r7, #16]
 800d8c8:	4013      	ands	r3, r2
 800d8ca:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Enable << bkin_enable_bitpos) & bkin_enable_mask;
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	685a      	ldr	r2, [r3, #4]
 800d8d0:	69bb      	ldr	r3, [r7, #24]
 800d8d2:	409a      	lsls	r2, r3
 800d8d4:	6a3b      	ldr	r3, [r7, #32]
 800d8d6:	4013      	ands	r3, r2
 800d8d8:	693a      	ldr	r2, [r7, #16]
 800d8da:	4313      	orrs	r3, r2
 800d8dc:	613b      	str	r3, [r7, #16]

      /* Set the break input polarity */
      tmporx &= ~bkin_polarity_mask;
 800d8de:	69fb      	ldr	r3, [r7, #28]
 800d8e0:	43db      	mvns	r3, r3
 800d8e2:	693a      	ldr	r2, [r7, #16]
 800d8e4:	4013      	ands	r3, r2
 800d8e6:	613b      	str	r3, [r7, #16]
      tmporx |= (sBreakInputConfig->Polarity << bkin_polarity_bitpos) & bkin_polarity_mask;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689a      	ldr	r2, [r3, #8]
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	409a      	lsls	r2, r3
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	4013      	ands	r3, r2
 800d8f4:	693a      	ldr	r2, [r7, #16]
 800d8f6:	4313      	orrs	r3, r2
 800d8f8:	613b      	str	r3, [r7, #16]

      /* Set TIMx_AF2 */
      htim->Instance->AF2 = tmporx;
 800d8fa:	68fb      	ldr	r3, [r7, #12]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	665a      	str	r2, [r3, #100]	@ 0x64
      break;
 800d902:	e003      	b.n	800d90c <HAL_TIMEx_ConfigBreakInput+0x198>
    }
    default:
      status = HAL_ERROR;
 800d904:	2301      	movs	r3, #1
 800d906:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800d90a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	2200      	movs	r2, #0
 800d910:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800d914:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800d918:	4618      	mov	r0, r3
 800d91a:	372c      	adds	r7, #44	@ 0x2c
 800d91c:	46bd      	mov	sp, r7
 800d91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d922:	4770      	bx	lr

0800d924 <LL_ADC_REG_SetSequencerLength>:
{
 800d924:	b480      	push	{r7}
 800d926:	b083      	sub	sp, #12
 800d928:	af00      	add	r7, sp, #0
 800d92a:	6078      	str	r0, [r7, #4]
 800d92c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 800d92e:	687b      	ldr	r3, [r7, #4]
 800d930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d932:	f023 020f 	bic.w	r2, r3, #15
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	431a      	orrs	r2, r3
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800d93e:	bf00      	nop
 800d940:	370c      	adds	r7, #12
 800d942:	46bd      	mov	sp, r7
 800d944:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d948:	4770      	bx	lr

0800d94a <LL_ADC_IsEnabled>:
{
 800d94a:	b480      	push	{r7}
 800d94c:	b083      	sub	sp, #12
 800d94e:	af00      	add	r7, sp, #0
 800d950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	689b      	ldr	r3, [r3, #8]
 800d956:	f003 0301 	and.w	r3, r3, #1
 800d95a:	2b01      	cmp	r3, #1
 800d95c:	d101      	bne.n	800d962 <LL_ADC_IsEnabled+0x18>
 800d95e:	2301      	movs	r3, #1
 800d960:	e000      	b.n	800d964 <LL_ADC_IsEnabled+0x1a>
 800d962:	2300      	movs	r3, #0
}
 800d964:	4618      	mov	r0, r3
 800d966:	370c      	adds	r7, #12
 800d968:	46bd      	mov	sp, r7
 800d96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d96e:	4770      	bx	lr

0800d970 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, const LL_ADC_CommonInitTypeDef *pADC_CommonInitStruct)
{
 800d970:	b590      	push	{r4, r7, lr}
 800d972:	b085      	sub	sp, #20
 800d974:	af00      	add	r7, sp, #0
 800d976:	6078      	str	r0, [r7, #4]
 800d978:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800d97a:	2300      	movs	r3, #0
 800d97c:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to  */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 800d97e:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 800d982:	f7ff ffe2 	bl	800d94a <LL_ADC_IsEnabled>
 800d986:	4604      	mov	r4, r0
 800d988:	4817      	ldr	r0, [pc, #92]	@ (800d9e8 <LL_ADC_CommonInit+0x78>)
 800d98a:	f7ff ffde 	bl	800d94a <LL_ADC_IsEnabled>
 800d98e:	4603      	mov	r3, r0
 800d990:	4323      	orrs	r3, r4
 800d992:	2b00      	cmp	r3, #0
 800d994:	d120      	bne.n	800d9d8 <LL_ADC_CommonInit+0x68>
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
#if defined(ADC_MULTIMODE_SUPPORT)
    if (pADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800d996:	683b      	ldr	r3, [r7, #0]
 800d998:	685b      	ldr	r3, [r3, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d012      	beq.n	800d9c4 <LL_ADC_CommonInit+0x54>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	689a      	ldr	r2, [r3, #8]
 800d9a2:	4b12      	ldr	r3, [pc, #72]	@ (800d9ec <LL_ADC_CommonInit+0x7c>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	683a      	ldr	r2, [r7, #0]
 800d9a8:	6811      	ldr	r1, [r2, #0]
 800d9aa:	683a      	ldr	r2, [r7, #0]
 800d9ac:	6852      	ldr	r2, [r2, #4]
 800d9ae:	4311      	orrs	r1, r2
 800d9b0:	683a      	ldr	r2, [r7, #0]
 800d9b2:	6892      	ldr	r2, [r2, #8]
 800d9b4:	4311      	orrs	r1, r2
 800d9b6:	683a      	ldr	r2, [r7, #0]
 800d9b8:	68d2      	ldr	r2, [r2, #12]
 800d9ba:	430a      	orrs	r2, r1
 800d9bc:	431a      	orrs	r2, r3
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	609a      	str	r2, [r3, #8]
 800d9c2:	e00b      	b.n	800d9dc <LL_ADC_CommonInit+0x6c>
                 | pADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	689a      	ldr	r2, [r3, #8]
 800d9c8:	4b08      	ldr	r3, [pc, #32]	@ (800d9ec <LL_ADC_CommonInit+0x7c>)
 800d9ca:	4013      	ands	r3, r2
 800d9cc:	683a      	ldr	r2, [r7, #0]
 800d9ce:	6812      	ldr	r2, [r2, #0]
 800d9d0:	431a      	orrs	r2, r3
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	609a      	str	r2, [r3, #8]
 800d9d6:	e001      	b.n	800d9dc <LL_ADC_CommonInit+0x6c>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 800d9d8:	2301      	movs	r3, #1
 800d9da:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d9dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9de:	4618      	mov	r0, r3
 800d9e0:	3714      	adds	r7, #20
 800d9e2:	46bd      	mov	sp, r7
 800d9e4:	bd90      	pop	{r4, r7, pc}
 800d9e6:	bf00      	nop
 800d9e8:	50000100 	.word	0x50000100
 800d9ec:	ffc030e0 	.word	0xffc030e0

0800d9f0 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, const LL_ADC_InitTypeDef *pADC_InitStruct)
{
 800d9f0:	b580      	push	{r7, lr}
 800d9f2:	b084      	sub	sp, #16
 800d9f4:	af00      	add	r7, sp, #0
 800d9f6:	6078      	str	r0, [r7, #4]
 800d9f8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800d9fa:	2300      	movs	r3, #0
 800d9fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_DATA_ALIGN(pADC_InitStruct->DataAlignment));
  assert_param(IS_LL_ADC_LOW_POWER(pADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800d9fe:	6878      	ldr	r0, [r7, #4]
 800da00:	f7ff ffa3 	bl	800d94a <LL_ADC_IsEnabled>
 800da04:	4603      	mov	r3, r0
 800da06:	2b00      	cmp	r3, #0
 800da08:	d111      	bne.n	800da2e <LL_ADC_Init+0x3e>
    /* Configuration of ADC hierarchical scope:                               */
    /*  - ADC instance                                                        */
    /*    - Set ADC data resolution                                           */
    /*    - Set ADC conversion data alignment                                 */
    /*    - Set ADC low power mode                                            */
    MODIFY_REG(ADCx->CFGR,
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	68db      	ldr	r3, [r3, #12]
 800da0e:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800da12:	f023 0318 	bic.w	r3, r3, #24
 800da16:	683a      	ldr	r2, [r7, #0]
 800da18:	6811      	ldr	r1, [r2, #0]
 800da1a:	683a      	ldr	r2, [r7, #0]
 800da1c:	6852      	ldr	r2, [r2, #4]
 800da1e:	4311      	orrs	r1, r2
 800da20:	683a      	ldr	r2, [r7, #0]
 800da22:	6892      	ldr	r2, [r2, #8]
 800da24:	430a      	orrs	r2, r1
 800da26:	431a      	orrs	r2, r3
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	60da      	str	r2, [r3, #12]
 800da2c:	e001      	b.n	800da32 <LL_ADC_Init+0x42>

  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800da2e:	2301      	movs	r3, #1
 800da30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800da32:	7bfb      	ldrb	r3, [r7, #15]
}
 800da34:	4618      	mov	r0, r3
 800da36:	3710      	adds	r7, #16
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, const LL_ADC_REG_InitTypeDef *pADC_RegInitStruct)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
 800da44:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DMA_TRANSFER(pADC_RegInitStruct->DMATransfer));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(pADC_RegInitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f7ff ff7d 	bl	800d94a <LL_ADC_IsEnabled>
 800da50:	4603      	mov	r3, r0
 800da52:	2b00      	cmp	r3, #0
 800da54:	d132      	bne.n	800dabc <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by    */
    /*       setting of trigger source to SW start.                           */
    if (pADC_RegInitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800da56:	683b      	ldr	r3, [r7, #0]
 800da58:	685b      	ldr	r3, [r3, #4]
 800da5a:	2b00      	cmp	r3, #0
 800da5c:	d015      	beq.n	800da8a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	68da      	ldr	r2, [r3, #12]
 800da62:	4b1a      	ldr	r3, [pc, #104]	@ (800dacc <LL_ADC_REG_Init+0x90>)
 800da64:	4013      	ands	r3, r2
 800da66:	683a      	ldr	r2, [r7, #0]
 800da68:	6811      	ldr	r1, [r2, #0]
 800da6a:	683a      	ldr	r2, [r7, #0]
 800da6c:	6892      	ldr	r2, [r2, #8]
 800da6e:	4311      	orrs	r1, r2
 800da70:	683a      	ldr	r2, [r7, #0]
 800da72:	68d2      	ldr	r2, [r2, #12]
 800da74:	4311      	orrs	r1, r2
 800da76:	683a      	ldr	r2, [r7, #0]
 800da78:	6912      	ldr	r2, [r2, #16]
 800da7a:	4311      	orrs	r1, r2
 800da7c:	683a      	ldr	r2, [r7, #0]
 800da7e:	6952      	ldr	r2, [r2, #20]
 800da80:	430a      	orrs	r2, r1
 800da82:	431a      	orrs	r2, r3
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	60da      	str	r2, [r3, #12]
 800da88:	e011      	b.n	800daae <LL_ADC_REG_Init+0x72>
                 | pADC_RegInitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	68da      	ldr	r2, [r3, #12]
 800da8e:	4b0f      	ldr	r3, [pc, #60]	@ (800dacc <LL_ADC_REG_Init+0x90>)
 800da90:	4013      	ands	r3, r2
 800da92:	683a      	ldr	r2, [r7, #0]
 800da94:	6811      	ldr	r1, [r2, #0]
 800da96:	683a      	ldr	r2, [r7, #0]
 800da98:	68d2      	ldr	r2, [r2, #12]
 800da9a:	4311      	orrs	r1, r2
 800da9c:	683a      	ldr	r2, [r7, #0]
 800da9e:	6912      	ldr	r2, [r2, #16]
 800daa0:	4311      	orrs	r1, r2
 800daa2:	683a      	ldr	r2, [r7, #0]
 800daa4:	6952      	ldr	r2, [r2, #20]
 800daa6:	430a      	orrs	r2, r1
 800daa8:	431a      	orrs	r2, r3
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	60da      	str	r2, [r3, #12]
                 | pADC_RegInitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, pADC_RegInitStruct->SequencerLength);
 800daae:	683b      	ldr	r3, [r7, #0]
 800dab0:	685b      	ldr	r3, [r3, #4]
 800dab2:	4619      	mov	r1, r3
 800dab4:	6878      	ldr	r0, [r7, #4]
 800dab6:	f7ff ff35 	bl	800d924 <LL_ADC_REG_SetSequencerLength>
 800daba:	e001      	b.n	800dac0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800dabc:	2301      	movs	r3, #1
 800dabe:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800dac0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bd80      	pop	{r7, pc}
 800daca:	bf00      	nop
 800dacc:	fff0c01c 	.word	0xfff0c01c

0800dad0 <LL_DMA_ConfigTransfer>:
{
 800dad0:	b480      	push	{r7}
 800dad2:	b087      	sub	sp, #28
 800dad4:	af00      	add	r7, sp, #0
 800dad6:	60f8      	str	r0, [r7, #12]
 800dad8:	60b9      	str	r1, [r7, #8]
 800dada:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800dadc:	68fb      	ldr	r3, [r7, #12]
 800dade:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 800dae0:	4a0e      	ldr	r2, [pc, #56]	@ (800db1c <LL_DMA_ConfigTransfer+0x4c>)
 800dae2:	68bb      	ldr	r3, [r7, #8]
 800dae4:	4413      	add	r3, r2
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	461a      	mov	r2, r3
 800daea:	697b      	ldr	r3, [r7, #20]
 800daec:	4413      	add	r3, r2
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800daf4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800daf8:	4908      	ldr	r1, [pc, #32]	@ (800db1c <LL_DMA_ConfigTransfer+0x4c>)
 800dafa:	68ba      	ldr	r2, [r7, #8]
 800dafc:	440a      	add	r2, r1
 800dafe:	7812      	ldrb	r2, [r2, #0]
 800db00:	4611      	mov	r1, r2
 800db02:	697a      	ldr	r2, [r7, #20]
 800db04:	440a      	add	r2, r1
 800db06:	4611      	mov	r1, r2
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	4313      	orrs	r3, r2
 800db0c:	600b      	str	r3, [r1, #0]
}
 800db0e:	bf00      	nop
 800db10:	371c      	adds	r7, #28
 800db12:	46bd      	mov	sp, r7
 800db14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db18:	4770      	bx	lr
 800db1a:	bf00      	nop
 800db1c:	0801b928 	.word	0x0801b928

0800db20 <LL_DMA_SetDataLength>:
{
 800db20:	b480      	push	{r7}
 800db22:	b087      	sub	sp, #28
 800db24:	af00      	add	r7, sp, #0
 800db26:	60f8      	str	r0, [r7, #12]
 800db28:	60b9      	str	r1, [r7, #8]
 800db2a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800db2c:	68fb      	ldr	r3, [r7, #12]
 800db2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 800db30:	4a0d      	ldr	r2, [pc, #52]	@ (800db68 <LL_DMA_SetDataLength+0x48>)
 800db32:	68bb      	ldr	r3, [r7, #8]
 800db34:	4413      	add	r3, r2
 800db36:	781b      	ldrb	r3, [r3, #0]
 800db38:	461a      	mov	r2, r3
 800db3a:	697b      	ldr	r3, [r7, #20]
 800db3c:	4413      	add	r3, r2
 800db3e:	685b      	ldr	r3, [r3, #4]
 800db40:	0c1b      	lsrs	r3, r3, #16
 800db42:	041b      	lsls	r3, r3, #16
 800db44:	4908      	ldr	r1, [pc, #32]	@ (800db68 <LL_DMA_SetDataLength+0x48>)
 800db46:	68ba      	ldr	r2, [r7, #8]
 800db48:	440a      	add	r2, r1
 800db4a:	7812      	ldrb	r2, [r2, #0]
 800db4c:	4611      	mov	r1, r2
 800db4e:	697a      	ldr	r2, [r7, #20]
 800db50:	440a      	add	r2, r1
 800db52:	4611      	mov	r1, r2
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	4313      	orrs	r3, r2
 800db58:	604b      	str	r3, [r1, #4]
}
 800db5a:	bf00      	nop
 800db5c:	371c      	adds	r7, #28
 800db5e:	46bd      	mov	sp, r7
 800db60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db64:	4770      	bx	lr
 800db66:	bf00      	nop
 800db68:	0801b928 	.word	0x0801b928

0800db6c <LL_DMA_SetMemoryAddress>:
{
 800db6c:	b480      	push	{r7}
 800db6e:	b087      	sub	sp, #28
 800db70:	af00      	add	r7, sp, #0
 800db72:	60f8      	str	r0, [r7, #12]
 800db74:	60b9      	str	r1, [r7, #8]
 800db76:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, MemoryAddress);
 800db7c:	4a07      	ldr	r2, [pc, #28]	@ (800db9c <LL_DMA_SetMemoryAddress+0x30>)
 800db7e:	68bb      	ldr	r3, [r7, #8]
 800db80:	4413      	add	r3, r2
 800db82:	781b      	ldrb	r3, [r3, #0]
 800db84:	461a      	mov	r2, r3
 800db86:	697b      	ldr	r3, [r7, #20]
 800db88:	4413      	add	r3, r2
 800db8a:	461a      	mov	r2, r3
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	60d3      	str	r3, [r2, #12]
}
 800db90:	bf00      	nop
 800db92:	371c      	adds	r7, #28
 800db94:	46bd      	mov	sp, r7
 800db96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db9a:	4770      	bx	lr
 800db9c:	0801b928 	.word	0x0801b928

0800dba0 <LL_DMA_SetPeriphAddress>:
{
 800dba0:	b480      	push	{r7}
 800dba2:	b087      	sub	sp, #28
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	60f8      	str	r0, [r7, #12]
 800dba8:	60b9      	str	r1, [r7, #8]
 800dbaa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	617b      	str	r3, [r7, #20]
  WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, PeriphAddress);
 800dbb0:	4a07      	ldr	r2, [pc, #28]	@ (800dbd0 <LL_DMA_SetPeriphAddress+0x30>)
 800dbb2:	68bb      	ldr	r3, [r7, #8]
 800dbb4:	4413      	add	r3, r2
 800dbb6:	781b      	ldrb	r3, [r3, #0]
 800dbb8:	461a      	mov	r2, r3
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	4413      	add	r3, r2
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	6093      	str	r3, [r2, #8]
}
 800dbc4:	bf00      	nop
 800dbc6:	371c      	adds	r7, #28
 800dbc8:	46bd      	mov	sp, r7
 800dbca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbce:	4770      	bx	lr
 800dbd0:	0801b928 	.word	0x0801b928

0800dbd4 <LL_DMA_SetPeriphRequest>:
{
 800dbd4:	b480      	push	{r7}
 800dbd6:	b087      	sub	sp, #28
 800dbd8:	af00      	add	r7, sp, #0
 800dbda:	60f8      	str	r0, [r7, #12]
 800dbdc:	60b9      	str	r1, [r7, #8]
 800dbde:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	0a9b      	lsrs	r3, r3, #10
 800dbe4:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800dbe8:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 800dbec:	00db      	lsls	r3, r3, #3
 800dbee:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 800dbf0:	68ba      	ldr	r2, [r7, #8]
 800dbf2:	697b      	ldr	r3, [r7, #20]
 800dbf4:	4413      	add	r3, r2
 800dbf6:	009b      	lsls	r3, r3, #2
 800dbf8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dbfc:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800dc06:	68ba      	ldr	r2, [r7, #8]
 800dc08:	697b      	ldr	r3, [r7, #20]
 800dc0a:	4413      	add	r3, r2
 800dc0c:	009b      	lsls	r3, r3, #2
 800dc0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800dc12:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 800dc16:	687a      	ldr	r2, [r7, #4]
 800dc18:	430a      	orrs	r2, r1
 800dc1a:	601a      	str	r2, [r3, #0]
}
 800dc1c:	bf00      	nop
 800dc1e:	371c      	adds	r7, #28
 800dc20:	46bd      	mov	sp, r7
 800dc22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc26:	4770      	bx	lr

0800dc28 <LL_DMA_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: DMA registers are initialized
  *          - ERROR: Not applicable
  */
uint32_t LL_DMA_Init(DMA_TypeDef *DMAx, uint32_t Channel, LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800dc28:	b580      	push	{r7, lr}
 800dc2a:	b084      	sub	sp, #16
 800dc2c:	af00      	add	r7, sp, #0
 800dc2e:	60f8      	str	r0, [r7, #12]
 800dc30:	60b9      	str	r1, [r7, #8]
 800dc32:	607a      	str	r2, [r7, #4]
   * - MemoryOrM2MDstIncMode:  DMA_CCR_MINC bit
   * - PeriphOrM2MSrcDataSize: DMA_CCR_PSIZE[1:0] bits
   * - MemoryOrM2MDstDataSize: DMA_CCR_MSIZE[1:0] bits
   * - Priority:               DMA_CCR_PL[1:0] bits
   */
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	689a      	ldr	r2, [r3, #8]
                        DMA_InitStruct->Mode                   | \
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	68db      	ldr	r3, [r3, #12]
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dc3c:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	691b      	ldr	r3, [r3, #16]
                        DMA_InitStruct->Mode                   | \
 800dc42:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	695b      	ldr	r3, [r3, #20]
                        DMA_InitStruct->PeriphOrM2MSrcIncMode  | \
 800dc48:	431a      	orrs	r2, r3
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800dc4a:	687b      	ldr	r3, [r7, #4]
 800dc4c:	699b      	ldr	r3, [r3, #24]
                        DMA_InitStruct->MemoryOrM2MDstIncMode  | \
 800dc4e:	431a      	orrs	r2, r3
                        DMA_InitStruct->MemoryOrM2MDstDataSize | \
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	69db      	ldr	r3, [r3, #28]
                        DMA_InitStruct->PeriphOrM2MSrcDataSize | \
 800dc54:	431a      	orrs	r2, r3
                        DMA_InitStruct->Priority);
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
  LL_DMA_ConfigTransfer(DMAx, Channel, DMA_InitStruct->Direction              | \
 800dc5a:	4313      	orrs	r3, r2
 800dc5c:	461a      	mov	r2, r3
 800dc5e:	68b9      	ldr	r1, [r7, #8]
 800dc60:	68f8      	ldr	r0, [r7, #12]
 800dc62:	f7ff ff35 	bl	800dad0 <LL_DMA_ConfigTransfer>

  /*-------------------------- DMAx CMAR Configuration -------------------------
   * Configure the memory or destination base address with parameter :
   * - MemoryOrM2MDstAddress: DMA_CMAR_MA[31:0] bits
   */
  LL_DMA_SetMemoryAddress(DMAx, Channel, DMA_InitStruct->MemoryOrM2MDstAddress);
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	685b      	ldr	r3, [r3, #4]
 800dc6a:	461a      	mov	r2, r3
 800dc6c:	68b9      	ldr	r1, [r7, #8]
 800dc6e:	68f8      	ldr	r0, [r7, #12]
 800dc70:	f7ff ff7c 	bl	800db6c <LL_DMA_SetMemoryAddress>

  /*-------------------------- DMAx CPAR Configuration -------------------------
   * Configure the peripheral or source base address with parameter :
   * - PeriphOrM2MSrcAddress: DMA_CPAR_PA[31:0] bits
   */
  LL_DMA_SetPeriphAddress(DMAx, Channel, DMA_InitStruct->PeriphOrM2MSrcAddress);
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	461a      	mov	r2, r3
 800dc7a:	68b9      	ldr	r1, [r7, #8]
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff ff8f 	bl	800dba0 <LL_DMA_SetPeriphAddress>

  /*--------------------------- DMAx CNDTR Configuration -----------------------
   * Configure the peripheral base address with parameter :
   * - NbData: DMA_CNDTR_NDT[15:0] bits
   */
  LL_DMA_SetDataLength(DMAx, Channel, DMA_InitStruct->NbData);
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6a1b      	ldr	r3, [r3, #32]
 800dc86:	461a      	mov	r2, r3
 800dc88:	68b9      	ldr	r1, [r7, #8]
 800dc8a:	68f8      	ldr	r0, [r7, #12]
 800dc8c:	f7ff ff48 	bl	800db20 <LL_DMA_SetDataLength>

  /*--------------------------- DMAMUXx CCR Configuration ----------------------
   * Configure the DMA request for DMA Channels on DMAMUX Channel x with parameter :
   * - PeriphRequest: DMA_CxCR[7:0] bits
   */
  LL_DMA_SetPeriphRequest(DMAx, Channel, DMA_InitStruct->PeriphRequest);
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc94:	461a      	mov	r2, r3
 800dc96:	68b9      	ldr	r1, [r7, #8]
 800dc98:	68f8      	ldr	r0, [r7, #12]
 800dc9a:	f7ff ff9b 	bl	800dbd4 <LL_DMA_SetPeriphRequest>

  return (uint32_t)SUCCESS;
 800dc9e:	2300      	movs	r3, #0
}
 800dca0:	4618      	mov	r0, r3
 800dca2:	3710      	adds	r7, #16
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <LL_DMA_StructInit>:
  * @brief  Set each @ref LL_DMA_InitTypeDef field to default value.
  * @param  DMA_InitStruct Pointer to a @ref LL_DMA_InitTypeDef structure.
  * @retval None
  */
void LL_DMA_StructInit(LL_DMA_InitTypeDef *DMA_InitStruct)
{
 800dca8:	b480      	push	{r7}
 800dcaa:	b083      	sub	sp, #12
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  /* Set DMA_InitStruct fields to default values */
  DMA_InitStruct->PeriphOrM2MSrcAddress  = (uint32_t)0x00000000U;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2200      	movs	r2, #0
 800dcb4:	601a      	str	r2, [r3, #0]
  DMA_InitStruct->MemoryOrM2MDstAddress  = (uint32_t)0x00000000U;
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	2200      	movs	r2, #0
 800dcba:	605a      	str	r2, [r3, #4]
  DMA_InitStruct->Direction              = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	609a      	str	r2, [r3, #8]
  DMA_InitStruct->Mode                   = LL_DMA_MODE_NORMAL;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	60da      	str	r2, [r3, #12]
  DMA_InitStruct->PeriphOrM2MSrcIncMode  = LL_DMA_PERIPH_NOINCREMENT;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	611a      	str	r2, [r3, #16]
  DMA_InitStruct->MemoryOrM2MDstIncMode  = LL_DMA_MEMORY_NOINCREMENT;
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	2200      	movs	r2, #0
 800dcd2:	615a      	str	r2, [r3, #20]
  DMA_InitStruct->PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	2200      	movs	r2, #0
 800dcd8:	619a      	str	r2, [r3, #24]
  DMA_InitStruct->MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	2200      	movs	r2, #0
 800dcde:	61da      	str	r2, [r3, #28]
  DMA_InitStruct->NbData                 = (uint32_t)0x00000000U;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2200      	movs	r2, #0
 800dce4:	621a      	str	r2, [r3, #32]
  DMA_InitStruct->PeriphRequest          = LL_DMAMUX_REQ_MEM2MEM;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	2200      	movs	r2, #0
 800dcea:	625a      	str	r2, [r3, #36]	@ 0x24
  DMA_InitStruct->Priority               = LL_DMA_PRIORITY_LOW;
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	2200      	movs	r2, #0
 800dcf0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800dcf2:	bf00      	nop
 800dcf4:	370c      	adds	r7, #12
 800dcf6:	46bd      	mov	sp, r7
 800dcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcfc:	4770      	bx	lr

0800dcfe <LL_GPIO_SetPinMode>:
{
 800dcfe:	b480      	push	{r7}
 800dd00:	b08b      	sub	sp, #44	@ 0x2c
 800dd02:	af00      	add	r7, sp, #0
 800dd04:	60f8      	str	r0, [r7, #12]
 800dd06:	60b9      	str	r1, [r7, #8]
 800dd08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800dd0a:	68fb      	ldr	r3, [r7, #12]
 800dd0c:	681a      	ldr	r2, [r3, #0]
 800dd0e:	68bb      	ldr	r3, [r7, #8]
 800dd10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd12:	697b      	ldr	r3, [r7, #20]
 800dd14:	fa93 f3a3 	rbit	r3, r3
 800dd18:	613b      	str	r3, [r7, #16]
  return result;
 800dd1a:	693b      	ldr	r3, [r7, #16]
 800dd1c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800dd1e:	69bb      	ldr	r3, [r7, #24]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d101      	bne.n	800dd28 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800dd24:	2320      	movs	r3, #32
 800dd26:	e003      	b.n	800dd30 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800dd28:	69bb      	ldr	r3, [r7, #24]
 800dd2a:	fab3 f383 	clz	r3, r3
 800dd2e:	b2db      	uxtb	r3, r3
 800dd30:	005b      	lsls	r3, r3, #1
 800dd32:	2103      	movs	r1, #3
 800dd34:	fa01 f303 	lsl.w	r3, r1, r3
 800dd38:	43db      	mvns	r3, r3
 800dd3a:	401a      	ands	r2, r3
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dd40:	6a3b      	ldr	r3, [r7, #32]
 800dd42:	fa93 f3a3 	rbit	r3, r3
 800dd46:	61fb      	str	r3, [r7, #28]
  return result;
 800dd48:	69fb      	ldr	r3, [r7, #28]
 800dd4a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800dd4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d101      	bne.n	800dd56 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800dd52:	2320      	movs	r3, #32
 800dd54:	e003      	b.n	800dd5e <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800dd56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd58:	fab3 f383 	clz	r3, r3
 800dd5c:	b2db      	uxtb	r3, r3
 800dd5e:	005b      	lsls	r3, r3, #1
 800dd60:	6879      	ldr	r1, [r7, #4]
 800dd62:	fa01 f303 	lsl.w	r3, r1, r3
 800dd66:	431a      	orrs	r2, r3
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	601a      	str	r2, [r3, #0]
}
 800dd6c:	bf00      	nop
 800dd6e:	372c      	adds	r7, #44	@ 0x2c
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr

0800dd78 <LL_GPIO_SetPinOutputType>:
{
 800dd78:	b480      	push	{r7}
 800dd7a:	b085      	sub	sp, #20
 800dd7c:	af00      	add	r7, sp, #0
 800dd7e:	60f8      	str	r0, [r7, #12]
 800dd80:	60b9      	str	r1, [r7, #8]
 800dd82:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800dd84:	68fb      	ldr	r3, [r7, #12]
 800dd86:	685a      	ldr	r2, [r3, #4]
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	43db      	mvns	r3, r3
 800dd8c:	401a      	ands	r2, r3
 800dd8e:	68bb      	ldr	r3, [r7, #8]
 800dd90:	6879      	ldr	r1, [r7, #4]
 800dd92:	fb01 f303 	mul.w	r3, r1, r3
 800dd96:	431a      	orrs	r2, r3
 800dd98:	68fb      	ldr	r3, [r7, #12]
 800dd9a:	605a      	str	r2, [r3, #4]
}
 800dd9c:	bf00      	nop
 800dd9e:	3714      	adds	r7, #20
 800dda0:	46bd      	mov	sp, r7
 800dda2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dda6:	4770      	bx	lr

0800dda8 <LL_GPIO_SetPinSpeed>:
{
 800dda8:	b480      	push	{r7}
 800ddaa:	b08b      	sub	sp, #44	@ 0x2c
 800ddac:	af00      	add	r7, sp, #0
 800ddae:	60f8      	str	r0, [r7, #12]
 800ddb0:	60b9      	str	r1, [r7, #8]
 800ddb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800ddb4:	68fb      	ldr	r3, [r7, #12]
 800ddb6:	689a      	ldr	r2, [r3, #8]
 800ddb8:	68bb      	ldr	r3, [r7, #8]
 800ddba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	fa93 f3a3 	rbit	r3, r3
 800ddc2:	613b      	str	r3, [r7, #16]
  return result;
 800ddc4:	693b      	ldr	r3, [r7, #16]
 800ddc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800ddc8:	69bb      	ldr	r3, [r7, #24]
 800ddca:	2b00      	cmp	r3, #0
 800ddcc:	d101      	bne.n	800ddd2 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 800ddce:	2320      	movs	r3, #32
 800ddd0:	e003      	b.n	800ddda <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800ddd2:	69bb      	ldr	r3, [r7, #24]
 800ddd4:	fab3 f383 	clz	r3, r3
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	005b      	lsls	r3, r3, #1
 800dddc:	2103      	movs	r1, #3
 800ddde:	fa01 f303 	lsl.w	r3, r1, r3
 800dde2:	43db      	mvns	r3, r3
 800dde4:	401a      	ands	r2, r3
 800dde6:	68bb      	ldr	r3, [r7, #8]
 800dde8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ddea:	6a3b      	ldr	r3, [r7, #32]
 800ddec:	fa93 f3a3 	rbit	r3, r3
 800ddf0:	61fb      	str	r3, [r7, #28]
  return result;
 800ddf2:	69fb      	ldr	r3, [r7, #28]
 800ddf4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d101      	bne.n	800de00 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800ddfc:	2320      	movs	r3, #32
 800ddfe:	e003      	b.n	800de08 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800de00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de02:	fab3 f383 	clz	r3, r3
 800de06:	b2db      	uxtb	r3, r3
 800de08:	005b      	lsls	r3, r3, #1
 800de0a:	6879      	ldr	r1, [r7, #4]
 800de0c:	fa01 f303 	lsl.w	r3, r1, r3
 800de10:	431a      	orrs	r2, r3
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	609a      	str	r2, [r3, #8]
}
 800de16:	bf00      	nop
 800de18:	372c      	adds	r7, #44	@ 0x2c
 800de1a:	46bd      	mov	sp, r7
 800de1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de20:	4770      	bx	lr

0800de22 <LL_GPIO_SetPinPull>:
{
 800de22:	b480      	push	{r7}
 800de24:	b08b      	sub	sp, #44	@ 0x2c
 800de26:	af00      	add	r7, sp, #0
 800de28:	60f8      	str	r0, [r7, #12]
 800de2a:	60b9      	str	r1, [r7, #8]
 800de2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	68da      	ldr	r2, [r3, #12]
 800de32:	68bb      	ldr	r3, [r7, #8]
 800de34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de36:	697b      	ldr	r3, [r7, #20]
 800de38:	fa93 f3a3 	rbit	r3, r3
 800de3c:	613b      	str	r3, [r7, #16]
  return result;
 800de3e:	693b      	ldr	r3, [r7, #16]
 800de40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800de42:	69bb      	ldr	r3, [r7, #24]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d101      	bne.n	800de4c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800de48:	2320      	movs	r3, #32
 800de4a:	e003      	b.n	800de54 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800de4c:	69bb      	ldr	r3, [r7, #24]
 800de4e:	fab3 f383 	clz	r3, r3
 800de52:	b2db      	uxtb	r3, r3
 800de54:	005b      	lsls	r3, r3, #1
 800de56:	2103      	movs	r1, #3
 800de58:	fa01 f303 	lsl.w	r3, r1, r3
 800de5c:	43db      	mvns	r3, r3
 800de5e:	401a      	ands	r2, r3
 800de60:	68bb      	ldr	r3, [r7, #8]
 800de62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800de64:	6a3b      	ldr	r3, [r7, #32]
 800de66:	fa93 f3a3 	rbit	r3, r3
 800de6a:	61fb      	str	r3, [r7, #28]
  return result;
 800de6c:	69fb      	ldr	r3, [r7, #28]
 800de6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800de70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de72:	2b00      	cmp	r3, #0
 800de74:	d101      	bne.n	800de7a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800de76:	2320      	movs	r3, #32
 800de78:	e003      	b.n	800de82 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800de7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de7c:	fab3 f383 	clz	r3, r3
 800de80:	b2db      	uxtb	r3, r3
 800de82:	005b      	lsls	r3, r3, #1
 800de84:	6879      	ldr	r1, [r7, #4]
 800de86:	fa01 f303 	lsl.w	r3, r1, r3
 800de8a:	431a      	orrs	r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	60da      	str	r2, [r3, #12]
}
 800de90:	bf00      	nop
 800de92:	372c      	adds	r7, #44	@ 0x2c
 800de94:	46bd      	mov	sp, r7
 800de96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9a:	4770      	bx	lr

0800de9c <LL_GPIO_SetAFPin_0_7>:
{
 800de9c:	b480      	push	{r7}
 800de9e:	b08b      	sub	sp, #44	@ 0x2c
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	60f8      	str	r0, [r7, #12]
 800dea4:	60b9      	str	r1, [r7, #8]
 800dea6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	6a1a      	ldr	r2, [r3, #32]
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800deb0:	697b      	ldr	r3, [r7, #20]
 800deb2:	fa93 f3a3 	rbit	r3, r3
 800deb6:	613b      	str	r3, [r7, #16]
  return result;
 800deb8:	693b      	ldr	r3, [r7, #16]
 800deba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800debc:	69bb      	ldr	r3, [r7, #24]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d101      	bne.n	800dec6 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800dec2:	2320      	movs	r3, #32
 800dec4:	e003      	b.n	800dece <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800dec6:	69bb      	ldr	r3, [r7, #24]
 800dec8:	fab3 f383 	clz	r3, r3
 800decc:	b2db      	uxtb	r3, r3
 800dece:	009b      	lsls	r3, r3, #2
 800ded0:	210f      	movs	r1, #15
 800ded2:	fa01 f303 	lsl.w	r3, r1, r3
 800ded6:	43db      	mvns	r3, r3
 800ded8:	401a      	ands	r2, r3
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dede:	6a3b      	ldr	r3, [r7, #32]
 800dee0:	fa93 f3a3 	rbit	r3, r3
 800dee4:	61fb      	str	r3, [r7, #28]
  return result;
 800dee6:	69fb      	ldr	r3, [r7, #28]
 800dee8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800deea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800deec:	2b00      	cmp	r3, #0
 800deee:	d101      	bne.n	800def4 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800def0:	2320      	movs	r3, #32
 800def2:	e003      	b.n	800defc <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800def4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800def6:	fab3 f383 	clz	r3, r3
 800defa:	b2db      	uxtb	r3, r3
 800defc:	009b      	lsls	r3, r3, #2
 800defe:	6879      	ldr	r1, [r7, #4]
 800df00:	fa01 f303 	lsl.w	r3, r1, r3
 800df04:	431a      	orrs	r2, r3
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	621a      	str	r2, [r3, #32]
}
 800df0a:	bf00      	nop
 800df0c:	372c      	adds	r7, #44	@ 0x2c
 800df0e:	46bd      	mov	sp, r7
 800df10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df14:	4770      	bx	lr

0800df16 <LL_GPIO_SetAFPin_8_15>:
{
 800df16:	b480      	push	{r7}
 800df18:	b08b      	sub	sp, #44	@ 0x2c
 800df1a:	af00      	add	r7, sp, #0
 800df1c:	60f8      	str	r0, [r7, #12]
 800df1e:	60b9      	str	r1, [r7, #8]
 800df20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800df22:	68fb      	ldr	r3, [r7, #12]
 800df24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	0a1b      	lsrs	r3, r3, #8
 800df2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df2c:	697b      	ldr	r3, [r7, #20]
 800df2e:	fa93 f3a3 	rbit	r3, r3
 800df32:	613b      	str	r3, [r7, #16]
  return result;
 800df34:	693b      	ldr	r3, [r7, #16]
 800df36:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800df38:	69bb      	ldr	r3, [r7, #24]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d101      	bne.n	800df42 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 800df3e:	2320      	movs	r3, #32
 800df40:	e003      	b.n	800df4a <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	fab3 f383 	clz	r3, r3
 800df48:	b2db      	uxtb	r3, r3
 800df4a:	009b      	lsls	r3, r3, #2
 800df4c:	210f      	movs	r1, #15
 800df4e:	fa01 f303 	lsl.w	r3, r1, r3
 800df52:	43db      	mvns	r3, r3
 800df54:	401a      	ands	r2, r3
 800df56:	68bb      	ldr	r3, [r7, #8]
 800df58:	0a1b      	lsrs	r3, r3, #8
 800df5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800df5c:	6a3b      	ldr	r3, [r7, #32]
 800df5e:	fa93 f3a3 	rbit	r3, r3
 800df62:	61fb      	str	r3, [r7, #28]
  return result;
 800df64:	69fb      	ldr	r3, [r7, #28]
 800df66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800df68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d101      	bne.n	800df72 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 800df6e:	2320      	movs	r3, #32
 800df70:	e003      	b.n	800df7a <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800df72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df74:	fab3 f383 	clz	r3, r3
 800df78:	b2db      	uxtb	r3, r3
 800df7a:	009b      	lsls	r3, r3, #2
 800df7c:	6879      	ldr	r1, [r7, #4]
 800df7e:	fa01 f303 	lsl.w	r3, r1, r3
 800df82:	431a      	orrs	r2, r3
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800df88:	bf00      	nop
 800df8a:	372c      	adds	r7, #44	@ 0x2c
 800df8c:	46bd      	mov	sp, r7
 800df8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df92:	4770      	bx	lr

0800df94 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af00      	add	r7, sp, #0
 800df9a:	6078      	str	r0, [r7, #4]
 800df9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800df9e:	683b      	ldr	r3, [r7, #0]
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800dfa4:	693b      	ldr	r3, [r7, #16]
 800dfa6:	fa93 f3a3 	rbit	r3, r3
 800dfaa:	60fb      	str	r3, [r7, #12]
  return result;
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800dfb0:	697b      	ldr	r3, [r7, #20]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <LL_GPIO_Init+0x26>
    return 32U;
 800dfb6:	2320      	movs	r3, #32
 800dfb8:	e003      	b.n	800dfc2 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800dfba:	697b      	ldr	r3, [r7, #20]
 800dfbc:	fab3 f383 	clz	r3, r3
 800dfc0:	b2db      	uxtb	r3, r3
 800dfc2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800dfc4:	e048      	b.n	800e058 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800dfc6:	683b      	ldr	r3, [r7, #0]
 800dfc8:	681a      	ldr	r2, [r3, #0]
 800dfca:	2101      	movs	r1, #1
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	fa01 f303 	lsl.w	r3, r1, r3
 800dfd2:	4013      	ands	r3, r2
 800dfd4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800dfd6:	69bb      	ldr	r3, [r7, #24]
 800dfd8:	2b00      	cmp	r3, #0
 800dfda:	d03a      	beq.n	800e052 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	685b      	ldr	r3, [r3, #4]
 800dfe0:	2b01      	cmp	r3, #1
 800dfe2:	d003      	beq.n	800dfec <LL_GPIO_Init+0x58>
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	685b      	ldr	r3, [r3, #4]
 800dfe8:	2b02      	cmp	r3, #2
 800dfea:	d10e      	bne.n	800e00a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800dfec:	683b      	ldr	r3, [r7, #0]
 800dfee:	689b      	ldr	r3, [r3, #8]
 800dff0:	461a      	mov	r2, r3
 800dff2:	69b9      	ldr	r1, [r7, #24]
 800dff4:	6878      	ldr	r0, [r7, #4]
 800dff6:	f7ff fed7 	bl	800dda8 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800dffa:	683b      	ldr	r3, [r7, #0]
 800dffc:	6819      	ldr	r1, [r3, #0]
 800dffe:	683b      	ldr	r3, [r7, #0]
 800e000:	68db      	ldr	r3, [r3, #12]
 800e002:	461a      	mov	r2, r3
 800e004:	6878      	ldr	r0, [r7, #4]
 800e006:	f7ff feb7 	bl	800dd78 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800e00a:	683b      	ldr	r3, [r7, #0]
 800e00c:	691b      	ldr	r3, [r3, #16]
 800e00e:	461a      	mov	r2, r3
 800e010:	69b9      	ldr	r1, [r7, #24]
 800e012:	6878      	ldr	r0, [r7, #4]
 800e014:	f7ff ff05 	bl	800de22 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800e018:	683b      	ldr	r3, [r7, #0]
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	2b02      	cmp	r3, #2
 800e01e:	d111      	bne.n	800e044 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 800e020:	69bb      	ldr	r3, [r7, #24]
 800e022:	2bff      	cmp	r3, #255	@ 0xff
 800e024:	d807      	bhi.n	800e036 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e026:	683b      	ldr	r3, [r7, #0]
 800e028:	695b      	ldr	r3, [r3, #20]
 800e02a:	461a      	mov	r2, r3
 800e02c:	69b9      	ldr	r1, [r7, #24]
 800e02e:	6878      	ldr	r0, [r7, #4]
 800e030:	f7ff ff34 	bl	800de9c <LL_GPIO_SetAFPin_0_7>
 800e034:	e006      	b.n	800e044 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800e036:	683b      	ldr	r3, [r7, #0]
 800e038:	695b      	ldr	r3, [r3, #20]
 800e03a:	461a      	mov	r2, r3
 800e03c:	69b9      	ldr	r1, [r7, #24]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	f7ff ff69 	bl	800df16 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	685b      	ldr	r3, [r3, #4]
 800e048:	461a      	mov	r2, r3
 800e04a:	69b9      	ldr	r1, [r7, #24]
 800e04c:	6878      	ldr	r0, [r7, #4]
 800e04e:	f7ff fe56 	bl	800dcfe <LL_GPIO_SetPinMode>
    }
    pinpos++;
 800e052:	69fb      	ldr	r3, [r7, #28]
 800e054:	3301      	adds	r3, #1
 800e056:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800e058:	683b      	ldr	r3, [r7, #0]
 800e05a:	681a      	ldr	r2, [r3, #0]
 800e05c:	69fb      	ldr	r3, [r7, #28]
 800e05e:	fa22 f303 	lsr.w	r3, r2, r3
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1af      	bne.n	800dfc6 <LL_GPIO_Init+0x32>
  }
  return (SUCCESS);
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	3720      	adds	r7, #32
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}

0800e070 <LL_LPUART_IsEnabled>:
{
 800e070:	b480      	push	{r7}
 800e072:	b083      	sub	sp, #12
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	681b      	ldr	r3, [r3, #0]
 800e07c:	f003 0301 	and.w	r3, r3, #1
 800e080:	2b01      	cmp	r3, #1
 800e082:	d101      	bne.n	800e088 <LL_LPUART_IsEnabled+0x18>
 800e084:	2301      	movs	r3, #1
 800e086:	e000      	b.n	800e08a <LL_LPUART_IsEnabled+0x1a>
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	370c      	adds	r7, #12
 800e08e:	46bd      	mov	sp, r7
 800e090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e094:	4770      	bx	lr

0800e096 <LL_LPUART_SetPrescaler>:
{
 800e096:	b480      	push	{r7}
 800e098:	b083      	sub	sp, #12
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	6078      	str	r0, [r7, #4]
 800e09e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e0a4:	f023 030f 	bic.w	r3, r3, #15
 800e0a8:	683a      	ldr	r2, [r7, #0]
 800e0aa:	b292      	uxth	r2, r2
 800e0ac:	431a      	orrs	r2, r3
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 800e0b2:	bf00      	nop
 800e0b4:	370c      	adds	r7, #12
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0bc:	4770      	bx	lr

0800e0be <LL_LPUART_SetStopBitsLength>:
{
 800e0be:	b480      	push	{r7}
 800e0c0:	b083      	sub	sp, #12
 800e0c2:	af00      	add	r7, sp, #0
 800e0c4:	6078      	str	r0, [r7, #4]
 800e0c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR2, USART_CR2_STOP, StopBits);
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	685b      	ldr	r3, [r3, #4]
 800e0cc:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800e0d0:	683b      	ldr	r3, [r7, #0]
 800e0d2:	431a      	orrs	r2, r3
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	605a      	str	r2, [r3, #4]
}
 800e0d8:	bf00      	nop
 800e0da:	370c      	adds	r7, #12
 800e0dc:	46bd      	mov	sp, r7
 800e0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e2:	4770      	bx	lr

0800e0e4 <LL_LPUART_SetHWFlowCtrl>:
{
 800e0e4:	b480      	push	{r7}
 800e0e6:	b083      	sub	sp, #12
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
 800e0ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(LPUARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	689b      	ldr	r3, [r3, #8]
 800e0f2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800e0f6:	683b      	ldr	r3, [r7, #0]
 800e0f8:	431a      	orrs	r2, r3
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	609a      	str	r2, [r3, #8]
}
 800e0fe:	bf00      	nop
 800e100:	370c      	adds	r7, #12
 800e102:	46bd      	mov	sp, r7
 800e104:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e108:	4770      	bx	lr
	...

0800e10c <LL_LPUART_SetBaudRate>:
{
 800e10c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e110:	b088      	sub	sp, #32
 800e112:	af00      	add	r7, sp, #0
 800e114:	61f8      	str	r0, [r7, #28]
 800e116:	61b9      	str	r1, [r7, #24]
 800e118:	617a      	str	r2, [r7, #20]
 800e11a:	613b      	str	r3, [r7, #16]
  if (BaudRate != 0U)
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d039      	beq.n	800e196 <LL_LPUART_SetBaudRate+0x8a>
    LPUARTx->BRR = __LL_LPUART_DIV(PeriphClk, PrescalerValue, BaudRate);
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	2200      	movs	r2, #0
 800e126:	60bb      	str	r3, [r7, #8]
 800e128:	60fa      	str	r2, [r7, #12]
 800e12a:	697b      	ldr	r3, [r7, #20]
 800e12c:	b29b      	uxth	r3, r3
 800e12e:	461a      	mov	r2, r3
 800e130:	4b1b      	ldr	r3, [pc, #108]	@ (800e1a0 <LL_LPUART_SetBaudRate+0x94>)
 800e132:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800e136:	b29b      	uxth	r3, r3
 800e138:	2200      	movs	r2, #0
 800e13a:	603b      	str	r3, [r7, #0]
 800e13c:	607a      	str	r2, [r7, #4]
 800e13e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e142:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e146:	f7f7 fd23 	bl	8005b90 <__aeabi_uldivmod>
 800e14a:	4602      	mov	r2, r0
 800e14c:	460b      	mov	r3, r1
 800e14e:	4610      	mov	r0, r2
 800e150:	4619      	mov	r1, r3
 800e152:	f04f 0200 	mov.w	r2, #0
 800e156:	f04f 0300 	mov.w	r3, #0
 800e15a:	020b      	lsls	r3, r1, #8
 800e15c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e160:	0202      	lsls	r2, r0, #8
 800e162:	6939      	ldr	r1, [r7, #16]
 800e164:	0849      	lsrs	r1, r1, #1
 800e166:	2000      	movs	r0, #0
 800e168:	460c      	mov	r4, r1
 800e16a:	4605      	mov	r5, r0
 800e16c:	eb12 0804 	adds.w	r8, r2, r4
 800e170:	eb43 0905 	adc.w	r9, r3, r5
 800e174:	693b      	ldr	r3, [r7, #16]
 800e176:	2200      	movs	r2, #0
 800e178:	469a      	mov	sl, r3
 800e17a:	4693      	mov	fp, r2
 800e17c:	4652      	mov	r2, sl
 800e17e:	465b      	mov	r3, fp
 800e180:	4640      	mov	r0, r8
 800e182:	4649      	mov	r1, r9
 800e184:	f7f7 fd04 	bl	8005b90 <__aeabi_uldivmod>
 800e188:	4602      	mov	r2, r0
 800e18a:	460b      	mov	r3, r1
 800e18c:	4613      	mov	r3, r2
 800e18e:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800e192:	69fb      	ldr	r3, [r7, #28]
 800e194:	60da      	str	r2, [r3, #12]
}
 800e196:	bf00      	nop
 800e198:	3720      	adds	r7, #32
 800e19a:	46bd      	mov	sp, r7
 800e19c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e1a0:	0801b930 	.word	0x0801b930

0800e1a4 <LL_LPUART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: LPUART registers are initialized according to LPUART_InitStruct content
  *          - ERROR: Problem occurred during LPUART Registers initialization
  */
ErrorStatus LL_LPUART_Init(USART_TypeDef *LPUARTx, const LL_LPUART_InitTypeDef *LPUART_InitStruct)
{
 800e1a4:	b580      	push	{r7, lr}
 800e1a6:	b084      	sub	sp, #16
 800e1a8:	af00      	add	r7, sp, #0
 800e1aa:	6078      	str	r0, [r7, #4]
 800e1ac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800e1ae:	2301      	movs	r3, #1
 800e1b0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_LPUART_DIRECTION(LPUART_InitStruct->TransferDirection));
  assert_param(IS_LL_LPUART_HWCONTROL(LPUART_InitStruct->HardwareFlowControl));

  /* LPUART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers. Otherwise (LPUART not in Disabled state) => return ERROR */
  if (LL_LPUART_IsEnabled(LPUARTx) == 0U)
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f7ff ff5c 	bl	800e070 <LL_LPUART_IsEnabled>
 800e1b8:	4603      	mov	r3, r0
 800e1ba:	2b00      	cmp	r3, #0
 800e1bc:	d136      	bne.n	800e22c <LL_LPUART_Init+0x88>
     * Configure LPUARTx CR1 (LPUART Word Length, Parity and Transfer Direction bits) with parameters:
     * - DataWidth:          USART_CR1_M bits according to LPUART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to LPUART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to LPUART_InitStruct->TransferDirection value
     */
    MODIFY_REG(LPUARTx->CR1,
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	681a      	ldr	r2, [r3, #0]
 800e1c2:	4b1d      	ldr	r3, [pc, #116]	@ (800e238 <LL_LPUART_Init+0x94>)
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	6891      	ldr	r1, [r2, #8]
 800e1ca:	683a      	ldr	r2, [r7, #0]
 800e1cc:	6912      	ldr	r2, [r2, #16]
 800e1ce:	4311      	orrs	r1, r2
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	6952      	ldr	r2, [r2, #20]
 800e1d4:	430a      	orrs	r2, r1
 800e1d6:	431a      	orrs	r2, r3
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	601a      	str	r2, [r3, #0]

    /*---------------------------- LPUART CR2 Configuration -----------------------
     * Configure LPUARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to LPUART_InitStruct->StopBits value.
     */
    LL_LPUART_SetStopBitsLength(LPUARTx, LPUART_InitStruct->StopBits);
 800e1dc:	683b      	ldr	r3, [r7, #0]
 800e1de:	68db      	ldr	r3, [r3, #12]
 800e1e0:	4619      	mov	r1, r3
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f7ff ff6b 	bl	800e0be <LL_LPUART_SetStopBitsLength>
    /*---------------------------- LPUART CR3 Configuration -----------------------
     * Configure LPUARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according
     *   to LPUART_InitStruct->HardwareFlowControl value.
     */
    LL_LPUART_SetHWFlowCtrl(LPUARTx, LPUART_InitStruct->HardwareFlowControl);
 800e1e8:	683b      	ldr	r3, [r7, #0]
 800e1ea:	699b      	ldr	r3, [r3, #24]
 800e1ec:	4619      	mov	r1, r3
 800e1ee:	6878      	ldr	r0, [r7, #4]
 800e1f0:	f7ff ff78 	bl	800e0e4 <LL_LPUART_SetHWFlowCtrl>

    /*---------------------------- LPUART BRR Configuration -----------------------
     * Retrieve Clock frequency used for LPUART Peripheral
     */
    periphclk = LL_RCC_GetLPUARTClockFreq(LL_RCC_LPUART1_CLKSOURCE);
 800e1f4:	f44f 6040 	mov.w	r0, #3072	@ 0xc00
 800e1f8:	f000 f8bc 	bl	800e374 <LL_RCC_GetLPUARTClockFreq>
 800e1fc:	60b8      	str	r0, [r7, #8]
    /* Configure the LPUART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800e1fe:	68bb      	ldr	r3, [r7, #8]
 800e200:	2b00      	cmp	r3, #0
 800e202:	d00d      	beq.n	800e220 <LL_LPUART_Init+0x7c>
        && (LPUART_InitStruct->BaudRate != 0U))
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d009      	beq.n	800e220 <LL_LPUART_Init+0x7c>
    {
      status = SUCCESS;
 800e20c:	2300      	movs	r3, #0
 800e20e:	73fb      	strb	r3, [r7, #15]
      LL_LPUART_SetBaudRate(LPUARTx,
                            periphclk,
                            LPUART_InitStruct->PrescalerValue,
 800e210:	683b      	ldr	r3, [r7, #0]
 800e212:	681a      	ldr	r2, [r3, #0]
                            LPUART_InitStruct->BaudRate);
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	685b      	ldr	r3, [r3, #4]
      LL_LPUART_SetBaudRate(LPUARTx,
 800e218:	68b9      	ldr	r1, [r7, #8]
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	f7ff ff76 	bl	800e10c <LL_LPUART_SetBaudRate>

    /*---------------------------- LPUART PRESC Configuration -----------------------
     * Configure LPUARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: LPUART_PRESC_PRESCALER bits according to LPUART_InitStruct->PrescalerValue value.
     */
    LL_LPUART_SetPrescaler(LPUARTx, LPUART_InitStruct->PrescalerValue);
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	681b      	ldr	r3, [r3, #0]
 800e224:	4619      	mov	r1, r3
 800e226:	6878      	ldr	r0, [r7, #4]
 800e228:	f7ff ff35 	bl	800e096 <LL_LPUART_SetPrescaler>
  }

  return (status);
 800e22c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3710      	adds	r7, #16
 800e232:	46bd      	mov	sp, r7
 800e234:	bd80      	pop	{r7, pc}
 800e236:	bf00      	nop
 800e238:	efffe9f3 	.word	0xefffe9f3

0800e23c <LL_RCC_HSI_IsReady>:
{
 800e23c:	b480      	push	{r7}
 800e23e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800e240:	4b07      	ldr	r3, [pc, #28]	@ (800e260 <LL_RCC_HSI_IsReady+0x24>)
 800e242:	681b      	ldr	r3, [r3, #0]
 800e244:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e248:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e24c:	d101      	bne.n	800e252 <LL_RCC_HSI_IsReady+0x16>
 800e24e:	2301      	movs	r3, #1
 800e250:	e000      	b.n	800e254 <LL_RCC_HSI_IsReady+0x18>
 800e252:	2300      	movs	r3, #0
}
 800e254:	4618      	mov	r0, r3
 800e256:	46bd      	mov	sp, r7
 800e258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e25c:	4770      	bx	lr
 800e25e:	bf00      	nop
 800e260:	40021000 	.word	0x40021000

0800e264 <LL_RCC_LSE_IsReady>:
{
 800e264:	b480      	push	{r7}
 800e266:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800e268:	4b07      	ldr	r3, [pc, #28]	@ (800e288 <LL_RCC_LSE_IsReady+0x24>)
 800e26a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e26e:	f003 0302 	and.w	r3, r3, #2
 800e272:	2b02      	cmp	r3, #2
 800e274:	d101      	bne.n	800e27a <LL_RCC_LSE_IsReady+0x16>
 800e276:	2301      	movs	r3, #1
 800e278:	e000      	b.n	800e27c <LL_RCC_LSE_IsReady+0x18>
 800e27a:	2300      	movs	r3, #0
}
 800e27c:	4618      	mov	r0, r3
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	40021000 	.word	0x40021000

0800e28c <LL_RCC_GetSysClkSource>:
{
 800e28c:	b480      	push	{r7}
 800e28e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800e290:	4b04      	ldr	r3, [pc, #16]	@ (800e2a4 <LL_RCC_GetSysClkSource+0x18>)
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	f003 030c 	and.w	r3, r3, #12
}
 800e298:	4618      	mov	r0, r3
 800e29a:	46bd      	mov	sp, r7
 800e29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2a0:	4770      	bx	lr
 800e2a2:	bf00      	nop
 800e2a4:	40021000 	.word	0x40021000

0800e2a8 <LL_RCC_GetAHBPrescaler>:
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800e2ac:	4b04      	ldr	r3, [pc, #16]	@ (800e2c0 <LL_RCC_GetAHBPrescaler+0x18>)
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e2b4:	4618      	mov	r0, r3
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2bc:	4770      	bx	lr
 800e2be:	bf00      	nop
 800e2c0:	40021000 	.word	0x40021000

0800e2c4 <LL_RCC_GetAPB1Prescaler>:
{
 800e2c4:	b480      	push	{r7}
 800e2c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800e2c8:	4b04      	ldr	r3, [pc, #16]	@ (800e2dc <LL_RCC_GetAPB1Prescaler+0x18>)
 800e2ca:	689b      	ldr	r3, [r3, #8]
 800e2cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	46bd      	mov	sp, r7
 800e2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2d8:	4770      	bx	lr
 800e2da:	bf00      	nop
 800e2dc:	40021000 	.word	0x40021000

0800e2e0 <LL_RCC_GetLPUARTClockSource>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_SYSCLK
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetLPUARTClockSource(uint32_t LPUARTx)
{
 800e2e0:	b480      	push	{r7}
 800e2e2:	b083      	sub	sp, #12
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800e2e8:	4b05      	ldr	r3, [pc, #20]	@ (800e300 <LL_RCC_GetLPUARTClockSource+0x20>)
 800e2ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	4013      	ands	r3, r2
}
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	370c      	adds	r7, #12
 800e2f6:	46bd      	mov	sp, r7
 800e2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2fc:	4770      	bx	lr
 800e2fe:	bf00      	nop
 800e300:	40021000 	.word	0x40021000

0800e304 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800e304:	b480      	push	{r7}
 800e306:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800e308:	4b04      	ldr	r3, [pc, #16]	@ (800e31c <LL_RCC_PLL_GetMainSource+0x18>)
 800e30a:	68db      	ldr	r3, [r3, #12]
 800e30c:	f003 0303 	and.w	r3, r3, #3
}
 800e310:	4618      	mov	r0, r3
 800e312:	46bd      	mov	sp, r7
 800e314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e318:	4770      	bx	lr
 800e31a:	bf00      	nop
 800e31c:	40021000 	.word	0x40021000

0800e320 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between Min_Data = 8 and Max_Data = 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800e320:	b480      	push	{r7}
 800e322:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800e324:	4b04      	ldr	r3, [pc, #16]	@ (800e338 <LL_RCC_PLL_GetN+0x18>)
 800e326:	68db      	ldr	r3, [r3, #12]
 800e328:	0a1b      	lsrs	r3, r3, #8
 800e32a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
}
 800e32e:	4618      	mov	r0, r3
 800e330:	46bd      	mov	sp, r7
 800e332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e336:	4770      	bx	lr
 800e338:	40021000 	.word	0x40021000

0800e33c <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_4
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800e33c:	b480      	push	{r7}
 800e33e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800e340:	4b04      	ldr	r3, [pc, #16]	@ (800e354 <LL_RCC_PLL_GetR+0x18>)
 800e342:	68db      	ldr	r3, [r3, #12]
 800e344:	f003 63c0 	and.w	r3, r3, #100663296	@ 0x6000000
}
 800e348:	4618      	mov	r0, r3
 800e34a:	46bd      	mov	sp, r7
 800e34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e350:	4770      	bx	lr
 800e352:	bf00      	nop
 800e354:	40021000 	.word	0x40021000

0800e358 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_14
  *         @arg @ref LL_RCC_PLLM_DIV_15
  *         @arg @ref LL_RCC_PLLM_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800e358:	b480      	push	{r7}
 800e35a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800e35c:	4b04      	ldr	r3, [pc, #16]	@ (800e370 <LL_RCC_PLL_GetDivider+0x18>)
 800e35e:	68db      	ldr	r3, [r3, #12]
 800e360:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
}
 800e364:	4618      	mov	r0, r3
 800e366:	46bd      	mov	sp, r7
 800e368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e36c:	4770      	bx	lr
 800e36e:	bf00      	nop
 800e370:	40021000 	.word	0x40021000

0800e374 <LL_RCC_GetLPUARTClockFreq>:
  *         @arg @ref LL_RCC_LPUART1_CLKSOURCE
  * @retval LPUART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetLPUARTClockFreq(uint32_t LPUARTxSource)
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b084      	sub	sp, #16
 800e378:	af00      	add	r7, sp, #0
 800e37a:	6078      	str	r0, [r7, #4]
  uint32_t lpuart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800e37c:	2300      	movs	r3, #0
 800e37e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_LPUART_CLKSOURCE(LPUARTxSource));

  /* LPUART1CLK clock frequency */
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
 800e380:	6878      	ldr	r0, [r7, #4]
 800e382:	f7ff ffad 	bl	800e2e0 <LL_RCC_GetLPUARTClockSource>
 800e386:	4603      	mov	r3, r0
 800e388:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e38c:	d015      	beq.n	800e3ba <LL_RCC_GetLPUARTClockFreq+0x46>
 800e38e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800e392:	d81b      	bhi.n	800e3cc <LL_RCC_GetLPUARTClockFreq+0x58>
 800e394:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e398:	d003      	beq.n	800e3a2 <LL_RCC_GetLPUARTClockFreq+0x2e>
 800e39a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800e39e:	d004      	beq.n	800e3aa <LL_RCC_GetLPUARTClockFreq+0x36>
 800e3a0:	e014      	b.n	800e3cc <LL_RCC_GetLPUARTClockFreq+0x58>
  {
    case LL_RCC_LPUART1_CLKSOURCE_SYSCLK: /* LPUART1 Clock is System Clock */
      lpuart_frequency = RCC_GetSystemClockFreq();
 800e3a2:	f000 f829 	bl	800e3f8 <RCC_GetSystemClockFreq>
 800e3a6:	60f8      	str	r0, [r7, #12]
      break;
 800e3a8:	e01f      	b.n	800e3ea <LL_RCC_GetLPUARTClockFreq+0x76>

    case LL_RCC_LPUART1_CLKSOURCE_HSI:    /* LPUART1 Clock is HSI Osc. */
      if (LL_RCC_HSI_IsReady() != 0U)
 800e3aa:	f7ff ff47 	bl	800e23c <LL_RCC_HSI_IsReady>
 800e3ae:	4603      	mov	r3, r0
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	d017      	beq.n	800e3e4 <LL_RCC_GetLPUARTClockFreq+0x70>
      {
        lpuart_frequency = HSI_VALUE;
 800e3b4:	4b0f      	ldr	r3, [pc, #60]	@ (800e3f4 <LL_RCC_GetLPUARTClockFreq+0x80>)
 800e3b6:	60fb      	str	r3, [r7, #12]
      }
      break;
 800e3b8:	e014      	b.n	800e3e4 <LL_RCC_GetLPUARTClockFreq+0x70>

    case LL_RCC_LPUART1_CLKSOURCE_LSE:    /* LPUART1 Clock is LSE Osc. */
      if (LL_RCC_LSE_IsReady() != 0U)
 800e3ba:	f7ff ff53 	bl	800e264 <LL_RCC_LSE_IsReady>
 800e3be:	4603      	mov	r3, r0
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d011      	beq.n	800e3e8 <LL_RCC_GetLPUARTClockFreq+0x74>
      {
        lpuart_frequency = LSE_VALUE;
 800e3c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800e3c8:	60fb      	str	r3, [r7, #12]
      }
      break;
 800e3ca:	e00d      	b.n	800e3e8 <LL_RCC_GetLPUARTClockFreq+0x74>

    case LL_RCC_LPUART1_CLKSOURCE_PCLK1:  /* LPUART1 Clock is PCLK1 */
    default:
      lpuart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800e3cc:	f000 f814 	bl	800e3f8 <RCC_GetSystemClockFreq>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	4618      	mov	r0, r3
 800e3d4:	f000 f836 	bl	800e444 <RCC_GetHCLKClockFreq>
 800e3d8:	4603      	mov	r3, r0
 800e3da:	4618      	mov	r0, r3
 800e3dc:	f000 f84a 	bl	800e474 <RCC_GetPCLK1ClockFreq>
 800e3e0:	60f8      	str	r0, [r7, #12]
      break;
 800e3e2:	e002      	b.n	800e3ea <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800e3e4:	bf00      	nop
 800e3e6:	e000      	b.n	800e3ea <LL_RCC_GetLPUARTClockFreq+0x76>
      break;
 800e3e8:	bf00      	nop
  }

  return lpuart_frequency;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
}
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	3710      	adds	r7, #16
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	00f42400 	.word	0x00f42400

0800e3f8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800e3fe:	f7ff ff45 	bl	800e28c <LL_RCC_GetSysClkSource>
 800e402:	4603      	mov	r3, r0
 800e404:	2b0c      	cmp	r3, #12
 800e406:	d00c      	beq.n	800e422 <RCC_GetSystemClockFreq+0x2a>
 800e408:	2b0c      	cmp	r3, #12
 800e40a:	d80e      	bhi.n	800e42a <RCC_GetSystemClockFreq+0x32>
 800e40c:	2b04      	cmp	r3, #4
 800e40e:	d002      	beq.n	800e416 <RCC_GetSystemClockFreq+0x1e>
 800e410:	2b08      	cmp	r3, #8
 800e412:	d003      	beq.n	800e41c <RCC_GetSystemClockFreq+0x24>
 800e414:	e009      	b.n	800e42a <RCC_GetSystemClockFreq+0x32>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800e416:	4b09      	ldr	r3, [pc, #36]	@ (800e43c <RCC_GetSystemClockFreq+0x44>)
 800e418:	607b      	str	r3, [r7, #4]
      break;
 800e41a:	e009      	b.n	800e430 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800e41c:	4b08      	ldr	r3, [pc, #32]	@ (800e440 <RCC_GetSystemClockFreq+0x48>)
 800e41e:	607b      	str	r3, [r7, #4]
      break;
 800e420:	e006      	b.n	800e430 <RCC_GetSystemClockFreq+0x38>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800e422:	f000 f83d 	bl	800e4a0 <RCC_PLL_GetFreqDomain_SYS>
 800e426:	6078      	str	r0, [r7, #4]
      break;
 800e428:	e002      	b.n	800e430 <RCC_GetSystemClockFreq+0x38>

    default:
      frequency = HSI_VALUE;
 800e42a:	4b04      	ldr	r3, [pc, #16]	@ (800e43c <RCC_GetSystemClockFreq+0x44>)
 800e42c:	607b      	str	r3, [r7, #4]
      break;
 800e42e:	bf00      	nop
  }

  return frequency;
 800e430:	687b      	ldr	r3, [r7, #4]
}
 800e432:	4618      	mov	r0, r3
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	00f42400 	.word	0x00f42400
 800e440:	016e3600 	.word	0x016e3600

0800e444 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800e444:	b580      	push	{r7, lr}
 800e446:	b082      	sub	sp, #8
 800e448:	af00      	add	r7, sp, #0
 800e44a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 800e44c:	f7ff ff2c 	bl	800e2a8 <LL_RCC_GetAHBPrescaler>
 800e450:	4603      	mov	r3, r0
 800e452:	091b      	lsrs	r3, r3, #4
 800e454:	f003 030f 	and.w	r3, r3, #15
 800e458:	4a05      	ldr	r2, [pc, #20]	@ (800e470 <RCC_GetHCLKClockFreq+0x2c>)
 800e45a:	5cd3      	ldrb	r3, [r2, r3]
 800e45c:	f003 031f 	and.w	r3, r3, #31
 800e460:	687a      	ldr	r2, [r7, #4]
 800e462:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e466:	4618      	mov	r0, r3
 800e468:	3708      	adds	r7, #8
 800e46a:	46bd      	mov	sp, r7
 800e46c:	bd80      	pop	{r7, pc}
 800e46e:	bf00      	nop
 800e470:	0801b884 	.word	0x0801b884

0800e474 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800e474:	b580      	push	{r7, lr}
 800e476:	b082      	sub	sp, #8
 800e478:	af00      	add	r7, sp, #0
 800e47a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 800e47c:	f7ff ff22 	bl	800e2c4 <LL_RCC_GetAPB1Prescaler>
 800e480:	4603      	mov	r3, r0
 800e482:	0a1b      	lsrs	r3, r3, #8
 800e484:	4a05      	ldr	r2, [pc, #20]	@ (800e49c <RCC_GetPCLK1ClockFreq+0x28>)
 800e486:	5cd3      	ldrb	r3, [r2, r3]
 800e488:	f003 031f 	and.w	r3, r3, #31
 800e48c:	687a      	ldr	r2, [r7, #4]
 800e48e:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e492:	4618      	mov	r0, r3
 800e494:	3708      	adds	r7, #8
 800e496:	46bd      	mov	sp, r7
 800e498:	bd80      	pop	{r7, pc}
 800e49a:	bf00      	nop
 800e49c:	0801b894 	.word	0x0801b894

0800e4a0 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800e4a0:	b590      	push	{r4, r7, lr}
 800e4a2:	b083      	sub	sp, #12
 800e4a4:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800e4a6:	f7ff ff2d 	bl	800e304 <LL_RCC_PLL_GetMainSource>
 800e4aa:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800e4ac:	683b      	ldr	r3, [r7, #0]
 800e4ae:	2b02      	cmp	r3, #2
 800e4b0:	d003      	beq.n	800e4ba <RCC_PLL_GetFreqDomain_SYS+0x1a>
 800e4b2:	683b      	ldr	r3, [r7, #0]
 800e4b4:	2b03      	cmp	r3, #3
 800e4b6:	d003      	beq.n	800e4c0 <RCC_PLL_GetFreqDomain_SYS+0x20>
 800e4b8:	e005      	b.n	800e4c6 <RCC_PLL_GetFreqDomain_SYS+0x26>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800e4ba:	4b11      	ldr	r3, [pc, #68]	@ (800e500 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800e4bc:	607b      	str	r3, [r7, #4]
      break;
 800e4be:	e005      	b.n	800e4cc <RCC_PLL_GetFreqDomain_SYS+0x2c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800e4c0:	4b10      	ldr	r3, [pc, #64]	@ (800e504 <RCC_PLL_GetFreqDomain_SYS+0x64>)
 800e4c2:	607b      	str	r3, [r7, #4]
      break;
 800e4c4:	e002      	b.n	800e4cc <RCC_PLL_GetFreqDomain_SYS+0x2c>

    default:
      pllinputfreq = HSI_VALUE;
 800e4c6:	4b0e      	ldr	r3, [pc, #56]	@ (800e500 <RCC_PLL_GetFreqDomain_SYS+0x60>)
 800e4c8:	607b      	str	r3, [r7, #4]
      break;
 800e4ca:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800e4cc:	f7ff ff28 	bl	800e320 <LL_RCC_PLL_GetN>
 800e4d0:	4602      	mov	r2, r0
 800e4d2:	687b      	ldr	r3, [r7, #4]
 800e4d4:	fb03 f402 	mul.w	r4, r3, r2
 800e4d8:	f7ff ff3e 	bl	800e358 <LL_RCC_PLL_GetDivider>
 800e4dc:	4603      	mov	r3, r0
 800e4de:	091b      	lsrs	r3, r3, #4
 800e4e0:	3301      	adds	r3, #1
 800e4e2:	fbb4 f4f3 	udiv	r4, r4, r3
 800e4e6:	f7ff ff29 	bl	800e33c <LL_RCC_PLL_GetR>
 800e4ea:	4603      	mov	r3, r0
 800e4ec:	0e5b      	lsrs	r3, r3, #25
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	005b      	lsls	r3, r3, #1
 800e4f2:	fbb4 f3f3 	udiv	r3, r4, r3
                                   LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	370c      	adds	r7, #12
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd90      	pop	{r4, r7, pc}
 800e4fe:	bf00      	nop
 800e500:	00f42400 	.word	0x00f42400
 800e504:	016e3600 	.word	0x016e3600

0800e508 <LL_UCPD_Disable>:
  * @rmtoll CFG1          UCPDEN           LL_UCPD_Disable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_Disable(UCPD_TypeDef *UCPDx)
{
 800e508:	b480      	push	{r7}
 800e50a:	b083      	sub	sp, #12
 800e50c:	af00      	add	r7, sp, #0
 800e50e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e510:	687b      	ldr	r3, [r7, #4]
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	601a      	str	r2, [r3, #0]
}
 800e51c:	bf00      	nop
 800e51e:	370c      	adds	r7, #12
 800e520:	46bd      	mov	sp, r7
 800e522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e526:	4770      	bx	lr

0800e528 <LL_APB1_GRP2_EnableClock>:
{
 800e528:	b480      	push	{r7}
 800e52a:	b085      	sub	sp, #20
 800e52c:	af00      	add	r7, sp, #0
 800e52e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 800e530:	4b08      	ldr	r3, [pc, #32]	@ (800e554 <LL_APB1_GRP2_EnableClock+0x2c>)
 800e532:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e534:	4907      	ldr	r1, [pc, #28]	@ (800e554 <LL_APB1_GRP2_EnableClock+0x2c>)
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	4313      	orrs	r3, r2
 800e53a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 800e53c:	4b05      	ldr	r3, [pc, #20]	@ (800e554 <LL_APB1_GRP2_EnableClock+0x2c>)
 800e53e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800e540:	687b      	ldr	r3, [r7, #4]
 800e542:	4013      	ands	r3, r2
 800e544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e546:	68fb      	ldr	r3, [r7, #12]
}
 800e548:	bf00      	nop
 800e54a:	3714      	adds	r7, #20
 800e54c:	46bd      	mov	sp, r7
 800e54e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e552:	4770      	bx	lr
 800e554:	40021000 	.word	0x40021000

0800e558 <LL_UCPD_Init>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure that contains
  *         the configuration information for the UCPD peripheral.
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_UCPD_Init(UCPD_TypeDef *UCPDx, const LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800e558:	b580      	push	{r7, lr}
 800e55a:	b082      	sub	sp, #8
 800e55c:	af00      	add	r7, sp, #0
 800e55e:	6078      	str	r0, [r7, #4]
 800e560:	6039      	str	r1, [r7, #0]
  /* Check the ucpd Instance UCPDx*/
  assert_param(IS_UCPD_ALL_INSTANCE(UCPDx));

  if (UCPD1 == UCPDx)
 800e562:	687b      	ldr	r3, [r7, #4]
 800e564:	4a11      	ldr	r2, [pc, #68]	@ (800e5ac <LL_UCPD_Init+0x54>)
 800e566:	4293      	cmp	r3, r2
 800e568:	d103      	bne.n	800e572 <LL_UCPD_Init+0x1a>
  {
    LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 800e56a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800e56e:	f7ff ffdb 	bl	800e528 <LL_APB1_GRP2_EnableClock>
  }


  LL_UCPD_Disable(UCPDx);
 800e572:	6878      	ldr	r0, [r7, #4]
 800e574:	f7ff ffc8 	bl	800e508 <LL_UCPD_Disable>

  /*---------------------------- UCPDx CFG1 Configuration ------------------------*/
  MODIFY_REG(UCPDx->CFG1,
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	681a      	ldr	r2, [r3, #0]
 800e57c:	4b0c      	ldr	r3, [pc, #48]	@ (800e5b0 <LL_UCPD_Init+0x58>)
 800e57e:	4013      	ands	r3, r2
 800e580:	683a      	ldr	r2, [r7, #0]
 800e582:	6811      	ldr	r1, [r2, #0]
 800e584:	683a      	ldr	r2, [r7, #0]
 800e586:	6852      	ldr	r2, [r2, #4]
 800e588:	02d2      	lsls	r2, r2, #11
 800e58a:	4311      	orrs	r1, r2
 800e58c:	683a      	ldr	r2, [r7, #0]
 800e58e:	6892      	ldr	r2, [r2, #8]
 800e590:	0192      	lsls	r2, r2, #6
 800e592:	4311      	orrs	r1, r2
 800e594:	683a      	ldr	r2, [r7, #0]
 800e596:	68d2      	ldr	r2, [r2, #12]
 800e598:	430a      	orrs	r2, r1
 800e59a:	431a      	orrs	r2, r3
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	601a      	str	r2, [r3, #0]
             UCPD_CFG1_PSC_UCPDCLK | UCPD_CFG1_TRANSWIN | UCPD_CFG1_IFRGAP | UCPD_CFG1_HBITCLKDIV,
             UCPD_InitStruct->psc_ucpdclk | (UCPD_InitStruct->transwin  << UCPD_CFG1_TRANSWIN_Pos) |
             (UCPD_InitStruct->IfrGap << UCPD_CFG1_IFRGAP_Pos) | UCPD_InitStruct->HbitClockDiv);

  return SUCCESS;
 800e5a0:	2300      	movs	r3, #0
}
 800e5a2:	4618      	mov	r0, r3
 800e5a4:	3708      	adds	r7, #8
 800e5a6:	46bd      	mov	sp, r7
 800e5a8:	bd80      	pop	{r7, pc}
 800e5aa:	bf00      	nop
 800e5ac:	4000a000 	.word	0x4000a000
 800e5b0:	fff10000 	.word	0xfff10000

0800e5b4 <LL_UCPD_StructInit>:
  * @param  UCPD_InitStruct pointer to a @ref LL_UCPD_InitTypeDef structure
  *         whose fields will be set to default values.
  * @retval None
  */
void LL_UCPD_StructInit(LL_UCPD_InitTypeDef *UCPD_InitStruct)
{
 800e5b4:	b480      	push	{r7}
 800e5b6:	b083      	sub	sp, #12
 800e5b8:	af00      	add	r7, sp, #0
 800e5ba:	6078      	str	r0, [r7, #4]
  /* Set UCPD_InitStruct fields to default values */
  UCPD_InitStruct->psc_ucpdclk  = LL_UCPD_PSC_DIV2;
 800e5bc:	687b      	ldr	r3, [r7, #4]
 800e5be:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e5c2:	601a      	str	r2, [r3, #0]
  UCPD_InitStruct->transwin     = 0x7;   /* Divide by 8                     */
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	2207      	movs	r2, #7
 800e5c8:	605a      	str	r2, [r3, #4]
  UCPD_InitStruct->IfrGap       = 0x10;  /* Divide by 17                    */
 800e5ca:	687b      	ldr	r3, [r7, #4]
 800e5cc:	2210      	movs	r2, #16
 800e5ce:	609a      	str	r2, [r3, #8]
  UCPD_InitStruct->HbitClockDiv = 0x0D;  /* Divide by 14 to produce HBITCLK */
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	220d      	movs	r2, #13
 800e5d4:	60da      	str	r2, [r3, #12]
}
 800e5d6:	bf00      	nop
 800e5d8:	370c      	adds	r7, #12
 800e5da:	46bd      	mov	sp, r7
 800e5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e0:	4770      	bx	lr
	...

0800e5e4 <USBPD_TRACE_Init>:

/** @addtogroup USBPD_CORE_TRACE_Exported_Functions
  * @{
  */
void USBPD_TRACE_Init(void)
{
 800e5e4:	b580      	push	{r7, lr}
 800e5e6:	af00      	add	r7, sp, #0
    'T', 'R', 'A', 'C', 'E', ' ', 'O', 'V', 'E', 'R', '_', 'F', 'L', 'O', 'W', /* Data */
    TLV_EOF, TLV_EOF, TLV_EOF, TLV_EOF                                         /* Buffer end */
  };

  /* initialize tracer module */
  TRACER_EMB_Init();
 800e5e8:	f00a fe9c 	bl	8019324 <TRACER_EMB_Init>

  /* Initialize PE trace */
  USBPD_PE_SetTrace(USBPD_TRACE_Add, 3u);
 800e5ec:	2103      	movs	r1, #3
 800e5ee:	4804      	ldr	r0, [pc, #16]	@ (800e600 <USBPD_TRACE_Init+0x1c>)
 800e5f0:	f7f2 ff1c 	bl	800142c <USBPD_PE_SetTrace>

  /* Initialize the overflow detection */
  (void)TRACER_EMB_EnableOverFlow(OverFlow_String, (uint8_t)sizeof(OverFlow_String));
 800e5f4:	2123      	movs	r1, #35	@ 0x23
 800e5f6:	4803      	ldr	r0, [pc, #12]	@ (800e604 <USBPD_TRACE_Init+0x20>)
 800e5f8:	f00a ff16 	bl	8019428 <TRACER_EMB_EnableOverFlow>
#else
  return;
#endif /* _TRACE */
}
 800e5fc:	bf00      	nop
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	0800e609 	.word	0x0800e609
 800e604:	0801b948 	.word	0x0801b948

0800e608 <USBPD_TRACE_Add>:
  /* Nothing to do */
  return;
}

void  USBPD_TRACE_Add(TRACE_EVENT Type, uint8_t PortNum, uint8_t Sop, uint8_t *Ptr, uint32_t Size)
{
 800e608:	b580      	push	{r7, lr}
 800e60a:	b086      	sub	sp, #24
 800e60c:	af00      	add	r7, sp, #0
 800e60e:	603b      	str	r3, [r7, #0]
 800e610:	4603      	mov	r3, r0
 800e612:	71fb      	strb	r3, [r7, #7]
 800e614:	460b      	mov	r3, r1
 800e616:	71bb      	strb	r3, [r7, #6]
 800e618:	4613      	mov	r3, r2
 800e61a:	717b      	strb	r3, [r7, #5]
  uint32_t _time;
  int32_t _allocation;
  uint16_t index;

  /*  Get trace timing */
  _time = HAL_GetTick();
 800e61c:	f7fb faa2 	bl	8009b64 <HAL_GetTick>
 800e620:	6138      	str	r0, [r7, #16]

  TRACER_EMB_Lock();
 800e622:	f00a ff65 	bl	80194f0 <TRACER_EMB_Lock>

  /* Data are encapsulate inside a TLV string*/
  /* Allocate buffer Size */
  _allocation = TRACER_EMB_AllocateBufer(Size + TRACE_SIZE_HEADER_TRACE +
 800e626:	6a3b      	ldr	r3, [r7, #32]
 800e628:	3314      	adds	r3, #20
 800e62a:	4618      	mov	r0, r3
 800e62c:	f00a fffc 	bl	8019628 <TRACER_EMB_AllocateBufer>
 800e630:	60f8      	str	r0, [r7, #12]
                                         TLV_HEADER_SIZE + TLV_SOF_SIZE + TLV_EOF_SIZE);

  /* Check allocation */
  if (_allocation  != -1)
 800e632:	68fb      	ldr	r3, [r7, #12]
 800e634:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e638:	f000 80bd 	beq.w	800e7b6 <USBPD_TRACE_Add+0x1ae>
  {
    uint16_t _writepos = (uint16_t)_allocation;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	82bb      	strh	r3, [r7, #20]

    /* Copy SOF bytes */
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800e640:	2300      	movs	r3, #0
 800e642:	82fb      	strh	r3, [r7, #22]
 800e644:	e00a      	b.n	800e65c <USBPD_TRACE_Add+0x54>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_SOF);
 800e646:	8abb      	ldrh	r3, [r7, #20]
 800e648:	21fd      	movs	r1, #253	@ 0xfd
 800e64a:	4618      	mov	r0, r3
 800e64c:	f00a fec6 	bl	80193dc <TRACER_EMB_WriteData>
 800e650:	8abb      	ldrh	r3, [r7, #20]
 800e652:	3301      	adds	r3, #1
 800e654:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < TLV_SOF_SIZE; index++)
 800e656:	8afb      	ldrh	r3, [r7, #22]
 800e658:	3301      	adds	r3, #1
 800e65a:	82fb      	strh	r3, [r7, #22]
 800e65c:	8afb      	ldrh	r3, [r7, #22]
 800e65e:	2b03      	cmp	r3, #3
 800e660:	d9f1      	bls.n	800e646 <USBPD_TRACE_Add+0x3e>
    }
    /* Copy the TAG */
    TRACER_EMB_WRITE_DATA(_writepos, TRACE_SET_TAG_ID((PortNum + 1u), DEBUG_STACK_MESSAGE));
 800e662:	79bb      	ldrb	r3, [r7, #6]
 800e664:	3301      	adds	r3, #1
 800e666:	b2db      	uxtb	r3, r3
 800e668:	015b      	lsls	r3, r3, #5
 800e66a:	b2db      	uxtb	r3, r3
 800e66c:	f043 0312 	orr.w	r3, r3, #18
 800e670:	b2da      	uxtb	r2, r3
 800e672:	8abb      	ldrh	r3, [r7, #20]
 800e674:	4611      	mov	r1, r2
 800e676:	4618      	mov	r0, r3
 800e678:	f00a feb0 	bl	80193dc <TRACER_EMB_WriteData>
 800e67c:	8abb      	ldrh	r3, [r7, #20]
 800e67e:	3301      	adds	r3, #1
 800e680:	82bb      	strh	r3, [r7, #20]
    /* Copy the LENGTH */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)((Size + TRACE_SIZE_HEADER_TRACE) >> 8u));
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	3309      	adds	r3, #9
 800e686:	0a1b      	lsrs	r3, r3, #8
 800e688:	b2da      	uxtb	r2, r3
 800e68a:	8abb      	ldrh	r3, [r7, #20]
 800e68c:	4611      	mov	r1, r2
 800e68e:	4618      	mov	r0, r3
 800e690:	f00a fea4 	bl	80193dc <TRACER_EMB_WriteData>
 800e694:	8abb      	ldrh	r3, [r7, #20]
 800e696:	3301      	adds	r3, #1
 800e698:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size + TRACE_SIZE_HEADER_TRACE));
 800e69a:	6a3b      	ldr	r3, [r7, #32]
 800e69c:	b2db      	uxtb	r3, r3
 800e69e:	3309      	adds	r3, #9
 800e6a0:	b2da      	uxtb	r2, r3
 800e6a2:	8abb      	ldrh	r3, [r7, #20]
 800e6a4:	4611      	mov	r1, r2
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	f00a fe98 	bl	80193dc <TRACER_EMB_WriteData>
 800e6ac:	8abb      	ldrh	r3, [r7, #20]
 800e6ae:	3301      	adds	r3, #1
 800e6b0:	82bb      	strh	r3, [r7, #20]

    /* Trace type */
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Type);
 800e6b2:	79fa      	ldrb	r2, [r7, #7]
 800e6b4:	8abb      	ldrh	r3, [r7, #20]
 800e6b6:	4611      	mov	r1, r2
 800e6b8:	4618      	mov	r0, r3
 800e6ba:	f00a fe8f 	bl	80193dc <TRACER_EMB_WriteData>
 800e6be:	8abb      	ldrh	r3, [r7, #20]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)_time);
 800e6c4:	693b      	ldr	r3, [r7, #16]
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	8abb      	ldrh	r3, [r7, #20]
 800e6ca:	4611      	mov	r1, r2
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	f00a fe85 	bl	80193dc <TRACER_EMB_WriteData>
 800e6d2:	8abb      	ldrh	r3, [r7, #20]
 800e6d4:	3301      	adds	r3, #1
 800e6d6:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 8u));
 800e6d8:	693b      	ldr	r3, [r7, #16]
 800e6da:	0a1b      	lsrs	r3, r3, #8
 800e6dc:	b2da      	uxtb	r2, r3
 800e6de:	8abb      	ldrh	r3, [r7, #20]
 800e6e0:	4611      	mov	r1, r2
 800e6e2:	4618      	mov	r0, r3
 800e6e4:	f00a fe7a 	bl	80193dc <TRACER_EMB_WriteData>
 800e6e8:	8abb      	ldrh	r3, [r7, #20]
 800e6ea:	3301      	adds	r3, #1
 800e6ec:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 16u));
 800e6ee:	693b      	ldr	r3, [r7, #16]
 800e6f0:	0c1b      	lsrs	r3, r3, #16
 800e6f2:	b2da      	uxtb	r2, r3
 800e6f4:	8abb      	ldrh	r3, [r7, #20]
 800e6f6:	4611      	mov	r1, r2
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f00a fe6f 	bl	80193dc <TRACER_EMB_WriteData>
 800e6fe:	8abb      	ldrh	r3, [r7, #20]
 800e700:	3301      	adds	r3, #1
 800e702:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(_time >> 24u));
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	0e1b      	lsrs	r3, r3, #24
 800e708:	b2da      	uxtb	r2, r3
 800e70a:	8abb      	ldrh	r3, [r7, #20]
 800e70c:	4611      	mov	r1, r2
 800e70e:	4618      	mov	r0, r3
 800e710:	f00a fe64 	bl	80193dc <TRACER_EMB_WriteData>
 800e714:	8abb      	ldrh	r3, [r7, #20]
 800e716:	3301      	adds	r3, #1
 800e718:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, PortNum);
 800e71a:	79ba      	ldrb	r2, [r7, #6]
 800e71c:	8abb      	ldrh	r3, [r7, #20]
 800e71e:	4611      	mov	r1, r2
 800e720:	4618      	mov	r0, r3
 800e722:	f00a fe5b 	bl	80193dc <TRACER_EMB_WriteData>
 800e726:	8abb      	ldrh	r3, [r7, #20]
 800e728:	3301      	adds	r3, #1
 800e72a:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, Sop);
 800e72c:	797a      	ldrb	r2, [r7, #5]
 800e72e:	8abb      	ldrh	r3, [r7, #20]
 800e730:	4611      	mov	r1, r2
 800e732:	4618      	mov	r0, r3
 800e734:	f00a fe52 	bl	80193dc <TRACER_EMB_WriteData>
 800e738:	8abb      	ldrh	r3, [r7, #20]
 800e73a:	3301      	adds	r3, #1
 800e73c:	82bb      	strh	r3, [r7, #20]

    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)(Size >> 8u));
 800e73e:	6a3b      	ldr	r3, [r7, #32]
 800e740:	0a1b      	lsrs	r3, r3, #8
 800e742:	b2da      	uxtb	r2, r3
 800e744:	8abb      	ldrh	r3, [r7, #20]
 800e746:	4611      	mov	r1, r2
 800e748:	4618      	mov	r0, r3
 800e74a:	f00a fe47 	bl	80193dc <TRACER_EMB_WriteData>
 800e74e:	8abb      	ldrh	r3, [r7, #20]
 800e750:	3301      	adds	r3, #1
 800e752:	82bb      	strh	r3, [r7, #20]
    TRACER_EMB_WRITE_DATA(_writepos, (uint8_t)Size);
 800e754:	6a3b      	ldr	r3, [r7, #32]
 800e756:	b2da      	uxtb	r2, r3
 800e758:	8abb      	ldrh	r3, [r7, #20]
 800e75a:	4611      	mov	r1, r2
 800e75c:	4618      	mov	r0, r3
 800e75e:	f00a fe3d 	bl	80193dc <TRACER_EMB_WriteData>
 800e762:	8abb      	ldrh	r3, [r7, #20]
 800e764:	3301      	adds	r3, #1
 800e766:	82bb      	strh	r3, [r7, #20]

    /* initialize the Ptr for Read/Write */
    for (index = 0u; index < Size; index++)
 800e768:	2300      	movs	r3, #0
 800e76a:	82fb      	strh	r3, [r7, #22]
 800e76c:	e00e      	b.n	800e78c <USBPD_TRACE_Add+0x184>
    {
      TRACER_EMB_WRITE_DATA(_writepos, Ptr[index]);
 800e76e:	8afb      	ldrh	r3, [r7, #22]
 800e770:	683a      	ldr	r2, [r7, #0]
 800e772:	4413      	add	r3, r2
 800e774:	781a      	ldrb	r2, [r3, #0]
 800e776:	8abb      	ldrh	r3, [r7, #20]
 800e778:	4611      	mov	r1, r2
 800e77a:	4618      	mov	r0, r3
 800e77c:	f00a fe2e 	bl	80193dc <TRACER_EMB_WriteData>
 800e780:	8abb      	ldrh	r3, [r7, #20]
 800e782:	3301      	adds	r3, #1
 800e784:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < Size; index++)
 800e786:	8afb      	ldrh	r3, [r7, #22]
 800e788:	3301      	adds	r3, #1
 800e78a:	82fb      	strh	r3, [r7, #22]
 800e78c:	8afb      	ldrh	r3, [r7, #22]
 800e78e:	6a3a      	ldr	r2, [r7, #32]
 800e790:	429a      	cmp	r2, r3
 800e792:	d8ec      	bhi.n	800e76e <USBPD_TRACE_Add+0x166>
    }

    /* Copy EOF bytes */
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800e794:	2300      	movs	r3, #0
 800e796:	82fb      	strh	r3, [r7, #22]
 800e798:	e00a      	b.n	800e7b0 <USBPD_TRACE_Add+0x1a8>
    {
      TRACER_EMB_WRITE_DATA(_writepos, TLV_EOF);
 800e79a:	8abb      	ldrh	r3, [r7, #20]
 800e79c:	21a5      	movs	r1, #165	@ 0xa5
 800e79e:	4618      	mov	r0, r3
 800e7a0:	f00a fe1c 	bl	80193dc <TRACER_EMB_WriteData>
 800e7a4:	8abb      	ldrh	r3, [r7, #20]
 800e7a6:	3301      	adds	r3, #1
 800e7a8:	82bb      	strh	r3, [r7, #20]
    for (index = 0u; index < TLV_EOF_SIZE; index++)
 800e7aa:	8afb      	ldrh	r3, [r7, #22]
 800e7ac:	3301      	adds	r3, #1
 800e7ae:	82fb      	strh	r3, [r7, #22]
 800e7b0:	8afb      	ldrh	r3, [r7, #22]
 800e7b2:	2b03      	cmp	r3, #3
 800e7b4:	d9f1      	bls.n	800e79a <USBPD_TRACE_Add+0x192>
    }
  }

  TRACER_EMB_UnLock();
 800e7b6:	f00a febb 	bl	8019530 <TRACER_EMB_UnLock>

  TRACER_EMB_SendData();
 800e7ba:	f00a fed9 	bl	8019570 <TRACER_EMB_SendData>
#else
  return;
#endif /* _TRACE */
}
 800e7be:	bf00      	nop
 800e7c0:	3718      	adds	r7, #24
 800e7c2:	46bd      	mov	sp, r7
 800e7c4:	bd80      	pop	{r7, pc}
	...

0800e7c8 <__NVIC_EnableIRQ>:
{
 800e7c8:	b480      	push	{r7}
 800e7ca:	b083      	sub	sp, #12
 800e7cc:	af00      	add	r7, sp, #0
 800e7ce:	4603      	mov	r3, r0
 800e7d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e7d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	db0b      	blt.n	800e7f2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800e7da:	79fb      	ldrb	r3, [r7, #7]
 800e7dc:	f003 021f 	and.w	r2, r3, #31
 800e7e0:	4907      	ldr	r1, [pc, #28]	@ (800e800 <__NVIC_EnableIRQ+0x38>)
 800e7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e7e6:	095b      	lsrs	r3, r3, #5
 800e7e8:	2001      	movs	r0, #1
 800e7ea:	fa00 f202 	lsl.w	r2, r0, r2
 800e7ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800e7f2:	bf00      	nop
 800e7f4:	370c      	adds	r7, #12
 800e7f6:	46bd      	mov	sp, r7
 800e7f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7fc:	4770      	bx	lr
 800e7fe:	bf00      	nop
 800e800:	e000e100 	.word	0xe000e100

0800e804 <__NVIC_SetPriority>:
{
 800e804:	b480      	push	{r7}
 800e806:	b083      	sub	sp, #12
 800e808:	af00      	add	r7, sp, #0
 800e80a:	4603      	mov	r3, r0
 800e80c:	6039      	str	r1, [r7, #0]
 800e80e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e814:	2b00      	cmp	r3, #0
 800e816:	db0a      	blt.n	800e82e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	b2da      	uxtb	r2, r3
 800e81c:	490c      	ldr	r1, [pc, #48]	@ (800e850 <__NVIC_SetPriority+0x4c>)
 800e81e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e822:	0112      	lsls	r2, r2, #4
 800e824:	b2d2      	uxtb	r2, r2
 800e826:	440b      	add	r3, r1
 800e828:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800e82c:	e00a      	b.n	800e844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e82e:	683b      	ldr	r3, [r7, #0]
 800e830:	b2da      	uxtb	r2, r3
 800e832:	4908      	ldr	r1, [pc, #32]	@ (800e854 <__NVIC_SetPriority+0x50>)
 800e834:	79fb      	ldrb	r3, [r7, #7]
 800e836:	f003 030f 	and.w	r3, r3, #15
 800e83a:	3b04      	subs	r3, #4
 800e83c:	0112      	lsls	r2, r2, #4
 800e83e:	b2d2      	uxtb	r2, r2
 800e840:	440b      	add	r3, r1
 800e842:	761a      	strb	r2, [r3, #24]
}
 800e844:	bf00      	nop
 800e846:	370c      	adds	r7, #12
 800e848:	46bd      	mov	sp, r7
 800e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e84e:	4770      	bx	lr
 800e850:	e000e100 	.word	0xe000e100
 800e854:	e000ed00 	.word	0xe000ed00

0800e858 <LL_AHB2_GRP1_EnableClock>:
{
 800e858:	b480      	push	{r7}
 800e85a:	b085      	sub	sp, #20
 800e85c:	af00      	add	r7, sp, #0
 800e85e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800e860:	4b08      	ldr	r3, [pc, #32]	@ (800e884 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e862:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e864:	4907      	ldr	r1, [pc, #28]	@ (800e884 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	4313      	orrs	r3, r2
 800e86a:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800e86c:	4b05      	ldr	r3, [pc, #20]	@ (800e884 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800e86e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	4013      	ands	r3, r2
 800e874:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800e876:	68fb      	ldr	r3, [r7, #12]
}
 800e878:	bf00      	nop
 800e87a:	3714      	adds	r7, #20
 800e87c:	46bd      	mov	sp, r7
 800e87e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e882:	4770      	bx	lr
 800e884:	40021000 	.word	0x40021000

0800e888 <LL_GPIO_SetPinMode>:
{
 800e888:	b480      	push	{r7}
 800e88a:	b08b      	sub	sp, #44	@ 0x2c
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	60f8      	str	r0, [r7, #12]
 800e890:	60b9      	str	r1, [r7, #8]
 800e892:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	681a      	ldr	r2, [r3, #0]
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	fa93 f3a3 	rbit	r3, r3
 800e8a2:	613b      	str	r3, [r7, #16]
  return result;
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800e8a8:	69bb      	ldr	r3, [r7, #24]
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d101      	bne.n	800e8b2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800e8ae:	2320      	movs	r3, #32
 800e8b0:	e003      	b.n	800e8ba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800e8b2:	69bb      	ldr	r3, [r7, #24]
 800e8b4:	fab3 f383 	clz	r3, r3
 800e8b8:	b2db      	uxtb	r3, r3
 800e8ba:	005b      	lsls	r3, r3, #1
 800e8bc:	2103      	movs	r1, #3
 800e8be:	fa01 f303 	lsl.w	r3, r1, r3
 800e8c2:	43db      	mvns	r3, r3
 800e8c4:	401a      	ands	r2, r3
 800e8c6:	68bb      	ldr	r3, [r7, #8]
 800e8c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e8ca:	6a3b      	ldr	r3, [r7, #32]
 800e8cc:	fa93 f3a3 	rbit	r3, r3
 800e8d0:	61fb      	str	r3, [r7, #28]
  return result;
 800e8d2:	69fb      	ldr	r3, [r7, #28]
 800e8d4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800e8d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	d101      	bne.n	800e8e0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800e8dc:	2320      	movs	r3, #32
 800e8de:	e003      	b.n	800e8e8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800e8e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8e2:	fab3 f383 	clz	r3, r3
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	005b      	lsls	r3, r3, #1
 800e8ea:	6879      	ldr	r1, [r7, #4]
 800e8ec:	fa01 f303 	lsl.w	r3, r1, r3
 800e8f0:	431a      	orrs	r2, r3
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	601a      	str	r2, [r3, #0]
}
 800e8f6:	bf00      	nop
 800e8f8:	372c      	adds	r7, #44	@ 0x2c
 800e8fa:	46bd      	mov	sp, r7
 800e8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e900:	4770      	bx	lr

0800e902 <LL_GPIO_SetPinPull>:
{
 800e902:	b480      	push	{r7}
 800e904:	b08b      	sub	sp, #44	@ 0x2c
 800e906:	af00      	add	r7, sp, #0
 800e908:	60f8      	str	r0, [r7, #12]
 800e90a:	60b9      	str	r1, [r7, #8]
 800e90c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	68da      	ldr	r2, [r3, #12]
 800e912:	68bb      	ldr	r3, [r7, #8]
 800e914:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e916:	697b      	ldr	r3, [r7, #20]
 800e918:	fa93 f3a3 	rbit	r3, r3
 800e91c:	613b      	str	r3, [r7, #16]
  return result;
 800e91e:	693b      	ldr	r3, [r7, #16]
 800e920:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800e922:	69bb      	ldr	r3, [r7, #24]
 800e924:	2b00      	cmp	r3, #0
 800e926:	d101      	bne.n	800e92c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800e928:	2320      	movs	r3, #32
 800e92a:	e003      	b.n	800e934 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800e92c:	69bb      	ldr	r3, [r7, #24]
 800e92e:	fab3 f383 	clz	r3, r3
 800e932:	b2db      	uxtb	r3, r3
 800e934:	005b      	lsls	r3, r3, #1
 800e936:	2103      	movs	r1, #3
 800e938:	fa01 f303 	lsl.w	r3, r1, r3
 800e93c:	43db      	mvns	r3, r3
 800e93e:	401a      	ands	r2, r3
 800e940:	68bb      	ldr	r3, [r7, #8]
 800e942:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800e944:	6a3b      	ldr	r3, [r7, #32]
 800e946:	fa93 f3a3 	rbit	r3, r3
 800e94a:	61fb      	str	r3, [r7, #28]
  return result;
 800e94c:	69fb      	ldr	r3, [r7, #28]
 800e94e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800e950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e952:	2b00      	cmp	r3, #0
 800e954:	d101      	bne.n	800e95a <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800e956:	2320      	movs	r3, #32
 800e958:	e003      	b.n	800e962 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800e95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e95c:	fab3 f383 	clz	r3, r3
 800e960:	b2db      	uxtb	r3, r3
 800e962:	005b      	lsls	r3, r3, #1
 800e964:	6879      	ldr	r1, [r7, #4]
 800e966:	fa01 f303 	lsl.w	r3, r1, r3
 800e96a:	431a      	orrs	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	60da      	str	r2, [r3, #12]
}
 800e970:	bf00      	nop
 800e972:	372c      	adds	r7, #44	@ 0x2c
 800e974:	46bd      	mov	sp, r7
 800e976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e97a:	4770      	bx	lr

0800e97c <LL_UCPD_Enable>:
{
 800e97c:	b480      	push	{r7}
 800e97e:	b083      	sub	sp, #12
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800e98c:	687b      	ldr	r3, [r7, #4]
 800e98e:	601a      	str	r2, [r3, #0]
}
 800e990:	bf00      	nop
 800e992:	370c      	adds	r7, #12
 800e994:	46bd      	mov	sp, r7
 800e996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e99a:	4770      	bx	lr

0800e99c <LL_UCPD_SetRxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT1
  *         @arg @ref LL_UCPD_ORDERSET_SOP_EXT2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetRxOrderSet(UCPD_TypeDef *UCPDx, uint32_t OrderSet)
{
 800e99c:	b480      	push	{r7}
 800e99e:	b083      	sub	sp, #12
 800e9a0:	af00      	add	r7, sp, #0
 800e9a2:	6078      	str	r0, [r7, #4]
 800e9a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CFG1, UCPD_CFG1_RXORDSETEN, OrderSet);
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	681b      	ldr	r3, [r3, #0]
 800e9aa:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800e9ae:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800e9b2:	683a      	ldr	r2, [r7, #0]
 800e9b4:	431a      	orrs	r2, r3
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	601a      	str	r2, [r3, #0]
}
 800e9ba:	bf00      	nop
 800e9bc:	370c      	adds	r7, #12
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9c4:	4770      	bx	lr

0800e9c6 <LL_UCPD_SetccEnable>:
  *         @arg @ref LL_UCPD_CCENABLE_CC2
  *         @arg @ref LL_UCPD_CCENABLE_CC1CC2
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_SetccEnable(UCPD_TypeDef *UCPDx, uint32_t CCEnable)
{
 800e9c6:	b480      	push	{r7}
 800e9c8:	b083      	sub	sp, #12
 800e9ca:	af00      	add	r7, sp, #0
 800e9cc:	6078      	str	r0, [r7, #4]
 800e9ce:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	68db      	ldr	r3, [r3, #12]
 800e9d4:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800e9d8:	683b      	ldr	r3, [r7, #0]
 800e9da:	431a      	orrs	r2, r3
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	60da      	str	r2, [r3, #12]
}
 800e9e0:	bf00      	nop
 800e9e2:	370c      	adds	r7, #12
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <LL_UCPD_EnableIT_TypeCEventCC2>:
  * @rmtoll IMR          TYPECEVT2IE        LL_UCPD_EnableIT_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT2IE);
 800e9f4:	687b      	ldr	r3, [r7, #4]
 800e9f6:	691b      	ldr	r3, [r3, #16]
 800e9f8:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	611a      	str	r2, [r3, #16]
}
 800ea00:	bf00      	nop
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <LL_UCPD_EnableIT_TypeCEventCC1>:
  * @rmtoll IMR          TYPECEVT1IE        LL_UCPD_EnableIT_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_EnableIT_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800ea0c:	b480      	push	{r7}
 800ea0e:	b083      	sub	sp, #12
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->IMR, UCPD_IMR_TYPECEVT1IE);
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	611a      	str	r2, [r3, #16]
}
 800ea20:	bf00      	nop
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <LL_PWR_DisableUCPDDeadBattery>:
  *         control to the UCPD (which should therefore be initialized before doing the disable).
  * @rmtoll CR3          UCPD_DBDIS           LL_PWR_DisableUCPDDeadBattery
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableUCPDDeadBattery(void)
{
 800ea2c:	b480      	push	{r7}
 800ea2e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800ea30:	4b05      	ldr	r3, [pc, #20]	@ (800ea48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800ea32:	689b      	ldr	r3, [r3, #8]
 800ea34:	4a04      	ldr	r2, [pc, #16]	@ (800ea48 <LL_PWR_DisableUCPDDeadBattery+0x1c>)
 800ea36:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ea3a:	6093      	str	r3, [r2, #8]
}
 800ea3c:	bf00      	nop
 800ea3e:	46bd      	mov	sp, r7
 800ea40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea44:	4770      	bx	lr
 800ea46:	bf00      	nop
 800ea48:	40007000 	.word	0x40007000

0800ea4c <CAD_Init>:
  * @param  pParams       Pointer on PD parameters based on @ref USBPD_ParamsTypeDef
  * @param  WakeUp        Wake-up callback function used for waking up CAD
  * @retval None
  */
void CAD_Init(uint8_t PortNum, USBPD_SettingsTypeDef *pSettings, USBPD_ParamsTypeDef *pParams,  void (*WakeUp)(void))
{
 800ea4c:	b590      	push	{r4, r7, lr}
 800ea4e:	b08b      	sub	sp, #44	@ 0x2c
 800ea50:	af00      	add	r7, sp, #0
 800ea52:	60b9      	str	r1, [r7, #8]
 800ea54:	607a      	str	r2, [r7, #4]
 800ea56:	603b      	str	r3, [r7, #0]
 800ea58:	4603      	mov	r3, r0
 800ea5a:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ea5c:	7bfa      	ldrb	r2, [r7, #15]
 800ea5e:	4613      	mov	r3, r2
 800ea60:	005b      	lsls	r3, r3, #1
 800ea62:	4413      	add	r3, r2
 800ea64:	009b      	lsls	r3, r3, #2
 800ea66:	4a7a      	ldr	r2, [pc, #488]	@ (800ec50 <CAD_Init+0x204>)
 800ea68:	4413      	add	r3, r2
 800ea6a:	627b      	str	r3, [r7, #36]	@ 0x24
  LL_UCPD_InitTypeDef settings;

  Ports[PortNum].params = pParams;
 800ea6c:	7bfa      	ldrb	r2, [r7, #15]
 800ea6e:	4979      	ldr	r1, [pc, #484]	@ (800ec54 <CAD_Init+0x208>)
 800ea70:	4613      	mov	r3, r2
 800ea72:	011b      	lsls	r3, r3, #4
 800ea74:	1a9b      	subs	r3, r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	440b      	add	r3, r1
 800ea7a:	3310      	adds	r3, #16
 800ea7c:	687a      	ldr	r2, [r7, #4]
 800ea7e:	601a      	str	r2, [r3, #0]
  Ports[PortNum].settings = pSettings;
 800ea80:	7bfa      	ldrb	r2, [r7, #15]
 800ea82:	4974      	ldr	r1, [pc, #464]	@ (800ec54 <CAD_Init+0x208>)
 800ea84:	4613      	mov	r3, r2
 800ea86:	011b      	lsls	r3, r3, #4
 800ea88:	1a9b      	subs	r3, r3, r2
 800ea8a:	009b      	lsls	r3, r3, #2
 800ea8c:	440b      	add	r3, r1
 800ea8e:	330c      	adds	r3, #12
 800ea90:	68ba      	ldr	r2, [r7, #8]
 800ea92:	601a      	str	r2, [r3, #0]
  Ports[PortNum].params->RpResistor = Ports[PortNum].settings->CAD_DefaultResistor;
 800ea94:	7bfa      	ldrb	r2, [r7, #15]
 800ea96:	496f      	ldr	r1, [pc, #444]	@ (800ec54 <CAD_Init+0x208>)
 800ea98:	4613      	mov	r3, r2
 800ea9a:	011b      	lsls	r3, r3, #4
 800ea9c:	1a9b      	subs	r3, r3, r2
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	440b      	add	r3, r1
 800eaa2:	330c      	adds	r3, #12
 800eaa4:	6819      	ldr	r1, [r3, #0]
 800eaa6:	7bfa      	ldrb	r2, [r7, #15]
 800eaa8:	486a      	ldr	r0, [pc, #424]	@ (800ec54 <CAD_Init+0x208>)
 800eaaa:	4613      	mov	r3, r2
 800eaac:	011b      	lsls	r3, r3, #4
 800eaae:	1a9b      	subs	r3, r3, r2
 800eab0:	009b      	lsls	r3, r3, #2
 800eab2:	4403      	add	r3, r0
 800eab4:	3310      	adds	r3, #16
 800eab6:	681a      	ldr	r2, [r3, #0]
 800eab8:	794b      	ldrb	r3, [r1, #5]
 800eaba:	f3c3 1381 	ubfx	r3, r3, #6, #2
 800eabe:	b2d9      	uxtb	r1, r3
 800eac0:	7893      	ldrb	r3, [r2, #2]
 800eac2:	f361 0301 	bfi	r3, r1, #0, #2
 800eac6:	7093      	strb	r3, [r2, #2]
  Ports[PortNum].params->SNKExposedRP_AtAttach = vRd_Undefined;
 800eac8:	7bfa      	ldrb	r2, [r7, #15]
 800eaca:	4962      	ldr	r1, [pc, #392]	@ (800ec54 <CAD_Init+0x208>)
 800eacc:	4613      	mov	r3, r2
 800eace:	011b      	lsls	r3, r3, #4
 800ead0:	1a9b      	subs	r3, r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	440b      	add	r3, r1
 800ead6:	3310      	adds	r3, #16
 800ead8:	681a      	ldr	r2, [r3, #0]
 800eada:	7893      	ldrb	r3, [r2, #2]
 800eadc:	f36f 0383 	bfc	r3, #2, #2
 800eae0:	7093      	strb	r3, [r2, #2]

  /* Reset handle */
  memset(_handle, 0, sizeof(CAD_HW_HandleTypeDef));
 800eae2:	220c      	movs	r2, #12
 800eae4:	2100      	movs	r1, #0
 800eae6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800eae8:	f00b fd8e 	bl	801a608 <memset>

  /* Register CAD wake up callback */
  Ports[PortNum].USBPD_CAD_WakeUp = WakeUp;
 800eaec:	7bfa      	ldrb	r2, [r7, #15]
 800eaee:	4959      	ldr	r1, [pc, #356]	@ (800ec54 <CAD_Init+0x208>)
 800eaf0:	4613      	mov	r3, r2
 800eaf2:	011b      	lsls	r3, r3, #4
 800eaf4:	1a9b      	subs	r3, r3, r2
 800eaf6:	009b      	lsls	r3, r3, #2
 800eaf8:	440b      	add	r3, r1
 800eafa:	332c      	adds	r3, #44	@ 0x2c
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	601a      	str	r2, [r3, #0]

  /* Initialize the USBPD_IP */
  Ports[PortNum].husbpd = USBPD_HW_GetUSPDInstance(PortNum);
 800eb00:	7bfc      	ldrb	r4, [r7, #15]
 800eb02:	7bfb      	ldrb	r3, [r7, #15]
 800eb04:	4618      	mov	r0, r3
 800eb06:	f000 fd37 	bl	800f578 <USBPD_HW_GetUSPDInstance>
 800eb0a:	4602      	mov	r2, r0
 800eb0c:	4951      	ldr	r1, [pc, #324]	@ (800ec54 <CAD_Init+0x208>)
 800eb0e:	4623      	mov	r3, r4
 800eb10:	011b      	lsls	r3, r3, #4
 800eb12:	1b1b      	subs	r3, r3, r4
 800eb14:	009b      	lsls	r3, r3, #2
 800eb16:	440b      	add	r3, r1
 800eb18:	601a      	str	r2, [r3, #0]

  /* Initialize UCPD */
  LL_UCPD_StructInit(&settings);
 800eb1a:	f107 0314 	add.w	r3, r7, #20
 800eb1e:	4618      	mov	r0, r3
 800eb20:	f7ff fd48 	bl	800e5b4 <LL_UCPD_StructInit>
  (void)LL_UCPD_Init(Ports[PortNum].husbpd, &settings);
 800eb24:	7bfa      	ldrb	r2, [r7, #15]
 800eb26:	494b      	ldr	r1, [pc, #300]	@ (800ec54 <CAD_Init+0x208>)
 800eb28:	4613      	mov	r3, r2
 800eb2a:	011b      	lsls	r3, r3, #4
 800eb2c:	1a9b      	subs	r3, r3, r2
 800eb2e:	009b      	lsls	r3, r3, #2
 800eb30:	440b      	add	r3, r1
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	f107 0214 	add.w	r2, r7, #20
 800eb38:	4611      	mov	r1, r2
 800eb3a:	4618      	mov	r0, r3
 800eb3c:	f7ff fd0c 	bl	800e558 <LL_UCPD_Init>
  LL_UCPD_SetRxOrderSet(Ports[PortNum].husbpd,
 800eb40:	7bfa      	ldrb	r2, [r7, #15]
 800eb42:	4944      	ldr	r1, [pc, #272]	@ (800ec54 <CAD_Init+0x208>)
 800eb44:	4613      	mov	r3, r2
 800eb46:	011b      	lsls	r3, r3, #4
 800eb48:	1a9b      	subs	r3, r3, r2
 800eb4a:	009b      	lsls	r3, r3, #2
 800eb4c:	440b      	add	r3, r1
 800eb4e:	681b      	ldr	r3, [r3, #0]
 800eb50:	f04f 71f8 	mov.w	r1, #32505856	@ 0x1f00000
 800eb54:	4618      	mov	r0, r3
 800eb56:	f7ff ff21 	bl	800e99c <LL_UCPD_SetRxOrderSet>
                        LL_UCPD_ORDERSET_SOP | LL_UCPD_ORDERSET_SOP1 | LL_UCPD_ORDERSET_SOP2 |
                        LL_UCPD_ORDERSET_CABLERST | LL_UCPD_ORDERSET_HARDRST);
  /* Controls whether pull-ups and pull-downs controls related to ANAMODE and ANASUBMODE
     should be applied to CC1 and CC2 analog PHYs */
  /* Should be done when UCPDEN is 1 */
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 800eb5a:	7bfa      	ldrb	r2, [r7, #15]
 800eb5c:	493d      	ldr	r1, [pc, #244]	@ (800ec54 <CAD_Init+0x208>)
 800eb5e:	4613      	mov	r3, r2
 800eb60:	011b      	lsls	r3, r3, #4
 800eb62:	1a9b      	subs	r3, r3, r2
 800eb64:	009b      	lsls	r3, r3, #2
 800eb66:	440b      	add	r3, r1
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 800eb6e:	4618      	mov	r0, r3
 800eb70:	f7ff ff29 	bl	800e9c6 <LL_UCPD_SetccEnable>
#ifdef _LOW_POWER
  LL_UCPD_WakeUpEnable(Ports[PortNum].husbpd);
#endif /* _LOW_POWER */

  /* Disable dead battery */
  LL_PWR_DisableUCPDDeadBattery(); /* PWR->CR3 |= (1 << 14); */
 800eb74:	f7ff ff5a 	bl	800ea2c <LL_PWR_DisableUCPDDeadBattery>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB); /* GPIOB enable RCC->AHB2ENR |= 2; */
 800eb78:	2002      	movs	r0, #2
 800eb7a:	f7ff fe6d 	bl	800e858 <LL_AHB2_GRP1_EnableClock>

  /* Set by default UCPD1_CC1 & UCPD1_CC2 in analog mode */
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_6, LL_GPIO_MODE_ANALOG); /* PB6 mode = GP analog => CC1 */
 800eb7e:	2203      	movs	r2, #3
 800eb80:	2140      	movs	r1, #64	@ 0x40
 800eb82:	4835      	ldr	r0, [pc, #212]	@ (800ec58 <CAD_Init+0x20c>)
 800eb84:	f7ff fe80 	bl	800e888 <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinMode(GPIOB, LL_GPIO_PIN_4, LL_GPIO_MODE_ANALOG); /* PB4 mode = GP analog => CC2 */
 800eb88:	2203      	movs	r2, #3
 800eb8a:	2110      	movs	r1, #16
 800eb8c:	4832      	ldr	r0, [pc, #200]	@ (800ec58 <CAD_Init+0x20c>)
 800eb8e:	f7ff fe7b 	bl	800e888 <LL_GPIO_SetPinMode>

  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_6, LL_GPIO_PULL_NO);
 800eb92:	2200      	movs	r2, #0
 800eb94:	2140      	movs	r1, #64	@ 0x40
 800eb96:	4830      	ldr	r0, [pc, #192]	@ (800ec58 <CAD_Init+0x20c>)
 800eb98:	f7ff feb3 	bl	800e902 <LL_GPIO_SetPinPull>
  LL_GPIO_SetPinPull(GPIOB, LL_GPIO_PIN_4, LL_GPIO_PULL_NO);
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	2110      	movs	r1, #16
 800eba0:	482d      	ldr	r0, [pc, #180]	@ (800ec58 <CAD_Init+0x20c>)
 800eba2:	f7ff feae 	bl	800e902 <LL_GPIO_SetPinPull>

  /* Init power */
  BSP_USBPD_PWR_Init(PortNum);
 800eba6:	7bfb      	ldrb	r3, [r7, #15]
 800eba8:	4618      	mov	r0, r3
 800ebaa:	f7f9 ff0f 	bl	80089cc <BSP_USBPD_PWR_Init>

#if defined(TCPP0203_SUPPORT)
  /* Register VBUS detect callback */
  BSP_USBPD_PWR_RegisterVBUSDetectCallback(PortNum, CAD_HW_IF_VBUSDetectCallback);
 800ebae:	7bfb      	ldrb	r3, [r7, #15]
 800ebb0:	492a      	ldr	r1, [pc, #168]	@ (800ec5c <CAD_Init+0x210>)
 800ebb2:	4618      	mov	r0, r3
 800ebb4:	f7fa fa58 	bl	8009068 <BSP_USBPD_PWR_RegisterVBUSDetectCallback>
#endif /* TCPP0203_SUPPORT */

  /* Enable USBPD IP */
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 800ebb8:	7bfa      	ldrb	r2, [r7, #15]
 800ebba:	4926      	ldr	r1, [pc, #152]	@ (800ec54 <CAD_Init+0x208>)
 800ebbc:	4613      	mov	r3, r2
 800ebbe:	011b      	lsls	r3, r3, #4
 800ebc0:	1a9b      	subs	r3, r3, r2
 800ebc2:	009b      	lsls	r3, r3, #2
 800ebc4:	440b      	add	r3, r1
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	4618      	mov	r0, r3
 800ebca:	f7ff fed7 	bl	800e97c <LL_UCPD_Enable>

#if defined(_SRC) || defined(_DRP)
  /* Initialize usbpd interrupt */
  if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800ebce:	7bfa      	ldrb	r2, [r7, #15]
 800ebd0:	4920      	ldr	r1, [pc, #128]	@ (800ec54 <CAD_Init+0x208>)
 800ebd2:	4613      	mov	r3, r2
 800ebd4:	011b      	lsls	r3, r3, #4
 800ebd6:	1a9b      	subs	r3, r3, r2
 800ebd8:	009b      	lsls	r3, r3, #2
 800ebda:	440b      	add	r3, r1
 800ebdc:	3310      	adds	r3, #16
 800ebde:	681b      	ldr	r3, [r3, #0]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	f003 0304 	and.w	r3, r3, #4
 800ebe6:	b2db      	uxtb	r3, r3
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d008      	beq.n	800ebfe <CAD_Init+0x1b2>
  {
    USBPDM1_AssertRp(PortNum);
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	4618      	mov	r0, r3
 800ebf0:	f001 fd34 	bl	801065c <USBPDM1_AssertRp>
#if defined(TCPP0203_SUPPORT)
    /* Switch to Low Power mode */
    BSP_USBPD_PWR_SetPowerMode(PortNum, USBPD_PWR_MODE_LOWPOWER);
 800ebf4:	7bfb      	ldrb	r3, [r7, #15]
 800ebf6:	2102      	movs	r1, #2
 800ebf8:	4618      	mov	r0, r3
 800ebfa:	f7f9 ffcd 	bl	8008b98 <BSP_USBPD_PWR_SetPowerMode>
  else
#endif /* _DRP */
  {
#if defined(_SRC)
    /* If default role is source */
    if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].settings->PE_DefaultRole)
 800ebfe:	7bfa      	ldrb	r2, [r7, #15]
 800ec00:	4914      	ldr	r1, [pc, #80]	@ (800ec54 <CAD_Init+0x208>)
 800ec02:	4613      	mov	r3, r2
 800ec04:	011b      	lsls	r3, r3, #4
 800ec06:	1a9b      	subs	r3, r3, r2
 800ec08:	009b      	lsls	r3, r3, #2
 800ec0a:	440b      	add	r3, r1
 800ec0c:	330c      	adds	r3, #12
 800ec0e:	681b      	ldr	r3, [r3, #0]
 800ec10:	791b      	ldrb	r3, [r3, #4]
 800ec12:	f003 0304 	and.w	r3, r3, #4
 800ec16:	b2db      	uxtb	r3, r3
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d014      	beq.n	800ec46 <CAD_Init+0x1fa>
    {
      /* Set current state machine to SRC state machine */
      _handle->CAD_PtrStateMachine = CAD_StateMachine_SRC;
 800ec1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ec1e:	4a10      	ldr	r2, [pc, #64]	@ (800ec60 <CAD_Init+0x214>)
 800ec20:	609a      	str	r2, [r3, #8]
      _handle->CAD_Accessory_SRC = Ports[PortNum].settings->CAD_AccesorySupport;
 800ec22:	7bfa      	ldrb	r2, [r7, #15]
 800ec24:	490b      	ldr	r1, [pc, #44]	@ (800ec54 <CAD_Init+0x208>)
 800ec26:	4613      	mov	r3, r2
 800ec28:	011b      	lsls	r3, r3, #4
 800ec2a:	1a9b      	subs	r3, r3, r2
 800ec2c:	009b      	lsls	r3, r3, #2
 800ec2e:	440b      	add	r3, r1
 800ec30:	330c      	adds	r3, #12
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	795b      	ldrb	r3, [r3, #5]
 800ec36:	f3c3 1300 	ubfx	r3, r3, #4, #1
 800ec3a:	b2d9      	uxtb	r1, r3
 800ec3c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ec3e:	7853      	ldrb	r3, [r2, #1]
 800ec40:	f361 1386 	bfi	r3, r1, #6, #1
 800ec44:	7053      	strb	r3, [r2, #1]
    _handle->CAD_VPD_SNK = Ports[PortNum].settings->CAD_VPDSupport;
#endif /* USBPDCORE_VPD */
#endif /* _SNK */
  }
#endif  /* USBPDCORE_LIB_NO_PD */
}
 800ec46:	bf00      	nop
 800ec48:	372c      	adds	r7, #44	@ 0x2c
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd90      	pop	{r4, r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	20000af0 	.word	0x20000af0
 800ec54:	20000b08 	.word	0x20000b08
 800ec58:	48000400 	.word	0x48000400
 800ec5c:	0800f4f5 	.word	0x0800f4f5
 800ec60:	0800ed3d 	.word	0x0800ed3d

0800ec64 <CAD_Enter_ErrorRecovery>:
  * @brief  Function to force CAD state machine into error recovery state
  * @param  PortNum Index of current used port
  * @retval None
  */
void CAD_Enter_ErrorRecovery(uint8_t PortNum)
{
 800ec64:	b580      	push	{r7, lr}
 800ec66:	b082      	sub	sp, #8
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	4603      	mov	r3, r0
 800ec6c:	71fb      	strb	r3, [r7, #7]
  /* Remove the ucpd resistor */
  USBPDM1_EnterErrorRecovery(PortNum);
 800ec6e:	79fb      	ldrb	r3, [r7, #7]
 800ec70:	4618      	mov	r0, r3
 800ec72:	f001 fe31 	bl	80108d8 <USBPDM1_EnterErrorRecovery>
  /* Set the error recovery flag to allow the stack to switch into errorRecovery Flag */
  CAD_HW_Handles[PortNum].CAD_ErrorRecoveryflag = USBPD_TRUE;
 800ec76:	79fa      	ldrb	r2, [r7, #7]
 800ec78:	490b      	ldr	r1, [pc, #44]	@ (800eca8 <CAD_Enter_ErrorRecovery+0x44>)
 800ec7a:	4613      	mov	r3, r2
 800ec7c:	005b      	lsls	r3, r3, #1
 800ec7e:	4413      	add	r3, r2
 800ec80:	009b      	lsls	r3, r3, #2
 800ec82:	18ca      	adds	r2, r1, r3
 800ec84:	7813      	ldrb	r3, [r2, #0]
 800ec86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec8a:	7013      	strb	r3, [r2, #0]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ec8c:	79fa      	ldrb	r2, [r7, #7]
 800ec8e:	4907      	ldr	r1, [pc, #28]	@ (800ecac <CAD_Enter_ErrorRecovery+0x48>)
 800ec90:	4613      	mov	r3, r2
 800ec92:	011b      	lsls	r3, r3, #4
 800ec94:	1a9b      	subs	r3, r3, r2
 800ec96:	009b      	lsls	r3, r3, #2
 800ec98:	440b      	add	r3, r1
 800ec9a:	332c      	adds	r3, #44	@ 0x2c
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	4798      	blx	r3
}
 800eca0:	bf00      	nop
 800eca2:	3708      	adds	r7, #8
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}
 800eca8:	20000af0 	.word	0x20000af0
 800ecac:	20000b08 	.word	0x20000b08

0800ecb0 <CAD_SRC_Set_ResistorRp>:
  * @param  PortNum Index of current used port
  * @param  RpValue RP value to set in devices based on @ref CAD_RP_Source_Current_Adv_Typedef
  * @retval 0 success else error
  */
uint32_t CAD_SRC_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	4603      	mov	r3, r0
 800ecb8:	6039      	str	r1, [r7, #0]
 800ecba:	71fb      	strb	r3, [r7, #7]
  /* Update the information about the default resistor value presented in detach mode */
  Ports[PortNum].params->RpResistor = RpValue;
 800ecbc:	79fa      	ldrb	r2, [r7, #7]
 800ecbe:	4915      	ldr	r1, [pc, #84]	@ (800ed14 <CAD_SRC_Set_ResistorRp+0x64>)
 800ecc0:	4613      	mov	r3, r2
 800ecc2:	011b      	lsls	r3, r3, #4
 800ecc4:	1a9b      	subs	r3, r3, r2
 800ecc6:	009b      	lsls	r3, r3, #2
 800ecc8:	440b      	add	r3, r1
 800ecca:	3310      	adds	r3, #16
 800eccc:	681a      	ldr	r2, [r3, #0]
 800ecce:	683b      	ldr	r3, [r7, #0]
 800ecd0:	f003 0303 	and.w	r3, r3, #3
 800ecd4:	b2d9      	uxtb	r1, r3
 800ecd6:	7893      	ldrb	r3, [r2, #2]
 800ecd8:	f361 0301 	bfi	r3, r1, #0, #2
 800ecdc:	7093      	strb	r3, [r2, #2]

  /* Inform state machine about a resistor update */
  CAD_HW_Handles[PortNum].CAD_ResistorUpdateflag = USBPD_TRUE;
 800ecde:	79fa      	ldrb	r2, [r7, #7]
 800ece0:	490d      	ldr	r1, [pc, #52]	@ (800ed18 <CAD_SRC_Set_ResistorRp+0x68>)
 800ece2:	4613      	mov	r3, r2
 800ece4:	005b      	lsls	r3, r3, #1
 800ece6:	4413      	add	r3, r2
 800ece8:	009b      	lsls	r3, r3, #2
 800ecea:	18ca      	adds	r2, r1, r3
 800ecec:	7853      	ldrb	r3, [r2, #1]
 800ecee:	f043 0301 	orr.w	r3, r3, #1
 800ecf2:	7053      	strb	r3, [r2, #1]
  /* Wake up CAD task */
  Ports[PortNum].USBPD_CAD_WakeUp();
 800ecf4:	79fa      	ldrb	r2, [r7, #7]
 800ecf6:	4907      	ldr	r1, [pc, #28]	@ (800ed14 <CAD_SRC_Set_ResistorRp+0x64>)
 800ecf8:	4613      	mov	r3, r2
 800ecfa:	011b      	lsls	r3, r3, #4
 800ecfc:	1a9b      	subs	r3, r3, r2
 800ecfe:	009b      	lsls	r3, r3, #2
 800ed00:	440b      	add	r3, r1
 800ed02:	332c      	adds	r3, #44	@ 0x2c
 800ed04:	681b      	ldr	r3, [r3, #0]
 800ed06:	4798      	blx	r3
  return 0;
 800ed08:	2300      	movs	r3, #0
}
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	3708      	adds	r7, #8
 800ed0e:	46bd      	mov	sp, r7
 800ed10:	bd80      	pop	{r7, pc}
 800ed12:	bf00      	nop
 800ed14:	20000b08 	.word	0x20000b08
 800ed18:	20000af0 	.word	0x20000af0

0800ed1c <CAD_Set_ResistorRp>:

/* Keep for legacy */
uint32_t CAD_Set_ResistorRp(uint8_t PortNum, CAD_RP_Source_Current_Adv_Typedef RpValue)
{
 800ed1c:	b580      	push	{r7, lr}
 800ed1e:	b082      	sub	sp, #8
 800ed20:	af00      	add	r7, sp, #0
 800ed22:	4603      	mov	r3, r0
 800ed24:	6039      	str	r1, [r7, #0]
 800ed26:	71fb      	strb	r3, [r7, #7]
  return CAD_SRC_Set_ResistorRp(PortNum, RpValue);
 800ed28:	79fb      	ldrb	r3, [r7, #7]
 800ed2a:	6839      	ldr	r1, [r7, #0]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff ffbf 	bl	800ecb0 <CAD_SRC_Set_ResistorRp>
 800ed32:	4603      	mov	r3, r0
}
 800ed34:	4618      	mov	r0, r3
 800ed36:	3708      	adds	r7, #8
 800ed38:	46bd      	mov	sp, r7
 800ed3a:	bd80      	pop	{r7, pc}

0800ed3c <CAD_StateMachine_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ed3c:	b580      	push	{r7, lr}
 800ed3e:	b086      	sub	sp, #24
 800ed40:	af00      	add	r7, sp, #0
 800ed42:	4603      	mov	r3, r0
 800ed44:	60b9      	str	r1, [r7, #8]
 800ed46:	607a      	str	r2, [r7, #4]
 800ed48:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ed4a:	7bfa      	ldrb	r2, [r7, #15]
 800ed4c:	4613      	mov	r3, r2
 800ed4e:	005b      	lsls	r3, r3, #1
 800ed50:	4413      	add	r3, r2
 800ed52:	009b      	lsls	r3, r3, #2
 800ed54:	4a2d      	ldr	r2, [pc, #180]	@ (800ee0c <CAD_StateMachine_SRC+0xd0>)
 800ed56:	4413      	add	r3, r2
 800ed58:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	617b      	str	r3, [r7, #20]

  /*Check CAD STATE*/
  switch (_handle->cstate)
 800ed5e:	693b      	ldr	r3, [r7, #16]
 800ed60:	785b      	ldrb	r3, [r3, #1]
 800ed62:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ed66:	b2db      	uxtb	r3, r3
 800ed68:	3b01      	subs	r3, #1
 800ed6a:	2b0a      	cmp	r3, #10
 800ed6c:	d847      	bhi.n	800edfe <CAD_StateMachine_SRC+0xc2>
 800ed6e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed74 <CAD_StateMachine_SRC+0x38>)
 800ed70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed74:	0800edc3 	.word	0x0800edc3
 800ed78:	0800edcf 	.word	0x0800edcf
 800ed7c:	0800edef 	.word	0x0800edef
 800ed80:	0800eddf 	.word	0x0800eddf
 800ed84:	0800edef 	.word	0x0800edef
 800ed88:	0800edff 	.word	0x0800edff
 800ed8c:	0800edff 	.word	0x0800edff
 800ed90:	0800edff 	.word	0x0800edff
 800ed94:	0800edc3 	.word	0x0800edc3
 800ed98:	0800edff 	.word	0x0800edff
 800ed9c:	0800eda1 	.word	0x0800eda1
#if defined(_VCONN_SUPPORT)
      /* DeInitialize Vconn management */
      (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
      /* DeInitialise VBUS power */
      (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800eda0:	7bfb      	ldrb	r3, [r7, #15]
 800eda2:	4618      	mov	r0, r3
 800eda4:	f7fa f848 	bl	8008e38 <BSP_USBPD_PWR_VBUSDeInit>
      /* Reset the resistor */
      USBPDM1_AssertRp(PortNum);
 800eda8:	7bfb      	ldrb	r3, [r7, #15]
 800edaa:	4618      	mov	r0, r3
 800edac:	f001 fc56 	bl	801065c <USBPDM1_AssertRp>
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800edb0:	693a      	ldr	r2, [r7, #16]
 800edb2:	7853      	ldrb	r3, [r2, #1]
 800edb4:	2101      	movs	r1, #1
 800edb6:	f361 0345 	bfi	r3, r1, #1, #5
 800edba:	7053      	strb	r3, [r2, #1]
      _timing = 0;
 800edbc:	2300      	movs	r3, #0
 800edbe:	617b      	str	r3, [r7, #20]
      break;
 800edc0:	e01e      	b.n	800ee00 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_SWITCH_TO_SNK :
    case USBPD_CAD_STATE_DETACHED:
    {
      _timing = ManageStateDetached_SRC(PortNum);
 800edc2:	7bfb      	ldrb	r3, [r7, #15]
 800edc4:	4618      	mov	r0, r3
 800edc6:	f000 f989 	bl	800f0dc <ManageStateDetached_SRC>
 800edca:	6178      	str	r0, [r7, #20]
      break;
 800edcc:	e018      	b.n	800ee00 <CAD_StateMachine_SRC+0xc4>
    }

    case USBPD_CAD_STATE_ATTACHED_WAIT:
    {
      _timing = ManageStateAttachedWait_SRC(PortNum, pEvent, pCCXX);
 800edce:	7bfb      	ldrb	r3, [r7, #15]
 800edd0:	687a      	ldr	r2, [r7, #4]
 800edd2:	68b9      	ldr	r1, [r7, #8]
 800edd4:	4618      	mov	r0, r3
 800edd6:	f000 f9d7 	bl	800f188 <ManageStateAttachedWait_SRC>
 800edda:	6178      	str	r0, [r7, #20]
      break;
 800eddc:	e010      	b.n	800ee00 <CAD_StateMachine_SRC+0xc4>
    }
#endif /* _ACCESSORY_SRC */

    case USBPD_CAD_STATE_EMC :
    {
      _timing = ManageStateEMC(PortNum, pEvent, pCCXX);
 800edde:	7bfb      	ldrb	r3, [r7, #15]
 800ede0:	687a      	ldr	r2, [r7, #4]
 800ede2:	68b9      	ldr	r1, [r7, #8]
 800ede4:	4618      	mov	r0, r3
 800ede6:	f000 faab 	bl	800f340 <ManageStateEMC>
 800edea:	6178      	str	r0, [r7, #20]
      break;
 800edec:	e008      	b.n	800ee00 <CAD_StateMachine_SRC+0xc4>

    /*CAD electronic cable with Sink ATTACHED*/
    case USBPD_CAD_STATE_ATTEMC:
    case USBPD_CAD_STATE_ATTACHED:
    {
      _timing = ManageStateAttached_SRC(PortNum, pEvent, pCCXX);
 800edee:	7bfb      	ldrb	r3, [r7, #15]
 800edf0:	687a      	ldr	r2, [r7, #4]
 800edf2:	68b9      	ldr	r1, [r7, #8]
 800edf4:	4618      	mov	r0, r3
 800edf6:	f000 faed 	bl	800f3d4 <ManageStateAttached_SRC>
 800edfa:	6178      	str	r0, [r7, #20]
      break;
 800edfc:	e000      	b.n	800ee00 <CAD_StateMachine_SRC+0xc4>
    }

    default :
    {
      break;
 800edfe:	bf00      	nop
    }
  }

  return _timing;
 800ee00:	697b      	ldr	r3, [r7, #20]
}
 800ee02:	4618      	mov	r0, r3
 800ee04:	3718      	adds	r7, #24
 800ee06:	46bd      	mov	sp, r7
 800ee08:	bd80      	pop	{r7, pc}
 800ee0a:	bf00      	nop
 800ee0c:	20000af0 	.word	0x20000af0

0800ee10 <CAD_StateMachine>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
uint32_t CAD_StateMachine(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800ee10:	b580      	push	{r7, lr}
 800ee12:	b088      	sub	sp, #32
 800ee14:	af02      	add	r7, sp, #8
 800ee16:	4603      	mov	r3, r0
 800ee18:	60b9      	str	r1, [r7, #8]
 800ee1a:	607a      	str	r2, [r7, #4]
 800ee1c:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800ee1e:	7bfa      	ldrb	r2, [r7, #15]
 800ee20:	4613      	mov	r3, r2
 800ee22:	005b      	lsls	r3, r3, #1
 800ee24:	4413      	add	r3, r2
 800ee26:	009b      	lsls	r3, r3, #2
 800ee28:	4a71      	ldr	r2, [pc, #452]	@ (800eff0 <CAD_StateMachine+0x1e0>)
 800ee2a:	4413      	add	r3, r2
 800ee2c:	613b      	str	r3, [r7, #16]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800ee2e:	2302      	movs	r3, #2
 800ee30:	617b      	str	r3, [r7, #20]

  /* Set by default event to none */
  *pEvent = USBPD_CAD_EVENT_NONE;
 800ee32:	68bb      	ldr	r3, [r7, #8]
 800ee34:	2200      	movs	r2, #0
 800ee36:	701a      	strb	r2, [r3, #0]

  /* If a swap is on going, return default timing */
  if (USBPD_TRUE == Ports[PortNum].params->PE_SwapOngoing)
 800ee38:	7bfa      	ldrb	r2, [r7, #15]
 800ee3a:	496e      	ldr	r1, [pc, #440]	@ (800eff4 <CAD_StateMachine+0x1e4>)
 800ee3c:	4613      	mov	r3, r2
 800ee3e:	011b      	lsls	r3, r3, #4
 800ee40:	1a9b      	subs	r3, r3, r2
 800ee42:	009b      	lsls	r3, r3, #2
 800ee44:	440b      	add	r3, r1
 800ee46:	3310      	adds	r3, #16
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	781b      	ldrb	r3, [r3, #0]
 800ee4c:	f003 0310 	and.w	r3, r3, #16
 800ee50:	b2db      	uxtb	r3, r3
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d001      	beq.n	800ee5a <CAD_StateMachine+0x4a>
  {
    return _timing;
 800ee56:	697b      	ldr	r3, [r7, #20]
 800ee58:	e0c6      	b.n	800efe8 <CAD_StateMachine+0x1d8>
  }

  if (_handle->CAD_ErrorRecoveryflag == USBPD_TRUE)
 800ee5a:	693b      	ldr	r3, [r7, #16]
 800ee5c:	781b      	ldrb	r3, [r3, #0]
 800ee5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ee62:	b2db      	uxtb	r3, r3
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	d017      	beq.n	800ee98 <CAD_StateMachine+0x88>
  {
    /* Force the state error recovery */
    _handle->CAD_ErrorRecoveryflag = USBPD_FALSE;
 800ee68:	693a      	ldr	r2, [r7, #16]
 800ee6a:	7813      	ldrb	r3, [r2, #0]
 800ee6c:	f36f 13c7 	bfc	r3, #7, #1
 800ee70:	7013      	strb	r3, [r2, #0]
    _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY;
 800ee72:	693a      	ldr	r2, [r7, #16]
 800ee74:	7853      	ldrb	r3, [r2, #1]
 800ee76:	210c      	movs	r1, #12
 800ee78:	f361 0345 	bfi	r3, r1, #1, #5
 800ee7c:	7053      	strb	r3, [r2, #1]
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	785b      	ldrb	r3, [r3, #1]
 800ee82:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	461a      	mov	r2, r3
 800ee8a:	7bf9      	ldrb	r1, [r7, #15]
 800ee8c:	2300      	movs	r3, #0
 800ee8e:	9300      	str	r3, [sp, #0]
 800ee90:	2300      	movs	r3, #0
 800ee92:	2005      	movs	r0, #5
 800ee94:	f7ff fbb8 	bl	800e608 <USBPD_TRACE_Add>
#endif /* _TRACE */
  }

  switch (_handle->cstate)
 800ee98:	693b      	ldr	r3, [r7, #16]
 800ee9a:	785b      	ldrb	r3, [r3, #1]
 800ee9c:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	2b0d      	cmp	r3, #13
 800eea4:	d051      	beq.n	800ef4a <CAD_StateMachine+0x13a>
 800eea6:	2b0d      	cmp	r3, #13
 800eea8:	dc71      	bgt.n	800ef8e <CAD_StateMachine+0x17e>
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d002      	beq.n	800eeb4 <CAD_StateMachine+0xa4>
 800eeae:	2b0c      	cmp	r3, #12
 800eeb0:	d024      	beq.n	800eefc <CAD_StateMachine+0xec>
 800eeb2:	e06c      	b.n	800ef8e <CAD_StateMachine+0x17e>
  {
    case USBPD_CAD_STATE_RESET:
    {
#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
      /* Enable TypeCEvents Interrupts */
      LL_UCPD_EnableIT_TypeCEventCC2(Ports[PortNum].husbpd);
 800eeb4:	7bfa      	ldrb	r2, [r7, #15]
 800eeb6:	494f      	ldr	r1, [pc, #316]	@ (800eff4 <CAD_StateMachine+0x1e4>)
 800eeb8:	4613      	mov	r3, r2
 800eeba:	011b      	lsls	r3, r3, #4
 800eebc:	1a9b      	subs	r3, r3, r2
 800eebe:	009b      	lsls	r3, r3, #2
 800eec0:	440b      	add	r3, r1
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	4618      	mov	r0, r3
 800eec6:	f7ff fd91 	bl	800e9ec <LL_UCPD_EnableIT_TypeCEventCC2>
      LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
 800eeca:	7bfa      	ldrb	r2, [r7, #15]
 800eecc:	4949      	ldr	r1, [pc, #292]	@ (800eff4 <CAD_StateMachine+0x1e4>)
 800eece:	4613      	mov	r3, r2
 800eed0:	011b      	lsls	r3, r3, #4
 800eed2:	1a9b      	subs	r3, r3, r2
 800eed4:	009b      	lsls	r3, r3, #2
 800eed6:	440b      	add	r3, r1
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4618      	mov	r0, r3
 800eedc:	f7ff fd96 	bl	800ea0c <LL_UCPD_EnableIT_TypeCEventCC1>
        LL_UCPD_EnableIT_TypeCEventCC1(Ports[PortNum].husbpd);
      }
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

      /* Enable IRQ */
      UCPD_INSTANCE0_ENABLEIRQ;
 800eee0:	2104      	movs	r1, #4
 800eee2:	203f      	movs	r0, #63	@ 0x3f
 800eee4:	f7ff fc8e 	bl	800e804 <__NVIC_SetPriority>
 800eee8:	203f      	movs	r0, #63	@ 0x3f
 800eeea:	f7ff fc6d 	bl	800e7c8 <__NVIC_EnableIRQ>
#if defined(_DRP) || defined(_ACCESSORY_SNK)
      _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
      _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800eeee:	693a      	ldr	r2, [r7, #16]
 800eef0:	7853      	ldrb	r3, [r2, #1]
 800eef2:	2101      	movs	r1, #1
 800eef4:	f361 0345 	bfi	r3, r1, #1, #5
 800eef8:	7053      	strb	r3, [r2, #1]
      break;
 800eefa:	e051      	b.n	800efa0 <CAD_StateMachine+0x190>

    case USBPD_CAD_STATE_ERRORRECOVERY :
    {
      /* Remove the resistor */
      /* Enter recovery = Switch to SRC with no resistor */
      USBPDM1_EnterErrorRecovery(PortNum);
 800eefc:	7bfb      	ldrb	r3, [r7, #15]
 800eefe:	4618      	mov	r0, r3
 800ef00:	f001 fcea 	bl	80108d8 <USBPDM1_EnterErrorRecovery>

      /* Forward detach event to DPM */
      Ports[PortNum].CCx = CCNONE;
 800ef04:	7bfa      	ldrb	r2, [r7, #15]
 800ef06:	493b      	ldr	r1, [pc, #236]	@ (800eff4 <CAD_StateMachine+0x1e4>)
 800ef08:	4613      	mov	r3, r2
 800ef0a:	011b      	lsls	r3, r3, #4
 800ef0c:	1a9b      	subs	r3, r3, r2
 800ef0e:	009b      	lsls	r3, r3, #2
 800ef10:	440b      	add	r3, r1
 800ef12:	3334      	adds	r3, #52	@ 0x34
 800ef14:	2200      	movs	r2, #0
 800ef16:	601a      	str	r2, [r3, #0]
      *pCCXX = CCNONE;
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	601a      	str	r2, [r3, #0]
      _handle->cc = CCNONE;
 800ef1e:	693a      	ldr	r2, [r7, #16]
 800ef20:	7813      	ldrb	r3, [r2, #0]
 800ef22:	f36f 0301 	bfc	r3, #0, #2
 800ef26:	7013      	strb	r3, [r2, #0]
      *pEvent = USBPD_CAD_EVENT_DETACHED;
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	2201      	movs	r2, #1
 800ef2c:	701a      	strb	r2, [r3, #0]

      /* Start tErrorRecovery timeout */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800ef2e:	f7fa fe19 	bl	8009b64 <HAL_GetTick>
 800ef32:	4602      	mov	r2, r0
 800ef34:	693b      	ldr	r3, [r7, #16]
 800ef36:	605a      	str	r2, [r3, #4]
      _timing = CAD_TERROR_RECOVERY_TIME;
 800ef38:	231a      	movs	r3, #26
 800ef3a:	617b      	str	r3, [r7, #20]
      _handle->cstate = USBPD_CAD_STATE_ERRORRECOVERY_EXIT;
 800ef3c:	693a      	ldr	r2, [r7, #16]
 800ef3e:	7853      	ldrb	r3, [r2, #1]
 800ef40:	210d      	movs	r1, #13
 800ef42:	f361 0345 	bfi	r3, r1, #1, #5
 800ef46:	7053      	strb	r3, [r2, #1]
      break;
 800ef48:	e02a      	b.n	800efa0 <CAD_StateMachine+0x190>
    }

    case USBPD_CAD_STATE_ERRORRECOVERY_EXIT :
    {
      if ((HAL_GetTick() - _handle->CAD_tDebounce_start) >  CAD_TERROR_RECOVERY_TIME)
 800ef4a:	f7fa fe0b 	bl	8009b64 <HAL_GetTick>
 800ef4e:	4602      	mov	r2, r0
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	685b      	ldr	r3, [r3, #4]
 800ef54:	1ad3      	subs	r3, r2, r3
 800ef56:	2b1a      	cmp	r3, #26
 800ef58:	d921      	bls.n	800ef9e <CAD_StateMachine+0x18e>
        port source  to src
        port snk     to snk
        port drp     to src   */

#if defined(_SRC) || defined(_DRP)
        if (USBPD_PORTPOWERROLE_SRC == Ports[PortNum].params->PE_PowerRole)
 800ef5a:	7bfa      	ldrb	r2, [r7, #15]
 800ef5c:	4925      	ldr	r1, [pc, #148]	@ (800eff4 <CAD_StateMachine+0x1e4>)
 800ef5e:	4613      	mov	r3, r2
 800ef60:	011b      	lsls	r3, r3, #4
 800ef62:	1a9b      	subs	r3, r3, r2
 800ef64:	009b      	lsls	r3, r3, #2
 800ef66:	440b      	add	r3, r1
 800ef68:	3310      	adds	r3, #16
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	781b      	ldrb	r3, [r3, #0]
 800ef6e:	f003 0304 	and.w	r3, r3, #4
 800ef72:	b2db      	uxtb	r3, r3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d003      	beq.n	800ef80 <CAD_StateMachine+0x170>
        {
          USBPDM1_AssertRp(PortNum);
 800ef78:	7bfb      	ldrb	r3, [r7, #15]
 800ef7a:	4618      	mov	r0, r3
 800ef7c:	f001 fb6e 	bl	801065c <USBPDM1_AssertRp>
#endif /* _SNK || _DRP */
        /* Switch to state detach */
#if defined(_DRP) || defined(_ACCESSORY_SNK)
        _handle->CAD_tToggle_start = HAL_GetTick();
#endif /* _DRP || _ACCESSORY_SNK */
        _handle->cstate = USBPD_CAD_STATE_DETACHED;
 800ef80:	693a      	ldr	r2, [r7, #16]
 800ef82:	7853      	ldrb	r3, [r2, #1]
 800ef84:	2101      	movs	r1, #1
 800ef86:	f361 0345 	bfi	r3, r1, #1, #5
 800ef8a:	7053      	strb	r3, [r2, #1]
      }
      break;
 800ef8c:	e007      	b.n	800ef9e <CAD_StateMachine+0x18e>
    }

    default:
    {
      /* Call the state machine corresponding to the port SNK or SRC or DRP */
      _timing = _handle->CAD_PtrStateMachine(PortNum, pEvent, pCCXX);
 800ef8e:	693b      	ldr	r3, [r7, #16]
 800ef90:	689b      	ldr	r3, [r3, #8]
 800ef92:	7bf8      	ldrb	r0, [r7, #15]
 800ef94:	687a      	ldr	r2, [r7, #4]
 800ef96:	68b9      	ldr	r1, [r7, #8]
 800ef98:	4798      	blx	r3
 800ef9a:	6178      	str	r0, [r7, #20]
      break;
 800ef9c:	e000      	b.n	800efa0 <CAD_StateMachine+0x190>
      break;
 800ef9e:	bf00      	nop
    }
  }

#if defined(_TRACE)
  if (_handle->cstate != _handle->pstate)
 800efa0:	693b      	ldr	r3, [r7, #16]
 800efa2:	785b      	ldrb	r3, [r3, #1]
 800efa4:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800efa8:	b2da      	uxtb	r2, r3
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	789b      	ldrb	r3, [r3, #2]
 800efae:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800efb2:	b2db      	uxtb	r3, r3
 800efb4:	429a      	cmp	r2, r3
 800efb6:	d016      	beq.n	800efe6 <CAD_StateMachine+0x1d6>
  {
    _handle->pstate = _handle->cstate;
 800efb8:	693b      	ldr	r3, [r7, #16]
 800efba:	785b      	ldrb	r3, [r3, #1]
 800efbc:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800efc0:	b2d9      	uxtb	r1, r3
 800efc2:	693a      	ldr	r2, [r7, #16]
 800efc4:	7893      	ldrb	r3, [r2, #2]
 800efc6:	f361 0345 	bfi	r3, r1, #1, #5
 800efca:	7093      	strb	r3, [r2, #2]
    USBPD_TRACE_Add(USBPD_TRACE_CAD_LOW, PortNum, (uint8_t)_handle->cstate, NULL, 0);
 800efcc:	693b      	ldr	r3, [r7, #16]
 800efce:	785b      	ldrb	r3, [r3, #1]
 800efd0:	f3c3 0344 	ubfx	r3, r3, #1, #5
 800efd4:	b2db      	uxtb	r3, r3
 800efd6:	461a      	mov	r2, r3
 800efd8:	7bf9      	ldrb	r1, [r7, #15]
 800efda:	2300      	movs	r3, #0
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	2300      	movs	r3, #0
 800efe0:	2005      	movs	r0, #5
 800efe2:	f7ff fb11 	bl	800e608 <USBPD_TRACE_Add>
    }
#endif /* CAD_DEBUG_TRACE */
  }
#endif /* _TRACE */

  return _timing;
 800efe6:	697b      	ldr	r3, [r7, #20]
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3718      	adds	r7, #24
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20000af0 	.word	0x20000af0
 800eff4:	20000b08 	.word	0x20000b08

0800eff8 <CAD_Check_HW_SRC>:
  * @brief  Check CCx HW condition
  * @param  PortNum Port
  * @retval none
  */
void CAD_Check_HW_SRC(uint8_t PortNum)
{
 800eff8:	b4b0      	push	{r4, r5, r7}
 800effa:	b093      	sub	sp, #76	@ 0x4c
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	71fb      	strb	r3, [r7, #7]
#if !defined(_RTOS)
  uint32_t CC1_value_temp;
  uint32_t CC2_value_temp;
#endif /* !_RTOS */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f002:	79fa      	ldrb	r2, [r7, #7]
 800f004:	4613      	mov	r3, r2
 800f006:	005b      	lsls	r3, r3, #1
 800f008:	4413      	add	r3, r2
 800f00a:	009b      	lsls	r3, r3, #2
 800f00c:	4a2f      	ldr	r2, [pc, #188]	@ (800f0cc <CAD_Check_HW_SRC+0xd4>)
 800f00e:	4413      	add	r3, r2
 800f010:	647b      	str	r3, [r7, #68]	@ 0x44
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;

  /* Disable the C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS);
#else
  CC1_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) >> UCPD_SR_TYPEC_VSTATE_CC1_Pos;
 800f012:	79fa      	ldrb	r2, [r7, #7]
 800f014:	492e      	ldr	r1, [pc, #184]	@ (800f0d0 <CAD_Check_HW_SRC+0xd8>)
 800f016:	4613      	mov	r3, r2
 800f018:	011b      	lsls	r3, r3, #4
 800f01a:	1a9b      	subs	r3, r3, r2
 800f01c:	009b      	lsls	r3, r3, #2
 800f01e:	440b      	add	r3, r1
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	695b      	ldr	r3, [r3, #20]
 800f024:	0c1b      	lsrs	r3, r3, #16
 800f026:	f003 0303 	and.w	r3, r3, #3
 800f02a:	643b      	str	r3, [r7, #64]	@ 0x40
  CC2_value = (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) >> UCPD_SR_TYPEC_VSTATE_CC2_Pos;
 800f02c:	79fa      	ldrb	r2, [r7, #7]
 800f02e:	4928      	ldr	r1, [pc, #160]	@ (800f0d0 <CAD_Check_HW_SRC+0xd8>)
 800f030:	4613      	mov	r3, r2
 800f032:	011b      	lsls	r3, r3, #4
 800f034:	1a9b      	subs	r3, r3, r2
 800f036:	009b      	lsls	r3, r3, #2
 800f038:	440b      	add	r3, r1
 800f03a:	681b      	ldr	r3, [r3, #0]
 800f03c:	695b      	ldr	r3, [r3, #20]
 800f03e:	0c9b      	lsrs	r3, r3, #18
 800f040:	f003 0303 	and.w	r3, r3, #3
 800f044:	63fb      	str	r3, [r7, #60]	@ 0x3c
  {
    return;
  }
#endif /* !_RTOS */

  const CCxPin_TypeDef table_cc[] =
 800f046:	4b23      	ldr	r3, [pc, #140]	@ (800f0d4 <CAD_Check_HW_SRC+0xdc>)
 800f048:	f107 0418 	add.w	r4, r7, #24
 800f04c:	461d      	mov	r5, r3
 800f04e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f050:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f052:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f054:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f056:	682b      	ldr	r3, [r5, #0]
 800f058:	6023      	str	r3, [r4, #0]
    CCNONE,  CC2,       CC2,
    CC1,     CCNONE,   CC1,
    CC1,     CC2,       CCNONE
  };

  const CAD_HW_Condition_TypeDef table_CurrentHWcondition[] =
 800f05a:	4a1f      	ldr	r2, [pc, #124]	@ (800f0d8 <CAD_Check_HW_SRC+0xe0>)
 800f05c:	f107 030c 	add.w	r3, r7, #12
 800f060:	ca07      	ldmia	r2, {r0, r1, r2}
 800f062:	c303      	stmia	r3!, {r0, r1}
 800f064:	701a      	strb	r2, [r3, #0]
    HW_AudioAdapter_Attachment,  HW_PwrCable_Sink_Attachment, HW_PwrCable_NoSink_Attachment,
    HW_PwrCable_Sink_Attachment,         HW_Debug_Attachment,                 HW_Attachment,
    HW_PwrCable_NoSink_Attachment,             HW_Attachment,                 HW_Detachment
  };

  if (CC1_value * 3 + CC2_value < 9)
 800f066:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f068:	4613      	mov	r3, r2
 800f06a:	005b      	lsls	r3, r3, #1
 800f06c:	441a      	add	r2, r3
 800f06e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f070:	4413      	add	r3, r2
 800f072:	2b08      	cmp	r3, #8
 800f074:	d824      	bhi.n	800f0c0 <CAD_Check_HW_SRC+0xc8>
  {
    _handle->cc  = table_cc[CC1_value * 3 + CC2_value];
 800f076:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f078:	4613      	mov	r3, r2
 800f07a:	005b      	lsls	r3, r3, #1
 800f07c:	441a      	add	r2, r3
 800f07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	3348      	adds	r3, #72	@ 0x48
 800f086:	443b      	add	r3, r7
 800f088:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800f08c:	f003 0303 	and.w	r3, r3, #3
 800f090:	b2d9      	uxtb	r1, r3
 800f092:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f094:	7813      	ldrb	r3, [r2, #0]
 800f096:	f361 0301 	bfi	r3, r1, #0, #2
 800f09a:	7013      	strb	r3, [r2, #0]
    _handle->CurrentHWcondition     = table_CurrentHWcondition[CC1_value * 3 + CC2_value];
 800f09c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800f09e:	4613      	mov	r3, r2
 800f0a0:	005b      	lsls	r3, r3, #1
 800f0a2:	441a      	add	r2, r3
 800f0a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f0a6:	4413      	add	r3, r2
 800f0a8:	3348      	adds	r3, #72	@ 0x48
 800f0aa:	443b      	add	r3, r7
 800f0ac:	f813 3c3c 	ldrb.w	r3, [r3, #-60]
 800f0b0:	f003 0307 	and.w	r3, r3, #7
 800f0b4:	b2d9      	uxtb	r1, r3
 800f0b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800f0b8:	7813      	ldrb	r3, [r2, #0]
 800f0ba:	f361 0384 	bfi	r3, r1, #2, #3
 800f0be:	7013      	strb	r3, [r2, #0]
  }
}
 800f0c0:	bf00      	nop
 800f0c2:	374c      	adds	r7, #76	@ 0x4c
 800f0c4:	46bd      	mov	sp, r7
 800f0c6:	bcb0      	pop	{r4, r5, r7}
 800f0c8:	4770      	bx	lr
 800f0ca:	bf00      	nop
 800f0cc:	20000af0 	.word	0x20000af0
 800f0d0:	20000b08 	.word	0x20000b08
 800f0d4:	0801b184 	.word	0x0801b184
 800f0d8:	0801b1a8 	.word	0x0801b1a8

0800f0dc <ManageStateDetached_SRC>:
  * @brief  Manage the detached state for source role
  * @param  PortNum Port
  * @retval Timeout value
  */
static uint32_t ManageStateDetached_SRC(uint8_t PortNum)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b084      	sub	sp, #16
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	71fb      	strb	r3, [r7, #7]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f0e6:	79fa      	ldrb	r2, [r7, #7]
 800f0e8:	4613      	mov	r3, r2
 800f0ea:	005b      	lsls	r3, r3, #1
 800f0ec:	4413      	add	r3, r2
 800f0ee:	009b      	lsls	r3, r3, #2
 800f0f0:	4a24      	ldr	r2, [pc, #144]	@ (800f184 <ManageStateDetached_SRC+0xa8>)
 800f0f2:	4413      	add	r3, r2
 800f0f4:	60bb      	str	r3, [r7, #8]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f0f6:	2302      	movs	r3, #2
 800f0f8:	60fb      	str	r3, [r7, #12]

  if (_handle->CAD_ResistorUpdateflag == USBPD_TRUE)
 800f0fa:	68bb      	ldr	r3, [r7, #8]
 800f0fc:	785b      	ldrb	r3, [r3, #1]
 800f0fe:	f003 0301 	and.w	r3, r3, #1
 800f102:	b2db      	uxtb	r3, r3
 800f104:	2b00      	cmp	r3, #0
 800f106:	d00b      	beq.n	800f120 <ManageStateDetached_SRC+0x44>
  {
    /* Update the resistor value */
    USBPDM1_AssertRp(PortNum);
 800f108:	79fb      	ldrb	r3, [r7, #7]
 800f10a:	4618      	mov	r0, r3
 800f10c:	f001 faa6 	bl	801065c <USBPDM1_AssertRp>
    _handle->CAD_ResistorUpdateflag = USBPD_FALSE;
 800f110:	68ba      	ldr	r2, [r7, #8]
 800f112:	7853      	ldrb	r3, [r2, #1]
 800f114:	f36f 0300 	bfc	r3, #0, #1
 800f118:	7053      	strb	r3, [r2, #1]

    /* Let time to internal state machine update */
    HAL_Delay(1);
 800f11a:	2001      	movs	r0, #1
 800f11c:	f7fa fd2e 	bl	8009b7c <HAL_Delay>
  }

  CAD_Check_HW_SRC(PortNum);
 800f120:	79fb      	ldrb	r3, [r7, #7]
 800f122:	4618      	mov	r0, r3
 800f124:	f7ff ff68 	bl	800eff8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  if (_handle->CurrentHWcondition == HW_Detachment)
 800f128:	68bb      	ldr	r3, [r7, #8]
 800f12a:	781b      	ldrb	r3, [r3, #0]
 800f12c:	f003 031c 	and.w	r3, r3, #28
 800f130:	b2db      	uxtb	r3, r3
 800f132:	2b00      	cmp	r3, #0
 800f134:	d103      	bne.n	800f13e <ManageStateDetached_SRC+0x62>
  {
#if defined(_LOW_POWER)
    /* Value returned for a SRC */
    _timing = CAD_DETACH_POLLING;
#else
    _timing = CAD_INFINITE_TIME;
 800f136:	f04f 33ff 	mov.w	r3, #4294967295
 800f13a:	60fb      	str	r3, [r7, #12]
 800f13c:	e01c      	b.n	800f178 <ManageStateDetached_SRC+0x9c>
#endif /* _LOW_POWER */
  }
  else
  {
    if (_handle->CurrentHWcondition == HW_PwrCable_NoSink_Attachment)
 800f13e:	68bb      	ldr	r3, [r7, #8]
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	f003 031c 	and.w	r3, r3, #28
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b08      	cmp	r3, #8
 800f14a:	d106      	bne.n	800f15a <ManageStateDetached_SRC+0x7e>
    {
      _handle->cstate = USBPD_CAD_STATE_EMC;
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	7853      	ldrb	r3, [r2, #1]
 800f150:	2104      	movs	r1, #4
 800f152:	f361 0345 	bfi	r3, r1, #1, #5
 800f156:	7053      	strb	r3, [r2, #1]
 800f158:	e00e      	b.n	800f178 <ManageStateDetached_SRC+0x9c>
    }
    else
    {
      /* Get the time of this event */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800f15a:	f7fa fd03 	bl	8009b64 <HAL_GetTick>
 800f15e:	4602      	mov	r2, r0
 800f160:	68bb      	ldr	r3, [r7, #8]
 800f162:	605a      	str	r2, [r3, #4]
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	7853      	ldrb	r3, [r2, #1]
 800f168:	2102      	movs	r1, #2
 800f16a:	f361 0345 	bfi	r3, r1, #1, #5
 800f16e:	7053      	strb	r3, [r2, #1]

      BSP_USBPD_PWR_VBUSInit(PortNum);
 800f170:	79fb      	ldrb	r3, [r7, #7]
 800f172:	4618      	mov	r0, r3
 800f174:	f7f9 fe22 	bl	8008dbc <BSP_USBPD_PWR_VBUSInit>
    }
  }
  return _timing;
 800f178:	68fb      	ldr	r3, [r7, #12]
}
 800f17a:	4618      	mov	r0, r3
 800f17c:	3710      	adds	r7, #16
 800f17e:	46bd      	mov	sp, r7
 800f180:	bd80      	pop	{r7, pc}
 800f182:	bf00      	nop
 800f184:	20000af0 	.word	0x20000af0

0800f188 <ManageStateAttachedWait_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttachedWait_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b088      	sub	sp, #32
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	4603      	mov	r3, r0
 800f190:	60b9      	str	r1, [r7, #8]
 800f192:	607a      	str	r2, [r7, #4]
 800f194:	73fb      	strb	r3, [r7, #15]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f196:	7bfa      	ldrb	r2, [r7, #15]
 800f198:	4613      	mov	r3, r2
 800f19a:	005b      	lsls	r3, r3, #1
 800f19c:	4413      	add	r3, r2
 800f19e:	009b      	lsls	r3, r3, #2
 800f1a0:	4a66      	ldr	r2, [pc, #408]	@ (800f33c <ManageStateAttachedWait_SRC+0x1b4>)
 800f1a2:	4413      	add	r3, r2
 800f1a4:	61bb      	str	r3, [r7, #24]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f1a6:	2302      	movs	r3, #2
 800f1a8:	61fb      	str	r3, [r7, #28]

  /* Evaluate elapsed time in Attach_Wait state */
  uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800f1aa:	f7fa fcdb 	bl	8009b64 <HAL_GetTick>
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	69bb      	ldr	r3, [r7, #24]
 800f1b2:	685b      	ldr	r3, [r3, #4]
 800f1b4:	1ad3      	subs	r3, r2, r3
 800f1b6:	617b      	str	r3, [r7, #20]
  CAD_Check_HW_SRC(PortNum);
 800f1b8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	f7ff ff1c 	bl	800eff8 <CAD_Check_HW_SRC>

  if ((_handle->CurrentHWcondition != HW_Detachment) && (_handle->CurrentHWcondition != HW_PwrCable_NoSink_Attachment))
 800f1c0:	69bb      	ldr	r3, [r7, #24]
 800f1c2:	781b      	ldrb	r3, [r3, #0]
 800f1c4:	f003 031c 	and.w	r3, r3, #28
 800f1c8:	b2db      	uxtb	r3, r3
 800f1ca:	2b00      	cmp	r3, #0
 800f1cc:	f000 8086 	beq.w	800f2dc <ManageStateAttachedWait_SRC+0x154>
 800f1d0:	69bb      	ldr	r3, [r7, #24]
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	f003 031c 	and.w	r3, r3, #28
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	2b08      	cmp	r3, #8
 800f1dc:	d07e      	beq.n	800f2dc <ManageStateAttachedWait_SRC+0x154>
  {
    if (USBPD_FALSE == USBPD_PWR_IF_GetVBUSStatus(PortNum, USBPD_PWR_BELOWVSAFE0V))
 800f1de:	7bfb      	ldrb	r3, [r7, #15]
 800f1e0:	2100      	movs	r1, #0
 800f1e2:	4618      	mov	r0, r3
 800f1e4:	f006 f9ac 	bl	8015540 <USBPD_PWR_IF_GetVBUSStatus>
 800f1e8:	4603      	mov	r3, r0
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d106      	bne.n	800f1fc <ManageStateAttachedWait_SRC+0x74>
    {
      /* Reset the timing because VBUS threshold not yet reach */
      _handle->CAD_tDebounce_start = HAL_GetTick();
 800f1ee:	f7fa fcb9 	bl	8009b64 <HAL_GetTick>
 800f1f2:	4602      	mov	r2, r0
 800f1f4:	69bb      	ldr	r3, [r7, #24]
 800f1f6:	605a      	str	r2, [r3, #4]
      return CAD_TCCDEBOUNCE_THRESHOLD;
 800f1f8:	2378      	movs	r3, #120	@ 0x78
 800f1fa:	e09b      	b.n	800f334 <ManageStateAttachedWait_SRC+0x1ac>
    }

    /* Check tCCDebounce */
    if (CAD_tDebounce > CAD_TCCDEBOUNCE_THRESHOLD)
 800f1fc:	697b      	ldr	r3, [r7, #20]
 800f1fe:	2b78      	cmp	r3, #120	@ 0x78
 800f200:	d966      	bls.n	800f2d0 <ManageStateAttachedWait_SRC+0x148>
    {
      switch (_handle->CurrentHWcondition)
 800f202:	69bb      	ldr	r3, [r7, #24]
 800f204:	781b      	ldrb	r3, [r3, #0]
 800f206:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800f20a:	b2db      	uxtb	r3, r3
 800f20c:	2b03      	cmp	r3, #3
 800f20e:	d023      	beq.n	800f258 <ManageStateAttachedWait_SRC+0xd0>
 800f210:	2b03      	cmp	r3, #3
 800f212:	dc4c      	bgt.n	800f2ae <ManageStateAttachedWait_SRC+0x126>
 800f214:	2b01      	cmp	r3, #1
 800f216:	d002      	beq.n	800f21e <ManageStateAttachedWait_SRC+0x96>
 800f218:	2b02      	cmp	r3, #2
 800f21a:	d032      	beq.n	800f282 <ManageStateAttachedWait_SRC+0xfa>
 800f21c:	e047      	b.n	800f2ae <ManageStateAttachedWait_SRC+0x126>
      {
        case HW_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800f21e:	69bb      	ldr	r3, [r7, #24]
 800f220:	781b      	ldrb	r3, [r3, #0]
 800f222:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f226:	b2db      	uxtb	r3, r3
 800f228:	461a      	mov	r2, r3
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	4611      	mov	r1, r2
 800f22e:	4618      	mov	r0, r3
 800f230:	f001 fbc6 	bl	80109c0 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTACHED;
 800f234:	69ba      	ldr	r2, [r7, #24]
 800f236:	7853      	ldrb	r3, [r2, #1]
 800f238:	2103      	movs	r1, #3
 800f23a:	f361 0345 	bfi	r3, r1, #1, #5
 800f23e:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTACHED;
 800f240:	68bb      	ldr	r3, [r7, #8]
 800f242:	2202      	movs	r2, #2
 800f244:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800f246:	69bb      	ldr	r3, [r7, #24]
 800f248:	781b      	ldrb	r3, [r3, #0]
 800f24a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f24e:	b2db      	uxtb	r3, r3
 800f250:	461a      	mov	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	601a      	str	r2, [r3, #0]
          break;
 800f256:	e031      	b.n	800f2bc <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_Sink_Attachment:
          HW_SignalAttachement(PortNum, _handle->cc);
 800f258:	69bb      	ldr	r3, [r7, #24]
 800f25a:	781b      	ldrb	r3, [r3, #0]
 800f25c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f260:	b2db      	uxtb	r3, r3
 800f262:	461a      	mov	r2, r3
 800f264:	7bfb      	ldrb	r3, [r7, #15]
 800f266:	4611      	mov	r1, r2
 800f268:	4618      	mov	r0, r3
 800f26a:	f001 fba9 	bl	80109c0 <HW_SignalAttachement>
          _handle->cstate = USBPD_CAD_STATE_ATTEMC;
 800f26e:	69ba      	ldr	r2, [r7, #24]
 800f270:	7853      	ldrb	r3, [r2, #1]
 800f272:	2105      	movs	r1, #5
 800f274:	f361 0345 	bfi	r3, r1, #1, #5
 800f278:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_ATTEMC;
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2204      	movs	r2, #4
 800f27e:	701a      	strb	r2, [r3, #0]
          break;
 800f280:	e01c      	b.n	800f2bc <ManageStateAttachedWait_SRC+0x134>

        case HW_PwrCable_NoSink_Attachment:
          BSP_USBPD_PWR_VBUSDeInit(PortNum);
 800f282:	7bfb      	ldrb	r3, [r7, #15]
 800f284:	4618      	mov	r0, r3
 800f286:	f7f9 fdd7 	bl	8008e38 <BSP_USBPD_PWR_VBUSDeInit>
          _handle->cstate = USBPD_CAD_STATE_EMC;
 800f28a:	69ba      	ldr	r2, [r7, #24]
 800f28c:	7853      	ldrb	r3, [r2, #1]
 800f28e:	2104      	movs	r1, #4
 800f290:	f361 0345 	bfi	r3, r1, #1, #5
 800f294:	7053      	strb	r3, [r2, #1]
          *pEvent = USBPD_CAD_EVENT_EMC;
 800f296:	68bb      	ldr	r3, [r7, #8]
 800f298:	2203      	movs	r2, #3
 800f29a:	701a      	strb	r2, [r3, #0]
          *pCCXX = _handle->cc;
 800f29c:	69bb      	ldr	r3, [r7, #24]
 800f29e:	781b      	ldrb	r3, [r3, #0]
 800f2a0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f2a4:	b2db      	uxtb	r3, r3
 800f2a6:	461a      	mov	r2, r3
 800f2a8:	687b      	ldr	r3, [r7, #4]
 800f2aa:	601a      	str	r2, [r3, #0]
          break;
 800f2ac:	e006      	b.n	800f2bc <ManageStateAttachedWait_SRC+0x134>
#endif /* _ACCESSORY_SRC */

        case HW_Detachment:
        default:
#if !defined(_ACCESSORY_SRC)
          _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800f2ae:	69ba      	ldr	r2, [r7, #24]
 800f2b0:	7853      	ldrb	r3, [r2, #1]
 800f2b2:	210b      	movs	r1, #11
 800f2b4:	f361 0345 	bfi	r3, r1, #1, #5
 800f2b8:	7053      	strb	r3, [r2, #1]
#endif /* _ACCESSORY_SRC */
          break;
 800f2ba:	bf00      	nop
      } /* End of switch */
      *pCCXX = _handle->cc;
 800f2bc:	69bb      	ldr	r3, [r7, #24]
 800f2be:	781b      	ldrb	r3, [r3, #0]
 800f2c0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 800f2c4:	b2db      	uxtb	r3, r3
 800f2c6:	461a      	mov	r2, r3
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	601a      	str	r2, [r3, #0]
      _timing = CAD_DEFAULT_TIME;
 800f2cc:	2302      	movs	r3, #2
 800f2ce:	61fb      	str	r3, [r7, #28]
    }
    /* Reset the flag for CAD_tDebounce */
    _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800f2d0:	69ba      	ldr	r2, [r7, #24]
 800f2d2:	7813      	ldrb	r3, [r2, #0]
 800f2d4:	f36f 1345 	bfc	r3, #5, #1
 800f2d8:	7013      	strb	r3, [r2, #0]
 800f2da:	e02a      	b.n	800f332 <ManageStateAttachedWait_SRC+0x1aa>
  }
  else /* CAD_HW_Condition[PortNum] = HW_Detachment */
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800f2dc:	69bb      	ldr	r3, [r7, #24]
 800f2de:	781b      	ldrb	r3, [r3, #0]
 800f2e0:	f003 0320 	and.w	r3, r3, #32
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b00      	cmp	r3, #0
 800f2e8:	d10c      	bne.n	800f304 <ManageStateAttachedWait_SRC+0x17c>
    {
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800f2ea:	f7fa fc3b 	bl	8009b64 <HAL_GetTick>
 800f2ee:	4602      	mov	r2, r0
 800f2f0:	69bb      	ldr	r3, [r7, #24]
 800f2f2:	605a      	str	r2, [r3, #4]
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800f2f4:	69ba      	ldr	r2, [r7, #24]
 800f2f6:	7813      	ldrb	r3, [r2, #0]
 800f2f8:	f043 0320 	orr.w	r3, r3, #32
 800f2fc:	7013      	strb	r3, [r2, #0]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800f2fe:	2302      	movs	r3, #2
 800f300:	61fb      	str	r3, [r7, #28]
 800f302:	e016      	b.n	800f332 <ManageStateAttachedWait_SRC+0x1aa>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800f304:	f7fa fc2e 	bl	8009b64 <HAL_GetTick>
 800f308:	4602      	mov	r2, r0
 800f30a:	69bb      	ldr	r3, [r7, #24]
 800f30c:	685b      	ldr	r3, [r3, #4]
 800f30e:	1ad3      	subs	r3, r2, r3
 800f310:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	2b02      	cmp	r3, #2
 800f316:	d90c      	bls.n	800f332 <ManageStateAttachedWait_SRC+0x1aa>
      {
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800f318:	69ba      	ldr	r2, [r7, #24]
 800f31a:	7813      	ldrb	r3, [r2, #0]
 800f31c:	f36f 1345 	bfc	r3, #5, #1
 800f320:	7013      	strb	r3, [r2, #0]
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800f322:	69ba      	ldr	r2, [r7, #24]
 800f324:	7853      	ldrb	r3, [r2, #1]
 800f326:	210b      	movs	r1, #11
 800f328:	f361 0345 	bfi	r3, r1, #1, #5
 800f32c:	7053      	strb	r3, [r2, #1]
        _timing = 0;
 800f32e:	2300      	movs	r3, #0
 800f330:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return _timing;
 800f332:	69fb      	ldr	r3, [r7, #28]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3720      	adds	r7, #32
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd80      	pop	{r7, pc}
 800f33c:	20000af0 	.word	0x20000af0

0800f340 <ManageStateEMC>:
#endif /* _DRP || _SRC || (_ACCESSORY && _SNK) */

#if defined(_DRP) || defined(_SRC)
static uint32_t ManageStateEMC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f340:	b580      	push	{r7, lr}
 800f342:	b086      	sub	sp, #24
 800f344:	af00      	add	r7, sp, #0
 800f346:	4603      	mov	r3, r0
 800f348:	60b9      	str	r1, [r7, #8]
 800f34a:	607a      	str	r2, [r7, #4]
 800f34c:	73fb      	strb	r3, [r7, #15]
  uint32_t _timing = CAD_INFINITE_TIME;
 800f34e:	f04f 33ff 	mov.w	r3, #4294967295
 800f352:	617b      	str	r3, [r7, #20]
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f354:	7bfa      	ldrb	r2, [r7, #15]
 800f356:	4613      	mov	r3, r2
 800f358:	005b      	lsls	r3, r3, #1
 800f35a:	4413      	add	r3, r2
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	4a1c      	ldr	r2, [pc, #112]	@ (800f3d0 <ManageStateEMC+0x90>)
 800f360:	4413      	add	r3, r2
 800f362:	613b      	str	r3, [r7, #16]

  CAD_Check_HW_SRC(PortNum);
 800f364:	7bfb      	ldrb	r3, [r7, #15]
 800f366:	4618      	mov	r0, r3
 800f368:	f7ff fe46 	bl	800eff8 <CAD_Check_HW_SRC>
  /* Change the status on the basis of the HW event given by CAD_Check_HW() */
  switch (_handle->CurrentHWcondition)
 800f36c:	693b      	ldr	r3, [r7, #16]
 800f36e:	781b      	ldrb	r3, [r3, #0]
 800f370:	f3c3 0382 	ubfx	r3, r3, #2, #3
 800f374:	b2db      	uxtb	r3, r3
 800f376:	2b03      	cmp	r3, #3
 800f378:	d00f      	beq.n	800f39a <ManageStateEMC+0x5a>
 800f37a:	2b03      	cmp	r3, #3
 800f37c:	dc20      	bgt.n	800f3c0 <ManageStateEMC+0x80>
 800f37e:	2b00      	cmp	r3, #0
 800f380:	d002      	beq.n	800f388 <ManageStateEMC+0x48>
 800f382:	2b01      	cmp	r3, #1
 800f384:	d009      	beq.n	800f39a <ManageStateEMC+0x5a>
 800f386:	e01b      	b.n	800f3c0 <ManageStateEMC+0x80>
  {
    case HW_Detachment :
      _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
 800f388:	693a      	ldr	r2, [r7, #16]
 800f38a:	7853      	ldrb	r3, [r2, #1]
 800f38c:	2109      	movs	r1, #9
 800f38e:	f361 0345 	bfi	r3, r1, #1, #5
 800f392:	7053      	strb	r3, [r2, #1]
      _timing = 1;
 800f394:	2301      	movs	r3, #1
 800f396:	617b      	str	r3, [r7, #20]
      break;
 800f398:	e015      	b.n	800f3c6 <ManageStateEMC+0x86>
    case HW_PwrCable_Sink_Attachment:
    case HW_Attachment :
      _handle->cstate = USBPD_CAD_STATE_ATTACHED_WAIT;
 800f39a:	693a      	ldr	r2, [r7, #16]
 800f39c:	7853      	ldrb	r3, [r2, #1]
 800f39e:	2102      	movs	r1, #2
 800f3a0:	f361 0345 	bfi	r3, r1, #1, #5
 800f3a4:	7053      	strb	r3, [r2, #1]
      _handle->CAD_tDebounce_start = HAL_GetTick() - 5u;  /* This is only to check cable presence */
 800f3a6:	f7fa fbdd 	bl	8009b64 <HAL_GetTick>
 800f3aa:	4603      	mov	r3, r0
 800f3ac:	1f5a      	subs	r2, r3, #5
 800f3ae:	693b      	ldr	r3, [r7, #16]
 800f3b0:	605a      	str	r2, [r3, #4]
      BSP_USBPD_PWR_VBUSInit(PortNum);
 800f3b2:	7bfb      	ldrb	r3, [r7, #15]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	f7f9 fd01 	bl	8008dbc <BSP_USBPD_PWR_VBUSInit>
      _timing = CAD_DEFAULT_TIME;
 800f3ba:	2302      	movs	r3, #2
 800f3bc:	617b      	str	r3, [r7, #20]
      break;
 800f3be:	e002      	b.n	800f3c6 <ManageStateEMC+0x86>
          _handle->cstate = USBPD_CAD_STATE_SWITCH_TO_SNK;
        }
        _timing = 0;
      }
#else
      _timing = CAD_DEFAULT_TIME;
 800f3c0:	2302      	movs	r3, #2
 800f3c2:	617b      	str	r3, [r7, #20]
#endif /* _DRP */
      break;
 800f3c4:	bf00      	nop
  }
  return _timing;
 800f3c6:	697b      	ldr	r3, [r7, #20]
}
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	3718      	adds	r7, #24
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	bd80      	pop	{r7, pc}
 800f3d0:	20000af0 	.word	0x20000af0

0800f3d4 <ManageStateAttached_SRC>:
  * @param  pEvent  Pointer on CAD event based on @ref USBPD_CAD_EVENT
  * @param  pCCXX   Pointer on CC Pin based on @ref CCxPin_TypeDef
  * @retval Timeout value
  */
static uint32_t ManageStateAttached_SRC(uint8_t PortNum, USBPD_CAD_EVENT *pEvent, CCxPin_TypeDef *pCCXX)
{
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b08a      	sub	sp, #40	@ 0x28
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	4603      	mov	r3, r0
 800f3dc:	60b9      	str	r1, [r7, #8]
 800f3de:	607a      	str	r2, [r7, #4]
 800f3e0:	73fb      	strb	r3, [r7, #15]
  for (int32_t index = 0; index < CAD_DELAY_READ_CC_STATUS; index++)
  {
    __DSB();
  };
#endif /* _LOW_POWER || USBPDM1_VCC_FEATURE_ENABLED */
  CAD_HW_HandleTypeDef *_handle = &CAD_HW_Handles[PortNum];
 800f3e2:	7bfa      	ldrb	r2, [r7, #15]
 800f3e4:	4613      	mov	r3, r2
 800f3e6:	005b      	lsls	r3, r3, #1
 800f3e8:	4413      	add	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4a3f      	ldr	r2, [pc, #252]	@ (800f4ec <ManageStateAttached_SRC+0x118>)
 800f3ee:	4413      	add	r3, r2
 800f3f0:	623b      	str	r3, [r7, #32]
  uint32_t _timing = CAD_DEFAULT_TIME;
 800f3f2:	2302      	movs	r3, #2
 800f3f4:	627b      	str	r3, [r7, #36]	@ 0x24

  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800f3f6:	7bfa      	ldrb	r2, [r7, #15]
 800f3f8:	493d      	ldr	r1, [pc, #244]	@ (800f4f0 <ManageStateAttached_SRC+0x11c>)
 800f3fa:	4613      	mov	r3, r2
 800f3fc:	011b      	lsls	r3, r3, #4
 800f3fe:	1a9b      	subs	r3, r3, r2
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	440b      	add	r3, r1
 800f404:	3334      	adds	r3, #52	@ 0x34
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2b01      	cmp	r3, #1
 800f40a:	d10b      	bne.n	800f424 <ManageStateAttached_SRC+0x50>
 800f40c:	7bfa      	ldrb	r2, [r7, #15]
 800f40e:	4938      	ldr	r1, [pc, #224]	@ (800f4f0 <ManageStateAttached_SRC+0x11c>)
 800f410:	4613      	mov	r3, r2
 800f412:	011b      	lsls	r3, r3, #4
 800f414:	1a9b      	subs	r3, r3, r2
 800f416:	009b      	lsls	r3, r3, #2
 800f418:	440b      	add	r3, r1
 800f41a:	681b      	ldr	r3, [r3, #0]
 800f41c:	695b      	ldr	r3, [r3, #20]
 800f41e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800f422:	e00a      	b.n	800f43a <ManageStateAttached_SRC+0x66>
                  (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2);
 800f424:	7bfa      	ldrb	r2, [r7, #15]
 800f426:	4932      	ldr	r1, [pc, #200]	@ (800f4f0 <ManageStateAttached_SRC+0x11c>)
 800f428:	4613      	mov	r3, r2
 800f42a:	011b      	lsls	r3, r3, #4
 800f42c:	1a9b      	subs	r3, r3, r2
 800f42e:	009b      	lsls	r3, r3, #2
 800f430:	440b      	add	r3, r1
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	695b      	ldr	r3, [r3, #20]
  uint32_t ccx  = (Ports[PortNum].CCx == CC1) ? (Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) :
 800f436:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 800f43a:	61fb      	str	r3, [r7, #28]
  uint32_t comp = (Ports[PortNum].CCx == CC1) ? LL_UCPD_SRC_CC1_VRD : LL_UCPD_SRC_CC2_VRD;
 800f43c:	7bfa      	ldrb	r2, [r7, #15]
 800f43e:	492c      	ldr	r1, [pc, #176]	@ (800f4f0 <ManageStateAttached_SRC+0x11c>)
 800f440:	4613      	mov	r3, r2
 800f442:	011b      	lsls	r3, r3, #4
 800f444:	1a9b      	subs	r3, r3, r2
 800f446:	009b      	lsls	r3, r3, #2
 800f448:	440b      	add	r3, r1
 800f44a:	3334      	adds	r3, #52	@ 0x34
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	2b01      	cmp	r3, #1
 800f450:	d102      	bne.n	800f458 <ManageStateAttached_SRC+0x84>
 800f452:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800f456:	e001      	b.n	800f45c <ManageStateAttached_SRC+0x88>
 800f458:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800f45c:	61bb      	str	r3, [r7, #24]

  /* Check if CC lines is opened or switch to debug accessory */
  if (comp != ccx)
 800f45e:	69ba      	ldr	r2, [r7, #24]
 800f460:	69fb      	ldr	r3, [r7, #28]
 800f462:	429a      	cmp	r2, r3
 800f464:	d035      	beq.n	800f4d2 <ManageStateAttached_SRC+0xfe>
  {
    /* Start counting of CAD_tDebounce */
    if (USBPD_FALSE == _handle->CAD_tDebounce_flag)
 800f466:	6a3b      	ldr	r3, [r7, #32]
 800f468:	781b      	ldrb	r3, [r3, #0]
 800f46a:	f003 0320 	and.w	r3, r3, #32
 800f46e:	b2db      	uxtb	r3, r3
 800f470:	2b00      	cmp	r3, #0
 800f472:	d10c      	bne.n	800f48e <ManageStateAttached_SRC+0xba>
    {
      _handle->CAD_tDebounce_flag   = USBPD_TRUE;
 800f474:	6a3a      	ldr	r2, [r7, #32]
 800f476:	7813      	ldrb	r3, [r2, #0]
 800f478:	f043 0320 	orr.w	r3, r3, #32
 800f47c:	7013      	strb	r3, [r2, #0]
      _handle->CAD_tDebounce_start  = HAL_GetTick();
 800f47e:	f7fa fb71 	bl	8009b64 <HAL_GetTick>
 800f482:	4602      	mov	r2, r0
 800f484:	6a3b      	ldr	r3, [r7, #32]
 800f486:	605a      	str	r2, [r3, #4]
      _timing                       = CAD_TSRCDISCONNECT_THRESHOLD;
 800f488:	2302      	movs	r3, #2
 800f48a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f48c:	e029      	b.n	800f4e2 <ManageStateAttached_SRC+0x10e>
    }
    else /* CAD_tDebounce already running */
    {
      /* Evaluate CAD_tDebounce */
      uint32_t CAD_tDebounce = HAL_GetTick() - _handle->CAD_tDebounce_start;
 800f48e:	f7fa fb69 	bl	8009b64 <HAL_GetTick>
 800f492:	4602      	mov	r2, r0
 800f494:	6a3b      	ldr	r3, [r7, #32]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	1ad3      	subs	r3, r2, r3
 800f49a:	617b      	str	r3, [r7, #20]
      if (CAD_tDebounce > CAD_TSRCDISCONNECT_THRESHOLD)
 800f49c:	697b      	ldr	r3, [r7, #20]
 800f49e:	2b02      	cmp	r3, #2
 800f4a0:	d91f      	bls.n	800f4e2 <ManageStateAttached_SRC+0x10e>
      {
        HW_SignalDetachment(PortNum);
 800f4a2:	7bfb      	ldrb	r3, [r7, #15]
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	f001 fbd7 	bl	8010c58 <HW_SignalDetachment>
        if (USBPD_TRUE == Ports[PortNum].settings->CAD_RoleToggle)
        {
          USBPDM1_AssertRd(PortNum);
        }
#endif /* _DRP */
        _handle->CAD_tDebounce_flag = USBPD_FALSE;
 800f4aa:	6a3a      	ldr	r2, [r7, #32]
 800f4ac:	7813      	ldrb	r3, [r2, #0]
 800f4ae:	f36f 1345 	bfc	r3, #5, #1
 800f4b2:	7013      	strb	r3, [r2, #0]
        /* Move inside state DETACH to avoid wrong VCONN level*/
        _handle->cstate             = USBPD_CAD_STATE_DETACH_SRC;
 800f4b4:	6a3a      	ldr	r2, [r7, #32]
 800f4b6:	7853      	ldrb	r3, [r2, #1]
 800f4b8:	210b      	movs	r1, #11
 800f4ba:	f361 0345 	bfi	r3, r1, #1, #5
 800f4be:	7053      	strb	r3, [r2, #1]
        *pEvent                     = USBPD_CAD_EVENT_DETACHED;
 800f4c0:	68bb      	ldr	r3, [r7, #8]
 800f4c2:	2201      	movs	r2, #1
 800f4c4:	701a      	strb	r2, [r3, #0]
        *pCCXX                      = CCNONE;
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	2200      	movs	r2, #0
 800f4ca:	601a      	str	r2, [r3, #0]
        _timing                     = 0;
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4d0:	e007      	b.n	800f4e2 <ManageStateAttached_SRC+0x10e>
    }
  }
  else
  {
    /* Reset tPDDebounce flag*/
    _handle->CAD_tDebounce_flag   = USBPD_FALSE;
 800f4d2:	6a3a      	ldr	r2, [r7, #32]
 800f4d4:	7813      	ldrb	r3, [r2, #0]
 800f4d6:	f36f 1345 	bfc	r3, #5, #1
 800f4da:	7013      	strb	r3, [r2, #0]
#if  defined(_LOW_POWER)
    _timing = CAD_VBUS_POLLING_TIME;
#else
    _timing = CAD_INFINITE_TIME;
 800f4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800f4e0:	627b      	str	r3, [r7, #36]	@ 0x24
#endif /* _LOW_POWER */
  }

  return _timing;
 800f4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800f4e4:	4618      	mov	r0, r3
 800f4e6:	3728      	adds	r7, #40	@ 0x28
 800f4e8:	46bd      	mov	sp, r7
 800f4ea:	bd80      	pop	{r7, pc}
 800f4ec:	20000af0 	.word	0x20000af0
 800f4f0:	20000b08 	.word	0x20000b08

0800f4f4 <CAD_HW_IF_VBUSDetectCallback>:
  * @param  VBUSConnectionStatus   VBUS connection status, based on @ref USBPD_PWR_VBUSConnectionStatusTypeDef
  * @retval None
  */
void CAD_HW_IF_VBUSDetectCallback(uint32_t PortNum,
                                  USBPD_PWR_VBUSConnectionStatusTypeDef VBUSConnectionStatus)
{
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b084      	sub	sp, #16
 800f4f8:	af02      	add	r7, sp, #8
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	70fb      	strb	r3, [r7, #3]
  /* If VBUS is connected */
  if (VBUSConnectionStatus == VBUS_CONNECTED)
 800f500:	78fb      	ldrb	r3, [r7, #3]
 800f502:	2b00      	cmp	r3, #0
 800f504:	d109      	bne.n	800f51a <CAD_HW_IF_VBUSDetectCallback+0x26>
  {
#if defined(_TRACE)
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	b2d9      	uxtb	r1, r3
 800f50a:	2333      	movs	r3, #51	@ 0x33
 800f50c:	9300      	str	r3, [sp, #0]
 800f50e:	4b0c      	ldr	r3, [pc, #48]	@ (800f540 <CAD_HW_IF_VBUSDetectCallback+0x4c>)
 800f510:	2200      	movs	r2, #0
 800f512:	2006      	movs	r0, #6
 800f514:	f7ff f878 	bl	800e608 <USBPD_TRACE_Add>
    /* VBUS_NOT_CONNECTED indication management : Error has to be handled through a Detach/Attach procedure.
       Handled using ErrorRecovery mechanism */
    CAD_Enter_ErrorRecovery(PortNum);
#endif /* USBPDCORE_LIB_NO_PD */
  }
}
 800f518:	e00d      	b.n	800f536 <CAD_HW_IF_VBUSDetectCallback+0x42>
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, PortNum, 0,
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	b2d9      	uxtb	r1, r3
 800f51e:	2337      	movs	r3, #55	@ 0x37
 800f520:	9300      	str	r3, [sp, #0]
 800f522:	4b08      	ldr	r3, [pc, #32]	@ (800f544 <CAD_HW_IF_VBUSDetectCallback+0x50>)
 800f524:	2200      	movs	r2, #0
 800f526:	2006      	movs	r0, #6
 800f528:	f7ff f86e 	bl	800e608 <USBPD_TRACE_Add>
    CAD_Enter_ErrorRecovery(PortNum);
 800f52c:	687b      	ldr	r3, [r7, #4]
 800f52e:	b2db      	uxtb	r3, r3
 800f530:	4618      	mov	r0, r3
 800f532:	f7ff fb97 	bl	800ec64 <CAD_Enter_ErrorRecovery>
}
 800f536:	bf00      	nop
 800f538:	3708      	adds	r7, #8
 800f53a:	46bd      	mov	sp, r7
 800f53c:	bd80      	pop	{r7, pc}
 800f53e:	bf00      	nop
 800f540:	0801b1b4 	.word	0x0801b1b4
 800f544:	0801b1e8 	.word	0x0801b1e8

0800f548 <LL_AHB1_GRP1_EnableClock>:
{
 800f548:	b480      	push	{r7}
 800f54a:	b085      	sub	sp, #20
 800f54c:	af00      	add	r7, sp, #0
 800f54e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800f550:	4b08      	ldr	r3, [pc, #32]	@ (800f574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f552:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f554:	4907      	ldr	r1, [pc, #28]	@ (800f574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	4313      	orrs	r3, r2
 800f55a:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800f55c:	4b05      	ldr	r3, [pc, #20]	@ (800f574 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800f55e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4013      	ands	r3, r2
 800f564:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800f566:	68fb      	ldr	r3, [r7, #12]
}
 800f568:	bf00      	nop
 800f56a:	3714      	adds	r7, #20
 800f56c:	46bd      	mov	sp, r7
 800f56e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f572:	4770      	bx	lr
 800f574:	40021000 	.word	0x40021000

0800f578 <USBPD_HW_GetUSPDInstance>:
/* Variable containing ADC conversions results */
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/

UCPD_TypeDef *USBPD_HW_GetUSPDInstance(uint8_t PortNum)
{
 800f578:	b480      	push	{r7}
 800f57a:	b083      	sub	sp, #12
 800f57c:	af00      	add	r7, sp, #0
 800f57e:	4603      	mov	r3, r0
 800f580:	71fb      	strb	r3, [r7, #7]
  return UCPD_INSTANCE0;
 800f582:	4b03      	ldr	r3, [pc, #12]	@ (800f590 <USBPD_HW_GetUSPDInstance+0x18>)
}
 800f584:	4618      	mov	r0, r3
 800f586:	370c      	adds	r7, #12
 800f588:	46bd      	mov	sp, r7
 800f58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f58e:	4770      	bx	lr
 800f590:	4000a000 	.word	0x4000a000

0800f594 <USBPD_HW_Init_DMARxInstance>:

#if !defined(USBPDCORE_LIB_NO_PD)
DMA_Channel_TypeDef *USBPD_HW_Init_DMARxInstance(uint8_t PortNum)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b08e      	sub	sp, #56	@ 0x38
 800f598:	af00      	add	r7, sp, #0
 800f59a:	4603      	mov	r3, r0
 800f59c:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800f59e:	f107 030c 	add.w	r3, r7, #12
 800f5a2:	4618      	mov	r0, r3
 800f5a4:	f7fe fb80 	bl	800dca8 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_PERIPH_TO_MEMORY;
 800f5a8:	2300      	movs	r3, #0
 800f5aa:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800f5ac:	2300      	movs	r3, #0
 800f5ae:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800f5b4:	2380      	movs	r3, #128	@ 0x80
 800f5b6:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	60fb      	str	r3, [r7, #12]
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_HIGH;
 800f5cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f5d0:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_RX;
 800f5d2:	2001      	movs	r0, #1
 800f5d4:	f7ff ffb8 	bl	800f548 <LL_AHB1_GRP1_EnableClock>

  /* Initialise the DMA */
  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_RX;
 800f5d8:	2372      	movs	r3, #114	@ 0x72
 800f5da:	633b      	str	r3, [r7, #48]	@ 0x30

  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_RX, UCPDDMA_INSTANCE0_LL_CHANNEL_RX, &DMA_InitStruct);
 800f5dc:	f107 030c 	add.w	r3, r7, #12
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	2103      	movs	r1, #3
 800f5e4:	4803      	ldr	r0, [pc, #12]	@ (800f5f4 <USBPD_HW_Init_DMARxInstance+0x60>)
 800f5e6:	f7fe fb1f 	bl	800dc28 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_RX;
 800f5ea:	4b03      	ldr	r3, [pc, #12]	@ (800f5f8 <USBPD_HW_Init_DMARxInstance+0x64>)
}
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	3738      	adds	r7, #56	@ 0x38
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bd80      	pop	{r7, pc}
 800f5f4:	40020000 	.word	0x40020000
 800f5f8:	40020044 	.word	0x40020044

0800f5fc <USBPD_HW_DeInit_DMARxInstance>:

void USBPD_HW_DeInit_DMARxInstance(uint8_t PortNum)
{
 800f5fc:	b480      	push	{r7}
 800f5fe:	b083      	sub	sp, #12
 800f600:	af00      	add	r7, sp, #0
 800f602:	4603      	mov	r3, r0
 800f604:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800f606:	bf00      	nop
 800f608:	370c      	adds	r7, #12
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr
	...

0800f614 <USBPD_HW_Init_DMATxInstance>:

DMA_Channel_TypeDef *USBPD_HW_Init_DMATxInstance(uint8_t PortNum)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b08e      	sub	sp, #56	@ 0x38
 800f618:	af00      	add	r7, sp, #0
 800f61a:	4603      	mov	r3, r0
 800f61c:	71fb      	strb	r3, [r7, #7]
  LL_DMA_InitTypeDef DMA_InitStruct;

  /* Initialise the DMA */
  LL_DMA_StructInit(&DMA_InitStruct);
 800f61e:	f107 030c 	add.w	r3, r7, #12
 800f622:	4618      	mov	r0, r3
 800f624:	f7fe fb40 	bl	800dca8 <LL_DMA_StructInit>
  DMA_InitStruct.Direction = LL_DMA_DIRECTION_MEMORY_TO_PERIPH;
 800f628:	2310      	movs	r3, #16
 800f62a:	617b      	str	r3, [r7, #20]
  DMA_InitStruct.Mode = LL_DMA_MODE_NORMAL;
 800f62c:	2300      	movs	r3, #0
 800f62e:	61bb      	str	r3, [r7, #24]
  DMA_InitStruct.PeriphOrM2MSrcIncMode = LL_DMA_PERIPH_NOINCREMENT;
 800f630:	2300      	movs	r3, #0
 800f632:	61fb      	str	r3, [r7, #28]
  DMA_InitStruct.MemoryOrM2MDstIncMode = LL_DMA_MEMORY_INCREMENT;
 800f634:	2380      	movs	r3, #128	@ 0x80
 800f636:	623b      	str	r3, [r7, #32]
  DMA_InitStruct.PeriphOrM2MSrcDataSize = LL_DMA_PDATAALIGN_BYTE;
 800f638:	2300      	movs	r3, #0
 800f63a:	627b      	str	r3, [r7, #36]	@ 0x24
  DMA_InitStruct.MemoryOrM2MDstDataSize = LL_DMA_MDATAALIGN_BYTE;
 800f63c:	2300      	movs	r3, #0
 800f63e:	62bb      	str	r3, [r7, #40]	@ 0x28
  DMA_InitStruct.NbData = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	62fb      	str	r3, [r7, #44]	@ 0x2c
  DMA_InitStruct.MemoryOrM2MDstAddress = 0x0;
 800f644:	2300      	movs	r3, #0
 800f646:	613b      	str	r3, [r7, #16]
  DMA_InitStruct.PeriphOrM2MSrcAddress = 0x0;
 800f648:	2300      	movs	r3, #0
 800f64a:	60fb      	str	r3, [r7, #12]

  /* Enable the clock */
  UCPDDMA_INSTANCE0_CLOCKENABLE_TX;
 800f64c:	2001      	movs	r0, #1
 800f64e:	f7ff ff7b 	bl	800f548 <LL_AHB1_GRP1_EnableClock>

  DMA_InitStruct.PeriphRequest = UCPDDMA_INSTANCE0_REQUEST_TX;
 800f652:	2373      	movs	r3, #115	@ 0x73
 800f654:	633b      	str	r3, [r7, #48]	@ 0x30
  DMA_InitStruct.Priority = LL_DMA_PRIORITY_MEDIUM;
 800f656:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f65a:	637b      	str	r3, [r7, #52]	@ 0x34
  (void)LL_DMA_Init(UCPDDMA_INSTANCE0_DMA_TX, UCPDDMA_INSTANCE0_LL_CHANNEL_TX, &DMA_InitStruct);
 800f65c:	f107 030c 	add.w	r3, r7, #12
 800f660:	461a      	mov	r2, r3
 800f662:	2101      	movs	r1, #1
 800f664:	4803      	ldr	r0, [pc, #12]	@ (800f674 <USBPD_HW_Init_DMATxInstance+0x60>)
 800f666:	f7fe fadf 	bl	800dc28 <LL_DMA_Init>
  return UCPDDMA_INSTANCE0_CHANNEL_TX;
 800f66a:	4b03      	ldr	r3, [pc, #12]	@ (800f678 <USBPD_HW_Init_DMATxInstance+0x64>)
}
 800f66c:	4618      	mov	r0, r3
 800f66e:	3738      	adds	r7, #56	@ 0x38
 800f670:	46bd      	mov	sp, r7
 800f672:	bd80      	pop	{r7, pc}
 800f674:	40020000 	.word	0x40020000
 800f678:	4002001c 	.word	0x4002001c

0800f67c <USBPD_HW_DeInit_DMATxInstance>:

void USBPD_HW_DeInit_DMATxInstance(uint8_t PortNum)
{
 800f67c:	b480      	push	{r7}
 800f67e:	b083      	sub	sp, #12
 800f680:	af00      	add	r7, sp, #0
 800f682:	4603      	mov	r3, r0
 800f684:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
}
 800f686:	bf00      	nop
 800f688:	370c      	adds	r7, #12
 800f68a:	46bd      	mov	sp, r7
 800f68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f690:	4770      	bx	lr

0800f692 <USBPD_HW_SetFRSSignalling>:
  (void)PortNum;
  return LL_UCPD_RESISTOR_3_0A;
}

void USBPD_HW_SetFRSSignalling(uint8_t PortNum, uint8_t cc)
{
 800f692:	b480      	push	{r7}
 800f694:	b083      	sub	sp, #12
 800f696:	af00      	add	r7, sp, #0
 800f698:	4603      	mov	r3, r0
 800f69a:	460a      	mov	r2, r1
 800f69c:	71fb      	strb	r3, [r7, #7]
 800f69e:	4613      	mov	r3, r2
 800f6a0:	71bb      	strb	r3, [r7, #6]
  else
  {
    /* FRS_TX common */
    UCPDFRS_INSTANCE0_FRSCC2;
  }
}
 800f6a2:	bf00      	nop
 800f6a4:	370c      	adds	r7, #12
 800f6a6:	46bd      	mov	sp, r7
 800f6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ac:	4770      	bx	lr

0800f6ae <LL_UCPD_ClearFlag_TypeCEventCC2>:
  * @rmtoll IIMR          TYPECEVT2IE        LL_UCPD_ClearFlag_TypeCEventCC2
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC2(UCPD_TypeDef *UCPDx)
{
 800f6ae:	b480      	push	{r7}
 800f6b0:	b083      	sub	sp, #12
 800f6b2:	af00      	add	r7, sp, #0
 800f6b4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT2CF);
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	699b      	ldr	r3, [r3, #24]
 800f6ba:	f443 4200 	orr.w	r2, r3, #32768	@ 0x8000
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	619a      	str	r2, [r3, #24]
}
 800f6c2:	bf00      	nop
 800f6c4:	370c      	adds	r7, #12
 800f6c6:	46bd      	mov	sp, r7
 800f6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6cc:	4770      	bx	lr

0800f6ce <LL_UCPD_ClearFlag_TypeCEventCC1>:
  * @rmtoll IIMR          TYPECEVT1IE        LL_UCPD_ClearFlag_TypeCEventCC1
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TypeCEventCC1(UCPD_TypeDef *UCPDx)
{
 800f6ce:	b480      	push	{r7}
 800f6d0:	b083      	sub	sp, #12
 800f6d2:	af00      	add	r7, sp, #0
 800f6d4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TYPECEVT1CF);
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	699b      	ldr	r3, [r3, #24]
 800f6da:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	619a      	str	r2, [r3, #24]
}
 800f6e2:	bf00      	nop
 800f6e4:	370c      	adds	r7, #12
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ec:	4770      	bx	lr

0800f6ee <LL_UCPD_ClearFlag_RxMsgEnd>:
  * @rmtoll ICR          RXMSGENDIE         LL_UCPD_ClearFlag_RxMsgEnd
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxMsgEnd(UCPD_TypeDef *UCPDx)
{
 800f6ee:	b480      	push	{r7}
 800f6f0:	b083      	sub	sp, #12
 800f6f2:	af00      	add	r7, sp, #0
 800f6f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXMSGENDCF);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	699b      	ldr	r3, [r3, #24]
 800f6fa:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	619a      	str	r2, [r3, #24]
}
 800f702:	bf00      	nop
 800f704:	370c      	adds	r7, #12
 800f706:	46bd      	mov	sp, r7
 800f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f70c:	4770      	bx	lr

0800f70e <LL_UCPD_ClearFlag_RxOvr>:
  * @rmtoll ICR          RXOVRIE         LL_UCPD_ClearFlag_RxOvr
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOvr(UCPD_TypeDef *UCPDx)
{
 800f70e:	b480      	push	{r7}
 800f710:	b083      	sub	sp, #12
 800f712:	af00      	add	r7, sp, #0
 800f714:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXOVRCF);
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	699b      	ldr	r3, [r3, #24]
 800f71a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	619a      	str	r2, [r3, #24]
}
 800f722:	bf00      	nop
 800f724:	370c      	adds	r7, #12
 800f726:	46bd      	mov	sp, r7
 800f728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72c:	4770      	bx	lr

0800f72e <LL_UCPD_ClearFlag_RxHRST>:
  * @rmtoll ICR          RXHRSTDETIE         LL_UCPD_ClearFlag_RxHRST
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxHRST(UCPD_TypeDef *UCPDx)
{
 800f72e:	b480      	push	{r7}
 800f730:	b083      	sub	sp, #12
 800f732:	af00      	add	r7, sp, #0
 800f734:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXHRSTDETCF);
 800f736:	687b      	ldr	r3, [r7, #4]
 800f738:	699b      	ldr	r3, [r3, #24]
 800f73a:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	619a      	str	r2, [r3, #24]
}
 800f742:	bf00      	nop
 800f744:	370c      	adds	r7, #12
 800f746:	46bd      	mov	sp, r7
 800f748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f74c:	4770      	bx	lr

0800f74e <LL_UCPD_ClearFlag_RxOrderSet>:
  * @rmtoll ICR          RXORDDETIE         LL_UCPD_ClearFlag_RxOrderSet
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_RxOrderSet(UCPD_TypeDef *UCPDx)
{
 800f74e:	b480      	push	{r7}
 800f750:	b083      	sub	sp, #12
 800f752:	af00      	add	r7, sp, #0
 800f754:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_RXORDDETCF);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	699b      	ldr	r3, [r3, #24]
 800f75a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	619a      	str	r2, [r3, #24]
}
 800f762:	bf00      	nop
 800f764:	370c      	adds	r7, #12
 800f766:	46bd      	mov	sp, r7
 800f768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f76c:	4770      	bx	lr

0800f76e <LL_UCPD_ClearFlag_TxUND>:
  * @rmtoll ICR          TXUNDIE         LL_UCPD_ClearFlag_TxUND
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxUND(UCPD_TypeDef *UCPDx)
{
 800f76e:	b480      	push	{r7}
 800f770:	b083      	sub	sp, #12
 800f772:	af00      	add	r7, sp, #0
 800f774:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXUNDCF);
 800f776:	687b      	ldr	r3, [r7, #4]
 800f778:	699b      	ldr	r3, [r3, #24]
 800f77a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	619a      	str	r2, [r3, #24]
}
 800f782:	bf00      	nop
 800f784:	370c      	adds	r7, #12
 800f786:	46bd      	mov	sp, r7
 800f788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f78c:	4770      	bx	lr

0800f78e <LL_UCPD_ClearFlag_TxHRSTSENT>:
  * @rmtoll ICR          HRSTSENTIE         LL_UCPD_ClearFlag_TxHRSTSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTSENT(UCPD_TypeDef *UCPDx)
{
 800f78e:	b480      	push	{r7}
 800f790:	b083      	sub	sp, #12
 800f792:	af00      	add	r7, sp, #0
 800f794:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTSENTCF);
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	699b      	ldr	r3, [r3, #24]
 800f79a:	f043 0220 	orr.w	r2, r3, #32
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	619a      	str	r2, [r3, #24]
}
 800f7a2:	bf00      	nop
 800f7a4:	370c      	adds	r7, #12
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ac:	4770      	bx	lr

0800f7ae <LL_UCPD_ClearFlag_TxHRSTDISC>:
  * @rmtoll ICR          HRSTDISCIE         LL_UCPD_ClearFlag_TxHRSTDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxHRSTDISC(UCPD_TypeDef *UCPDx)
{
 800f7ae:	b480      	push	{r7}
 800f7b0:	b083      	sub	sp, #12
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_HRSTDISCCF);
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	699b      	ldr	r3, [r3, #24]
 800f7ba:	f043 0210 	orr.w	r2, r3, #16
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	619a      	str	r2, [r3, #24]
}
 800f7c2:	bf00      	nop
 800f7c4:	370c      	adds	r7, #12
 800f7c6:	46bd      	mov	sp, r7
 800f7c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7cc:	4770      	bx	lr

0800f7ce <LL_UCPD_ClearFlag_TxMSGABT>:
  * @rmtoll ICR          TXMSGABTIE         LL_UCPD_ClearFlag_TxMSGABT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGABT(UCPD_TypeDef *UCPDx)
{
 800f7ce:	b480      	push	{r7}
 800f7d0:	b083      	sub	sp, #12
 800f7d2:	af00      	add	r7, sp, #0
 800f7d4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGABTCF);
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	699b      	ldr	r3, [r3, #24]
 800f7da:	f043 0208 	orr.w	r2, r3, #8
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	619a      	str	r2, [r3, #24]
}
 800f7e2:	bf00      	nop
 800f7e4:	370c      	adds	r7, #12
 800f7e6:	46bd      	mov	sp, r7
 800f7e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ec:	4770      	bx	lr

0800f7ee <LL_UCPD_ClearFlag_TxMSGSENT>:
  * @rmtoll ICR          TXMSGSENTIE         LL_UCPD_ClearFlag_TxMSGSENT
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGSENT(UCPD_TypeDef *UCPDx)
{
 800f7ee:	b480      	push	{r7}
 800f7f0:	b083      	sub	sp, #12
 800f7f2:	af00      	add	r7, sp, #0
 800f7f4:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGSENTCF);
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	699b      	ldr	r3, [r3, #24]
 800f7fa:	f043 0204 	orr.w	r2, r3, #4
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	619a      	str	r2, [r3, #24]
}
 800f802:	bf00      	nop
 800f804:	370c      	adds	r7, #12
 800f806:	46bd      	mov	sp, r7
 800f808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f80c:	4770      	bx	lr

0800f80e <LL_UCPD_ClearFlag_TxMSGDISC>:
  * @rmtoll ICR          TXMSGDISCIE         LL_UCPD_ClearFlag_TxMSGDISC
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_ClearFlag_TxMSGDISC(UCPD_TypeDef *UCPDx)
{
 800f80e:	b480      	push	{r7}
 800f810:	b083      	sub	sp, #12
 800f812:	af00      	add	r7, sp, #0
 800f814:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->ICR, UCPD_ICR_TXMSGDISCCF);
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	699b      	ldr	r3, [r3, #24]
 800f81a:	f043 0202 	orr.w	r2, r3, #2
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	619a      	str	r2, [r3, #24]
}
 800f822:	bf00      	nop
 800f824:	370c      	adds	r7, #12
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <USBPD_PORT0_IRQHandler>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/
void PORTx_IRQHandler(uint8_t PortNum);

void USBPD_PORT0_IRQHandler(void)
{
 800f82e:	b580      	push	{r7, lr}
 800f830:	af00      	add	r7, sp, #0
  PORTx_IRQHandler(USBPD_PORT_0);
 800f832:	2000      	movs	r0, #0
 800f834:	f000 f802 	bl	800f83c <PORTx_IRQHandler>
}
 800f838:	bf00      	nop
 800f83a:	bd80      	pop	{r7, pc}

0800f83c <PORTx_IRQHandler>:

void PORTx_IRQHandler(uint8_t PortNum)
{
 800f83c:	b580      	push	{r7, lr}
 800f83e:	b084      	sub	sp, #16
 800f840:	af00      	add	r7, sp, #0
 800f842:	4603      	mov	r3, r0
 800f844:	71fb      	strb	r3, [r7, #7]
  UCPD_TypeDef *hucpd = Ports[PortNum].husbpd;
 800f846:	79fa      	ldrb	r2, [r7, #7]
 800f848:	4998      	ldr	r1, [pc, #608]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f84a:	4613      	mov	r3, r2
 800f84c:	011b      	lsls	r3, r3, #4
 800f84e:	1a9b      	subs	r3, r3, r2
 800f850:	009b      	lsls	r3, r3, #2
 800f852:	440b      	add	r3, r1
 800f854:	681b      	ldr	r3, [r3, #0]
 800f856:	60fb      	str	r3, [r7, #12]
  uint32_t _interrupt = LL_UCPD_ReadReg(hucpd, SR);
 800f858:	68fb      	ldr	r3, [r7, #12]
 800f85a:	695b      	ldr	r3, [r3, #20]
 800f85c:	60bb      	str	r3, [r7, #8]
  static uint8_t ovrflag = 0;

  if ((hucpd->IMR & _interrupt) != 0u)
 800f85e:	68fb      	ldr	r3, [r7, #12]
 800f860:	691a      	ldr	r2, [r3, #16]
 800f862:	68bb      	ldr	r3, [r7, #8]
 800f864:	4013      	ands	r3, r2
 800f866:	2b00      	cmp	r3, #0
 800f868:	f000 81ca 	beq.w	800fc00 <PORTx_IRQHandler+0x3c4>
  {
    /* TXIS no need to enable it all the transfer are done by DMA */
    if (UCPD_SR_TXMSGDISC == (_interrupt & UCPD_SR_TXMSGDISC))
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	f003 0302 	and.w	r3, r3, #2
 800f872:	2b00      	cmp	r3, #0
 800f874:	d035      	beq.n	800f8e2 <PORTx_IRQHandler+0xa6>
    {
      /* Message has been discarded */
      LL_UCPD_ClearFlag_TxMSGDISC(hucpd);
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff ffc9 	bl	800f80e <LL_UCPD_ClearFlag_TxMSGDISC>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f87c:	79fa      	ldrb	r2, [r7, #7]
 800f87e:	498b      	ldr	r1, [pc, #556]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f880:	4613      	mov	r3, r2
 800f882:	011b      	lsls	r3, r3, #4
 800f884:	1a9b      	subs	r3, r3, r2
 800f886:	009b      	lsls	r3, r3, #2
 800f888:	440b      	add	r3, r1
 800f88a:	3304      	adds	r3, #4
 800f88c:	681b      	ldr	r3, [r3, #0]
 800f88e:	6819      	ldr	r1, [r3, #0]
 800f890:	79fa      	ldrb	r2, [r7, #7]
 800f892:	4886      	ldr	r0, [pc, #536]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f894:	4613      	mov	r3, r2
 800f896:	011b      	lsls	r3, r3, #4
 800f898:	1a9b      	subs	r3, r3, r2
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	4403      	add	r3, r0
 800f89e:	3304      	adds	r3, #4
 800f8a0:	681b      	ldr	r3, [r3, #0]
 800f8a2:	f021 0201 	bic.w	r2, r1, #1
 800f8a6:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f8a8:	bf00      	nop
 800f8aa:	79fa      	ldrb	r2, [r7, #7]
 800f8ac:	497f      	ldr	r1, [pc, #508]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f8ae:	4613      	mov	r3, r2
 800f8b0:	011b      	lsls	r3, r3, #4
 800f8b2:	1a9b      	subs	r3, r3, r2
 800f8b4:	009b      	lsls	r3, r3, #2
 800f8b6:	440b      	add	r3, r1
 800f8b8:	3304      	adds	r3, #4
 800f8ba:	681b      	ldr	r3, [r3, #0]
 800f8bc:	681b      	ldr	r3, [r3, #0]
 800f8be:	f003 0301 	and.w	r3, r3, #1
 800f8c2:	2b01      	cmp	r3, #1
 800f8c4:	d0f1      	beq.n	800f8aa <PORTx_IRQHandler+0x6e>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 1);
 800f8c6:	79fa      	ldrb	r2, [r7, #7]
 800f8c8:	4978      	ldr	r1, [pc, #480]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f8ca:	4613      	mov	r3, r2
 800f8cc:	011b      	lsls	r3, r3, #4
 800f8ce:	1a9b      	subs	r3, r3, r2
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	440b      	add	r3, r1
 800f8d4:	3314      	adds	r3, #20
 800f8d6:	681b      	ldr	r3, [r3, #0]
 800f8d8:	79fa      	ldrb	r2, [r7, #7]
 800f8da:	2101      	movs	r1, #1
 800f8dc:	4610      	mov	r0, r2
 800f8de:	4798      	blx	r3
      return;
 800f8e0:	e18e      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGSENT == (_interrupt & UCPD_SR_TXMSGSENT))
 800f8e2:	68bb      	ldr	r3, [r7, #8]
 800f8e4:	f003 0304 	and.w	r3, r3, #4
 800f8e8:	2b00      	cmp	r3, #0
 800f8ea:	d035      	beq.n	800f958 <PORTx_IRQHandler+0x11c>
    {
      /* Message has been fully transferred */
      LL_UCPD_ClearFlag_TxMSGSENT(hucpd);
 800f8ec:	68f8      	ldr	r0, [r7, #12]
 800f8ee:	f7ff ff7e 	bl	800f7ee <LL_UCPD_ClearFlag_TxMSGSENT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f8f2:	79fa      	ldrb	r2, [r7, #7]
 800f8f4:	496d      	ldr	r1, [pc, #436]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f8f6:	4613      	mov	r3, r2
 800f8f8:	011b      	lsls	r3, r3, #4
 800f8fa:	1a9b      	subs	r3, r3, r2
 800f8fc:	009b      	lsls	r3, r3, #2
 800f8fe:	440b      	add	r3, r1
 800f900:	3304      	adds	r3, #4
 800f902:	681b      	ldr	r3, [r3, #0]
 800f904:	6819      	ldr	r1, [r3, #0]
 800f906:	79fa      	ldrb	r2, [r7, #7]
 800f908:	4868      	ldr	r0, [pc, #416]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f90a:	4613      	mov	r3, r2
 800f90c:	011b      	lsls	r3, r3, #4
 800f90e:	1a9b      	subs	r3, r3, r2
 800f910:	009b      	lsls	r3, r3, #2
 800f912:	4403      	add	r3, r0
 800f914:	3304      	adds	r3, #4
 800f916:	681b      	ldr	r3, [r3, #0]
 800f918:	f021 0201 	bic.w	r2, r1, #1
 800f91c:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800f91e:	bf00      	nop
 800f920:	79fa      	ldrb	r2, [r7, #7]
 800f922:	4962      	ldr	r1, [pc, #392]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f924:	4613      	mov	r3, r2
 800f926:	011b      	lsls	r3, r3, #4
 800f928:	1a9b      	subs	r3, r3, r2
 800f92a:	009b      	lsls	r3, r3, #2
 800f92c:	440b      	add	r3, r1
 800f92e:	3304      	adds	r3, #4
 800f930:	681b      	ldr	r3, [r3, #0]
 800f932:	681b      	ldr	r3, [r3, #0]
 800f934:	f003 0301 	and.w	r3, r3, #1
 800f938:	2b01      	cmp	r3, #1
 800f93a:	d0f1      	beq.n	800f920 <PORTx_IRQHandler+0xe4>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 0);
 800f93c:	79fa      	ldrb	r2, [r7, #7]
 800f93e:	495b      	ldr	r1, [pc, #364]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f940:	4613      	mov	r3, r2
 800f942:	011b      	lsls	r3, r3, #4
 800f944:	1a9b      	subs	r3, r3, r2
 800f946:	009b      	lsls	r3, r3, #2
 800f948:	440b      	add	r3, r1
 800f94a:	3314      	adds	r3, #20
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	79fa      	ldrb	r2, [r7, #7]
 800f950:	2100      	movs	r1, #0
 800f952:	4610      	mov	r0, r2
 800f954:	4798      	blx	r3

#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */
      return;
 800f956:	e153      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    if (UCPD_SR_TXMSGABT == (_interrupt & UCPD_SR_TXMSGABT))
 800f958:	68bb      	ldr	r3, [r7, #8]
 800f95a:	f003 0308 	and.w	r3, r3, #8
 800f95e:	2b00      	cmp	r3, #0
 800f960:	d035      	beq.n	800f9ce <PORTx_IRQHandler+0x192>
    {
      LL_UCPD_ClearFlag_TxMSGABT(hucpd);
 800f962:	68f8      	ldr	r0, [r7, #12]
 800f964:	f7ff ff33 	bl	800f7ce <LL_UCPD_ClearFlag_TxMSGABT>
      CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 800f968:	79fa      	ldrb	r2, [r7, #7]
 800f96a:	4950      	ldr	r1, [pc, #320]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f96c:	4613      	mov	r3, r2
 800f96e:	011b      	lsls	r3, r3, #4
 800f970:	1a9b      	subs	r3, r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	440b      	add	r3, r1
 800f976:	3304      	adds	r3, #4
 800f978:	681b      	ldr	r3, [r3, #0]
 800f97a:	6819      	ldr	r1, [r3, #0]
 800f97c:	79fa      	ldrb	r2, [r7, #7]
 800f97e:	484b      	ldr	r0, [pc, #300]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f980:	4613      	mov	r3, r2
 800f982:	011b      	lsls	r3, r3, #4
 800f984:	1a9b      	subs	r3, r3, r2
 800f986:	009b      	lsls	r3, r3, #2
 800f988:	4403      	add	r3, r0
 800f98a:	3304      	adds	r3, #4
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	f021 0201 	bic.w	r2, r1, #1
 800f992:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 800f994:	bf00      	nop
 800f996:	79fa      	ldrb	r2, [r7, #7]
 800f998:	4944      	ldr	r1, [pc, #272]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f99a:	4613      	mov	r3, r2
 800f99c:	011b      	lsls	r3, r3, #4
 800f99e:	1a9b      	subs	r3, r3, r2
 800f9a0:	009b      	lsls	r3, r3, #2
 800f9a2:	440b      	add	r3, r1
 800f9a4:	3304      	adds	r3, #4
 800f9a6:	681b      	ldr	r3, [r3, #0]
 800f9a8:	681b      	ldr	r3, [r3, #0]
 800f9aa:	f003 0301 	and.w	r3, r3, #1
 800f9ae:	2b01      	cmp	r3, #1
 800f9b0:	d0f1      	beq.n	800f996 <PORTx_IRQHandler+0x15a>
      Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted(PortNum, 2);
 800f9b2:	79fa      	ldrb	r2, [r7, #7]
 800f9b4:	493d      	ldr	r1, [pc, #244]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	011b      	lsls	r3, r3, #4
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	440b      	add	r3, r1
 800f9c0:	3314      	adds	r3, #20
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	79fa      	ldrb	r2, [r7, #7]
 800f9c6:	2102      	movs	r1, #2
 800f9c8:	4610      	mov	r0, r2
 800f9ca:	4798      	blx	r3
      return;
 800f9cc:	e118      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* HRSTDISC : hard reset sending has been discarded */
    if (UCPD_SR_HRSTDISC == (_interrupt & UCPD_SR_HRSTDISC))
 800f9ce:	68bb      	ldr	r3, [r7, #8]
 800f9d0:	f003 0310 	and.w	r3, r3, #16
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d003      	beq.n	800f9e0 <PORTx_IRQHandler+0x1a4>
    {
      LL_UCPD_ClearFlag_TxHRSTDISC(hucpd);
 800f9d8:	68f8      	ldr	r0, [r7, #12]
 800f9da:	f7ff fee8 	bl	800f7ae <LL_UCPD_ClearFlag_TxHRSTDISC>
      return;
 800f9de:	e10f      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_HRSTSENT == (_interrupt & UCPD_SR_HRSTSENT))
 800f9e0:	68bb      	ldr	r3, [r7, #8]
 800f9e2:	f003 0320 	and.w	r3, r3, #32
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d010      	beq.n	800fa0c <PORTx_IRQHandler+0x1d0>
    {
      /* Answer not expected by the stack */
      LL_UCPD_ClearFlag_TxHRSTSENT(hucpd);
 800f9ea:	68f8      	ldr	r0, [r7, #12]
 800f9ec:	f7ff fecf 	bl	800f78e <LL_UCPD_ClearFlag_TxHRSTSENT>
      Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800f9f0:	79fa      	ldrb	r2, [r7, #7]
 800f9f2:	492e      	ldr	r1, [pc, #184]	@ (800faac <PORTx_IRQHandler+0x270>)
 800f9f4:	4613      	mov	r3, r2
 800f9f6:	011b      	lsls	r3, r3, #4
 800f9f8:	1a9b      	subs	r3, r3, r2
 800f9fa:	009b      	lsls	r3, r3, #2
 800f9fc:	440b      	add	r3, r1
 800f9fe:	3324      	adds	r3, #36	@ 0x24
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	79fa      	ldrb	r2, [r7, #7]
 800fa04:	2105      	movs	r1, #5
 800fa06:	4610      	mov	r0, r2
 800fa08:	4798      	blx	r3
      return;
 800fa0a:	e0f9      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* TXUND : tx underrun detected */
    if (UCPD_SR_TXUND == (_interrupt & UCPD_SR_TXUND))
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d003      	beq.n	800fa1e <PORTx_IRQHandler+0x1e2>
    {
      /* Nothing to do.
         The port partner checks the message integrity with CRC, so PRL will repeat the sending.
         Can be used for debugging purpose */
      LL_UCPD_ClearFlag_TxUND(hucpd);
 800fa16:	68f8      	ldr	r0, [r7, #12]
 800fa18:	f7ff fea9 	bl	800f76e <LL_UCPD_ClearFlag_TxUND>
      return;
 800fa1c:	e0f0      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* RXNE : not needed the stack only perform transfer by DMA */
    /* RXORDDET: not needed so stack will not enabled this interrupt */
    if (UCPD_SR_RXORDDET == (_interrupt & UCPD_SR_RXORDDET))
 800fa1e:	68bb      	ldr	r3, [r7, #8]
 800fa20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	d01e      	beq.n	800fa66 <PORTx_IRQHandler+0x22a>
    {
      if (LL_UCPD_RXORDSET_CABLE_RESET == hucpd->RX_ORDSET)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fa2c:	2b05      	cmp	r3, #5
 800fa2e:	d10c      	bne.n	800fa4a <PORTx_IRQHandler+0x20e>
      {
        /* Cable reset detected */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800fa30:	79fa      	ldrb	r2, [r7, #7]
 800fa32:	491e      	ldr	r1, [pc, #120]	@ (800faac <PORTx_IRQHandler+0x270>)
 800fa34:	4613      	mov	r3, r2
 800fa36:	011b      	lsls	r3, r3, #4
 800fa38:	1a9b      	subs	r3, r3, r2
 800fa3a:	009b      	lsls	r3, r3, #2
 800fa3c:	440b      	add	r3, r1
 800fa3e:	331c      	adds	r3, #28
 800fa40:	681b      	ldr	r3, [r3, #0]
 800fa42:	79fa      	ldrb	r2, [r7, #7]
 800fa44:	2106      	movs	r1, #6
 800fa46:	4610      	mov	r0, r2
 800fa48:	4798      	blx	r3
      }
      LL_UCPD_ClearFlag_RxOrderSet(hucpd);
 800fa4a:	68f8      	ldr	r0, [r7, #12]
 800fa4c:	f7ff fe7f 	bl	800f74e <LL_UCPD_ClearFlag_RxOrderSet>
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */

      /* Forbid message sending */
      Ports[PortNum].RXStatus = USBPD_TRUE;
 800fa50:	79fa      	ldrb	r2, [r7, #7]
 800fa52:	4916      	ldr	r1, [pc, #88]	@ (800faac <PORTx_IRQHandler+0x270>)
 800fa54:	4613      	mov	r3, r2
 800fa56:	011b      	lsls	r3, r3, #4
 800fa58:	1a9b      	subs	r3, r3, r2
 800fa5a:	009b      	lsls	r3, r3, #2
 800fa5c:	440b      	add	r3, r1
 800fa5e:	3338      	adds	r3, #56	@ 0x38
 800fa60:	2201      	movs	r2, #1
 800fa62:	701a      	strb	r2, [r3, #0]
      return;
 800fa64:	e0cc      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXHRSTDET */
    if (UCPD_SR_RXHRSTDET == (_interrupt & UCPD_SR_RXHRSTDET))
 800fa66:	68bb      	ldr	r3, [r7, #8]
 800fa68:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d010      	beq.n	800fa92 <PORTx_IRQHandler+0x256>
    {
      Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_HARD_RESET);
 800fa70:	79fa      	ldrb	r2, [r7, #7]
 800fa72:	490e      	ldr	r1, [pc, #56]	@ (800faac <PORTx_IRQHandler+0x270>)
 800fa74:	4613      	mov	r3, r2
 800fa76:	011b      	lsls	r3, r3, #4
 800fa78:	1a9b      	subs	r3, r3, r2
 800fa7a:	009b      	lsls	r3, r3, #2
 800fa7c:	440b      	add	r3, r1
 800fa7e:	331c      	adds	r3, #28
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	79fa      	ldrb	r2, [r7, #7]
 800fa84:	2105      	movs	r1, #5
 800fa86:	4610      	mov	r0, r2
 800fa88:	4798      	blx	r3
      LL_UCPD_ClearFlag_RxHRST(hucpd);
 800fa8a:	68f8      	ldr	r0, [r7, #12]
 800fa8c:	f7ff fe4f 	bl	800f72e <LL_UCPD_ClearFlag_RxHRST>
      return;
 800fa90:	e0b6      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* Check RXOVR */
    if (UCPD_SR_RXOVR == (_interrupt & UCPD_SR_RXOVR))
 800fa92:	68bb      	ldr	r3, [r7, #8]
 800fa94:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800fa98:	2b00      	cmp	r3, #0
 800fa9a:	d00b      	beq.n	800fab4 <PORTx_IRQHandler+0x278>
    {
      /* Nothing to do, the message will be discarded and port Partner will try sending again. */
      ovrflag = 1;
 800fa9c:	4b04      	ldr	r3, [pc, #16]	@ (800fab0 <PORTx_IRQHandler+0x274>)
 800fa9e:	2201      	movs	r2, #1
 800faa0:	701a      	strb	r2, [r3, #0]
      LL_UCPD_ClearFlag_RxOvr(hucpd);
 800faa2:	68f8      	ldr	r0, [r7, #12]
 800faa4:	f7ff fe33 	bl	800f70e <LL_UCPD_ClearFlag_RxOvr>
      return;
 800faa8:	e0aa      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
 800faaa:	bf00      	nop
 800faac:	20000b08 	.word	0x20000b08
 800fab0:	20000afc 	.word	0x20000afc
    }

    /* Check RXMSGEND an Rx message has been received */
    if (UCPD_SR_RXMSGEND == (_interrupt & UCPD_SR_RXMSGEND))
 800fab4:	68bb      	ldr	r3, [r7, #8]
 800fab6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800faba:	2b00      	cmp	r3, #0
 800fabc:	f000 8085 	beq.w	800fbca <PORTx_IRQHandler+0x38e>
    {
      Ports[PortNum].RXStatus = USBPD_FALSE;
 800fac0:	79fa      	ldrb	r2, [r7, #7]
 800fac2:	4951      	ldr	r1, [pc, #324]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fac4:	4613      	mov	r3, r2
 800fac6:	011b      	lsls	r3, r3, #4
 800fac8:	1a9b      	subs	r3, r3, r2
 800faca:	009b      	lsls	r3, r3, #2
 800facc:	440b      	add	r3, r1
 800face:	3338      	adds	r3, #56	@ 0x38
 800fad0:	2200      	movs	r2, #0
 800fad2:	701a      	strb	r2, [r3, #0]

      /* For DMA mode, add a check to ensure the number of data received matches
         the number of data received by UCPD */
      LL_UCPD_ClearFlag_RxMsgEnd(hucpd);
 800fad4:	68f8      	ldr	r0, [r7, #12]
 800fad6:	f7ff fe0a 	bl	800f6ee <LL_UCPD_ClearFlag_RxMsgEnd>

      /* Disable DMA */
      CLEAR_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800fada:	79fa      	ldrb	r2, [r7, #7]
 800fadc:	494a      	ldr	r1, [pc, #296]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fade:	4613      	mov	r3, r2
 800fae0:	011b      	lsls	r3, r3, #4
 800fae2:	1a9b      	subs	r3, r3, r2
 800fae4:	009b      	lsls	r3, r3, #2
 800fae6:	440b      	add	r3, r1
 800fae8:	3308      	adds	r3, #8
 800faea:	681b      	ldr	r3, [r3, #0]
 800faec:	6819      	ldr	r1, [r3, #0]
 800faee:	79fa      	ldrb	r2, [r7, #7]
 800faf0:	4845      	ldr	r0, [pc, #276]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800faf2:	4613      	mov	r3, r2
 800faf4:	011b      	lsls	r3, r3, #4
 800faf6:	1a9b      	subs	r3, r3, r2
 800faf8:	009b      	lsls	r3, r3, #2
 800fafa:	4403      	add	r3, r0
 800fafc:	3308      	adds	r3, #8
 800fafe:	681b      	ldr	r3, [r3, #0]
 800fb00:	f021 0201 	bic.w	r2, r1, #1
 800fb04:	601a      	str	r2, [r3, #0]
      while ((Ports[PortNum].hdmarx->CCR & DMA_CCR_EN) == DMA_CCR_EN);
 800fb06:	bf00      	nop
 800fb08:	79fa      	ldrb	r2, [r7, #7]
 800fb0a:	493f      	ldr	r1, [pc, #252]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb0c:	4613      	mov	r3, r2
 800fb0e:	011b      	lsls	r3, r3, #4
 800fb10:	1a9b      	subs	r3, r3, r2
 800fb12:	009b      	lsls	r3, r3, #2
 800fb14:	440b      	add	r3, r1
 800fb16:	3308      	adds	r3, #8
 800fb18:	681b      	ldr	r3, [r3, #0]
 800fb1a:	681b      	ldr	r3, [r3, #0]
 800fb1c:	f003 0301 	and.w	r3, r3, #1
 800fb20:	2b01      	cmp	r3, #1
 800fb22:	d0f1      	beq.n	800fb08 <PORTx_IRQHandler+0x2cc>

      /* Ready for next transaction */
      WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 800fb24:	79fa      	ldrb	r2, [r7, #7]
 800fb26:	4938      	ldr	r1, [pc, #224]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb28:	4613      	mov	r3, r2
 800fb2a:	011b      	lsls	r3, r3, #4
 800fb2c:	1a9b      	subs	r3, r3, r2
 800fb2e:	009b      	lsls	r3, r3, #2
 800fb30:	440b      	add	r3, r1
 800fb32:	3330      	adds	r3, #48	@ 0x30
 800fb34:	6818      	ldr	r0, [r3, #0]
 800fb36:	79fa      	ldrb	r2, [r7, #7]
 800fb38:	4933      	ldr	r1, [pc, #204]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb3a:	4613      	mov	r3, r2
 800fb3c:	011b      	lsls	r3, r3, #4
 800fb3e:	1a9b      	subs	r3, r3, r2
 800fb40:	009b      	lsls	r3, r3, #2
 800fb42:	440b      	add	r3, r1
 800fb44:	3308      	adds	r3, #8
 800fb46:	681b      	ldr	r3, [r3, #0]
 800fb48:	4602      	mov	r2, r0
 800fb4a:	60da      	str	r2, [r3, #12]
      WRITE_REG(Ports[PortNum].hdmarx->CNDTR, SIZE_MAX_PD_TRANSACTION_UNCHUNK);
 800fb4c:	79fa      	ldrb	r2, [r7, #7]
 800fb4e:	492e      	ldr	r1, [pc, #184]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb50:	4613      	mov	r3, r2
 800fb52:	011b      	lsls	r3, r3, #4
 800fb54:	1a9b      	subs	r3, r3, r2
 800fb56:	009b      	lsls	r3, r3, #2
 800fb58:	440b      	add	r3, r1
 800fb5a:	3308      	adds	r3, #8
 800fb5c:	681b      	ldr	r3, [r3, #0]
 800fb5e:	f44f 7284 	mov.w	r2, #264	@ 0x108
 800fb62:	605a      	str	r2, [r3, #4]

      /* Enable the DMA */
      SET_BIT(Ports[PortNum].hdmarx->CCR, DMA_CCR_EN);
 800fb64:	79fa      	ldrb	r2, [r7, #7]
 800fb66:	4928      	ldr	r1, [pc, #160]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb68:	4613      	mov	r3, r2
 800fb6a:	011b      	lsls	r3, r3, #4
 800fb6c:	1a9b      	subs	r3, r3, r2
 800fb6e:	009b      	lsls	r3, r3, #2
 800fb70:	440b      	add	r3, r1
 800fb72:	3308      	adds	r3, #8
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	6819      	ldr	r1, [r3, #0]
 800fb78:	79fa      	ldrb	r2, [r7, #7]
 800fb7a:	4823      	ldr	r0, [pc, #140]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fb7c:	4613      	mov	r3, r2
 800fb7e:	011b      	lsls	r3, r3, #4
 800fb80:	1a9b      	subs	r3, r3, r2
 800fb82:	009b      	lsls	r3, r3, #2
 800fb84:	4403      	add	r3, r0
 800fb86:	3308      	adds	r3, #8
 800fb88:	681b      	ldr	r3, [r3, #0]
 800fb8a:	f041 0201 	orr.w	r2, r1, #1
 800fb8e:	601a      	str	r2, [r3, #0]
#if defined(_LOW_POWER)
      UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_ENABLE);
#endif /* _LOW_POWER */

      if (((_interrupt & UCPD_SR_RXERR) == 0u) && (ovrflag == 0u))
 800fb90:	68bb      	ldr	r3, [r7, #8]
 800fb92:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fb96:	2b00      	cmp	r3, #0
 800fb98:	d113      	bne.n	800fbc2 <PORTx_IRQHandler+0x386>
 800fb9a:	4b1c      	ldr	r3, [pc, #112]	@ (800fc0c <PORTx_IRQHandler+0x3d0>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	2b00      	cmp	r3, #0
 800fba0:	d10f      	bne.n	800fbc2 <PORTx_IRQHandler+0x386>
      {
        /* Rx message has been received without error */
        Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed(PortNum, hucpd->RX_ORDSET & UCPD_RX_ORDSET_RXORDSET);
 800fba2:	79fa      	ldrb	r2, [r7, #7]
 800fba4:	4918      	ldr	r1, [pc, #96]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fba6:	4613      	mov	r3, r2
 800fba8:	011b      	lsls	r3, r3, #4
 800fbaa:	1a9b      	subs	r3, r3, r2
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	440b      	add	r3, r1
 800fbb0:	3320      	adds	r3, #32
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	68fa      	ldr	r2, [r7, #12]
 800fbb6:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800fbb8:	f002 0107 	and.w	r1, r2, #7
 800fbbc:	79fa      	ldrb	r2, [r7, #7]
 800fbbe:	4610      	mov	r0, r2
 800fbc0:	4798      	blx	r3
      }
      ovrflag = 0;
 800fbc2:	4b12      	ldr	r3, [pc, #72]	@ (800fc0c <PORTx_IRQHandler+0x3d0>)
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
      return;
 800fbc8:	e01a      	b.n	800fc00 <PORTx_IRQHandler+0x3c4>
    }

    /* Check TYPECEVT1IE/TYPECEVT1IE || check TYPECEVT2IE/TYPECEVT2IE */
    if ((UCPD_SR_TYPECEVT1 == (_interrupt & UCPD_SR_TYPECEVT1))
 800fbca:	68bb      	ldr	r3, [r7, #8]
 800fbcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	d104      	bne.n	800fbde <PORTx_IRQHandler+0x3a2>
        || (UCPD_SR_TYPECEVT2 == (_interrupt & UCPD_SR_TYPECEVT2)))
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800fbda:	2b00      	cmp	r3, #0
 800fbdc:	d010      	beq.n	800fc00 <PORTx_IRQHandler+0x3c4>
    {
      /* Clear both interrupt */
      LL_UCPD_ClearFlag_TypeCEventCC1(hucpd);
 800fbde:	68f8      	ldr	r0, [r7, #12]
 800fbe0:	f7ff fd75 	bl	800f6ce <LL_UCPD_ClearFlag_TypeCEventCC1>
      LL_UCPD_ClearFlag_TypeCEventCC2(hucpd);
 800fbe4:	68f8      	ldr	r0, [r7, #12]
 800fbe6:	f7ff fd62 	bl	800f6ae <LL_UCPD_ClearFlag_TypeCEventCC2>
      Ports[PortNum].USBPD_CAD_WakeUp();
 800fbea:	79fa      	ldrb	r2, [r7, #7]
 800fbec:	4906      	ldr	r1, [pc, #24]	@ (800fc08 <PORTx_IRQHandler+0x3cc>)
 800fbee:	4613      	mov	r3, r2
 800fbf0:	011b      	lsls	r3, r3, #4
 800fbf2:	1a9b      	subs	r3, r3, r2
 800fbf4:	009b      	lsls	r3, r3, #2
 800fbf6:	440b      	add	r3, r1
 800fbf8:	332c      	adds	r3, #44	@ 0x2c
 800fbfa:	681b      	ldr	r3, [r3, #0]
 800fbfc:	4798      	blx	r3
      /* Wakeup CAD to check the detection event */
      return;
 800fbfe:	bf00      	nop
        }
      }
    }
#endif /* _FRS */
  }
}
 800fc00:	3710      	adds	r7, #16
 800fc02:	46bd      	mov	sp, r7
 800fc04:	bd80      	pop	{r7, pc}
 800fc06:	bf00      	nop
 800fc08:	20000b08 	.word	0x20000b08
 800fc0c:	20000afc 	.word	0x20000afc

0800fc10 <USBPD_PHY_Init>:
  * @param  SupportedSOP  bit field of the supported SOP
  * @retval status        @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Init(uint8_t PortNum, const USBPD_PHY_Callbacks *pCallbacks, uint8_t *pRxBuffer,
                                   USBPD_PortPowerRole_TypeDef PowerRole, uint32_t SupportedSOP)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	60b9      	str	r1, [r7, #8]
 800fc18:	607a      	str	r2, [r7, #4]
 800fc1a:	603b      	str	r3, [r7, #0]
 800fc1c:	4603      	mov	r3, r0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  (void)PowerRole;

  /* Set all callbacks */
  Ports[PortNum].cbs.USBPD_HW_IF_TxCompleted            = pCallbacks->USBPD_PHY_TxCompleted;
 800fc20:	7bfa      	ldrb	r2, [r7, #15]
 800fc22:	68bb      	ldr	r3, [r7, #8]
 800fc24:	6919      	ldr	r1, [r3, #16]
 800fc26:	482d      	ldr	r0, [pc, #180]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc28:	4613      	mov	r3, r2
 800fc2a:	011b      	lsls	r3, r3, #4
 800fc2c:	1a9b      	subs	r3, r3, r2
 800fc2e:	009b      	lsls	r3, r3, #2
 800fc30:	4403      	add	r3, r0
 800fc32:	3314      	adds	r3, #20
 800fc34:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_BistCompleted          = pCallbacks->USBPD_PHY_BistCompleted;
 800fc36:	7bfa      	ldrb	r2, [r7, #15]
 800fc38:	68bb      	ldr	r3, [r7, #8]
 800fc3a:	68d9      	ldr	r1, [r3, #12]
 800fc3c:	4827      	ldr	r0, [pc, #156]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc3e:	4613      	mov	r3, r2
 800fc40:	011b      	lsls	r3, r3, #4
 800fc42:	1a9b      	subs	r3, r3, r2
 800fc44:	009b      	lsls	r3, r3, #2
 800fc46:	4403      	add	r3, r0
 800fc48:	3318      	adds	r3, #24
 800fc4a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication     = pCallbacks->USBPD_PHY_ResetIndication;
 800fc4c:	7bfa      	ldrb	r2, [r7, #15]
 800fc4e:	68bb      	ldr	r3, [r7, #8]
 800fc50:	6859      	ldr	r1, [r3, #4]
 800fc52:	4822      	ldr	r0, [pc, #136]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc54:	4613      	mov	r3, r2
 800fc56:	011b      	lsls	r3, r3, #4
 800fc58:	1a9b      	subs	r3, r3, r2
 800fc5a:	009b      	lsls	r3, r3, #2
 800fc5c:	4403      	add	r3, r0
 800fc5e:	331c      	adds	r3, #28
 800fc60:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_RX_Completed           = PHY_Rx_Completed;
 800fc62:	7bfa      	ldrb	r2, [r7, #15]
 800fc64:	491d      	ldr	r1, [pc, #116]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc66:	4613      	mov	r3, r2
 800fc68:	011b      	lsls	r3, r3, #4
 800fc6a:	1a9b      	subs	r3, r3, r2
 800fc6c:	009b      	lsls	r3, r3, #2
 800fc6e:	440b      	add	r3, r1
 800fc70:	3320      	adds	r3, #32
 800fc72:	4a1b      	ldr	r2, [pc, #108]	@ (800fce0 <USBPD_PHY_Init+0xd0>)
 800fc74:	601a      	str	r2, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_HardResetCompleted  = pCallbacks->USBPD_PHY_ResetCompleted;
 800fc76:	7bfa      	ldrb	r2, [r7, #15]
 800fc78:	68bb      	ldr	r3, [r7, #8]
 800fc7a:	6899      	ldr	r1, [r3, #8]
 800fc7c:	4817      	ldr	r0, [pc, #92]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc7e:	4613      	mov	r3, r2
 800fc80:	011b      	lsls	r3, r3, #4
 800fc82:	1a9b      	subs	r3, r3, r2
 800fc84:	009b      	lsls	r3, r3, #2
 800fc86:	4403      	add	r3, r0
 800fc88:	3324      	adds	r3, #36	@ 0x24
 800fc8a:	6019      	str	r1, [r3, #0]
  Ports[PortNum].cbs.USBPD_HW_IF_TX_FRSReception        = pCallbacks->USBPD_PHY_FastRoleSwapReception;
 800fc8c:	7bfa      	ldrb	r2, [r7, #15]
 800fc8e:	68bb      	ldr	r3, [r7, #8]
 800fc90:	6959      	ldr	r1, [r3, #20]
 800fc92:	4812      	ldr	r0, [pc, #72]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fc94:	4613      	mov	r3, r2
 800fc96:	011b      	lsls	r3, r3, #4
 800fc98:	1a9b      	subs	r3, r3, r2
 800fc9a:	009b      	lsls	r3, r3, #2
 800fc9c:	4403      	add	r3, r0
 800fc9e:	3328      	adds	r3, #40	@ 0x28
 800fca0:	6019      	str	r1, [r3, #0]
  /* Initialize the hardware for the port */
  Ports[PortNum].ptr_RxBuff = pRxBuffer;
 800fca2:	7bfa      	ldrb	r2, [r7, #15]
 800fca4:	490d      	ldr	r1, [pc, #52]	@ (800fcdc <USBPD_PHY_Init+0xcc>)
 800fca6:	4613      	mov	r3, r2
 800fca8:	011b      	lsls	r3, r3, #4
 800fcaa:	1a9b      	subs	r3, r3, r2
 800fcac:	009b      	lsls	r3, r3, #2
 800fcae:	440b      	add	r3, r1
 800fcb0:	3330      	adds	r3, #48	@ 0x30
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	601a      	str	r2, [r3, #0]

  /* Initialize port related functionalities inside this layer */
  PHY_Ports[PortNum].SupportedSOP = SupportedSOP;
 800fcb6:	7bfb      	ldrb	r3, [r7, #15]
 800fcb8:	4a0a      	ldr	r2, [pc, #40]	@ (800fce4 <USBPD_PHY_Init+0xd4>)
 800fcba:	00db      	lsls	r3, r3, #3
 800fcbc:	4413      	add	r3, r2
 800fcbe:	69ba      	ldr	r2, [r7, #24]
 800fcc0:	605a      	str	r2, [r3, #4]
  PHY_Ports[PortNum].USBPD_PHY_MessageReceived = pCallbacks->USBPD_PHY_MessageReceived;
 800fcc2:	7bfb      	ldrb	r3, [r7, #15]
 800fcc4:	68ba      	ldr	r2, [r7, #8]
 800fcc6:	6812      	ldr	r2, [r2, #0]
 800fcc8:	4906      	ldr	r1, [pc, #24]	@ (800fce4 <USBPD_PHY_Init+0xd4>)
 800fcca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]

  return USBPD_OK;
 800fcce:	2300      	movs	r3, #0
}
 800fcd0:	4618      	mov	r0, r3
 800fcd2:	3714      	adds	r7, #20
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcda:	4770      	bx	lr
 800fcdc:	20000b08 	.word	0x20000b08
 800fce0:	0800fe91 	.word	0x0800fe91
 800fce4:	20000b00 	.word	0x20000b00

0800fce8 <USBPD_PHY_GetRetryTimerValue>:
  * @note   time used to determine when the protocol layer must re-send a message not acknowledged by a goodCRC
  * @param  PortNum    Number of the port.
  * @retval retry counter value in us.
  */
uint16_t USBPD_PHY_GetRetryTimerValue(uint8_t PortNum)
{
 800fce8:	b480      	push	{r7}
 800fcea:	b083      	sub	sp, #12
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	4603      	mov	r3, r0
 800fcf0:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  return 905u;
 800fcf2:	f240 3389 	movw	r3, #905	@ 0x389
}
 800fcf6:	4618      	mov	r0, r3
 800fcf8:	370c      	adds	r7, #12
 800fcfa:	46bd      	mov	sp, r7
 800fcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd00:	4770      	bx	lr

0800fd02 <USBPD_PHY_GetMinGOODCRCTimerValue>:
  * @note   time used to guarantee the min time of 26us between two PD message.
  * @param  PortNum    Number of the port.
  * @retval value in us.
  */
uint16_t USBPD_PHY_GetMinGOODCRCTimerValue(uint8_t PortNum)
{
 800fd02:	b480      	push	{r7}
 800fd04:	b083      	sub	sp, #12
 800fd06:	af00      	add	r7, sp, #0
 800fd08:	4603      	mov	r3, r0
 800fd0a:	71fb      	strb	r3, [r7, #7]
  return 30u;
 800fd0c:	231e      	movs	r3, #30
}
 800fd0e:	4618      	mov	r0, r3
 800fd10:	370c      	adds	r7, #12
 800fd12:	46bd      	mov	sp, r7
 800fd14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd18:	4770      	bx	lr

0800fd1a <USBPD_PHY_Reset>:
  * @brief  Reset the PHY of a specified port.
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_Reset(uint8_t PortNum)
{
 800fd1a:	b480      	push	{r7}
 800fd1c:	b083      	sub	sp, #12
 800fd1e:	af00      	add	r7, sp, #0
 800fd20:	4603      	mov	r3, r0
 800fd22:	71fb      	strb	r3, [r7, #7]
  (void)PortNum;
  /* Reset PHY layer   */
  /* Reset HW_IF layer */
}
 800fd24:	bf00      	nop
 800fd26:	370c      	adds	r7, #12
 800fd28:	46bd      	mov	sp, r7
 800fd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2e:	4770      	bx	lr

0800fd30 <USBPD_PHY_ResetRequest>:
  * @param  PortNum Number of the port
  * @param  Type    Type of reset (hard or cable reset) @ref USBPD_SOPTYPE_HARD_RESET or @ref USBPD_SOPTYPE_CABLE_RESET
  * @retval status  @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_ResetRequest(uint8_t PortNum, USBPD_SOPType_TypeDef Type)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	4603      	mov	r3, r0
 800fd38:	460a      	mov	r2, r1
 800fd3a:	71fb      	strb	r3, [r7, #7]
 800fd3c:	4613      	mov	r3, r2
 800fd3e:	71bb      	strb	r3, [r7, #6]
  /* Send the requested reset */
  return USBPD_PHY_SendMessage(PortNum, Type, NULL, 0);
 800fd40:	79b9      	ldrb	r1, [r7, #6]
 800fd42:	79f8      	ldrb	r0, [r7, #7]
 800fd44:	2300      	movs	r3, #0
 800fd46:	2200      	movs	r2, #0
 800fd48:	f000 f805 	bl	800fd56 <USBPD_PHY_SendMessage>
 800fd4c:	4603      	mov	r3, r0
}
 800fd4e:	4618      	mov	r0, r3
 800fd50:	3708      	adds	r7, #8
 800fd52:	46bd      	mov	sp, r7
 800fd54:	bd80      	pop	{r7, pc}

0800fd56 <USBPD_PHY_SendMessage>:
  * @param  pBuffer   Pointer to the buffer to be transmitted
  * @param  Size      Size of the buffer (bytes)
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_SendMessage(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint16_t Size)
{
 800fd56:	b580      	push	{r7, lr}
 800fd58:	b082      	sub	sp, #8
 800fd5a:	af00      	add	r7, sp, #0
 800fd5c:	603a      	str	r2, [r7, #0]
 800fd5e:	461a      	mov	r2, r3
 800fd60:	4603      	mov	r3, r0
 800fd62:	71fb      	strb	r3, [r7, #7]
 800fd64:	460b      	mov	r3, r1
 800fd66:	71bb      	strb	r3, [r7, #6]
 800fd68:	4613      	mov	r3, r2
 800fd6a:	80bb      	strh	r3, [r7, #4]
  /* Trace to track message */
  return USBPD_HW_IF_SendBuffer(PortNum, Type, pBuffer,  Size);
 800fd6c:	88bb      	ldrh	r3, [r7, #4]
 800fd6e:	79b9      	ldrb	r1, [r7, #6]
 800fd70:	79f8      	ldrb	r0, [r7, #7]
 800fd72:	683a      	ldr	r2, [r7, #0]
 800fd74:	f000 fb0a 	bl	801038c <USBPD_HW_IF_SendBuffer>
 800fd78:	4603      	mov	r3, r0
}
 800fd7a:	4618      	mov	r0, r3
 800fd7c:	3708      	adds	r7, #8
 800fd7e:	46bd      	mov	sp, r7
 800fd80:	bd80      	pop	{r7, pc}

0800fd82 <USBPD_PHY_Send_BIST_Pattern>:
  * @brief  Send BIST pattern.
  * @param  PortNum   Number of the port
  * @retval status    @ref USBPD_OK
  */
USBPD_StatusTypeDef USBPD_PHY_Send_BIST_Pattern(uint8_t PortNum)
{
 800fd82:	b580      	push	{r7, lr}
 800fd84:	b082      	sub	sp, #8
 800fd86:	af00      	add	r7, sp, #0
 800fd88:	4603      	mov	r3, r0
 800fd8a:	71fb      	strb	r3, [r7, #7]
  /* Call the low-level function (HW_IF) to accomplish the BIST Carrier Mode Transmission */
  USBPD_HW_IF_Send_BIST_Pattern(PortNum);
 800fd8c:	79fb      	ldrb	r3, [r7, #7]
 800fd8e:	4618      	mov	r0, r3
 800fd90:	f000 fc42 	bl	8010618 <USBPD_HW_IF_Send_BIST_Pattern>
  return USBPD_OK;
 800fd94:	2300      	movs	r3, #0
}
 800fd96:	4618      	mov	r0, r3
 800fd98:	3708      	adds	r7, #8
 800fd9a:	46bd      	mov	sp, r7
 800fd9c:	bd80      	pop	{r7, pc}

0800fd9e <USBPD_PHY_ExitTransmit>:
  * @param  PortNum port number value
  * @param  mode    SOP BIST MODE 2
  * @retval USBPD   status
  */
USBPD_StatusTypeDef USBPD_PHY_ExitTransmit(uint8_t PortNum, USBPD_SOPType_TypeDef mode)
{
 800fd9e:	b580      	push	{r7, lr}
 800fda0:	b082      	sub	sp, #8
 800fda2:	af00      	add	r7, sp, #0
 800fda4:	4603      	mov	r3, r0
 800fda6:	460a      	mov	r2, r1
 800fda8:	71fb      	strb	r3, [r7, #7]
 800fdaa:	4613      	mov	r3, r2
 800fdac:	71bb      	strb	r3, [r7, #6]
  if (USBPD_SOPTYPE_BIST_MODE_2 == mode)
 800fdae:	79bb      	ldrb	r3, [r7, #6]
 800fdb0:	2b07      	cmp	r3, #7
 800fdb2:	d103      	bne.n	800fdbc <USBPD_PHY_ExitTransmit+0x1e>
  {
    USBPD_HW_IF_StopBISTMode2(PortNum);
 800fdb4:	79fb      	ldrb	r3, [r7, #7]
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	f000 fab0 	bl	801031c <USBPD_HW_IF_StopBISTMode2>
  }
  return USBPD_OK;
 800fdbc:	2300      	movs	r3, #0
}
 800fdbe:	4618      	mov	r0, r3
 800fdc0:	3708      	adds	r7, #8
 800fdc2:	46bd      	mov	sp, r7
 800fdc4:	bd80      	pop	{r7, pc}

0800fdc6 <USBPD_PHY_SetResistor_SinkTxNG>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port
  * @retval None
  */
void USBPD_PHY_SetResistor_SinkTxNG(uint8_t PortNum)
{
 800fdc6:	b580      	push	{r7, lr}
 800fdc8:	b082      	sub	sp, #8
 800fdca:	af00      	add	r7, sp, #0
 800fdcc:	4603      	mov	r3, r0
 800fdce:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxNG(PortNum);
 800fdd0:	79fb      	ldrb	r3, [r7, #7]
 800fdd2:	4618      	mov	r0, r3
 800fdd4:	f000 ffc6 	bl	8010d64 <USBPD_HW_IF_SetResistor_SinkTxNG>
}
 800fdd8:	bf00      	nop
 800fdda:	3708      	adds	r7, #8
 800fddc:	46bd      	mov	sp, r7
 800fdde:	bd80      	pop	{r7, pc}

0800fde0 <USBPD_PHY_SetResistor_SinkTxOK>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval none.
  */
void USBPD_PHY_SetResistor_SinkTxOK(uint8_t PortNum)
{
 800fde0:	b580      	push	{r7, lr}
 800fde2:	b082      	sub	sp, #8
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	4603      	mov	r3, r0
 800fde8:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_SetResistor_SinkTxOK(PortNum);
 800fdea:	79fb      	ldrb	r3, [r7, #7]
 800fdec:	4618      	mov	r0, r3
 800fdee:	f000 ffd1 	bl	8010d94 <USBPD_HW_IF_SetResistor_SinkTxOK>
}
 800fdf2:	bf00      	nop
 800fdf4:	3708      	adds	r7, #8
 800fdf6:	46bd      	mov	sp, r7
 800fdf8:	bd80      	pop	{r7, pc}
	...

0800fdfc <USBPD_PHY_SOPSupported>:
  * @param  PortNum  Number of the port.
  * @param  SOPSupported  List of the supported SOP
  * @retval None.
  */
void USBPD_PHY_SOPSupported(uint8_t PortNum, uint32_t SOPSupported)
{
 800fdfc:	b480      	push	{r7}
 800fdfe:	b083      	sub	sp, #12
 800fe00:	af00      	add	r7, sp, #0
 800fe02:	4603      	mov	r3, r0
 800fe04:	6039      	str	r1, [r7, #0]
 800fe06:	71fb      	strb	r3, [r7, #7]
  PHY_Ports[PortNum].SupportedSOP = SOPSupported;
 800fe08:	79fb      	ldrb	r3, [r7, #7]
 800fe0a:	4a05      	ldr	r2, [pc, #20]	@ (800fe20 <USBPD_PHY_SOPSupported+0x24>)
 800fe0c:	00db      	lsls	r3, r3, #3
 800fe0e:	4413      	add	r3, r2
 800fe10:	683a      	ldr	r2, [r7, #0]
 800fe12:	605a      	str	r2, [r3, #4]
}
 800fe14:	bf00      	nop
 800fe16:	370c      	adds	r7, #12
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe1e:	4770      	bx	lr
 800fe20:	20000b00 	.word	0x20000b00

0800fe24 <USBPD_PHY_IsResistor_SinkTxOk>:
  * @note   used to manage the collision avoidance
  * @param  PortNum  Number of the port.
  * @retval USBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PHY_IsResistor_SinkTxOk(uint8_t PortNum)
{
 800fe24:	b580      	push	{r7, lr}
 800fe26:	b082      	sub	sp, #8
 800fe28:	af00      	add	r7, sp, #0
 800fe2a:	4603      	mov	r3, r0
 800fe2c:	71fb      	strb	r3, [r7, #7]
  return USBPD_HW_IF_IsResistor_SinkTxOk(PortNum);
 800fe2e:	79fb      	ldrb	r3, [r7, #7]
 800fe30:	4618      	mov	r0, r3
 800fe32:	f000 ffc7 	bl	8010dc4 <USBPD_HW_IF_IsResistor_SinkTxOk>
 800fe36:	4603      	mov	r3, r0
}
 800fe38:	4618      	mov	r0, r3
 800fe3a:	3708      	adds	r7, #8
 800fe3c:	46bd      	mov	sp, r7
 800fe3e:	bd80      	pop	{r7, pc}

0800fe40 <USBPD_PHY_FastRoleSwapSignalling>:
  * @brief  function to generate an FRS signalling
  * @param  PortNum  Number of the port.
  * @retval None.
  */
void USBPD_PHY_FastRoleSwapSignalling(uint8_t PortNum)
{
 800fe40:	b580      	push	{r7, lr}
 800fe42:	b082      	sub	sp, #8
 800fe44:	af00      	add	r7, sp, #0
 800fe46:	4603      	mov	r3, r0
 800fe48:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_FastRoleSwapSignalling(PortNum);
 800fe4a:	79fb      	ldrb	r3, [r7, #7]
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	f000 fff9 	bl	8010e44 <USBPD_HW_IF_FastRoleSwapSignalling>
}
 800fe52:	bf00      	nop
 800fe54:	3708      	adds	r7, #8
 800fe56:	46bd      	mov	sp, r7
 800fe58:	bd80      	pop	{r7, pc}

0800fe5a <USBPD_PHY_EnableRX>:
  * @brief  function used to enable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_EnableRX(uint8_t PortNum)
{
 800fe5a:	b580      	push	{r7, lr}
 800fe5c:	b082      	sub	sp, #8
 800fe5e:	af00      	add	r7, sp, #0
 800fe60:	4603      	mov	r3, r0
 800fe62:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_EnableRX(PortNum);
 800fe64:	79fb      	ldrb	r3, [r7, #7]
 800fe66:	4618      	mov	r0, r3
 800fe68:	f000 fd7e 	bl	8010968 <USBPD_HW_IF_EnableRX>
}
 800fe6c:	bf00      	nop
 800fe6e:	3708      	adds	r7, #8
 800fe70:	46bd      	mov	sp, r7
 800fe72:	bd80      	pop	{r7, pc}

0800fe74 <USBPD_PHY_DisableRX>:
  * @brief  function used to disable RX
  * @param  PortNum    Number of the port.
  * @retval None
  */
void USBPD_PHY_DisableRX(uint8_t PortNum)
{
 800fe74:	b580      	push	{r7, lr}
 800fe76:	b082      	sub	sp, #8
 800fe78:	af00      	add	r7, sp, #0
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	71fb      	strb	r3, [r7, #7]
  USBPD_HW_IF_DisableRX(PortNum);
 800fe7e:	79fb      	ldrb	r3, [r7, #7]
 800fe80:	4618      	mov	r0, r3
 800fe82:	f000 fd87 	bl	8010994 <USBPD_HW_IF_DisableRX>
}
 800fe86:	bf00      	nop
 800fe88:	3708      	adds	r7, #8
 800fe8a:	46bd      	mov	sp, r7
 800fe8c:	bd80      	pop	{r7, pc}
	...

0800fe90 <PHY_Rx_Completed>:
  * @param  PortNum   Number of the port.
  * @param  MsgType   SOP Message Type
  * @retval None.
  */
void PHY_Rx_Completed(uint8_t PortNum, uint32_t MsgType)
{
 800fe90:	b580      	push	{r7, lr}
 800fe92:	b084      	sub	sp, #16
 800fe94:	af00      	add	r7, sp, #0
 800fe96:	4603      	mov	r3, r0
 800fe98:	6039      	str	r1, [r7, #0]
 800fe9a:	71fb      	strb	r3, [r7, #7]
  const USBPD_SOPType_TypeDef tab_sop_value[] =
 800fe9c:	4a28      	ldr	r2, [pc, #160]	@ (800ff40 <PHY_Rx_Completed+0xb0>)
 800fe9e:	f107 0308 	add.w	r3, r7, #8
 800fea2:	e892 0003 	ldmia.w	r2, {r0, r1}
 800fea6:	6018      	str	r0, [r3, #0]
 800fea8:	3304      	adds	r3, #4
 800feaa:	8019      	strh	r1, [r3, #0]
    USBPD_SOPTYPE_SOP, USBPD_SOPTYPE_SOP1, USBPD_SOPTYPE_SOP2,
    USBPD_SOPTYPE_SOP1_DEBUG, USBPD_SOPTYPE_SOP2_DEBUG, USBPD_SOPTYPE_CABLE_RESET
  };
  USBPD_SOPType_TypeDef _msgtype;

  _msgtype = tab_sop_value[MsgType];
 800feac:	f107 0208 	add.w	r2, r7, #8
 800feb0:	683b      	ldr	r3, [r7, #0]
 800feb2:	4413      	add	r3, r2
 800feb4:	781b      	ldrb	r3, [r3, #0]
 800feb6:	73fb      	strb	r3, [r7, #15]

  /* Check if the message must be forwarded to usbpd stack */
  switch (_msgtype)
 800feb8:	7bfb      	ldrb	r3, [r7, #15]
 800feba:	2b04      	cmp	r3, #4
 800febc:	dc02      	bgt.n	800fec4 <PHY_Rx_Completed+0x34>
 800febe:	2b00      	cmp	r3, #0
 800fec0:	da19      	bge.n	800fef6 <PHY_Rx_Completed+0x66>
                        2u + (header_rx.b.NumberOfDataObjects * 4u));
      }
#endif /* DEBUG_NOTFWD */
      break;
    default :
      break;
 800fec2:	e034      	b.n	800ff2e <PHY_Rx_Completed+0x9e>
  switch (_msgtype)
 800fec4:	2b06      	cmp	r3, #6
 800fec6:	d132      	bne.n	800ff2e <PHY_Rx_Completed+0x9e>
      if (0x1Eu == (PHY_Ports[PortNum].SupportedSOP & 0x1Eu))
 800fec8:	79fb      	ldrb	r3, [r7, #7]
 800feca:	4a1e      	ldr	r2, [pc, #120]	@ (800ff44 <PHY_Rx_Completed+0xb4>)
 800fecc:	00db      	lsls	r3, r3, #3
 800fece:	4413      	add	r3, r2
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	f003 031e 	and.w	r3, r3, #30
 800fed6:	2b1e      	cmp	r3, #30
 800fed8:	d12b      	bne.n	800ff32 <PHY_Rx_Completed+0xa2>
        Ports[PortNum].cbs.USBPD_HW_IF_RX_ResetIndication(PortNum, USBPD_SOPTYPE_CABLE_RESET);
 800feda:	79fa      	ldrb	r2, [r7, #7]
 800fedc:	491a      	ldr	r1, [pc, #104]	@ (800ff48 <PHY_Rx_Completed+0xb8>)
 800fede:	4613      	mov	r3, r2
 800fee0:	011b      	lsls	r3, r3, #4
 800fee2:	1a9b      	subs	r3, r3, r2
 800fee4:	009b      	lsls	r3, r3, #2
 800fee6:	440b      	add	r3, r1
 800fee8:	331c      	adds	r3, #28
 800feea:	681b      	ldr	r3, [r3, #0]
 800feec:	79fa      	ldrb	r2, [r7, #7]
 800feee:	2106      	movs	r1, #6
 800fef0:	4610      	mov	r0, r2
 800fef2:	4798      	blx	r3
      break;
 800fef4:	e01d      	b.n	800ff32 <PHY_Rx_Completed+0xa2>
      if (!((uint8_t)(0x1u << _msgtype) != (PHY_Ports[PortNum].SupportedSOP & (uint8_t)(0x1u << _msgtype))))
 800fef6:	7bfb      	ldrb	r3, [r7, #15]
 800fef8:	2201      	movs	r2, #1
 800fefa:	fa02 f303 	lsl.w	r3, r2, r3
 800fefe:	b2db      	uxtb	r3, r3
 800ff00:	4618      	mov	r0, r3
 800ff02:	79fb      	ldrb	r3, [r7, #7]
 800ff04:	4a0f      	ldr	r2, [pc, #60]	@ (800ff44 <PHY_Rx_Completed+0xb4>)
 800ff06:	00db      	lsls	r3, r3, #3
 800ff08:	4413      	add	r3, r2
 800ff0a:	685b      	ldr	r3, [r3, #4]
 800ff0c:	7bfa      	ldrb	r2, [r7, #15]
 800ff0e:	2101      	movs	r1, #1
 800ff10:	fa01 f202 	lsl.w	r2, r1, r2
 800ff14:	b2d2      	uxtb	r2, r2
 800ff16:	4013      	ands	r3, r2
 800ff18:	4298      	cmp	r0, r3
 800ff1a:	d10c      	bne.n	800ff36 <PHY_Rx_Completed+0xa6>
        PHY_Ports[PortNum].USBPD_PHY_MessageReceived(PortNum, _msgtype);
 800ff1c:	79fb      	ldrb	r3, [r7, #7]
 800ff1e:	4a09      	ldr	r2, [pc, #36]	@ (800ff44 <PHY_Rx_Completed+0xb4>)
 800ff20:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ff24:	7bf9      	ldrb	r1, [r7, #15]
 800ff26:	79fa      	ldrb	r2, [r7, #7]
 800ff28:	4610      	mov	r0, r2
 800ff2a:	4798      	blx	r3
      break;
 800ff2c:	e003      	b.n	800ff36 <PHY_Rx_Completed+0xa6>
      break;
 800ff2e:	bf00      	nop
 800ff30:	e002      	b.n	800ff38 <PHY_Rx_Completed+0xa8>
      break;
 800ff32:	bf00      	nop
 800ff34:	e000      	b.n	800ff38 <PHY_Rx_Completed+0xa8>
      break;
 800ff36:	bf00      	nop
  }
}
 800ff38:	bf00      	nop
 800ff3a:	3710      	adds	r7, #16
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}
 800ff40:	0801b220 	.word	0x0801b220
 800ff44:	20000b00 	.word	0x20000b00
 800ff48:	20000b08 	.word	0x20000b08

0800ff4c <LL_AHB1_GRP1_EnableClock>:
{
 800ff4c:	b480      	push	{r7}
 800ff4e:	b085      	sub	sp, #20
 800ff50:	af00      	add	r7, sp, #0
 800ff52:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 800ff54:	4b08      	ldr	r3, [pc, #32]	@ (800ff78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ff56:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff58:	4907      	ldr	r1, [pc, #28]	@ (800ff78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ff5a:	687b      	ldr	r3, [r7, #4]
 800ff5c:	4313      	orrs	r3, r2
 800ff5e:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800ff60:	4b05      	ldr	r3, [pc, #20]	@ (800ff78 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800ff62:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ff64:	687b      	ldr	r3, [r7, #4]
 800ff66:	4013      	ands	r3, r2
 800ff68:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ff6a:	68fb      	ldr	r3, [r7, #12]
}
 800ff6c:	bf00      	nop
 800ff6e:	3714      	adds	r7, #20
 800ff70:	46bd      	mov	sp, r7
 800ff72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff76:	4770      	bx	lr
 800ff78:	40021000 	.word	0x40021000

0800ff7c <LL_APB1_GRP1_EnableClock>:
{
 800ff7c:	b480      	push	{r7}
 800ff7e:	b085      	sub	sp, #20
 800ff80:	af00      	add	r7, sp, #0
 800ff82:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800ff84:	4b08      	ldr	r3, [pc, #32]	@ (800ffa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ff86:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff88:	4907      	ldr	r1, [pc, #28]	@ (800ffa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	4313      	orrs	r3, r2
 800ff8e:	658b      	str	r3, [r1, #88]	@ 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800ff90:	4b05      	ldr	r3, [pc, #20]	@ (800ffa8 <LL_APB1_GRP1_EnableClock+0x2c>)
 800ff92:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800ff94:	687b      	ldr	r3, [r7, #4]
 800ff96:	4013      	ands	r3, r2
 800ff98:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
}
 800ff9c:	bf00      	nop
 800ff9e:	3714      	adds	r7, #20
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	40021000 	.word	0x40021000

0800ffac <LL_UCPD_Enable>:
{
 800ffac:	b480      	push	{r7}
 800ffae:	b083      	sub	sp, #12
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800ffbc:	687b      	ldr	r3, [r7, #4]
 800ffbe:	601a      	str	r2, [r3, #0]
}
 800ffc0:	bf00      	nop
 800ffc2:	370c      	adds	r7, #12
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffca:	4770      	bx	lr

0800ffcc <LL_UCPD_Disable>:
{
 800ffcc:	b480      	push	{r7}
 800ffce:	b083      	sub	sp, #12
 800ffd0:	af00      	add	r7, sp, #0
 800ffd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_UCPDEN);
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	681b      	ldr	r3, [r3, #0]
 800ffd8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	601a      	str	r2, [r3, #0]
}
 800ffe0:	bf00      	nop
 800ffe2:	370c      	adds	r7, #12
 800ffe4:	46bd      	mov	sp, r7
 800ffe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffea:	4770      	bx	lr

0800ffec <LL_UCPD_TypeCDetectionCC2Enable>:
{
 800ffec:	b480      	push	{r7}
 800ffee:	b083      	sub	sp, #12
 800fff0:	af00      	add	r7, sp, #0
 800fff2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 800fff4:	687b      	ldr	r3, [r7, #4]
 800fff6:	68db      	ldr	r3, [r3, #12]
 800fff8:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	60da      	str	r2, [r3, #12]
}
 8010000:	bf00      	nop
 8010002:	370c      	adds	r7, #12
 8010004:	46bd      	mov	sp, r7
 8010006:	f85d 7b04 	ldr.w	r7, [sp], #4
 801000a:	4770      	bx	lr

0801000c <LL_UCPD_TypeCDetectionCC2Disable>:
{
 801000c:	b480      	push	{r7}
 801000e:	b083      	sub	sp, #12
 8010010:	af00      	add	r7, sp, #0
 8010012:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC2TCDIS);
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	68db      	ldr	r3, [r3, #12]
 8010018:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	60da      	str	r2, [r3, #12]
}
 8010020:	bf00      	nop
 8010022:	370c      	adds	r7, #12
 8010024:	46bd      	mov	sp, r7
 8010026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801002a:	4770      	bx	lr

0801002c <LL_UCPD_TypeCDetectionCC1Enable>:
{
 801002c:	b480      	push	{r7}
 801002e:	b083      	sub	sp, #12
 8010030:	af00      	add	r7, sp, #0
 8010032:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	68db      	ldr	r3, [r3, #12]
 8010038:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	60da      	str	r2, [r3, #12]
}
 8010040:	bf00      	nop
 8010042:	370c      	adds	r7, #12
 8010044:	46bd      	mov	sp, r7
 8010046:	f85d 7b04 	ldr.w	r7, [sp], #4
 801004a:	4770      	bx	lr

0801004c <LL_UCPD_TypeCDetectionCC1Disable>:
{
 801004c:	b480      	push	{r7}
 801004e:	b083      	sub	sp, #12
 8010050:	af00      	add	r7, sp, #0
 8010052:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_CC1TCDIS);
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	68db      	ldr	r3, [r3, #12]
 8010058:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	60da      	str	r2, [r3, #12]
}
 8010060:	bf00      	nop
 8010062:	370c      	adds	r7, #12
 8010064:	46bd      	mov	sp, r7
 8010066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801006a:	4770      	bx	lr

0801006c <LL_UCPD_SignalFRSTX>:
{
 801006c:	b480      	push	{r7}
 801006e:	b083      	sub	sp, #12
 8010070:	af00      	add	r7, sp, #0
 8010072:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSTX);
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	68db      	ldr	r3, [r3, #12]
 8010078:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	60da      	str	r2, [r3, #12]
}
 8010080:	bf00      	nop
 8010082:	370c      	adds	r7, #12
 8010084:	46bd      	mov	sp, r7
 8010086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008a:	4770      	bx	lr

0801008c <LL_UCPD_FRSDetectionEnable>:
{
 801008c:	b480      	push	{r7}
 801008e:	b083      	sub	sp, #12
 8010090:	af00      	add	r7, sp, #0
 8010092:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	60da      	str	r2, [r3, #12]
}
 80100a0:	bf00      	nop
 80100a2:	370c      	adds	r7, #12
 80100a4:	46bd      	mov	sp, r7
 80100a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100aa:	4770      	bx	lr

080100ac <LL_UCPD_FRSDetectionDisable>:
{
 80100ac:	b480      	push	{r7}
 80100ae:	b083      	sub	sp, #12
 80100b0:	af00      	add	r7, sp, #0
 80100b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_FRSRXEN);
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	68db      	ldr	r3, [r3, #12]
 80100b8:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	60da      	str	r2, [r3, #12]
}
 80100c0:	bf00      	nop
 80100c2:	370c      	adds	r7, #12
 80100c4:	46bd      	mov	sp, r7
 80100c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100ca:	4770      	bx	lr

080100cc <LL_UCPD_SetccEnable>:
{
 80100cc:	b480      	push	{r7}
 80100ce:	b083      	sub	sp, #12
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	6078      	str	r0, [r7, #4]
 80100d4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_CCENABLE, CCEnable);
 80100d6:	687b      	ldr	r3, [r7, #4]
 80100d8:	68db      	ldr	r3, [r3, #12]
 80100da:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80100de:	683b      	ldr	r3, [r7, #0]
 80100e0:	431a      	orrs	r2, r3
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	60da      	str	r2, [r3, #12]
}
 80100e6:	bf00      	nop
 80100e8:	370c      	adds	r7, #12
 80100ea:	46bd      	mov	sp, r7
 80100ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100f0:	4770      	bx	lr

080100f2 <LL_UCPD_SetSNKRole>:
{
 80100f2:	b480      	push	{r7}
 80100f4:	b083      	sub	sp, #12
 80100f6:	af00      	add	r7, sp, #0
 80100f8:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 80100fa:	687b      	ldr	r3, [r7, #4]
 80100fc:	68db      	ldr	r3, [r3, #12]
 80100fe:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	60da      	str	r2, [r3, #12]
}
 8010106:	bf00      	nop
 8010108:	370c      	adds	r7, #12
 801010a:	46bd      	mov	sp, r7
 801010c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010110:	4770      	bx	lr

08010112 <LL_UCPD_SetSRCRole>:
{
 8010112:	b480      	push	{r7}
 8010114:	b083      	sub	sp, #12
 8010116:	af00      	add	r7, sp, #0
 8010118:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_ANAMODE);
 801011a:	687b      	ldr	r3, [r7, #4]
 801011c:	68db      	ldr	r3, [r3, #12]
 801011e:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8010122:	687b      	ldr	r3, [r7, #4]
 8010124:	60da      	str	r2, [r3, #12]
}
 8010126:	bf00      	nop
 8010128:	370c      	adds	r7, #12
 801012a:	46bd      	mov	sp, r7
 801012c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010130:	4770      	bx	lr

08010132 <LL_UCPD_SetRpResistor>:
{
 8010132:	b480      	push	{r7}
 8010134:	b083      	sub	sp, #12
 8010136:	af00      	add	r7, sp, #0
 8010138:	6078      	str	r0, [r7, #4]
 801013a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_ANASUBMODE,  Resistor);
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	68db      	ldr	r3, [r3, #12]
 8010140:	f423 72c0 	bic.w	r2, r3, #384	@ 0x180
 8010144:	683b      	ldr	r3, [r7, #0]
 8010146:	431a      	orrs	r2, r3
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	60da      	str	r2, [r3, #12]
}
 801014c:	bf00      	nop
 801014e:	370c      	adds	r7, #12
 8010150:	46bd      	mov	sp, r7
 8010152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010156:	4770      	bx	lr

08010158 <LL_UCPD_SetCCPin>:
{
 8010158:	b480      	push	{r7}
 801015a:	b083      	sub	sp, #12
 801015c:	af00      	add	r7, sp, #0
 801015e:	6078      	str	r0, [r7, #4]
 8010160:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_PHYCCSEL,  CCPin);
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	68db      	ldr	r3, [r3, #12]
 8010166:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 801016a:	683b      	ldr	r3, [r7, #0]
 801016c:	431a      	orrs	r2, r3
 801016e:	687b      	ldr	r3, [r7, #4]
 8010170:	60da      	str	r2, [r3, #12]
}
 8010172:	bf00      	nop
 8010174:	370c      	adds	r7, #12
 8010176:	46bd      	mov	sp, r7
 8010178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801017c:	4770      	bx	lr

0801017e <LL_UCPD_RxEnable>:
{
 801017e:	b480      	push	{r7}
 8010180:	b083      	sub	sp, #12
 8010182:	af00      	add	r7, sp, #0
 8010184:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 8010186:	687b      	ldr	r3, [r7, #4]
 8010188:	68db      	ldr	r3, [r3, #12]
 801018a:	f043 0220 	orr.w	r2, r3, #32
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	60da      	str	r2, [r3, #12]
}
 8010192:	bf00      	nop
 8010194:	370c      	adds	r7, #12
 8010196:	46bd      	mov	sp, r7
 8010198:	f85d 7b04 	ldr.w	r7, [sp], #4
 801019c:	4770      	bx	lr

0801019e <LL_UCPD_RxDisable>:
{
 801019e:	b480      	push	{r7}
 80101a0:	b083      	sub	sp, #12
 80101a2:	af00      	add	r7, sp, #0
 80101a4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CR, UCPD_CR_PHYRXEN);
 80101a6:	687b      	ldr	r3, [r7, #4]
 80101a8:	68db      	ldr	r3, [r3, #12]
 80101aa:	f023 0220 	bic.w	r2, r3, #32
 80101ae:	687b      	ldr	r3, [r7, #4]
 80101b0:	60da      	str	r2, [r3, #12]
}
 80101b2:	bf00      	nop
 80101b4:	370c      	adds	r7, #12
 80101b6:	46bd      	mov	sp, r7
 80101b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101bc:	4770      	bx	lr

080101be <LL_UCPD_SetRxMode>:
{
 80101be:	b480      	push	{r7}
 80101c0:	b083      	sub	sp, #12
 80101c2:	af00      	add	r7, sp, #0
 80101c4:	6078      	str	r0, [r7, #4]
 80101c6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_RXMODE, RxMode);
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	68db      	ldr	r3, [r3, #12]
 80101cc:	f023 0210 	bic.w	r2, r3, #16
 80101d0:	683b      	ldr	r3, [r7, #0]
 80101d2:	431a      	orrs	r2, r3
 80101d4:	687b      	ldr	r3, [r7, #4]
 80101d6:	60da      	str	r2, [r3, #12]
}
 80101d8:	bf00      	nop
 80101da:	370c      	adds	r7, #12
 80101dc:	46bd      	mov	sp, r7
 80101de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e2:	4770      	bx	lr

080101e4 <LL_UCPD_SendHardReset>:
{
 80101e4:	b480      	push	{r7}
 80101e6:	b083      	sub	sp, #12
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXHRST);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	f043 0208 	orr.w	r2, r3, #8
 80101f4:	687b      	ldr	r3, [r7, #4]
 80101f6:	60da      	str	r2, [r3, #12]
}
 80101f8:	bf00      	nop
 80101fa:	370c      	adds	r7, #12
 80101fc:	46bd      	mov	sp, r7
 80101fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010202:	4770      	bx	lr

08010204 <LL_UCPD_SendMessage>:
{
 8010204:	b480      	push	{r7}
 8010206:	b083      	sub	sp, #12
 8010208:	af00      	add	r7, sp, #0
 801020a:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CR, UCPD_CR_TXSEND);
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	68db      	ldr	r3, [r3, #12]
 8010210:	f043 0204 	orr.w	r2, r3, #4
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	60da      	str	r2, [r3, #12]
}
 8010218:	bf00      	nop
 801021a:	370c      	adds	r7, #12
 801021c:	46bd      	mov	sp, r7
 801021e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010222:	4770      	bx	lr

08010224 <LL_UCPD_SetTxMode>:
{
 8010224:	b480      	push	{r7}
 8010226:	b083      	sub	sp, #12
 8010228:	af00      	add	r7, sp, #0
 801022a:	6078      	str	r0, [r7, #4]
 801022c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(UCPDx->CR, UCPD_CR_TXMODE, TxMode);
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	68db      	ldr	r3, [r3, #12]
 8010232:	f023 0203 	bic.w	r2, r3, #3
 8010236:	683b      	ldr	r3, [r7, #0]
 8010238:	431a      	orrs	r2, r3
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	60da      	str	r2, [r3, #12]
}
 801023e:	bf00      	nop
 8010240:	370c      	adds	r7, #12
 8010242:	46bd      	mov	sp, r7
 8010244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010248:	4770      	bx	lr

0801024a <LL_UCPD_RxDMAEnable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801024a:	b480      	push	{r7}
 801024c:	b083      	sub	sp, #12
 801024e:	af00      	add	r7, sp, #0
 8010250:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	601a      	str	r2, [r3, #0]
}
 801025e:	bf00      	nop
 8010260:	370c      	adds	r7, #12
 8010262:	46bd      	mov	sp, r7
 8010264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010268:	4770      	bx	lr

0801026a <LL_UCPD_RxDMADisable>:
  * @rmtoll CFG1          RXDMAEN          LL_UCPD_RxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_RxDMADisable(UCPD_TypeDef *UCPDx)
{
 801026a:	b480      	push	{r7}
 801026c:	b083      	sub	sp, #12
 801026e:	af00      	add	r7, sp, #0
 8010270:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_RXDMAEN);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	601a      	str	r2, [r3, #0]
}
 801027e:	bf00      	nop
 8010280:	370c      	adds	r7, #12
 8010282:	46bd      	mov	sp, r7
 8010284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010288:	4770      	bx	lr

0801028a <LL_UCPD_TxDMAEnable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMAEnable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMAEnable(UCPD_TypeDef *UCPDx)
{
 801028a:	b480      	push	{r7}
 801028c:	b083      	sub	sp, #12
 801028e:	af00      	add	r7, sp, #0
 8010290:	6078      	str	r0, [r7, #4]
  SET_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	601a      	str	r2, [r3, #0]
}
 801029e:	bf00      	nop
 80102a0:	370c      	adds	r7, #12
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr

080102aa <LL_UCPD_TxDMADisable>:
  * @rmtoll CFG1          TXDMAEN          LL_UCPD_TxDMADisable
  * @param  UCPDx UCPD Instance
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_TxDMADisable(UCPD_TypeDef *UCPDx)
{
 80102aa:	b480      	push	{r7}
 80102ac:	b083      	sub	sp, #12
 80102ae:	af00      	add	r7, sp, #0
 80102b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(UCPDx->CFG1, UCPD_CFG1_TXDMAEN);
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80102ba:	687b      	ldr	r3, [r7, #4]
 80102bc:	601a      	str	r2, [r3, #0]
}
 80102be:	bf00      	nop
 80102c0:	370c      	adds	r7, #12
 80102c2:	46bd      	mov	sp, r7
 80102c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c8:	4770      	bx	lr

080102ca <LL_UCPD_WriteTxOrderSet>:
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP1_DEBUG
  *         @arg @ref LL_UCPD_ORDERED_SET_SOP2_DEBUG
  * @retval None
  */
__STATIC_INLINE void LL_UCPD_WriteTxOrderSet(UCPD_TypeDef *UCPDx, uint32_t TxOrderSet)
{
 80102ca:	b480      	push	{r7}
 80102cc:	b083      	sub	sp, #12
 80102ce:	af00      	add	r7, sp, #0
 80102d0:	6078      	str	r0, [r7, #4]
 80102d2:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_ORDSET, TxOrderSet);
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	683a      	ldr	r2, [r7, #0]
 80102d8:	61da      	str	r2, [r3, #28]
}
 80102da:	bf00      	nop
 80102dc:	370c      	adds	r7, #12
 80102de:	46bd      	mov	sp, r7
 80102e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102e4:	4770      	bx	lr

080102e6 <LL_UCPD_WriteTxPaySize>:
  * @param  UCPDx UCPD Instance
  * @param  TxPaySize
  * @retval None.
  */
__STATIC_INLINE void LL_UCPD_WriteTxPaySize(UCPD_TypeDef *UCPDx, uint32_t TxPaySize)
{
 80102e6:	b480      	push	{r7}
 80102e8:	b083      	sub	sp, #12
 80102ea:	af00      	add	r7, sp, #0
 80102ec:	6078      	str	r0, [r7, #4]
 80102ee:	6039      	str	r1, [r7, #0]
  WRITE_REG(UCPDx->TX_PAYSZ, TxPaySize);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	683a      	ldr	r2, [r7, #0]
 80102f4:	621a      	str	r2, [r3, #32]
}
 80102f6:	bf00      	nop
 80102f8:	370c      	adds	r7, #12
 80102fa:	46bd      	mov	sp, r7
 80102fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010300:	4770      	bx	lr

08010302 <USBPD_HW_IF_GlobalHwInit>:

/* Private functions ---------------------------------------------------------*/


void USBPD_HW_IF_GlobalHwInit(void)
{
 8010302:	b580      	push	{r7, lr}
 8010304:	af00      	add	r7, sp, #0
  /* PWR register access (for disabling dead battery feature) */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8010306:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 801030a:	f7ff fe37 	bl	800ff7c <LL_APB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_CRC);
 801030e:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8010312:	f7ff fe1b 	bl	800ff4c <LL_AHB1_GRP1_EnableClock>

}
 8010316:	bf00      	nop
 8010318:	bd80      	pop	{r7, pc}
	...

0801031c <USBPD_HW_IF_StopBISTMode2>:

#if !defined(USBPDCORE_LIB_NO_PD)
void USBPD_HW_IF_StopBISTMode2(uint8_t PortNum)
{
 801031c:	b580      	push	{r7, lr}
 801031e:	b084      	sub	sp, #16
 8010320:	af00      	add	r7, sp, #0
 8010322:	4603      	mov	r3, r0
 8010324:	71fb      	strb	r3, [r7, #7]
  uint32_t  _cr = READ_REG(Ports[PortNum].husbpd->CR) & ~(UCPD_CR_TXMODE | UCPD_CR_TXSEND);
 8010326:	79fa      	ldrb	r2, [r7, #7]
 8010328:	4917      	ldr	r1, [pc, #92]	@ (8010388 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801032a:	4613      	mov	r3, r2
 801032c:	011b      	lsls	r3, r3, #4
 801032e:	1a9b      	subs	r3, r3, r2
 8010330:	009b      	lsls	r3, r3, #2
 8010332:	440b      	add	r3, r1
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	68db      	ldr	r3, [r3, #12]
 8010338:	f023 0307 	bic.w	r3, r3, #7
 801033c:	60fb      	str	r3, [r7, #12]

  LL_UCPD_Disable(Ports[PortNum].husbpd);
 801033e:	79fa      	ldrb	r2, [r7, #7]
 8010340:	4911      	ldr	r1, [pc, #68]	@ (8010388 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8010342:	4613      	mov	r3, r2
 8010344:	011b      	lsls	r3, r3, #4
 8010346:	1a9b      	subs	r3, r3, r2
 8010348:	009b      	lsls	r3, r3, #2
 801034a:	440b      	add	r3, r1
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	4618      	mov	r0, r3
 8010350:	f7ff fe3c 	bl	800ffcc <LL_UCPD_Disable>
  LL_UCPD_Enable(Ports[PortNum].husbpd);
 8010354:	79fa      	ldrb	r2, [r7, #7]
 8010356:	490c      	ldr	r1, [pc, #48]	@ (8010388 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 8010358:	4613      	mov	r3, r2
 801035a:	011b      	lsls	r3, r3, #4
 801035c:	1a9b      	subs	r3, r3, r2
 801035e:	009b      	lsls	r3, r3, #2
 8010360:	440b      	add	r3, r1
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	4618      	mov	r0, r3
 8010366:	f7ff fe21 	bl	800ffac <LL_UCPD_Enable>

  Ports[PortNum].husbpd->CR = _cr;
 801036a:	79fa      	ldrb	r2, [r7, #7]
 801036c:	4906      	ldr	r1, [pc, #24]	@ (8010388 <USBPD_HW_IF_StopBISTMode2+0x6c>)
 801036e:	4613      	mov	r3, r2
 8010370:	011b      	lsls	r3, r3, #4
 8010372:	1a9b      	subs	r3, r3, r2
 8010374:	009b      	lsls	r3, r3, #2
 8010376:	440b      	add	r3, r1
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	68fa      	ldr	r2, [r7, #12]
 801037c:	60da      	str	r2, [r3, #12]
}
 801037e:	bf00      	nop
 8010380:	3710      	adds	r7, #16
 8010382:	46bd      	mov	sp, r7
 8010384:	bd80      	pop	{r7, pc}
 8010386:	bf00      	nop
 8010388:	20000b08 	.word	0x20000b08

0801038c <USBPD_HW_IF_SendBuffer>:

USBPD_StatusTypeDef USBPD_HW_IF_SendBuffer(uint8_t PortNum, USBPD_SOPType_TypeDef Type, uint8_t *pBuffer, uint32_t Size)
{
 801038c:	b580      	push	{r7, lr}
 801038e:	b08a      	sub	sp, #40	@ 0x28
 8010390:	af00      	add	r7, sp, #0
 8010392:	60ba      	str	r2, [r7, #8]
 8010394:	607b      	str	r3, [r7, #4]
 8010396:	4603      	mov	r3, r0
 8010398:	73fb      	strb	r3, [r7, #15]
 801039a:	460b      	mov	r3, r1
 801039c:	73bb      	strb	r3, [r7, #14]
  USBPD_StatusTypeDef _status = USBPD_OK;
 801039e:	2300      	movs	r3, #0
 80103a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (USBPD_SOPTYPE_HARD_RESET == Type)
 80103a4:	7bbb      	ldrb	r3, [r7, #14]
 80103a6:	2b05      	cmp	r3, #5
 80103a8:	d10b      	bne.n	80103c2 <USBPD_HW_IF_SendBuffer+0x36>
  {
    LL_UCPD_SendHardReset(Ports[PortNum].husbpd);
 80103aa:	7bfa      	ldrb	r2, [r7, #15]
 80103ac:	4996      	ldr	r1, [pc, #600]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80103ae:	4613      	mov	r3, r2
 80103b0:	011b      	lsls	r3, r3, #4
 80103b2:	1a9b      	subs	r3, r3, r2
 80103b4:	009b      	lsls	r3, r3, #2
 80103b6:	440b      	add	r3, r1
 80103b8:	681b      	ldr	r3, [r3, #0]
 80103ba:	4618      	mov	r0, r3
 80103bc:	f7ff ff12 	bl	80101e4 <LL_UCPD_SendHardReset>
 80103c0:	e11b      	b.n	80105fa <USBPD_HW_IF_SendBuffer+0x26e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80103c2:	f3ef 8310 	mrs	r3, PRIMASK
 80103c6:	61fb      	str	r3, [r7, #28]
  return(result);
 80103c8:	69fb      	ldr	r3, [r7, #28]
  }
  else
  {
    PHY_ENTER_CRITICAL_SECTION()
 80103ca:	623b      	str	r3, [r7, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80103cc:	b672      	cpsid	i
}
 80103ce:	bf00      	nop

    /* If RX is ongoing or if a DMA transfer is active then discard the buffer sending */
    if ((Ports[PortNum].RXStatus == USBPD_TRUE) || ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN))
 80103d0:	7bfa      	ldrb	r2, [r7, #15]
 80103d2:	498d      	ldr	r1, [pc, #564]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80103d4:	4613      	mov	r3, r2
 80103d6:	011b      	lsls	r3, r3, #4
 80103d8:	1a9b      	subs	r3, r3, r2
 80103da:	009b      	lsls	r3, r3, #2
 80103dc:	440b      	add	r3, r1
 80103de:	3338      	adds	r3, #56	@ 0x38
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	b2db      	uxtb	r3, r3
 80103e4:	2b01      	cmp	r3, #1
 80103e6:	d00d      	beq.n	8010404 <USBPD_HW_IF_SendBuffer+0x78>
 80103e8:	7bfa      	ldrb	r2, [r7, #15]
 80103ea:	4987      	ldr	r1, [pc, #540]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80103ec:	4613      	mov	r3, r2
 80103ee:	011b      	lsls	r3, r3, #4
 80103f0:	1a9b      	subs	r3, r3, r2
 80103f2:	009b      	lsls	r3, r3, #2
 80103f4:	440b      	add	r3, r1
 80103f6:	3304      	adds	r3, #4
 80103f8:	681b      	ldr	r3, [r3, #0]
 80103fa:	681b      	ldr	r3, [r3, #0]
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b01      	cmp	r3, #1
 8010402:	d109      	bne.n	8010418 <USBPD_HW_IF_SendBuffer+0x8c>
 8010404:	6a3b      	ldr	r3, [r7, #32]
 8010406:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010408:	69bb      	ldr	r3, [r7, #24]
 801040a:	f383 8810 	msr	PRIMASK, r3
}
 801040e:	bf00      	nop
    {
      PHY_LEAVE_CRITICAL_SECTION()
      _status = USBPD_ERROR;
 8010410:	2302      	movs	r3, #2
 8010412:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8010416:	e0f0      	b.n	80105fa <USBPD_HW_IF_SendBuffer+0x26e>
 8010418:	6a3b      	ldr	r3, [r7, #32]
 801041a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801041c:	697b      	ldr	r3, [r7, #20]
 801041e:	f383 8810 	msr	PRIMASK, r3
}
 8010422:	bf00      	nop
    }
    else
    {
      PHY_LEAVE_CRITICAL_SECTION()

      switch (Type)
 8010424:	7bbb      	ldrb	r3, [r7, #14]
 8010426:	2b07      	cmp	r3, #7
 8010428:	d877      	bhi.n	801051a <USBPD_HW_IF_SendBuffer+0x18e>
 801042a:	a201      	add	r2, pc, #4	@ (adr r2, 8010430 <USBPD_HW_IF_SendBuffer+0xa4>)
 801042c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010430:	08010451 	.word	0x08010451
 8010434:	08010483 	.word	0x08010483
 8010438:	080104b5 	.word	0x080104b5
 801043c:	0801051b 	.word	0x0801051b
 8010440:	0801051b 	.word	0x0801051b
 8010444:	0801051b 	.word	0x0801051b
 8010448:	080104e7 	.word	0x080104e7
 801044c:	08010501 	.word	0x08010501
      {
        case USBPD_SOPTYPE_SOP :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP);
 8010450:	7bfa      	ldrb	r2, [r7, #15]
 8010452:	496d      	ldr	r1, [pc, #436]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 8010454:	4613      	mov	r3, r2
 8010456:	011b      	lsls	r3, r3, #4
 8010458:	1a9b      	subs	r3, r3, r2
 801045a:	009b      	lsls	r3, r3, #2
 801045c:	440b      	add	r3, r1
 801045e:	681b      	ldr	r3, [r3, #0]
 8010460:	496a      	ldr	r1, [pc, #424]	@ (801060c <USBPD_HW_IF_SendBuffer+0x280>)
 8010462:	4618      	mov	r0, r3
 8010464:	f7ff ff31 	bl	80102ca <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 8010468:	7bfa      	ldrb	r2, [r7, #15]
 801046a:	4967      	ldr	r1, [pc, #412]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 801046c:	4613      	mov	r3, r2
 801046e:	011b      	lsls	r3, r3, #4
 8010470:	1a9b      	subs	r3, r3, r2
 8010472:	009b      	lsls	r3, r3, #2
 8010474:	440b      	add	r3, r1
 8010476:	681b      	ldr	r3, [r3, #0]
 8010478:	2100      	movs	r1, #0
 801047a:	4618      	mov	r0, r3
 801047c:	f7ff fed2 	bl	8010224 <LL_UCPD_SetTxMode>
          break;
 8010480:	e04f      	b.n	8010522 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP1 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP1);
 8010482:	7bfa      	ldrb	r2, [r7, #15]
 8010484:	4960      	ldr	r1, [pc, #384]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 8010486:	4613      	mov	r3, r2
 8010488:	011b      	lsls	r3, r3, #4
 801048a:	1a9b      	subs	r3, r3, r2
 801048c:	009b      	lsls	r3, r3, #2
 801048e:	440b      	add	r3, r1
 8010490:	681b      	ldr	r3, [r3, #0]
 8010492:	495f      	ldr	r1, [pc, #380]	@ (8010610 <USBPD_HW_IF_SendBuffer+0x284>)
 8010494:	4618      	mov	r0, r3
 8010496:	f7ff ff18 	bl	80102ca <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 801049a:	7bfa      	ldrb	r2, [r7, #15]
 801049c:	495a      	ldr	r1, [pc, #360]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 801049e:	4613      	mov	r3, r2
 80104a0:	011b      	lsls	r3, r3, #4
 80104a2:	1a9b      	subs	r3, r3, r2
 80104a4:	009b      	lsls	r3, r3, #2
 80104a6:	440b      	add	r3, r1
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	2100      	movs	r1, #0
 80104ac:	4618      	mov	r0, r3
 80104ae:	f7ff feb9 	bl	8010224 <LL_UCPD_SetTxMode>
          break;
 80104b2:	e036      	b.n	8010522 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_SOP2 :
        {
          LL_UCPD_WriteTxOrderSet(Ports[PortNum].husbpd, LL_UCPD_ORDERED_SET_SOP2);
 80104b4:	7bfa      	ldrb	r2, [r7, #15]
 80104b6:	4954      	ldr	r1, [pc, #336]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80104b8:	4613      	mov	r3, r2
 80104ba:	011b      	lsls	r3, r3, #4
 80104bc:	1a9b      	subs	r3, r3, r2
 80104be:	009b      	lsls	r3, r3, #2
 80104c0:	440b      	add	r3, r1
 80104c2:	681b      	ldr	r3, [r3, #0]
 80104c4:	4953      	ldr	r1, [pc, #332]	@ (8010614 <USBPD_HW_IF_SendBuffer+0x288>)
 80104c6:	4618      	mov	r0, r3
 80104c8:	f7ff feff 	bl	80102ca <LL_UCPD_WriteTxOrderSet>
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_NORMAL);
 80104cc:	7bfa      	ldrb	r2, [r7, #15]
 80104ce:	494e      	ldr	r1, [pc, #312]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80104d0:	4613      	mov	r3, r2
 80104d2:	011b      	lsls	r3, r3, #4
 80104d4:	1a9b      	subs	r3, r3, r2
 80104d6:	009b      	lsls	r3, r3, #2
 80104d8:	440b      	add	r3, r1
 80104da:	681b      	ldr	r3, [r3, #0]
 80104dc:	2100      	movs	r1, #0
 80104de:	4618      	mov	r0, r3
 80104e0:	f7ff fea0 	bl	8010224 <LL_UCPD_SetTxMode>
          break;
 80104e4:	e01d      	b.n	8010522 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_CABLE_RESET :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_CABLE_RESET);
 80104e6:	7bfa      	ldrb	r2, [r7, #15]
 80104e8:	4947      	ldr	r1, [pc, #284]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80104ea:	4613      	mov	r3, r2
 80104ec:	011b      	lsls	r3, r3, #4
 80104ee:	1a9b      	subs	r3, r3, r2
 80104f0:	009b      	lsls	r3, r3, #2
 80104f2:	440b      	add	r3, r1
 80104f4:	681b      	ldr	r3, [r3, #0]
 80104f6:	2101      	movs	r1, #1
 80104f8:	4618      	mov	r0, r3
 80104fa:	f7ff fe93 	bl	8010224 <LL_UCPD_SetTxMode>
          break;
 80104fe:	e010      	b.n	8010522 <USBPD_HW_IF_SendBuffer+0x196>
        }
        case USBPD_SOPTYPE_BIST_MODE_2 :
        {
          LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8010500:	7bfa      	ldrb	r2, [r7, #15]
 8010502:	4941      	ldr	r1, [pc, #260]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 8010504:	4613      	mov	r3, r2
 8010506:	011b      	lsls	r3, r3, #4
 8010508:	1a9b      	subs	r3, r3, r2
 801050a:	009b      	lsls	r3, r3, #2
 801050c:	440b      	add	r3, r1
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	2102      	movs	r1, #2
 8010512:	4618      	mov	r0, r3
 8010514:	f7ff fe86 	bl	8010224 <LL_UCPD_SetTxMode>
          break;
 8010518:	e003      	b.n	8010522 <USBPD_HW_IF_SendBuffer+0x196>
        }
        default :
          _status = USBPD_ERROR;
 801051a:	2302      	movs	r3, #2
 801051c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          break;
 8010520:	bf00      	nop
      }

      if (USBPD_OK == _status)
 8010522:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8010526:	2b00      	cmp	r3, #0
 8010528:	d167      	bne.n	80105fa <USBPD_HW_IF_SendBuffer+0x26e>
      {
#if defined(_LOW_POWER)
        UTIL_LPM_SetStopMode(0 == PortNum ? LPM_PE_0 : LPM_PE_1, UTIL_LPM_DISABLE);
#endif /* _LOW_POWER */
        CLEAR_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 801052a:	7bfa      	ldrb	r2, [r7, #15]
 801052c:	4936      	ldr	r1, [pc, #216]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 801052e:	4613      	mov	r3, r2
 8010530:	011b      	lsls	r3, r3, #4
 8010532:	1a9b      	subs	r3, r3, r2
 8010534:	009b      	lsls	r3, r3, #2
 8010536:	440b      	add	r3, r1
 8010538:	3304      	adds	r3, #4
 801053a:	681b      	ldr	r3, [r3, #0]
 801053c:	6819      	ldr	r1, [r3, #0]
 801053e:	7bfa      	ldrb	r2, [r7, #15]
 8010540:	4831      	ldr	r0, [pc, #196]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 8010542:	4613      	mov	r3, r2
 8010544:	011b      	lsls	r3, r3, #4
 8010546:	1a9b      	subs	r3, r3, r2
 8010548:	009b      	lsls	r3, r3, #2
 801054a:	4403      	add	r3, r0
 801054c:	3304      	adds	r3, #4
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f021 0201 	bic.w	r2, r1, #1
 8010554:	601a      	str	r2, [r3, #0]
        while ((Ports[PortNum].hdmatx->CCR &  DMA_CCR_EN) == DMA_CCR_EN);
 8010556:	bf00      	nop
 8010558:	7bfa      	ldrb	r2, [r7, #15]
 801055a:	492b      	ldr	r1, [pc, #172]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 801055c:	4613      	mov	r3, r2
 801055e:	011b      	lsls	r3, r3, #4
 8010560:	1a9b      	subs	r3, r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	440b      	add	r3, r1
 8010566:	3304      	adds	r3, #4
 8010568:	681b      	ldr	r3, [r3, #0]
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	f003 0301 	and.w	r3, r3, #1
 8010570:	2b01      	cmp	r3, #1
 8010572:	d0f1      	beq.n	8010558 <USBPD_HW_IF_SendBuffer+0x1cc>

        WRITE_REG(Ports[PortNum].hdmatx->CMAR, (uint32_t)pBuffer);
 8010574:	7bfa      	ldrb	r2, [r7, #15]
 8010576:	4924      	ldr	r1, [pc, #144]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 8010578:	4613      	mov	r3, r2
 801057a:	011b      	lsls	r3, r3, #4
 801057c:	1a9b      	subs	r3, r3, r2
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	440b      	add	r3, r1
 8010582:	3304      	adds	r3, #4
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	68ba      	ldr	r2, [r7, #8]
 8010588:	60da      	str	r2, [r3, #12]
        WRITE_REG(Ports[PortNum].hdmatx->CNDTR, Size);
 801058a:	7bfa      	ldrb	r2, [r7, #15]
 801058c:	491e      	ldr	r1, [pc, #120]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 801058e:	4613      	mov	r3, r2
 8010590:	011b      	lsls	r3, r3, #4
 8010592:	1a9b      	subs	r3, r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	440b      	add	r3, r1
 8010598:	3304      	adds	r3, #4
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	687a      	ldr	r2, [r7, #4]
 801059e:	605a      	str	r2, [r3, #4]
        SET_BIT(Ports[PortNum].hdmatx->CCR, DMA_CCR_EN);
 80105a0:	7bfa      	ldrb	r2, [r7, #15]
 80105a2:	4919      	ldr	r1, [pc, #100]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80105a4:	4613      	mov	r3, r2
 80105a6:	011b      	lsls	r3, r3, #4
 80105a8:	1a9b      	subs	r3, r3, r2
 80105aa:	009b      	lsls	r3, r3, #2
 80105ac:	440b      	add	r3, r1
 80105ae:	3304      	adds	r3, #4
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	6819      	ldr	r1, [r3, #0]
 80105b4:	7bfa      	ldrb	r2, [r7, #15]
 80105b6:	4814      	ldr	r0, [pc, #80]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80105b8:	4613      	mov	r3, r2
 80105ba:	011b      	lsls	r3, r3, #4
 80105bc:	1a9b      	subs	r3, r3, r2
 80105be:	009b      	lsls	r3, r3, #2
 80105c0:	4403      	add	r3, r0
 80105c2:	3304      	adds	r3, #4
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	f041 0201 	orr.w	r2, r1, #1
 80105ca:	601a      	str	r2, [r3, #0]

        LL_UCPD_WriteTxPaySize(Ports[PortNum].husbpd, Size);
 80105cc:	7bfa      	ldrb	r2, [r7, #15]
 80105ce:	490e      	ldr	r1, [pc, #56]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80105d0:	4613      	mov	r3, r2
 80105d2:	011b      	lsls	r3, r3, #4
 80105d4:	1a9b      	subs	r3, r3, r2
 80105d6:	009b      	lsls	r3, r3, #2
 80105d8:	440b      	add	r3, r1
 80105da:	681b      	ldr	r3, [r3, #0]
 80105dc:	6879      	ldr	r1, [r7, #4]
 80105de:	4618      	mov	r0, r3
 80105e0:	f7ff fe81 	bl	80102e6 <LL_UCPD_WriteTxPaySize>
        LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 80105e4:	7bfa      	ldrb	r2, [r7, #15]
 80105e6:	4908      	ldr	r1, [pc, #32]	@ (8010608 <USBPD_HW_IF_SendBuffer+0x27c>)
 80105e8:	4613      	mov	r3, r2
 80105ea:	011b      	lsls	r3, r3, #4
 80105ec:	1a9b      	subs	r3, r3, r2
 80105ee:	009b      	lsls	r3, r3, #2
 80105f0:	440b      	add	r3, r1
 80105f2:	681b      	ldr	r3, [r3, #0]
 80105f4:	4618      	mov	r0, r3
 80105f6:	f7ff fe05 	bl	8010204 <LL_UCPD_SendMessage>
      }
    }
  }
  return _status;
 80105fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80105fe:	4618      	mov	r0, r3
 8010600:	3728      	adds	r7, #40	@ 0x28
 8010602:	46bd      	mov	sp, r7
 8010604:	bd80      	pop	{r7, pc}
 8010606:	bf00      	nop
 8010608:	20000b08 	.word	0x20000b08
 801060c:	0008e318 	.word	0x0008e318
 8010610:	00031b18 	.word	0x00031b18
 8010614:	000360d8 	.word	0x000360d8

08010618 <USBPD_HW_IF_Send_BIST_Pattern>:

void USBPD_HW_IF_Send_BIST_Pattern(uint8_t PortNum)
{
 8010618:	b580      	push	{r7, lr}
 801061a:	b082      	sub	sp, #8
 801061c:	af00      	add	r7, sp, #0
 801061e:	4603      	mov	r3, r0
 8010620:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetTxMode(Ports[PortNum].husbpd, LL_UCPD_TXMODE_BIST_CARRIER2);
 8010622:	79fa      	ldrb	r2, [r7, #7]
 8010624:	490c      	ldr	r1, [pc, #48]	@ (8010658 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 8010626:	4613      	mov	r3, r2
 8010628:	011b      	lsls	r3, r3, #4
 801062a:	1a9b      	subs	r3, r3, r2
 801062c:	009b      	lsls	r3, r3, #2
 801062e:	440b      	add	r3, r1
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	2102      	movs	r1, #2
 8010634:	4618      	mov	r0, r3
 8010636:	f7ff fdf5 	bl	8010224 <LL_UCPD_SetTxMode>
  LL_UCPD_SendMessage(Ports[PortNum].husbpd);
 801063a:	79fa      	ldrb	r2, [r7, #7]
 801063c:	4906      	ldr	r1, [pc, #24]	@ (8010658 <USBPD_HW_IF_Send_BIST_Pattern+0x40>)
 801063e:	4613      	mov	r3, r2
 8010640:	011b      	lsls	r3, r3, #4
 8010642:	1a9b      	subs	r3, r3, r2
 8010644:	009b      	lsls	r3, r3, #2
 8010646:	440b      	add	r3, r1
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	4618      	mov	r0, r3
 801064c:	f7ff fdda 	bl	8010204 <LL_UCPD_SendMessage>
}
 8010650:	bf00      	nop
 8010652:	3708      	adds	r7, #8
 8010654:	46bd      	mov	sp, r7
 8010656:	bd80      	pop	{r7, pc}
 8010658:	20000b08 	.word	0x20000b08

0801065c <USBPDM1_AssertRp>:
  * @brief  Assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRp(uint8_t PortNum)
{
 801065c:	b580      	push	{r7, lr}
 801065e:	b082      	sub	sp, #8
 8010660:	af00      	add	r7, sp, #0
 8010662:	4603      	mov	r3, r0
 8010664:	71fb      	strb	r3, [r7, #7]
  switch (Ports[PortNum].params->RpResistor)
 8010666:	79fa      	ldrb	r2, [r7, #7]
 8010668:	4949      	ldr	r1, [pc, #292]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 801066a:	4613      	mov	r3, r2
 801066c:	011b      	lsls	r3, r3, #4
 801066e:	1a9b      	subs	r3, r3, r2
 8010670:	009b      	lsls	r3, r3, #2
 8010672:	440b      	add	r3, r1
 8010674:	3310      	adds	r3, #16
 8010676:	681b      	ldr	r3, [r3, #0]
 8010678:	789b      	ldrb	r3, [r3, #2]
 801067a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801067e:	b2db      	uxtb	r3, r3
 8010680:	2b02      	cmp	r3, #2
 8010682:	d021      	beq.n	80106c8 <USBPDM1_AssertRp+0x6c>
 8010684:	2b02      	cmp	r3, #2
 8010686:	dc2d      	bgt.n	80106e4 <USBPDM1_AssertRp+0x88>
 8010688:	2b00      	cmp	r3, #0
 801068a:	d002      	beq.n	8010692 <USBPDM1_AssertRp+0x36>
 801068c:	2b01      	cmp	r3, #1
 801068e:	d00d      	beq.n	80106ac <USBPDM1_AssertRp+0x50>
      break;
    case vRp_3_0A:
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
      break;
    default:
      break;
 8010690:	e028      	b.n	80106e4 <USBPDM1_AssertRp+0x88>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_DEFAULT);
 8010692:	79fa      	ldrb	r2, [r7, #7]
 8010694:	493e      	ldr	r1, [pc, #248]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 8010696:	4613      	mov	r3, r2
 8010698:	011b      	lsls	r3, r3, #4
 801069a:	1a9b      	subs	r3, r3, r2
 801069c:	009b      	lsls	r3, r3, #2
 801069e:	440b      	add	r3, r1
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	2180      	movs	r1, #128	@ 0x80
 80106a4:	4618      	mov	r0, r3
 80106a6:	f7ff fd44 	bl	8010132 <LL_UCPD_SetRpResistor>
      break;
 80106aa:	e01c      	b.n	80106e6 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 80106ac:	79fa      	ldrb	r2, [r7, #7]
 80106ae:	4938      	ldr	r1, [pc, #224]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 80106b0:	4613      	mov	r3, r2
 80106b2:	011b      	lsls	r3, r3, #4
 80106b4:	1a9b      	subs	r3, r3, r2
 80106b6:	009b      	lsls	r3, r3, #2
 80106b8:	440b      	add	r3, r1
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80106c0:	4618      	mov	r0, r3
 80106c2:	f7ff fd36 	bl	8010132 <LL_UCPD_SetRpResistor>
      break;
 80106c6:	e00e      	b.n	80106e6 <USBPDM1_AssertRp+0x8a>
      LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 80106c8:	79fa      	ldrb	r2, [r7, #7]
 80106ca:	4931      	ldr	r1, [pc, #196]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 80106cc:	4613      	mov	r3, r2
 80106ce:	011b      	lsls	r3, r3, #4
 80106d0:	1a9b      	subs	r3, r3, r2
 80106d2:	009b      	lsls	r3, r3, #2
 80106d4:	440b      	add	r3, r1
 80106d6:	681b      	ldr	r3, [r3, #0]
 80106d8:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 80106dc:	4618      	mov	r0, r3
 80106de:	f7ff fd28 	bl	8010132 <LL_UCPD_SetRpResistor>
      break;
 80106e2:	e000      	b.n	80106e6 <USBPDM1_AssertRp+0x8a>
      break;
 80106e4:	bf00      	nop
  }
  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80106e6:	79fa      	ldrb	r2, [r7, #7]
 80106e8:	4929      	ldr	r1, [pc, #164]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 80106ea:	4613      	mov	r3, r2
 80106ec:	011b      	lsls	r3, r3, #4
 80106ee:	1a9b      	subs	r3, r3, r2
 80106f0:	009b      	lsls	r3, r3, #2
 80106f2:	440b      	add	r3, r1
 80106f4:	681b      	ldr	r3, [r3, #0]
 80106f6:	2100      	movs	r1, #0
 80106f8:	4618      	mov	r0, r3
 80106fa:	f7ff fce7 	bl	80100cc <LL_UCPD_SetccEnable>
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80106fe:	79fa      	ldrb	r2, [r7, #7]
 8010700:	4923      	ldr	r1, [pc, #140]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 8010702:	4613      	mov	r3, r2
 8010704:	011b      	lsls	r3, r3, #4
 8010706:	1a9b      	subs	r3, r3, r2
 8010708:	009b      	lsls	r3, r3, #2
 801070a:	440b      	add	r3, r1
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	4618      	mov	r0, r3
 8010710:	f7ff fcff 	bl	8010112 <LL_UCPD_SetSRCRole>
  if (CCNONE == Ports[PortNum].CCx)
 8010714:	79fa      	ldrb	r2, [r7, #7]
 8010716:	491e      	ldr	r1, [pc, #120]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 8010718:	4613      	mov	r3, r2
 801071a:	011b      	lsls	r3, r3, #4
 801071c:	1a9b      	subs	r3, r3, r2
 801071e:	009b      	lsls	r3, r3, #2
 8010720:	440b      	add	r3, r1
 8010722:	3334      	adds	r3, #52	@ 0x34
 8010724:	681b      	ldr	r3, [r3, #0]
 8010726:	2b00      	cmp	r3, #0
 8010728:	d10d      	bne.n	8010746 <USBPDM1_AssertRp+0xea>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 801072a:	79fa      	ldrb	r2, [r7, #7]
 801072c:	4918      	ldr	r1, [pc, #96]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 801072e:	4613      	mov	r3, r2
 8010730:	011b      	lsls	r3, r3, #4
 8010732:	1a9b      	subs	r3, r3, r2
 8010734:	009b      	lsls	r3, r3, #2
 8010736:	440b      	add	r3, r1
 8010738:	681b      	ldr	r3, [r3, #0]
 801073a:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801073e:	4618      	mov	r0, r3
 8010740:	f7ff fcc4 	bl	80100cc <LL_UCPD_SetccEnable>
 8010744:	e01a      	b.n	801077c <USBPDM1_AssertRp+0x120>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010746:	79fa      	ldrb	r2, [r7, #7]
 8010748:	4911      	ldr	r1, [pc, #68]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 801074a:	4613      	mov	r3, r2
 801074c:	011b      	lsls	r3, r3, #4
 801074e:	1a9b      	subs	r3, r3, r2
 8010750:	009b      	lsls	r3, r3, #2
 8010752:	440b      	add	r3, r1
 8010754:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8010756:	79fa      	ldrb	r2, [r7, #7]
 8010758:	490d      	ldr	r1, [pc, #52]	@ (8010790 <USBPDM1_AssertRp+0x134>)
 801075a:	4613      	mov	r3, r2
 801075c:	011b      	lsls	r3, r3, #4
 801075e:	1a9b      	subs	r3, r3, r2
 8010760:	009b      	lsls	r3, r3, #2
 8010762:	440b      	add	r3, r1
 8010764:	3334      	adds	r3, #52	@ 0x34
 8010766:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010768:	2b01      	cmp	r3, #1
 801076a:	d102      	bne.n	8010772 <USBPDM1_AssertRp+0x116>
 801076c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010770:	e001      	b.n	8010776 <USBPDM1_AssertRp+0x11a>
 8010772:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010776:	4619      	mov	r1, r3
 8010778:	f7ff fca8 	bl	80100cc <LL_UCPD_SetccEnable>
  }

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SOURCE);
 801077c:	79fb      	ldrb	r3, [r7, #7]
 801077e:	2100      	movs	r1, #0
 8010780:	4618      	mov	r0, r3
 8010782:	f7f8 f9a5 	bl	8008ad0 <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 8010786:	bf00      	nop
 8010788:	3708      	adds	r7, #8
 801078a:	46bd      	mov	sp, r7
 801078c:	bd80      	pop	{r7, pc}
 801078e:	bf00      	nop
 8010790:	20000b08 	.word	0x20000b08

08010794 <USBPDM1_DeAssertRp>:
  * @brief  De-assert Rp resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_DeAssertRp(uint8_t PortNum)
{
 8010794:	b480      	push	{r7}
 8010796:	b083      	sub	sp, #12
 8010798:	af00      	add	r7, sp, #0
 801079a:	4603      	mov	r3, r0
 801079c:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 801079e:	bf00      	nop
 80107a0:	370c      	adds	r7, #12
 80107a2:	46bd      	mov	sp, r7
 80107a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107a8:	4770      	bx	lr
	...

080107ac <USBPDM1_AssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_AssertRd(uint8_t PortNum)
{
 80107ac:	b580      	push	{r7, lr}
 80107ae:	b082      	sub	sp, #8
 80107b0:	af00      	add	r7, sp, #0
 80107b2:	4603      	mov	r3, r0
 80107b4:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_TypeCDetectionCC2Disable(Ports[PortNum].husbpd);
 80107b6:	79fa      	ldrb	r2, [r7, #7]
 80107b8:	4940      	ldr	r1, [pc, #256]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 80107ba:	4613      	mov	r3, r2
 80107bc:	011b      	lsls	r3, r3, #4
 80107be:	1a9b      	subs	r3, r3, r2
 80107c0:	009b      	lsls	r3, r3, #2
 80107c2:	440b      	add	r3, r1
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	4618      	mov	r0, r3
 80107c8:	f7ff fc20 	bl	801000c <LL_UCPD_TypeCDetectionCC2Disable>
  LL_UCPD_TypeCDetectionCC1Disable(Ports[PortNum].husbpd);
 80107cc:	79fa      	ldrb	r2, [r7, #7]
 80107ce:	493b      	ldr	r1, [pc, #236]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 80107d0:	4613      	mov	r3, r2
 80107d2:	011b      	lsls	r3, r3, #4
 80107d4:	1a9b      	subs	r3, r3, r2
 80107d6:	009b      	lsls	r3, r3, #2
 80107d8:	440b      	add	r3, r1
 80107da:	681b      	ldr	r3, [r3, #0]
 80107dc:	4618      	mov	r0, r3
 80107de:	f7ff fc35 	bl	801004c <LL_UCPD_TypeCDetectionCC1Disable>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_NONE);
 80107e2:	79fa      	ldrb	r2, [r7, #7]
 80107e4:	4935      	ldr	r1, [pc, #212]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 80107e6:	4613      	mov	r3, r2
 80107e8:	011b      	lsls	r3, r3, #4
 80107ea:	1a9b      	subs	r3, r3, r2
 80107ec:	009b      	lsls	r3, r3, #2
 80107ee:	440b      	add	r3, r1
 80107f0:	681b      	ldr	r3, [r3, #0]
 80107f2:	2100      	movs	r1, #0
 80107f4:	4618      	mov	r0, r3
 80107f6:	f7ff fc69 	bl	80100cc <LL_UCPD_SetccEnable>
  LL_UCPD_SetSNKRole(Ports[PortNum].husbpd);
 80107fa:	79fa      	ldrb	r2, [r7, #7]
 80107fc:	492f      	ldr	r1, [pc, #188]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 80107fe:	4613      	mov	r3, r2
 8010800:	011b      	lsls	r3, r3, #4
 8010802:	1a9b      	subs	r3, r3, r2
 8010804:	009b      	lsls	r3, r3, #2
 8010806:	440b      	add	r3, r1
 8010808:	681b      	ldr	r3, [r3, #0]
 801080a:	4618      	mov	r0, r3
 801080c:	f7ff fc71 	bl	80100f2 <LL_UCPD_SetSNKRole>
  if (CCNONE == Ports[PortNum].CCx)
 8010810:	79fa      	ldrb	r2, [r7, #7]
 8010812:	492a      	ldr	r1, [pc, #168]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 8010814:	4613      	mov	r3, r2
 8010816:	011b      	lsls	r3, r3, #4
 8010818:	1a9b      	subs	r3, r3, r2
 801081a:	009b      	lsls	r3, r3, #2
 801081c:	440b      	add	r3, r1
 801081e:	3334      	adds	r3, #52	@ 0x34
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d10d      	bne.n	8010842 <USBPDM1_AssertRd+0x96>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010826:	79fa      	ldrb	r2, [r7, #7]
 8010828:	4924      	ldr	r1, [pc, #144]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 801082a:	4613      	mov	r3, r2
 801082c:	011b      	lsls	r3, r3, #4
 801082e:	1a9b      	subs	r3, r3, r2
 8010830:	009b      	lsls	r3, r3, #2
 8010832:	440b      	add	r3, r1
 8010834:	681b      	ldr	r3, [r3, #0]
 8010836:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff fc46 	bl	80100cc <LL_UCPD_SetccEnable>
 8010840:	e01a      	b.n	8010878 <USBPDM1_AssertRd+0xcc>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010842:	79fa      	ldrb	r2, [r7, #7]
 8010844:	491d      	ldr	r1, [pc, #116]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 8010846:	4613      	mov	r3, r2
 8010848:	011b      	lsls	r3, r3, #4
 801084a:	1a9b      	subs	r3, r3, r2
 801084c:	009b      	lsls	r3, r3, #2
 801084e:	440b      	add	r3, r1
 8010850:	6818      	ldr	r0, [r3, #0]
                        (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCENABLE_CC1 : LL_UCPD_CCENABLE_CC2);
 8010852:	79fa      	ldrb	r2, [r7, #7]
 8010854:	4919      	ldr	r1, [pc, #100]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 8010856:	4613      	mov	r3, r2
 8010858:	011b      	lsls	r3, r3, #4
 801085a:	1a9b      	subs	r3, r3, r2
 801085c:	009b      	lsls	r3, r3, #2
 801085e:	440b      	add	r3, r1
 8010860:	3334      	adds	r3, #52	@ 0x34
 8010862:	681b      	ldr	r3, [r3, #0]
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd,
 8010864:	2b01      	cmp	r3, #1
 8010866:	d102      	bne.n	801086e <USBPDM1_AssertRd+0xc2>
 8010868:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801086c:	e001      	b.n	8010872 <USBPDM1_AssertRd+0xc6>
 801086e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010872:	4619      	mov	r1, r3
 8010874:	f7ff fc2a 	bl	80100cc <LL_UCPD_SetccEnable>
  }

  HAL_Delay(1);
 8010878:	2001      	movs	r0, #1
 801087a:	f7f9 f97f 	bl	8009b7c <HAL_Delay>

#ifndef _LOW_POWER
  LL_UCPD_TypeCDetectionCC2Enable(Ports[PortNum].husbpd);
 801087e:	79fa      	ldrb	r2, [r7, #7]
 8010880:	490e      	ldr	r1, [pc, #56]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 8010882:	4613      	mov	r3, r2
 8010884:	011b      	lsls	r3, r3, #4
 8010886:	1a9b      	subs	r3, r3, r2
 8010888:	009b      	lsls	r3, r3, #2
 801088a:	440b      	add	r3, r1
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	4618      	mov	r0, r3
 8010890:	f7ff fbac 	bl	800ffec <LL_UCPD_TypeCDetectionCC2Enable>
  LL_UCPD_TypeCDetectionCC1Enable(Ports[PortNum].husbpd);
 8010894:	79fa      	ldrb	r2, [r7, #7]
 8010896:	4909      	ldr	r1, [pc, #36]	@ (80108bc <USBPDM1_AssertRd+0x110>)
 8010898:	4613      	mov	r3, r2
 801089a:	011b      	lsls	r3, r3, #4
 801089c:	1a9b      	subs	r3, r3, r2
 801089e:	009b      	lsls	r3, r3, #2
 80108a0:	440b      	add	r3, r1
 80108a2:	681b      	ldr	r3, [r3, #0]
 80108a4:	4618      	mov	r0, r3
 80108a6:	f7ff fbc1 	bl	801002c <LL_UCPD_TypeCDetectionCC1Enable>
#endif /* _LOW_POWER */

#if defined(TCPP0203_SUPPORT)
  BSP_USBPD_PWR_SetRole(PortNum, POWER_ROLE_SINK);
 80108aa:	79fb      	ldrb	r3, [r7, #7]
 80108ac:	2101      	movs	r1, #1
 80108ae:	4618      	mov	r0, r3
 80108b0:	f7f8 f90e 	bl	8008ad0 <BSP_USBPD_PWR_SetRole>
#endif /* TCPP0203_SUPPORT */
}
 80108b4:	bf00      	nop
 80108b6:	3708      	adds	r7, #8
 80108b8:	46bd      	mov	sp, r7
 80108ba:	bd80      	pop	{r7, pc}
 80108bc:	20000b08 	.word	0x20000b08

080108c0 <USBPDM1_DeAssertRd>:
  * @brief  Assert Rd resistors
  * @param  PortNum Port
  * @retval none
  */
void USBPDM1_DeAssertRd(uint8_t PortNum)
{
 80108c0:	b480      	push	{r7}
 80108c2:	b083      	sub	sp, #12
 80108c4:	af00      	add	r7, sp, #0
 80108c6:	4603      	mov	r3, r0
 80108c8:	71fb      	strb	r3, [r7, #7]
  /* Not needed on STM32G4xx, so nothing to do, keep only for compatibility */
  UNUSED(PortNum);
}
 80108ca:	bf00      	nop
 80108cc:	370c      	adds	r7, #12
 80108ce:	46bd      	mov	sp, r7
 80108d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108d4:	4770      	bx	lr
	...

080108d8 <USBPDM1_EnterErrorRecovery>:
  * @brief  Enter error recovery
  * @param  PortNum Port
  * @retval None
  */
void USBPDM1_EnterErrorRecovery(uint8_t PortNum)
{
 80108d8:	b580      	push	{r7, lr}
 80108da:	b082      	sub	sp, #8
 80108dc:	af00      	add	r7, sp, #0
 80108de:	4603      	mov	r3, r0
 80108e0:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SetSRCRole(Ports[PortNum].husbpd);
 80108e2:	79fa      	ldrb	r2, [r7, #7]
 80108e4:	491f      	ldr	r1, [pc, #124]	@ (8010964 <USBPDM1_EnterErrorRecovery+0x8c>)
 80108e6:	4613      	mov	r3, r2
 80108e8:	011b      	lsls	r3, r3, #4
 80108ea:	1a9b      	subs	r3, r3, r2
 80108ec:	009b      	lsls	r3, r3, #2
 80108ee:	440b      	add	r3, r1
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	4618      	mov	r0, r3
 80108f4:	f7ff fc0d 	bl	8010112 <LL_UCPD_SetSRCRole>
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_NONE);
 80108f8:	79fa      	ldrb	r2, [r7, #7]
 80108fa:	491a      	ldr	r1, [pc, #104]	@ (8010964 <USBPDM1_EnterErrorRecovery+0x8c>)
 80108fc:	4613      	mov	r3, r2
 80108fe:	011b      	lsls	r3, r3, #4
 8010900:	1a9b      	subs	r3, r3, r2
 8010902:	009b      	lsls	r3, r3, #2
 8010904:	440b      	add	r3, r1
 8010906:	681b      	ldr	r3, [r3, #0]
 8010908:	2100      	movs	r1, #0
 801090a:	4618      	mov	r0, r3
 801090c:	f7ff fc11 	bl	8010132 <LL_UCPD_SetRpResistor>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8010910:	79fa      	ldrb	r2, [r7, #7]
 8010912:	4914      	ldr	r1, [pc, #80]	@ (8010964 <USBPDM1_EnterErrorRecovery+0x8c>)
 8010914:	4613      	mov	r3, r2
 8010916:	011b      	lsls	r3, r3, #4
 8010918:	1a9b      	subs	r3, r3, r2
 801091a:	009b      	lsls	r3, r3, #2
 801091c:	440b      	add	r3, r1
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	4618      	mov	r0, r3
 8010922:	f7ff fc3c 	bl	801019e <LL_UCPD_RxDisable>

#if !defined(USBPDCORE_LIB_NO_PD)
  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010926:	79fa      	ldrb	r2, [r7, #7]
 8010928:	490e      	ldr	r1, [pc, #56]	@ (8010964 <USBPDM1_EnterErrorRecovery+0x8c>)
 801092a:	4613      	mov	r3, r2
 801092c:	011b      	lsls	r3, r3, #4
 801092e:	1a9b      	subs	r3, r3, r2
 8010930:	009b      	lsls	r3, r3, #2
 8010932:	440b      	add	r3, r1
 8010934:	330c      	adds	r3, #12
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	7a1b      	ldrb	r3, [r3, #8]
 801093a:	f003 0302 	and.w	r3, r3, #2
 801093e:	b2db      	uxtb	r3, r3
 8010940:	2b00      	cmp	r3, #0
 8010942:	d00a      	beq.n	801095a <USBPDM1_EnterErrorRecovery+0x82>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8010944:	79fa      	ldrb	r2, [r7, #7]
 8010946:	4907      	ldr	r1, [pc, #28]	@ (8010964 <USBPDM1_EnterErrorRecovery+0x8c>)
 8010948:	4613      	mov	r3, r2
 801094a:	011b      	lsls	r3, r3, #4
 801094c:	1a9b      	subs	r3, r3, r2
 801094e:	009b      	lsls	r3, r3, #2
 8010950:	440b      	add	r3, r1
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	4618      	mov	r0, r3
 8010956:	f7ff fba9 	bl	80100ac <LL_UCPD_FRSDetectionDisable>
  }
#endif /* USBPDCORE_LIB_NO_PD */
}
 801095a:	bf00      	nop
 801095c:	3708      	adds	r7, #8
 801095e:	46bd      	mov	sp, r7
 8010960:	bd80      	pop	{r7, pc}
 8010962:	bf00      	nop
 8010964:	20000b08 	.word	0x20000b08

08010968 <USBPD_HW_IF_EnableRX>:
  * @brief  Enable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_EnableRX(uint8_t PortNum)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b082      	sub	sp, #8
 801096c:	af00      	add	r7, sp, #0
 801096e:	4603      	mov	r3, r0
 8010970:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxEnable(Ports[PortNum].husbpd);
 8010972:	79fa      	ldrb	r2, [r7, #7]
 8010974:	4906      	ldr	r1, [pc, #24]	@ (8010990 <USBPD_HW_IF_EnableRX+0x28>)
 8010976:	4613      	mov	r3, r2
 8010978:	011b      	lsls	r3, r3, #4
 801097a:	1a9b      	subs	r3, r3, r2
 801097c:	009b      	lsls	r3, r3, #2
 801097e:	440b      	add	r3, r1
 8010980:	681b      	ldr	r3, [r3, #0]
 8010982:	4618      	mov	r0, r3
 8010984:	f7ff fbfb 	bl	801017e <LL_UCPD_RxEnable>
}
 8010988:	bf00      	nop
 801098a:	3708      	adds	r7, #8
 801098c:	46bd      	mov	sp, r7
 801098e:	bd80      	pop	{r7, pc}
 8010990:	20000b08 	.word	0x20000b08

08010994 <USBPD_HW_IF_DisableRX>:
  * @brief  Disable RX
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_DisableRX(uint8_t PortNum)
{
 8010994:	b580      	push	{r7, lr}
 8010996:	b082      	sub	sp, #8
 8010998:	af00      	add	r7, sp, #0
 801099a:	4603      	mov	r3, r0
 801099c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 801099e:	79fa      	ldrb	r2, [r7, #7]
 80109a0:	4906      	ldr	r1, [pc, #24]	@ (80109bc <USBPD_HW_IF_DisableRX+0x28>)
 80109a2:	4613      	mov	r3, r2
 80109a4:	011b      	lsls	r3, r3, #4
 80109a6:	1a9b      	subs	r3, r3, r2
 80109a8:	009b      	lsls	r3, r3, #2
 80109aa:	440b      	add	r3, r1
 80109ac:	681b      	ldr	r3, [r3, #0]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7ff fbf5 	bl	801019e <LL_UCPD_RxDisable>
}
 80109b4:	bf00      	nop
 80109b6:	3708      	adds	r7, #8
 80109b8:	46bd      	mov	sp, r7
 80109ba:	bd80      	pop	{r7, pc}
 80109bc:	20000b08 	.word	0x20000b08

080109c0 <HW_SignalAttachement>:

void HW_SignalAttachement(uint8_t PortNum, CCxPin_TypeDef cc)
{
 80109c0:	b590      	push	{r4, r7, lr}
 80109c2:	b085      	sub	sp, #20
 80109c4:	af00      	add	r7, sp, #0
 80109c6:	4603      	mov	r3, r0
 80109c8:	6039      	str	r1, [r7, #0]
 80109ca:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  uint32_t _temp;

  /* Init timer to detect the reception of goodCRC */
  USBPD_TIM_Init();
 80109cc:	f000 fc96 	bl	80112fc <USBPD_TIM_Init>

  /* Prepare ucpd to handle PD message
            RX message start listen
            TX prepare the DMA to be transfer ready
            Detection listen only the line corresponding CC=Rd for SRC/SNK */
  Ports[PortNum].hdmatx = USBPD_HW_Init_DMATxInstance(PortNum);
 80109d0:	79fc      	ldrb	r4, [r7, #7]
 80109d2:	79fb      	ldrb	r3, [r7, #7]
 80109d4:	4618      	mov	r0, r3
 80109d6:	f7fe fe1d 	bl	800f614 <USBPD_HW_Init_DMATxInstance>
 80109da:	4602      	mov	r2, r0
 80109dc:	499d      	ldr	r1, [pc, #628]	@ (8010c54 <HW_SignalAttachement+0x294>)
 80109de:	4623      	mov	r3, r4
 80109e0:	011b      	lsls	r3, r3, #4
 80109e2:	1b1b      	subs	r3, r3, r4
 80109e4:	009b      	lsls	r3, r3, #2
 80109e6:	440b      	add	r3, r1
 80109e8:	3304      	adds	r3, #4
 80109ea:	601a      	str	r2, [r3, #0]
  Ports[PortNum].hdmarx = USBPD_HW_Init_DMARxInstance(PortNum);
 80109ec:	79fc      	ldrb	r4, [r7, #7]
 80109ee:	79fb      	ldrb	r3, [r7, #7]
 80109f0:	4618      	mov	r0, r3
 80109f2:	f7fe fdcf 	bl	800f594 <USBPD_HW_Init_DMARxInstance>
 80109f6:	4602      	mov	r2, r0
 80109f8:	4996      	ldr	r1, [pc, #600]	@ (8010c54 <HW_SignalAttachement+0x294>)
 80109fa:	4623      	mov	r3, r4
 80109fc:	011b      	lsls	r3, r3, #4
 80109fe:	1b1b      	subs	r3, r3, r4
 8010a00:	009b      	lsls	r3, r3, #2
 8010a02:	440b      	add	r3, r1
 8010a04:	3308      	adds	r3, #8
 8010a06:	601a      	str	r2, [r3, #0]

  /* Set the RX dma to allow reception */
  _temp = (uint32_t)&Ports[PortNum].husbpd->RXDR;
 8010a08:	79fa      	ldrb	r2, [r7, #7]
 8010a0a:	4992      	ldr	r1, [pc, #584]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a0c:	4613      	mov	r3, r2
 8010a0e:	011b      	lsls	r3, r3, #4
 8010a10:	1a9b      	subs	r3, r3, r2
 8010a12:	009b      	lsls	r3, r3, #2
 8010a14:	440b      	add	r3, r1
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	3330      	adds	r3, #48	@ 0x30
 8010a1a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(Ports[PortNum].hdmarx->CPAR, _temp);
 8010a1c:	79fa      	ldrb	r2, [r7, #7]
 8010a1e:	498d      	ldr	r1, [pc, #564]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a20:	4613      	mov	r3, r2
 8010a22:	011b      	lsls	r3, r3, #4
 8010a24:	1a9b      	subs	r3, r3, r2
 8010a26:	009b      	lsls	r3, r3, #2
 8010a28:	440b      	add	r3, r1
 8010a2a:	3308      	adds	r3, #8
 8010a2c:	681b      	ldr	r3, [r3, #0]
 8010a2e:	68fa      	ldr	r2, [r7, #12]
 8010a30:	609a      	str	r2, [r3, #8]
  WRITE_REG(Ports[PortNum].hdmarx->CMAR, (uint32_t)Ports[PortNum].ptr_RxBuff);
 8010a32:	79fa      	ldrb	r2, [r7, #7]
 8010a34:	4987      	ldr	r1, [pc, #540]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a36:	4613      	mov	r3, r2
 8010a38:	011b      	lsls	r3, r3, #4
 8010a3a:	1a9b      	subs	r3, r3, r2
 8010a3c:	009b      	lsls	r3, r3, #2
 8010a3e:	440b      	add	r3, r1
 8010a40:	3330      	adds	r3, #48	@ 0x30
 8010a42:	6818      	ldr	r0, [r3, #0]
 8010a44:	79fa      	ldrb	r2, [r7, #7]
 8010a46:	4983      	ldr	r1, [pc, #524]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a48:	4613      	mov	r3, r2
 8010a4a:	011b      	lsls	r3, r3, #4
 8010a4c:	1a9b      	subs	r3, r3, r2
 8010a4e:	009b      	lsls	r3, r3, #2
 8010a50:	440b      	add	r3, r1
 8010a52:	3308      	adds	r3, #8
 8010a54:	681b      	ldr	r3, [r3, #0]
 8010a56:	4602      	mov	r2, r0
 8010a58:	60da      	str	r2, [r3, #12]
  Ports[PortNum].hdmarx->CNDTR = SIZE_MAX_PD_TRANSACTION_UNCHUNK;
 8010a5a:	79fa      	ldrb	r2, [r7, #7]
 8010a5c:	497d      	ldr	r1, [pc, #500]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a5e:	4613      	mov	r3, r2
 8010a60:	011b      	lsls	r3, r3, #4
 8010a62:	1a9b      	subs	r3, r3, r2
 8010a64:	009b      	lsls	r3, r3, #2
 8010a66:	440b      	add	r3, r1
 8010a68:	3308      	adds	r3, #8
 8010a6a:	681b      	ldr	r3, [r3, #0]
 8010a6c:	f44f 7284 	mov.w	r2, #264	@ 0x108
 8010a70:	605a      	str	r2, [r3, #4]
  Ports[PortNum].hdmarx->CCR |= DMA_CCR_EN;
 8010a72:	79fa      	ldrb	r2, [r7, #7]
 8010a74:	4977      	ldr	r1, [pc, #476]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a76:	4613      	mov	r3, r2
 8010a78:	011b      	lsls	r3, r3, #4
 8010a7a:	1a9b      	subs	r3, r3, r2
 8010a7c:	009b      	lsls	r3, r3, #2
 8010a7e:	440b      	add	r3, r1
 8010a80:	3308      	adds	r3, #8
 8010a82:	681b      	ldr	r3, [r3, #0]
 8010a84:	6819      	ldr	r1, [r3, #0]
 8010a86:	79fa      	ldrb	r2, [r7, #7]
 8010a88:	4872      	ldr	r0, [pc, #456]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	011b      	lsls	r3, r3, #4
 8010a8e:	1a9b      	subs	r3, r3, r2
 8010a90:	009b      	lsls	r3, r3, #2
 8010a92:	4403      	add	r3, r0
 8010a94:	3308      	adds	r3, #8
 8010a96:	681b      	ldr	r3, [r3, #0]
 8010a98:	f041 0201 	orr.w	r2, r1, #1
 8010a9c:	601a      	str	r2, [r3, #0]

  /* Set the TX dma only UCPD address */
  _temp = (uint32_t)&Ports[PortNum].husbpd->TXDR;
 8010a9e:	79fa      	ldrb	r2, [r7, #7]
 8010aa0:	496c      	ldr	r1, [pc, #432]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010aa2:	4613      	mov	r3, r2
 8010aa4:	011b      	lsls	r3, r3, #4
 8010aa6:	1a9b      	subs	r3, r3, r2
 8010aa8:	009b      	lsls	r3, r3, #2
 8010aaa:	440b      	add	r3, r1
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	3324      	adds	r3, #36	@ 0x24
 8010ab0:	60fb      	str	r3, [r7, #12]
  Ports[PortNum].hdmatx->CPAR = _temp;
 8010ab2:	79fa      	ldrb	r2, [r7, #7]
 8010ab4:	4967      	ldr	r1, [pc, #412]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010ab6:	4613      	mov	r3, r2
 8010ab8:	011b      	lsls	r3, r3, #4
 8010aba:	1a9b      	subs	r3, r3, r2
 8010abc:	009b      	lsls	r3, r3, #2
 8010abe:	440b      	add	r3, r1
 8010ac0:	3304      	adds	r3, #4
 8010ac2:	681b      	ldr	r3, [r3, #0]
 8010ac4:	68fa      	ldr	r2, [r7, #12]
 8010ac6:	609a      	str	r2, [r3, #8]
  /* Disabled non Rd line set CC line enable */
#define INTERRUPT_MASK  UCPD_IMR_TXMSGDISCIE | UCPD_IMR_TXMSGSENTIE | UCPD_IMR_HRSTDISCIE  | UCPD_IMR_HRSTSENTIE |  \
  UCPD_IMR_TXMSGABTIE  | UCPD_IMR_TXUNDIE     | UCPD_IMR_RXORDDETIE  | UCPD_IMR_RXHRSTDETIE | \
  UCPD_IMR_RXOVRIE     | UCPD_IMR_RXMSGENDIE

  MODIFY_REG(Ports[PortNum].husbpd->IMR, INTERRUPT_MASK, INTERRUPT_MASK);
 8010ac8:	79fa      	ldrb	r2, [r7, #7]
 8010aca:	4962      	ldr	r1, [pc, #392]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010acc:	4613      	mov	r3, r2
 8010ace:	011b      	lsls	r3, r3, #4
 8010ad0:	1a9b      	subs	r3, r3, r2
 8010ad2:	009b      	lsls	r3, r3, #2
 8010ad4:	440b      	add	r3, r1
 8010ad6:	681b      	ldr	r3, [r3, #0]
 8010ad8:	6919      	ldr	r1, [r3, #16]
 8010ada:	79fa      	ldrb	r2, [r7, #7]
 8010adc:	485d      	ldr	r0, [pc, #372]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010ade:	4613      	mov	r3, r2
 8010ae0:	011b      	lsls	r3, r3, #4
 8010ae2:	1a9b      	subs	r3, r3, r2
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	4403      	add	r3, r0
 8010ae8:	681a      	ldr	r2, [r3, #0]
 8010aea:	f441 53f3 	orr.w	r3, r1, #7776	@ 0x1e60
 8010aee:	f043 031e 	orr.w	r3, r3, #30
 8010af2:	6113      	str	r3, [r2, #16]
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Handle CC enable */
  Ports[PortNum].CCx = cc;
 8010af4:	79fa      	ldrb	r2, [r7, #7]
 8010af6:	4957      	ldr	r1, [pc, #348]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010af8:	4613      	mov	r3, r2
 8010afa:	011b      	lsls	r3, r3, #4
 8010afc:	1a9b      	subs	r3, r3, r2
 8010afe:	009b      	lsls	r3, r3, #2
 8010b00:	440b      	add	r3, r1
 8010b02:	3334      	adds	r3, #52	@ 0x34
 8010b04:	683a      	ldr	r2, [r7, #0]
 8010b06:	601a      	str	r2, [r3, #0]

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Set CC pin for PD message */
  LL_UCPD_SetCCPin(Ports[PortNum].husbpd, (Ports[PortNum].CCx == CC1) ? LL_UCPD_CCPIN_CC1 : LL_UCPD_CCPIN_CC2);
 8010b08:	79fa      	ldrb	r2, [r7, #7]
 8010b0a:	4952      	ldr	r1, [pc, #328]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b0c:	4613      	mov	r3, r2
 8010b0e:	011b      	lsls	r3, r3, #4
 8010b10:	1a9b      	subs	r3, r3, r2
 8010b12:	009b      	lsls	r3, r3, #2
 8010b14:	440b      	add	r3, r1
 8010b16:	6818      	ldr	r0, [r3, #0]
 8010b18:	79fa      	ldrb	r2, [r7, #7]
 8010b1a:	494e      	ldr	r1, [pc, #312]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b1c:	4613      	mov	r3, r2
 8010b1e:	011b      	lsls	r3, r3, #4
 8010b20:	1a9b      	subs	r3, r3, r2
 8010b22:	009b      	lsls	r3, r3, #2
 8010b24:	440b      	add	r3, r1
 8010b26:	3334      	adds	r3, #52	@ 0x34
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d101      	bne.n	8010b32 <HW_SignalAttachement+0x172>
 8010b2e:	2300      	movs	r3, #0
 8010b30:	e000      	b.n	8010b34 <HW_SignalAttachement+0x174>
 8010b32:	2340      	movs	r3, #64	@ 0x40
 8010b34:	4619      	mov	r1, r3
 8010b36:	f7ff fb0f 	bl	8010158 <LL_UCPD_SetCCPin>
#if defined(_VCONN_SUPPORT)
  /* Initialize Vconn management */
  (void)BSP_USBPD_PWR_VCONNInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010b3a:	79fa      	ldrb	r2, [r7, #7]
 8010b3c:	4945      	ldr	r1, [pc, #276]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b3e:	4613      	mov	r3, r2
 8010b40:	011b      	lsls	r3, r3, #4
 8010b42:	1a9b      	subs	r3, r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	440b      	add	r3, r1
 8010b48:	330c      	adds	r3, #12
 8010b4a:	681b      	ldr	r3, [r3, #0]
 8010b4c:	7a1b      	ldrb	r3, [r3, #8]
 8010b4e:	f003 0302 	and.w	r3, r3, #2
 8010b52:	b2db      	uxtb	r3, r3
 8010b54:	2b00      	cmp	r3, #0
 8010b56:	d031      	beq.n	8010bbc <HW_SignalAttachement+0x1fc>
  {
    /* Set GPIO to allow the FRS TX handling */
    USBPD_HW_SetFRSSignalling(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
 8010b58:	79fa      	ldrb	r2, [r7, #7]
 8010b5a:	493e      	ldr	r1, [pc, #248]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b5c:	4613      	mov	r3, r2
 8010b5e:	011b      	lsls	r3, r3, #4
 8010b60:	1a9b      	subs	r3, r3, r2
 8010b62:	009b      	lsls	r3, r3, #2
 8010b64:	440b      	add	r3, r1
 8010b66:	3334      	adds	r3, #52	@ 0x34
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b01      	cmp	r3, #1
 8010b6c:	d101      	bne.n	8010b72 <HW_SignalAttachement+0x1b2>
 8010b6e:	2201      	movs	r2, #1
 8010b70:	e000      	b.n	8010b74 <HW_SignalAttachement+0x1b4>
 8010b72:	2202      	movs	r2, #2
 8010b74:	79fb      	ldrb	r3, [r7, #7]
 8010b76:	4611      	mov	r1, r2
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fd8a 	bl	800f692 <USBPD_HW_SetFRSSignalling>
    /* Enable FRS RX */
    LL_UCPD_FRSDetectionEnable(Ports[PortNum].husbpd);
 8010b7e:	79fa      	ldrb	r2, [r7, #7]
 8010b80:	4934      	ldr	r1, [pc, #208]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b82:	4613      	mov	r3, r2
 8010b84:	011b      	lsls	r3, r3, #4
 8010b86:	1a9b      	subs	r3, r3, r2
 8010b88:	009b      	lsls	r3, r3, #2
 8010b8a:	440b      	add	r3, r1
 8010b8c:	681b      	ldr	r3, [r3, #0]
 8010b8e:	4618      	mov	r0, r3
 8010b90:	f7ff fa7c 	bl	801008c <LL_UCPD_FRSDetectionEnable>
    Ports[PortNum].husbpd->IMR |= UCPD_IMR_FRSEVTIE;
 8010b94:	79fa      	ldrb	r2, [r7, #7]
 8010b96:	492f      	ldr	r1, [pc, #188]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010b98:	4613      	mov	r3, r2
 8010b9a:	011b      	lsls	r3, r3, #4
 8010b9c:	1a9b      	subs	r3, r3, r2
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	440b      	add	r3, r1
 8010ba2:	681b      	ldr	r3, [r3, #0]
 8010ba4:	6919      	ldr	r1, [r3, #16]
 8010ba6:	79fa      	ldrb	r2, [r7, #7]
 8010ba8:	482a      	ldr	r0, [pc, #168]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010baa:	4613      	mov	r3, r2
 8010bac:	011b      	lsls	r3, r3, #4
 8010bae:	1a9b      	subs	r3, r3, r2
 8010bb0:	009b      	lsls	r3, r3, #2
 8010bb2:	4403      	add	r3, r0
 8010bb4:	681b      	ldr	r3, [r3, #0]
 8010bb6:	f441 1280 	orr.w	r2, r1, #1048576	@ 0x100000
 8010bba:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Resistor on Vconn PIN */
  if (Ports[PortNum].CCx == CC1)
 8010bbc:	79fa      	ldrb	r2, [r7, #7]
 8010bbe:	4925      	ldr	r1, [pc, #148]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010bc0:	4613      	mov	r3, r2
 8010bc2:	011b      	lsls	r3, r3, #4
 8010bc4:	1a9b      	subs	r3, r3, r2
 8010bc6:	009b      	lsls	r3, r3, #2
 8010bc8:	440b      	add	r3, r1
 8010bca:	3334      	adds	r3, #52	@ 0x34
 8010bcc:	681b      	ldr	r3, [r3, #0]
 8010bce:	2b01      	cmp	r3, #1
 8010bd0:	d10d      	bne.n	8010bee <HW_SignalAttachement+0x22e>
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1);
 8010bd2:	79fa      	ldrb	r2, [r7, #7]
 8010bd4:	491f      	ldr	r1, [pc, #124]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010bd6:	4613      	mov	r3, r2
 8010bd8:	011b      	lsls	r3, r3, #4
 8010bda:	1a9b      	subs	r3, r3, r2
 8010bdc:	009b      	lsls	r3, r3, #2
 8010bde:	440b      	add	r3, r1
 8010be0:	681b      	ldr	r3, [r3, #0]
 8010be2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7ff fa70 	bl	80100cc <LL_UCPD_SetccEnable>
 8010bec:	e00c      	b.n	8010c08 <HW_SignalAttachement+0x248>
  }
  else
  {
    LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC2);
 8010bee:	79fa      	ldrb	r2, [r7, #7]
 8010bf0:	4918      	ldr	r1, [pc, #96]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	011b      	lsls	r3, r3, #4
 8010bf6:	1a9b      	subs	r3, r3, r2
 8010bf8:	009b      	lsls	r3, r3, #2
 8010bfa:	440b      	add	r3, r1
 8010bfc:	681b      	ldr	r3, [r3, #0]
 8010bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8010c02:	4618      	mov	r0, r3
 8010c04:	f7ff fa62 	bl	80100cc <LL_UCPD_SetccEnable>
  }

  /* Prepare the rx processing */
  LL_UCPD_SetRxMode(Ports[PortNum].husbpd, LL_UCPD_RXMODE_NORMAL);
 8010c08:	79fa      	ldrb	r2, [r7, #7]
 8010c0a:	4912      	ldr	r1, [pc, #72]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010c0c:	4613      	mov	r3, r2
 8010c0e:	011b      	lsls	r3, r3, #4
 8010c10:	1a9b      	subs	r3, r3, r2
 8010c12:	009b      	lsls	r3, r3, #2
 8010c14:	440b      	add	r3, r1
 8010c16:	681b      	ldr	r3, [r3, #0]
 8010c18:	2100      	movs	r1, #0
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f7ff facf 	bl	80101be <LL_UCPD_SetRxMode>
  LL_UCPD_RxDMAEnable(Ports[PortNum].husbpd);
 8010c20:	79fa      	ldrb	r2, [r7, #7]
 8010c22:	490c      	ldr	r1, [pc, #48]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010c24:	4613      	mov	r3, r2
 8010c26:	011b      	lsls	r3, r3, #4
 8010c28:	1a9b      	subs	r3, r3, r2
 8010c2a:	009b      	lsls	r3, r3, #2
 8010c2c:	440b      	add	r3, r1
 8010c2e:	681b      	ldr	r3, [r3, #0]
 8010c30:	4618      	mov	r0, r3
 8010c32:	f7ff fb0a 	bl	801024a <LL_UCPD_RxDMAEnable>
  LL_UCPD_TxDMAEnable(Ports[PortNum].husbpd);
 8010c36:	79fa      	ldrb	r2, [r7, #7]
 8010c38:	4906      	ldr	r1, [pc, #24]	@ (8010c54 <HW_SignalAttachement+0x294>)
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	011b      	lsls	r3, r3, #4
 8010c3e:	1a9b      	subs	r3, r3, r2
 8010c40:	009b      	lsls	r3, r3, #2
 8010c42:	440b      	add	r3, r1
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	4618      	mov	r0, r3
 8010c48:	f7ff fb1f 	bl	801028a <LL_UCPD_TxDMAEnable>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010c4c:	bf00      	nop
 8010c4e:	3714      	adds	r7, #20
 8010c50:	46bd      	mov	sp, r7
 8010c52:	bd90      	pop	{r4, r7, pc}
 8010c54:	20000b08 	.word	0x20000b08

08010c58 <HW_SignalDetachment>:


void HW_SignalDetachment(uint8_t PortNum)
{
 8010c58:	b580      	push	{r7, lr}
 8010c5a:	b082      	sub	sp, #8
 8010c5c:	af00      	add	r7, sp, #0
 8010c5e:	4603      	mov	r3, r0
 8010c60:	71fb      	strb	r3, [r7, #7]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* Stop DMA RX/TX */
  LL_UCPD_RxDMADisable(Ports[PortNum].husbpd);
 8010c62:	79fa      	ldrb	r2, [r7, #7]
 8010c64:	493e      	ldr	r1, [pc, #248]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010c66:	4613      	mov	r3, r2
 8010c68:	011b      	lsls	r3, r3, #4
 8010c6a:	1a9b      	subs	r3, r3, r2
 8010c6c:	009b      	lsls	r3, r3, #2
 8010c6e:	440b      	add	r3, r1
 8010c70:	681b      	ldr	r3, [r3, #0]
 8010c72:	4618      	mov	r0, r3
 8010c74:	f7ff faf9 	bl	801026a <LL_UCPD_RxDMADisable>
  LL_UCPD_TxDMADisable(Ports[PortNum].husbpd);
 8010c78:	79fa      	ldrb	r2, [r7, #7]
 8010c7a:	4939      	ldr	r1, [pc, #228]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	011b      	lsls	r3, r3, #4
 8010c80:	1a9b      	subs	r3, r3, r2
 8010c82:	009b      	lsls	r3, r3, #2
 8010c84:	440b      	add	r3, r1
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7ff fb0e 	bl	80102aa <LL_UCPD_TxDMADisable>
  LL_UCPD_RxDisable(Ports[PortNum].husbpd);
 8010c8e:	79fa      	ldrb	r2, [r7, #7]
 8010c90:	4933      	ldr	r1, [pc, #204]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010c92:	4613      	mov	r3, r2
 8010c94:	011b      	lsls	r3, r3, #4
 8010c96:	1a9b      	subs	r3, r3, r2
 8010c98:	009b      	lsls	r3, r3, #2
 8010c9a:	440b      	add	r3, r1
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	f7ff fa7d 	bl	801019e <LL_UCPD_RxDisable>

#if !defined(_LOW_POWER) && !defined(USBPDM1_VCC_FEATURE_ENABLED)
  /* Enable only detection interrupt */
  WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
 8010ca4:	79fa      	ldrb	r2, [r7, #7]
 8010ca6:	492e      	ldr	r1, [pc, #184]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010ca8:	4613      	mov	r3, r2
 8010caa:	011b      	lsls	r3, r3, #4
 8010cac:	1a9b      	subs	r3, r3, r2
 8010cae:	009b      	lsls	r3, r3, #2
 8010cb0:	440b      	add	r3, r1
 8010cb2:	681b      	ldr	r3, [r3, #0]
 8010cb4:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8010cb8:	611a      	str	r2, [r3, #16]
    WRITE_REG(Ports[PortNum].husbpd->IMR, UCPD_IMR_TYPECEVT1IE | UCPD_IMR_TYPECEVT2IE);
  }
#endif /* !_DRP */
#endif /* !_LOW_POWER && !USBPDM1_VCC_FEATURE_ENABLED */

  USBPD_HW_DeInit_DMATxInstance(PortNum);
 8010cba:	79fb      	ldrb	r3, [r7, #7]
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	f7fe fcdd 	bl	800f67c <USBPD_HW_DeInit_DMATxInstance>
  USBPD_HW_DeInit_DMARxInstance(PortNum);
 8010cc2:	79fb      	ldrb	r3, [r7, #7]
 8010cc4:	4618      	mov	r0, r3
 8010cc6:	f7fe fc99 	bl	800f5fc <USBPD_HW_DeInit_DMARxInstance>

  LL_UCPD_SetccEnable(Ports[PortNum].husbpd, LL_UCPD_CCENABLE_CC1CC2);
 8010cca:	79fa      	ldrb	r2, [r7, #7]
 8010ccc:	4924      	ldr	r1, [pc, #144]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010cce:	4613      	mov	r3, r2
 8010cd0:	011b      	lsls	r3, r3, #4
 8010cd2:	1a9b      	subs	r3, r3, r2
 8010cd4:	009b      	lsls	r3, r3, #2
 8010cd6:	440b      	add	r3, r1
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	f44f 6140 	mov.w	r1, #3072	@ 0xc00
 8010cde:	4618      	mov	r0, r3
 8010ce0:	f7ff f9f4 	bl	80100cc <LL_UCPD_SetccEnable>

  if (USBPD_PORTPOWERROLE_SNK == Ports[PortNum].params->PE_PowerRole)
 8010ce4:	79fa      	ldrb	r2, [r7, #7]
 8010ce6:	491e      	ldr	r1, [pc, #120]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010ce8:	4613      	mov	r3, r2
 8010cea:	011b      	lsls	r3, r3, #4
 8010cec:	1a9b      	subs	r3, r3, r2
 8010cee:	009b      	lsls	r3, r3, #2
 8010cf0:	440b      	add	r3, r1
 8010cf2:	3310      	adds	r3, #16
 8010cf4:	681b      	ldr	r3, [r3, #0]
 8010cf6:	781b      	ldrb	r3, [r3, #0]
 8010cf8:	f003 0304 	and.w	r3, r3, #4
 8010cfc:	b2db      	uxtb	r3, r3
 8010cfe:	2b00      	cmp	r3, #0
 8010d00:	d103      	bne.n	8010d0a <HW_SignalDetachment+0xb2>
#if defined(_VCONN_SUPPORT)
    /* DeInitialize Vconn management */
    (void)BSP_USBPD_PWR_VCONNDeInit(PortNum, (Ports[PortNum].CCx == CC1) ? 1u : 2u);
#endif /* _VCONN_SUPPORT */
    /* DeInitialise VBUS power */
    (void)BSP_USBPD_PWR_VBUSDeInit(PortNum);
 8010d02:	79fb      	ldrb	r3, [r7, #7]
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7f8 f897 	bl	8008e38 <BSP_USBPD_PWR_VBUSDeInit>
  }

  if (Ports[PortNum].settings->PE_PD3_Support.d.PE_FastRoleSwapSupport == USBPD_TRUE)
 8010d0a:	79fa      	ldrb	r2, [r7, #7]
 8010d0c:	4914      	ldr	r1, [pc, #80]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010d0e:	4613      	mov	r3, r2
 8010d10:	011b      	lsls	r3, r3, #4
 8010d12:	1a9b      	subs	r3, r3, r2
 8010d14:	009b      	lsls	r3, r3, #2
 8010d16:	440b      	add	r3, r1
 8010d18:	330c      	adds	r3, #12
 8010d1a:	681b      	ldr	r3, [r3, #0]
 8010d1c:	7a1b      	ldrb	r3, [r3, #8]
 8010d1e:	f003 0302 	and.w	r3, r3, #2
 8010d22:	b2db      	uxtb	r3, r3
 8010d24:	2b00      	cmp	r3, #0
 8010d26:	d00a      	beq.n	8010d3e <HW_SignalDetachment+0xe6>
  {
    /* Set GPIO to disallow the FRS RX handling */
    LL_UCPD_FRSDetectionDisable(Ports[PortNum].husbpd);
 8010d28:	79fa      	ldrb	r2, [r7, #7]
 8010d2a:	490d      	ldr	r1, [pc, #52]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010d2c:	4613      	mov	r3, r2
 8010d2e:	011b      	lsls	r3, r3, #4
 8010d30:	1a9b      	subs	r3, r3, r2
 8010d32:	009b      	lsls	r3, r3, #2
 8010d34:	440b      	add	r3, r1
 8010d36:	681b      	ldr	r3, [r3, #0]
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f7ff f9b7 	bl	80100ac <LL_UCPD_FRSDetectionDisable>
  }

#endif /* !USBPDCORE_LIB_NO_PD */
  Ports[PortNum].CCx = CCNONE;
 8010d3e:	79fa      	ldrb	r2, [r7, #7]
 8010d40:	4907      	ldr	r1, [pc, #28]	@ (8010d60 <HW_SignalDetachment+0x108>)
 8010d42:	4613      	mov	r3, r2
 8010d44:	011b      	lsls	r3, r3, #4
 8010d46:	1a9b      	subs	r3, r3, r2
 8010d48:	009b      	lsls	r3, r3, #2
 8010d4a:	440b      	add	r3, r1
 8010d4c:	3334      	adds	r3, #52	@ 0x34
 8010d4e:	2200      	movs	r2, #0
 8010d50:	601a      	str	r2, [r3, #0]
#if !defined(USBPDCORE_LIB_NO_PD)
  /* DeInit timer to detect the reception of goodCRC */
  USBPD_TIM_DeInit();
 8010d52:	f000 fb5b 	bl	801140c <USBPD_TIM_DeInit>
#endif /* !USBPDCORE_LIB_NO_PD */
}
 8010d56:	bf00      	nop
 8010d58:	3708      	adds	r7, #8
 8010d5a:	46bd      	mov	sp, r7
 8010d5c:	bd80      	pop	{r7, pc}
 8010d5e:	bf00      	nop
 8010d60:	20000b08 	.word	0x20000b08

08010d64 <USBPD_HW_IF_SetResistor_SinkTxNG>:
  * @brief  Set resistors to SinkTxNG
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxNG(uint8_t PortNum)
{
 8010d64:	b580      	push	{r7, lr}
 8010d66:	b082      	sub	sp, #8
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 1.5A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_1_5A);
 8010d6e:	79fa      	ldrb	r2, [r7, #7]
 8010d70:	4907      	ldr	r1, [pc, #28]	@ (8010d90 <USBPD_HW_IF_SetResistor_SinkTxNG+0x2c>)
 8010d72:	4613      	mov	r3, r2
 8010d74:	011b      	lsls	r3, r3, #4
 8010d76:	1a9b      	subs	r3, r3, r2
 8010d78:	009b      	lsls	r3, r3, #2
 8010d7a:	440b      	add	r3, r1
 8010d7c:	681b      	ldr	r3, [r3, #0]
 8010d7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010d82:	4618      	mov	r0, r3
 8010d84:	f7ff f9d5 	bl	8010132 <LL_UCPD_SetRpResistor>
}
 8010d88:	bf00      	nop
 8010d8a:	3708      	adds	r7, #8
 8010d8c:	46bd      	mov	sp, r7
 8010d8e:	bd80      	pop	{r7, pc}
 8010d90:	20000b08 	.word	0x20000b08

08010d94 <USBPD_HW_IF_SetResistor_SinkTxOK>:
  * @brief  Set resistors to SinkTxOk
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_SetResistor_SinkTxOK(uint8_t PortNum)
{
 8010d94:	b580      	push	{r7, lr}
 8010d96:	b082      	sub	sp, #8
 8010d98:	af00      	add	r7, sp, #0
 8010d9a:	4603      	mov	r3, r0
 8010d9c:	71fb      	strb	r3, [r7, #7]
  /* Set the resistor SinkTxNG 3.0A5V */
  LL_UCPD_SetRpResistor(Ports[PortNum].husbpd, LL_UCPD_RESISTOR_3_0A);
 8010d9e:	79fa      	ldrb	r2, [r7, #7]
 8010da0:	4907      	ldr	r1, [pc, #28]	@ (8010dc0 <USBPD_HW_IF_SetResistor_SinkTxOK+0x2c>)
 8010da2:	4613      	mov	r3, r2
 8010da4:	011b      	lsls	r3, r3, #4
 8010da6:	1a9b      	subs	r3, r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	440b      	add	r3, r1
 8010dac:	681b      	ldr	r3, [r3, #0]
 8010dae:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8010db2:	4618      	mov	r0, r3
 8010db4:	f7ff f9bd 	bl	8010132 <LL_UCPD_SetRpResistor>
}
 8010db8:	bf00      	nop
 8010dba:	3708      	adds	r7, #8
 8010dbc:	46bd      	mov	sp, r7
 8010dbe:	bd80      	pop	{r7, pc}
 8010dc0:	20000b08 	.word	0x20000b08

08010dc4 <USBPD_HW_IF_IsResistor_SinkTxOk>:
  * @brief  Check if resistors are set to SinkTxOk
  * @param  PortNum Port
  * @retval USBPD_TRUE if resistor is set to SinkTxOk, else USBPD_FALSE
  */
uint8_t USBPD_HW_IF_IsResistor_SinkTxOk(uint8_t PortNum)
{
 8010dc4:	b480      	push	{r7}
 8010dc6:	b083      	sub	sp, #12
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	71fb      	strb	r3, [r7, #7]

  /* Disable type C state machine */
  SET_BIT(Ports[PortNum].husbpd->CR, (UCPD_CR_CC1TCDIS | UCPD_CR_CC2TCDIS));
#endif /* _LOW_POWER */

  switch (Ports[PortNum].CCx)
 8010dce:	79fa      	ldrb	r2, [r7, #7]
 8010dd0:	491b      	ldr	r1, [pc, #108]	@ (8010e40 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010dd2:	4613      	mov	r3, r2
 8010dd4:	011b      	lsls	r3, r3, #4
 8010dd6:	1a9b      	subs	r3, r3, r2
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	440b      	add	r3, r1
 8010ddc:	3334      	adds	r3, #52	@ 0x34
 8010dde:	681b      	ldr	r3, [r3, #0]
 8010de0:	2b01      	cmp	r3, #1
 8010de2:	d002      	beq.n	8010dea <USBPD_HW_IF_IsResistor_SinkTxOk+0x26>
 8010de4:	2b02      	cmp	r3, #2
 8010de6:	d010      	beq.n	8010e0a <USBPD_HW_IF_IsResistor_SinkTxOk+0x46>
      {
        return USBPD_TRUE;
      }
      break;
    default:
      break;
 8010de8:	e022      	b.n	8010e30 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC1) == LL_UCPD_SNK_CC1_VRP30A)
 8010dea:	79fa      	ldrb	r2, [r7, #7]
 8010dec:	4914      	ldr	r1, [pc, #80]	@ (8010e40 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010dee:	4613      	mov	r3, r2
 8010df0:	011b      	lsls	r3, r3, #4
 8010df2:	1a9b      	subs	r3, r3, r2
 8010df4:	009b      	lsls	r3, r3, #2
 8010df6:	440b      	add	r3, r1
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	695b      	ldr	r3, [r3, #20]
 8010dfc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8010e00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010e04:	d111      	bne.n	8010e2a <USBPD_HW_IF_IsResistor_SinkTxOk+0x66>
        return USBPD_TRUE;
 8010e06:	2301      	movs	r3, #1
 8010e08:	e013      	b.n	8010e32 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      if ((Ports[PortNum].husbpd->SR & UCPD_SR_TYPEC_VSTATE_CC2) == LL_UCPD_SNK_CC2_VRP30A)
 8010e0a:	79fa      	ldrb	r2, [r7, #7]
 8010e0c:	490c      	ldr	r1, [pc, #48]	@ (8010e40 <USBPD_HW_IF_IsResistor_SinkTxOk+0x7c>)
 8010e0e:	4613      	mov	r3, r2
 8010e10:	011b      	lsls	r3, r3, #4
 8010e12:	1a9b      	subs	r3, r3, r2
 8010e14:	009b      	lsls	r3, r3, #2
 8010e16:	440b      	add	r3, r1
 8010e18:	681b      	ldr	r3, [r3, #0]
 8010e1a:	695b      	ldr	r3, [r3, #20]
 8010e1c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8010e20:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8010e24:	d103      	bne.n	8010e2e <USBPD_HW_IF_IsResistor_SinkTxOk+0x6a>
        return USBPD_TRUE;
 8010e26:	2301      	movs	r3, #1
 8010e28:	e003      	b.n	8010e32 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6e>
      break;
 8010e2a:	bf00      	nop
 8010e2c:	e000      	b.n	8010e30 <USBPD_HW_IF_IsResistor_SinkTxOk+0x6c>
      break;
 8010e2e:	bf00      	nop
  }

  return USBPD_FALSE;
 8010e30:	2300      	movs	r3, #0
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	370c      	adds	r7, #12
 8010e36:	46bd      	mov	sp, r7
 8010e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3c:	4770      	bx	lr
 8010e3e:	bf00      	nop
 8010e40:	20000b08 	.word	0x20000b08

08010e44 <USBPD_HW_IF_FastRoleSwapSignalling>:
  * @brief  Signal a Fast Role Swap
  * @param  PortNum Port
  * @retval None
  */
void USBPD_HW_IF_FastRoleSwapSignalling(uint8_t PortNum)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b082      	sub	sp, #8
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	71fb      	strb	r3, [r7, #7]
  LL_UCPD_SignalFRSTX(Ports[PortNum].husbpd);
 8010e4e:	79fa      	ldrb	r2, [r7, #7]
 8010e50:	4906      	ldr	r1, [pc, #24]	@ (8010e6c <USBPD_HW_IF_FastRoleSwapSignalling+0x28>)
 8010e52:	4613      	mov	r3, r2
 8010e54:	011b      	lsls	r3, r3, #4
 8010e56:	1a9b      	subs	r3, r3, r2
 8010e58:	009b      	lsls	r3, r3, #2
 8010e5a:	440b      	add	r3, r1
 8010e5c:	681b      	ldr	r3, [r3, #0]
 8010e5e:	4618      	mov	r0, r3
 8010e60:	f7ff f904 	bl	801006c <LL_UCPD_SignalFRSTX>
}
 8010e64:	bf00      	nop
 8010e66:	3708      	adds	r7, #8
 8010e68:	46bd      	mov	sp, r7
 8010e6a:	bd80      	pop	{r7, pc}
 8010e6c:	20000b08 	.word	0x20000b08

08010e70 <HW_IF_PWR_GetVoltage>:
  UNUSED(voltage);
  return USBPD_OK;
}

uint16_t HW_IF_PWR_GetVoltage(uint8_t PortNum)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b084      	sub	sp, #16
 8010e74:	af00      	add	r7, sp, #0
 8010e76:	4603      	mov	r3, r0
 8010e78:	71fb      	strb	r3, [r7, #7]
  uint32_t _voltage;
  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8010e7a:	79fb      	ldrb	r3, [r7, #7]
 8010e7c:	f107 020c 	add.w	r2, r7, #12
 8010e80:	4611      	mov	r1, r2
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7f8 f914 	bl	80090b0 <BSP_USBPD_PWR_VBUSGetVoltage>
  return (uint16_t)_voltage;
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	b29b      	uxth	r3, r3
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3710      	adds	r7, #16
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}

08010e94 <HW_IF_PWR_GetCurrent>:

int16_t HW_IF_PWR_GetCurrent(uint8_t PortNum)
{
 8010e94:	b580      	push	{r7, lr}
 8010e96:	b084      	sub	sp, #16
 8010e98:	af00      	add	r7, sp, #0
 8010e9a:	4603      	mov	r3, r0
 8010e9c:	71fb      	strb	r3, [r7, #7]
  int32_t _current;
  BSP_USBPD_PWR_VBUSGetCurrent(PortNum, &_current);
 8010e9e:	79fb      	ldrb	r3, [r7, #7]
 8010ea0:	f107 020c 	add.w	r2, r7, #12
 8010ea4:	4611      	mov	r1, r2
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	f7f8 f92c 	bl	8009104 <BSP_USBPD_PWR_VBUSGetCurrent>
  return (int16_t)_current;
 8010eac:	68fb      	ldr	r3, [r7, #12]
 8010eae:	b21b      	sxth	r3, r3
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3710      	adds	r7, #16
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	bd80      	pop	{r7, pc}

08010eb8 <HW_IF_PWR_Enable>:

#if defined(_SRC) || defined(_DRP)
USBPD_StatusTypeDef HW_IF_PWR_Enable(uint8_t PortNum, USBPD_FunctionalState state, CCxPin_TypeDef Cc,
                                     uint32_t VconnState, USBPD_PortPowerRole_TypeDef role)
{
 8010eb8:	b580      	push	{r7, lr}
 8010eba:	b088      	sub	sp, #32
 8010ebc:	af02      	add	r7, sp, #8
 8010ebe:	60ba      	str	r2, [r7, #8]
 8010ec0:	607b      	str	r3, [r7, #4]
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	73fb      	strb	r3, [r7, #15]
 8010ec6:	460b      	mov	r3, r1
 8010ec8:	73bb      	strb	r3, [r7, #14]
  UNUSED(role);
  int32_t status;
  if (USBPD_ENABLE == state)
 8010eca:	7bbb      	ldrb	r3, [r7, #14]
 8010ecc:	2b01      	cmp	r3, #1
 8010ece:	d10d      	bne.n	8010eec <HW_IF_PWR_Enable+0x34>
    {
      POWER_DEBUG((uint8_t *)"VCONN ON", 8);
      (void)BSP_USBPD_PWR_VCONNOn(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS ON", 7);
 8010ed0:	7bf9      	ldrb	r1, [r7, #15]
 8010ed2:	2307      	movs	r3, #7
 8010ed4:	9300      	str	r3, [sp, #0]
 8010ed6:	4b11      	ldr	r3, [pc, #68]	@ (8010f1c <HW_IF_PWR_Enable+0x64>)
 8010ed8:	2200      	movs	r2, #0
 8010eda:	2006      	movs	r0, #6
 8010edc:	f7fd fb94 	bl	800e608 <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOn(PortNum);
 8010ee0:	7bfb      	ldrb	r3, [r7, #15]
 8010ee2:	4618      	mov	r0, r3
 8010ee4:	f7f7 ffd6 	bl	8008e94 <BSP_USBPD_PWR_VBUSOn>
 8010ee8:	6178      	str	r0, [r7, #20]
 8010eea:	e00c      	b.n	8010f06 <HW_IF_PWR_Enable+0x4e>
    {
      POWER_DEBUG((uint8_t *)"VCONN OFF", 9);
      (void)BSP_USBPD_PWR_VCONNOff(PortNum, Cc);
    }
#endif /* _VCONN_SUPPORT */
    POWER_DEBUG((uint8_t *)"VBUS OFF", 8);
 8010eec:	7bf9      	ldrb	r1, [r7, #15]
 8010eee:	2308      	movs	r3, #8
 8010ef0:	9300      	str	r3, [sp, #0]
 8010ef2:	4b0b      	ldr	r3, [pc, #44]	@ (8010f20 <HW_IF_PWR_Enable+0x68>)
 8010ef4:	2200      	movs	r2, #0
 8010ef6:	2006      	movs	r0, #6
 8010ef8:	f7fd fb86 	bl	800e608 <USBPD_TRACE_Add>
    status = BSP_USBPD_PWR_VBUSOff(PortNum);
 8010efc:	7bfb      	ldrb	r3, [r7, #15]
 8010efe:	4618      	mov	r0, r3
 8010f00:	f7f8 f81a 	bl	8008f38 <BSP_USBPD_PWR_VBUSOff>
 8010f04:	6178      	str	r0, [r7, #20]
  }
  return (status == BSP_ERROR_NONE) ? USBPD_OK : USBPD_FAIL;
 8010f06:	697b      	ldr	r3, [r7, #20]
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d101      	bne.n	8010f10 <HW_IF_PWR_Enable+0x58>
 8010f0c:	2300      	movs	r3, #0
 8010f0e:	e000      	b.n	8010f12 <HW_IF_PWR_Enable+0x5a>
 8010f10:	2310      	movs	r3, #16
}
 8010f12:	4618      	mov	r0, r3
 8010f14:	3718      	adds	r7, #24
 8010f16:	46bd      	mov	sp, r7
 8010f18:	bd80      	pop	{r7, pc}
 8010f1a:	bf00      	nop
 8010f1c:	0801b228 	.word	0x0801b228
 8010f20:	0801b230 	.word	0x0801b230

08010f24 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8010f24:	b480      	push	{r7}
 8010f26:	b085      	sub	sp, #20
 8010f28:	af00      	add	r7, sp, #0
 8010f2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8010f2c:	4b08      	ldr	r3, [pc, #32]	@ (8010f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010f2e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010f30:	4907      	ldr	r1, [pc, #28]	@ (8010f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010f32:	687b      	ldr	r3, [r7, #4]
 8010f34:	4313      	orrs	r3, r2
 8010f36:	660b      	str	r3, [r1, #96]	@ 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8010f38:	4b05      	ldr	r3, [pc, #20]	@ (8010f50 <LL_APB2_GRP1_EnableClock+0x2c>)
 8010f3a:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	4013      	ands	r3, r2
 8010f40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8010f42:	68fb      	ldr	r3, [r7, #12]
}
 8010f44:	bf00      	nop
 8010f46:	3714      	adds	r7, #20
 8010f48:	46bd      	mov	sp, r7
 8010f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f4e:	4770      	bx	lr
 8010f50:	40021000 	.word	0x40021000

08010f54 <LL_APB2_GRP1_DisableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_DisableClock(uint32_t Periphs)
{
 8010f54:	b480      	push	{r7}
 8010f56:	b083      	sub	sp, #12
 8010f58:	af00      	add	r7, sp, #0
 8010f5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB2ENR, Periphs);
 8010f5c:	4b06      	ldr	r3, [pc, #24]	@ (8010f78 <LL_APB2_GRP1_DisableClock+0x24>)
 8010f5e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8010f60:	687b      	ldr	r3, [r7, #4]
 8010f62:	43db      	mvns	r3, r3
 8010f64:	4904      	ldr	r1, [pc, #16]	@ (8010f78 <LL_APB2_GRP1_DisableClock+0x24>)
 8010f66:	4013      	ands	r3, r2
 8010f68:	660b      	str	r3, [r1, #96]	@ 0x60
}
 8010f6a:	bf00      	nop
 8010f6c:	370c      	adds	r7, #12
 8010f6e:	46bd      	mov	sp, r7
 8010f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f74:	4770      	bx	lr
 8010f76:	bf00      	nop
 8010f78:	40021000 	.word	0x40021000

08010f7c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8010f7c:	b480      	push	{r7}
 8010f7e:	b083      	sub	sp, #12
 8010f80:	af00      	add	r7, sp, #0
 8010f82:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8010f84:	687b      	ldr	r3, [r7, #4]
 8010f86:	681b      	ldr	r3, [r3, #0]
 8010f88:	f043 0201 	orr.w	r2, r3, #1
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	601a      	str	r2, [r3, #0]
}
 8010f90:	bf00      	nop
 8010f92:	370c      	adds	r7, #12
 8010f94:	46bd      	mov	sp, r7
 8010f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9a:	4770      	bx	lr

08010f9c <LL_TIM_SetCounterMode>:
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_DOWN
  *         @arg @ref LL_TIM_COUNTERMODE_CENTER_UP_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetCounterMode(TIM_TypeDef *TIMx, uint32_t CounterMode)
{
 8010f9c:	b480      	push	{r7}
 8010f9e:	b083      	sub	sp, #12
 8010fa0:	af00      	add	r7, sp, #0
 8010fa2:	6078      	str	r0, [r7, #4]
 8010fa4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR1, (TIM_CR1_DIR | TIM_CR1_CMS), CounterMode);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	681b      	ldr	r3, [r3, #0]
 8010faa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010fae:	683b      	ldr	r3, [r7, #0]
 8010fb0:	431a      	orrs	r2, r3
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	601a      	str	r2, [r3, #0]
}
 8010fb6:	bf00      	nop
 8010fb8:	370c      	adds	r7, #12
 8010fba:	46bd      	mov	sp, r7
 8010fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fc0:	4770      	bx	lr

08010fc2 <LL_TIM_SetPrescaler>:
  * @param  TIMx Timer instance
  * @param  Prescaler between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetPrescaler(TIM_TypeDef *TIMx, uint32_t Prescaler)
{
 8010fc2:	b480      	push	{r7}
 8010fc4:	b083      	sub	sp, #12
 8010fc6:	af00      	add	r7, sp, #0
 8010fc8:	6078      	str	r0, [r7, #4]
 8010fca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	683a      	ldr	r2, [r7, #0]
 8010fd0:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8010fd2:	bf00      	nop
 8010fd4:	370c      	adds	r7, #12
 8010fd6:	46bd      	mov	sp, r7
 8010fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fdc:	4770      	bx	lr

08010fde <LL_TIM_GetPrescaler>:
  * @rmtoll PSC          PSC           LL_TIM_GetPrescaler
  * @param  TIMx Timer instance
  * @retval  Prescaler value between Min_Data=0 and Max_Data=65535
  */
__STATIC_INLINE uint32_t LL_TIM_GetPrescaler(const TIM_TypeDef *TIMx)
{
 8010fde:	b480      	push	{r7}
 8010fe0:	b083      	sub	sp, #12
 8010fe2:	af00      	add	r7, sp, #0
 8010fe4:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_REG(TIMx->PSC));
 8010fe6:	687b      	ldr	r3, [r7, #4]
 8010fe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8010fea:	4618      	mov	r0, r3
 8010fec:	370c      	adds	r7, #12
 8010fee:	46bd      	mov	sp, r7
 8010ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ff4:	4770      	bx	lr

08010ff6 <LL_TIM_SetAutoReload>:
  * @param  TIMx Timer instance
  * @param  AutoReload between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetAutoReload(TIM_TypeDef *TIMx, uint32_t AutoReload)
{
 8010ff6:	b480      	push	{r7}
 8010ff8:	b083      	sub	sp, #12
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8011000:	687b      	ldr	r3, [r7, #4]
 8011002:	683a      	ldr	r2, [r7, #0]
 8011004:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8011006:	bf00      	nop
 8011008:	370c      	adds	r7, #12
 801100a:	46bd      	mov	sp, r7
 801100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011010:	4770      	bx	lr
	...

08011014 <LL_TIM_OC_SetMode>:
  *         @arg @ref LL_TIM_OCMODE_PULSE_ON_COMPARE   (for channel 3 or channel 4 only)
  *         @arg @ref LL_TIM_OCMODE_DIRECTION_OUTPUT   (for channel 3 or channel 4 only)
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetMode(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Mode)
{
 8011014:	b480      	push	{r7}
 8011016:	b087      	sub	sp, #28
 8011018:	af00      	add	r7, sp, #0
 801101a:	60f8      	str	r0, [r7, #12]
 801101c:	60b9      	str	r1, [r7, #8]
 801101e:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8011020:	68bb      	ldr	r3, [r7, #8]
 8011022:	2b01      	cmp	r3, #1
 8011024:	d02e      	beq.n	8011084 <LL_TIM_OC_SetMode+0x70>
 8011026:	68bb      	ldr	r3, [r7, #8]
 8011028:	2b04      	cmp	r3, #4
 801102a:	d029      	beq.n	8011080 <LL_TIM_OC_SetMode+0x6c>
 801102c:	68bb      	ldr	r3, [r7, #8]
 801102e:	2b10      	cmp	r3, #16
 8011030:	d024      	beq.n	801107c <LL_TIM_OC_SetMode+0x68>
 8011032:	68bb      	ldr	r3, [r7, #8]
 8011034:	2b40      	cmp	r3, #64	@ 0x40
 8011036:	d01f      	beq.n	8011078 <LL_TIM_OC_SetMode+0x64>
 8011038:	68bb      	ldr	r3, [r7, #8]
 801103a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801103e:	d019      	beq.n	8011074 <LL_TIM_OC_SetMode+0x60>
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011046:	d013      	beq.n	8011070 <LL_TIM_OC_SetMode+0x5c>
 8011048:	68bb      	ldr	r3, [r7, #8]
 801104a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801104e:	d00d      	beq.n	801106c <LL_TIM_OC_SetMode+0x58>
 8011050:	68bb      	ldr	r3, [r7, #8]
 8011052:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011056:	d007      	beq.n	8011068 <LL_TIM_OC_SetMode+0x54>
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801105e:	d101      	bne.n	8011064 <LL_TIM_OC_SetMode+0x50>
 8011060:	2308      	movs	r3, #8
 8011062:	e010      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011064:	2309      	movs	r3, #9
 8011066:	e00e      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011068:	2307      	movs	r3, #7
 801106a:	e00c      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 801106c:	2306      	movs	r3, #6
 801106e:	e00a      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011070:	2305      	movs	r3, #5
 8011072:	e008      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011074:	2304      	movs	r3, #4
 8011076:	e006      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011078:	2303      	movs	r3, #3
 801107a:	e004      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 801107c:	2302      	movs	r3, #2
 801107e:	e002      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011080:	2301      	movs	r3, #1
 8011082:	e000      	b.n	8011086 <LL_TIM_OC_SetMode+0x72>
 8011084:	2300      	movs	r3, #0
 8011086:	75fb      	strb	r3, [r7, #23]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8011088:	68fb      	ldr	r3, [r7, #12]
 801108a:	3318      	adds	r3, #24
 801108c:	4619      	mov	r1, r3
 801108e:	7dfb      	ldrb	r3, [r7, #23]
 8011090:	4a0e      	ldr	r2, [pc, #56]	@ (80110cc <LL_TIM_OC_SetMode+0xb8>)
 8011092:	5cd3      	ldrb	r3, [r2, r3]
 8011094:	440b      	add	r3, r1
 8011096:	613b      	str	r3, [r7, #16]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8011098:	693b      	ldr	r3, [r7, #16]
 801109a:	681a      	ldr	r2, [r3, #0]
 801109c:	7dfb      	ldrb	r3, [r7, #23]
 801109e:	490c      	ldr	r1, [pc, #48]	@ (80110d0 <LL_TIM_OC_SetMode+0xbc>)
 80110a0:	5ccb      	ldrb	r3, [r1, r3]
 80110a2:	4619      	mov	r1, r3
 80110a4:	4b0b      	ldr	r3, [pc, #44]	@ (80110d4 <LL_TIM_OC_SetMode+0xc0>)
 80110a6:	408b      	lsls	r3, r1
 80110a8:	43db      	mvns	r3, r3
 80110aa:	401a      	ands	r2, r3
 80110ac:	7dfb      	ldrb	r3, [r7, #23]
 80110ae:	4908      	ldr	r1, [pc, #32]	@ (80110d0 <LL_TIM_OC_SetMode+0xbc>)
 80110b0:	5ccb      	ldrb	r3, [r1, r3]
 80110b2:	4619      	mov	r1, r3
 80110b4:	687b      	ldr	r3, [r7, #4]
 80110b6:	408b      	lsls	r3, r1
 80110b8:	431a      	orrs	r2, r3
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	601a      	str	r2, [r3, #0]
}
 80110be:	bf00      	nop
 80110c0:	371c      	adds	r7, #28
 80110c2:	46bd      	mov	sp, r7
 80110c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c8:	4770      	bx	lr
 80110ca:	bf00      	nop
 80110cc:	0801b96c 	.word	0x0801b96c
 80110d0:	0801b978 	.word	0x0801b978
 80110d4:	00010073 	.word	0x00010073

080110d8 <LL_TIM_OC_SetPolarity>:
  *         @arg @ref LL_TIM_OCPOLARITY_HIGH
  *         @arg @ref LL_TIM_OCPOLARITY_LOW
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetPolarity(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t Polarity)
{
 80110d8:	b480      	push	{r7}
 80110da:	b087      	sub	sp, #28
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	607a      	str	r2, [r7, #4]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80110e4:	68bb      	ldr	r3, [r7, #8]
 80110e6:	2b01      	cmp	r3, #1
 80110e8:	d02e      	beq.n	8011148 <LL_TIM_OC_SetPolarity+0x70>
 80110ea:	68bb      	ldr	r3, [r7, #8]
 80110ec:	2b04      	cmp	r3, #4
 80110ee:	d029      	beq.n	8011144 <LL_TIM_OC_SetPolarity+0x6c>
 80110f0:	68bb      	ldr	r3, [r7, #8]
 80110f2:	2b10      	cmp	r3, #16
 80110f4:	d024      	beq.n	8011140 <LL_TIM_OC_SetPolarity+0x68>
 80110f6:	68bb      	ldr	r3, [r7, #8]
 80110f8:	2b40      	cmp	r3, #64	@ 0x40
 80110fa:	d01f      	beq.n	801113c <LL_TIM_OC_SetPolarity+0x64>
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011102:	d019      	beq.n	8011138 <LL_TIM_OC_SetPolarity+0x60>
 8011104:	68bb      	ldr	r3, [r7, #8]
 8011106:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801110a:	d013      	beq.n	8011134 <LL_TIM_OC_SetPolarity+0x5c>
 801110c:	68bb      	ldr	r3, [r7, #8]
 801110e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011112:	d00d      	beq.n	8011130 <LL_TIM_OC_SetPolarity+0x58>
 8011114:	68bb      	ldr	r3, [r7, #8]
 8011116:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801111a:	d007      	beq.n	801112c <LL_TIM_OC_SetPolarity+0x54>
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011122:	d101      	bne.n	8011128 <LL_TIM_OC_SetPolarity+0x50>
 8011124:	2308      	movs	r3, #8
 8011126:	e010      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011128:	2309      	movs	r3, #9
 801112a:	e00e      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 801112c:	2307      	movs	r3, #7
 801112e:	e00c      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011130:	2306      	movs	r3, #6
 8011132:	e00a      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011134:	2305      	movs	r3, #5
 8011136:	e008      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011138:	2304      	movs	r3, #4
 801113a:	e006      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 801113c:	2303      	movs	r3, #3
 801113e:	e004      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011140:	2302      	movs	r3, #2
 8011142:	e002      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011144:	2301      	movs	r3, #1
 8011146:	e000      	b.n	801114a <LL_TIM_OC_SetPolarity+0x72>
 8011148:	2300      	movs	r3, #0
 801114a:	75fb      	strb	r3, [r7, #23]
  MODIFY_REG(TIMx->CCER, (TIM_CCER_CC1P << SHIFT_TAB_CCxP[iChannel]),  Polarity << SHIFT_TAB_CCxP[iChannel]);
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	6a1a      	ldr	r2, [r3, #32]
 8011150:	7dfb      	ldrb	r3, [r7, #23]
 8011152:	490b      	ldr	r1, [pc, #44]	@ (8011180 <LL_TIM_OC_SetPolarity+0xa8>)
 8011154:	5ccb      	ldrb	r3, [r1, r3]
 8011156:	4619      	mov	r1, r3
 8011158:	2302      	movs	r3, #2
 801115a:	408b      	lsls	r3, r1
 801115c:	43db      	mvns	r3, r3
 801115e:	401a      	ands	r2, r3
 8011160:	7dfb      	ldrb	r3, [r7, #23]
 8011162:	4907      	ldr	r1, [pc, #28]	@ (8011180 <LL_TIM_OC_SetPolarity+0xa8>)
 8011164:	5ccb      	ldrb	r3, [r1, r3]
 8011166:	4619      	mov	r1, r3
 8011168:	687b      	ldr	r3, [r7, #4]
 801116a:	408b      	lsls	r3, r1
 801116c:	431a      	orrs	r2, r3
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	621a      	str	r2, [r3, #32]
}
 8011172:	bf00      	nop
 8011174:	371c      	adds	r7, #28
 8011176:	46bd      	mov	sp, r7
 8011178:	f85d 7b04 	ldr.w	r7, [sp], #4
 801117c:	4770      	bx	lr
 801117e:	bf00      	nop
 8011180:	0801b984 	.word	0x0801b984

08011184 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8011184:	b480      	push	{r7}
 8011186:	b083      	sub	sp, #12
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	683a      	ldr	r2, [r7, #0]
 8011192:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8011194:	bf00      	nop
 8011196:	370c      	adds	r7, #12
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr

080111a0 <LL_TIM_OC_SetCompareCH2>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH2(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80111a0:	b480      	push	{r7}
 80111a2:	b083      	sub	sp, #12
 80111a4:	af00      	add	r7, sp, #0
 80111a6:	6078      	str	r0, [r7, #4]
 80111a8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80111aa:	687b      	ldr	r3, [r7, #4]
 80111ac:	683a      	ldr	r2, [r7, #0]
 80111ae:	639a      	str	r2, [r3, #56]	@ 0x38
}
 80111b0:	bf00      	nop
 80111b2:	370c      	adds	r7, #12
 80111b4:	46bd      	mov	sp, r7
 80111b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111ba:	4770      	bx	lr

080111bc <LL_TIM_OC_SetCompareCH3>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH3(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80111bc:	b480      	push	{r7}
 80111be:	b083      	sub	sp, #12
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
 80111c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	683a      	ldr	r2, [r7, #0]
 80111ca:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80111cc:	bf00      	nop
 80111ce:	370c      	adds	r7, #12
 80111d0:	46bd      	mov	sp, r7
 80111d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111d6:	4770      	bx	lr

080111d8 <LL_TIM_OC_SetCompareCH4>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH4(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80111d8:	b480      	push	{r7}
 80111da:	b083      	sub	sp, #12
 80111dc:	af00      	add	r7, sp, #0
 80111de:	6078      	str	r0, [r7, #4]
 80111e0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	683a      	ldr	r2, [r7, #0]
 80111e6:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80111e8:	bf00      	nop
 80111ea:	370c      	adds	r7, #12
 80111ec:	46bd      	mov	sp, r7
 80111ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111f2:	4770      	bx	lr

080111f4 <LL_TIM_ClearFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_ClearFlag_CC1
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC1(TIM_TypeDef *TIMx)
{
 80111f4:	b480      	push	{r7}
 80111f6:	b083      	sub	sp, #12
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	f06f 0202 	mvn.w	r2, #2
 8011202:	611a      	str	r2, [r3, #16]
}
 8011204:	bf00      	nop
 8011206:	370c      	adds	r7, #12
 8011208:	46bd      	mov	sp, r7
 801120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801120e:	4770      	bx	lr

08011210 <LL_TIM_IsActiveFlag_CC1>:
  * @rmtoll SR           CC1IF         LL_TIM_IsActiveFlag_CC1
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC1(const TIM_TypeDef *TIMx)
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8011218:	687b      	ldr	r3, [r7, #4]
 801121a:	691b      	ldr	r3, [r3, #16]
 801121c:	f003 0302 	and.w	r3, r3, #2
 8011220:	2b02      	cmp	r3, #2
 8011222:	d101      	bne.n	8011228 <LL_TIM_IsActiveFlag_CC1+0x18>
 8011224:	2301      	movs	r3, #1
 8011226:	e000      	b.n	801122a <LL_TIM_IsActiveFlag_CC1+0x1a>
 8011228:	2300      	movs	r3, #0
}
 801122a:	4618      	mov	r0, r3
 801122c:	370c      	adds	r7, #12
 801122e:	46bd      	mov	sp, r7
 8011230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011234:	4770      	bx	lr

08011236 <LL_TIM_ClearFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_ClearFlag_CC2
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC2(TIM_TypeDef *TIMx)
{
 8011236:	b480      	push	{r7}
 8011238:	b083      	sub	sp, #12
 801123a:	af00      	add	r7, sp, #0
 801123c:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC2IF));
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	f06f 0204 	mvn.w	r2, #4
 8011244:	611a      	str	r2, [r3, #16]
}
 8011246:	bf00      	nop
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <LL_TIM_IsActiveFlag_CC2>:
  * @rmtoll SR           CC2IF         LL_TIM_IsActiveFlag_CC2
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC2(const TIM_TypeDef *TIMx)
{
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC2IF) == (TIM_SR_CC2IF)) ? 1UL : 0UL);
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	691b      	ldr	r3, [r3, #16]
 801125e:	f003 0304 	and.w	r3, r3, #4
 8011262:	2b04      	cmp	r3, #4
 8011264:	d101      	bne.n	801126a <LL_TIM_IsActiveFlag_CC2+0x18>
 8011266:	2301      	movs	r3, #1
 8011268:	e000      	b.n	801126c <LL_TIM_IsActiveFlag_CC2+0x1a>
 801126a:	2300      	movs	r3, #0
}
 801126c:	4618      	mov	r0, r3
 801126e:	370c      	adds	r7, #12
 8011270:	46bd      	mov	sp, r7
 8011272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011276:	4770      	bx	lr

08011278 <LL_TIM_ClearFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_ClearFlag_CC3
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC3(TIM_TypeDef *TIMx)
{
 8011278:	b480      	push	{r7}
 801127a:	b083      	sub	sp, #12
 801127c:	af00      	add	r7, sp, #0
 801127e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC3IF));
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	f06f 0208 	mvn.w	r2, #8
 8011286:	611a      	str	r2, [r3, #16]
}
 8011288:	bf00      	nop
 801128a:	370c      	adds	r7, #12
 801128c:	46bd      	mov	sp, r7
 801128e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011292:	4770      	bx	lr

08011294 <LL_TIM_IsActiveFlag_CC3>:
  * @rmtoll SR           CC3IF         LL_TIM_IsActiveFlag_CC3
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC3(const TIM_TypeDef *TIMx)
{
 8011294:	b480      	push	{r7}
 8011296:	b083      	sub	sp, #12
 8011298:	af00      	add	r7, sp, #0
 801129a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC3IF) == (TIM_SR_CC3IF)) ? 1UL : 0UL);
 801129c:	687b      	ldr	r3, [r7, #4]
 801129e:	691b      	ldr	r3, [r3, #16]
 80112a0:	f003 0308 	and.w	r3, r3, #8
 80112a4:	2b08      	cmp	r3, #8
 80112a6:	d101      	bne.n	80112ac <LL_TIM_IsActiveFlag_CC3+0x18>
 80112a8:	2301      	movs	r3, #1
 80112aa:	e000      	b.n	80112ae <LL_TIM_IsActiveFlag_CC3+0x1a>
 80112ac:	2300      	movs	r3, #0
}
 80112ae:	4618      	mov	r0, r3
 80112b0:	370c      	adds	r7, #12
 80112b2:	46bd      	mov	sp, r7
 80112b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112b8:	4770      	bx	lr

080112ba <LL_TIM_ClearFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_ClearFlag_CC4
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_CC4(TIM_TypeDef *TIMx)
{
 80112ba:	b480      	push	{r7}
 80112bc:	b083      	sub	sp, #12
 80112be:	af00      	add	r7, sp, #0
 80112c0:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC4IF));
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	f06f 0210 	mvn.w	r2, #16
 80112c8:	611a      	str	r2, [r3, #16]
}
 80112ca:	bf00      	nop
 80112cc:	370c      	adds	r7, #12
 80112ce:	46bd      	mov	sp, r7
 80112d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112d4:	4770      	bx	lr

080112d6 <LL_TIM_IsActiveFlag_CC4>:
  * @rmtoll SR           CC4IF         LL_TIM_IsActiveFlag_CC4
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_CC4(const TIM_TypeDef *TIMx)
{
 80112d6:	b480      	push	{r7}
 80112d8:	b083      	sub	sp, #12
 80112da:	af00      	add	r7, sp, #0
 80112dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_CC4IF) == (TIM_SR_CC4IF)) ? 1UL : 0UL);
 80112de:	687b      	ldr	r3, [r7, #4]
 80112e0:	691b      	ldr	r3, [r3, #16]
 80112e2:	f003 0310 	and.w	r3, r3, #16
 80112e6:	2b10      	cmp	r3, #16
 80112e8:	d101      	bne.n	80112ee <LL_TIM_IsActiveFlag_CC4+0x18>
 80112ea:	2301      	movs	r3, #1
 80112ec:	e000      	b.n	80112f0 <LL_TIM_IsActiveFlag_CC4+0x1a>
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	370c      	adds	r7, #12
 80112f4:	46bd      	mov	sp, r7
 80112f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112fa:	4770      	bx	lr

080112fc <USBPD_TIM_Init>:
/**
  * @brief  Initialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_Init(void)
{
 80112fc:	b598      	push	{r3, r4, r7, lr}
 80112fe:	af00      	add	r7, sp, #0
  if (0 == timer_initcounter)
 8011300:	4b3d      	ldr	r3, [pc, #244]	@ (80113f8 <USBPD_TIM_Init+0xfc>)
 8011302:	f993 3000 	ldrsb.w	r3, [r3]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d16a      	bne.n	80113e0 <USBPD_TIM_Init+0xe4>
  {
    TIMX_CLK_ENABLE;
 801130a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801130e:	f7ff fe09 	bl	8010f24 <LL_APB2_GRP1_EnableClock>
    /***************************/
    /* Time base configuration */
    /***************************/
    /* Counter mode: select up-counting mode */
    LL_TIM_SetCounterMode(TIMX, LL_TIM_COUNTERMODE_UP);
 8011312:	2100      	movs	r1, #0
 8011314:	4839      	ldr	r0, [pc, #228]	@ (80113fc <USBPD_TIM_Init+0x100>)
 8011316:	f7ff fe41 	bl	8010f9c <LL_TIM_SetCounterMode>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(TIMX_CLK_FREQ, LL_TIM_GetPrescaler(TIMX), 100u));
#else
    /* Set the pre-scaler value to have TIMx counter clock equal to 1 MHz */
    LL_TIM_SetPrescaler(TIMX, __LL_TIM_CALC_PSC(SystemCoreClock, 1000000u));
 801131a:	4b39      	ldr	r3, [pc, #228]	@ (8011400 <USBPD_TIM_Init+0x104>)
 801131c:	681b      	ldr	r3, [r3, #0]
 801131e:	4a39      	ldr	r2, [pc, #228]	@ (8011404 <USBPD_TIM_Init+0x108>)
 8011320:	4293      	cmp	r3, r2
 8011322:	d90b      	bls.n	801133c <USBPD_TIM_Init+0x40>
 8011324:	4b36      	ldr	r3, [pc, #216]	@ (8011400 <USBPD_TIM_Init+0x104>)
 8011326:	681b      	ldr	r3, [r3, #0]
 8011328:	f503 23f4 	add.w	r3, r3, #499712	@ 0x7a000
 801132c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011330:	4a35      	ldr	r2, [pc, #212]	@ (8011408 <USBPD_TIM_Init+0x10c>)
 8011332:	fba2 2303 	umull	r2, r3, r2, r3
 8011336:	0c9b      	lsrs	r3, r3, #18
 8011338:	3b01      	subs	r3, #1
 801133a:	e000      	b.n	801133e <USBPD_TIM_Init+0x42>
 801133c:	2300      	movs	r3, #0
 801133e:	4619      	mov	r1, r3
 8011340:	482e      	ldr	r0, [pc, #184]	@ (80113fc <USBPD_TIM_Init+0x100>)
 8011342:	f7ff fe3e 	bl	8010fc2 <LL_TIM_SetPrescaler>

    /* Set the auto-reload value to have a counter frequency of 100Hz */
    LL_TIM_SetAutoReload(TIMX, __LL_TIM_CALC_ARR(SystemCoreClock, LL_TIM_GetPrescaler(TIMX), 100u));
 8011346:	4b2e      	ldr	r3, [pc, #184]	@ (8011400 <USBPD_TIM_Init+0x104>)
 8011348:	681c      	ldr	r4, [r3, #0]
 801134a:	482c      	ldr	r0, [pc, #176]	@ (80113fc <USBPD_TIM_Init+0x100>)
 801134c:	f7ff fe47 	bl	8010fde <LL_TIM_GetPrescaler>
 8011350:	4603      	mov	r3, r0
 8011352:	3301      	adds	r3, #1
 8011354:	fbb4 f3f3 	udiv	r3, r4, r3
 8011358:	2b63      	cmp	r3, #99	@ 0x63
 801135a:	d90d      	bls.n	8011378 <USBPD_TIM_Init+0x7c>
 801135c:	4b28      	ldr	r3, [pc, #160]	@ (8011400 <USBPD_TIM_Init+0x104>)
 801135e:	681c      	ldr	r4, [r3, #0]
 8011360:	4826      	ldr	r0, [pc, #152]	@ (80113fc <USBPD_TIM_Init+0x100>)
 8011362:	f7ff fe3c 	bl	8010fde <LL_TIM_GetPrescaler>
 8011366:	4603      	mov	r3, r0
 8011368:	3301      	adds	r3, #1
 801136a:	2264      	movs	r2, #100	@ 0x64
 801136c:	fb02 f303 	mul.w	r3, r2, r3
 8011370:	fbb4 f3f3 	udiv	r3, r4, r3
 8011374:	3b01      	subs	r3, #1
 8011376:	e000      	b.n	801137a <USBPD_TIM_Init+0x7e>
 8011378:	2300      	movs	r3, #0
 801137a:	4619      	mov	r1, r3
 801137c:	481f      	ldr	r0, [pc, #124]	@ (80113fc <USBPD_TIM_Init+0x100>)
 801137e:	f7ff fe3a 	bl	8010ff6 <LL_TIM_SetAutoReload>

    /*********************************/
    /* Output waveform configuration */
    /*********************************/
    /* Set output compare mode: TOGGLE */
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCMODE_TOGGLE);
 8011382:	2230      	movs	r2, #48	@ 0x30
 8011384:	2101      	movs	r1, #1
 8011386:	481d      	ldr	r0, [pc, #116]	@ (80113fc <USBPD_TIM_Init+0x100>)
 8011388:	f7ff fe44 	bl	8011014 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCMODE_TOGGLE);
 801138c:	2230      	movs	r2, #48	@ 0x30
 801138e:	2110      	movs	r1, #16
 8011390:	481a      	ldr	r0, [pc, #104]	@ (80113fc <USBPD_TIM_Init+0x100>)
 8011392:	f7ff fe3f 	bl	8011014 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCMODE_TOGGLE);
 8011396:	2230      	movs	r2, #48	@ 0x30
 8011398:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801139c:	4817      	ldr	r0, [pc, #92]	@ (80113fc <USBPD_TIM_Init+0x100>)
 801139e:	f7ff fe39 	bl	8011014 <LL_TIM_OC_SetMode>
    LL_TIM_OC_SetMode(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCMODE_TOGGLE);
 80113a2:	2230      	movs	r2, #48	@ 0x30
 80113a4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80113a8:	4814      	ldr	r0, [pc, #80]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113aa:	f7ff fe33 	bl	8011014 <LL_TIM_OC_SetMode>

    /* Set output channel polarity: OC is active high */
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH1, LL_TIM_OCPOLARITY_HIGH);
 80113ae:	2200      	movs	r2, #0
 80113b0:	2101      	movs	r1, #1
 80113b2:	4812      	ldr	r0, [pc, #72]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113b4:	f7ff fe90 	bl	80110d8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH2, LL_TIM_OCPOLARITY_HIGH);
 80113b8:	2200      	movs	r2, #0
 80113ba:	2110      	movs	r1, #16
 80113bc:	480f      	ldr	r0, [pc, #60]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113be:	f7ff fe8b 	bl	80110d8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH3, LL_TIM_OCPOLARITY_HIGH);
 80113c2:	2200      	movs	r2, #0
 80113c4:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80113c8:	480c      	ldr	r0, [pc, #48]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113ca:	f7ff fe85 	bl	80110d8 <LL_TIM_OC_SetPolarity>
    LL_TIM_OC_SetPolarity(TIMX, TIMX_CHANNEL_CH4, LL_TIM_OCPOLARITY_HIGH);
 80113ce:	2200      	movs	r2, #0
 80113d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80113d4:	4809      	ldr	r0, [pc, #36]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113d6:	f7ff fe7f 	bl	80110d8 <LL_TIM_OC_SetPolarity>

    /* Enable counter */
    LL_TIM_EnableCounter(TIMX);
 80113da:	4808      	ldr	r0, [pc, #32]	@ (80113fc <USBPD_TIM_Init+0x100>)
 80113dc:	f7ff fdce 	bl	8010f7c <LL_TIM_EnableCounter>
  }

  /* Enable the timer counter */
  timer_initcounter++;
 80113e0:	4b05      	ldr	r3, [pc, #20]	@ (80113f8 <USBPD_TIM_Init+0xfc>)
 80113e2:	f993 3000 	ldrsb.w	r3, [r3]
 80113e6:	b2db      	uxtb	r3, r3
 80113e8:	3301      	adds	r3, #1
 80113ea:	b2db      	uxtb	r3, r3
 80113ec:	b25a      	sxtb	r2, r3
 80113ee:	4b02      	ldr	r3, [pc, #8]	@ (80113f8 <USBPD_TIM_Init+0xfc>)
 80113f0:	701a      	strb	r2, [r3, #0]
}
 80113f2:	bf00      	nop
 80113f4:	bd98      	pop	{r3, r4, r7, pc}
 80113f6:	bf00      	nop
 80113f8:	20000b44 	.word	0x20000b44
 80113fc:	40012c00 	.word	0x40012c00
 8011400:	20000004 	.word	0x20000004
 8011404:	000f423f 	.word	0x000f423f
 8011408:	431bde83 	.word	0x431bde83

0801140c <USBPD_TIM_DeInit>:
/**
  * @brief  UnInitialize a timer to manage timing in us
  * @retval None
  */
void USBPD_TIM_DeInit(void)
{
 801140c:	b580      	push	{r7, lr}
 801140e:	af00      	add	r7, sp, #0
  timer_initcounter--;
 8011410:	4b09      	ldr	r3, [pc, #36]	@ (8011438 <USBPD_TIM_DeInit+0x2c>)
 8011412:	f993 3000 	ldrsb.w	r3, [r3]
 8011416:	b2db      	uxtb	r3, r3
 8011418:	3b01      	subs	r3, #1
 801141a:	b2db      	uxtb	r3, r3
 801141c:	b25a      	sxtb	r2, r3
 801141e:	4b06      	ldr	r3, [pc, #24]	@ (8011438 <USBPD_TIM_DeInit+0x2c>)
 8011420:	701a      	strb	r2, [r3, #0]
  if (0 == timer_initcounter)
 8011422:	4b05      	ldr	r3, [pc, #20]	@ (8011438 <USBPD_TIM_DeInit+0x2c>)
 8011424:	f993 3000 	ldrsb.w	r3, [r3]
 8011428:	2b00      	cmp	r3, #0
 801142a:	d103      	bne.n	8011434 <USBPD_TIM_DeInit+0x28>
  {
    TIMX_CLK_DISABLE;
 801142c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8011430:	f7ff fd90 	bl	8010f54 <LL_APB2_GRP1_DisableClock>
  }
}
 8011434:	bf00      	nop
 8011436:	bd80      	pop	{r7, pc}
 8011438:	20000b44 	.word	0x20000b44

0801143c <USBPD_TIM_Start>:
  * @param  timer id @TIM_identifier
  * @param  time in us
  * @retval None
  */
void USBPD_TIM_Start(TIM_identifier Id, uint32_t TimeUs)
{
 801143c:	b580      	push	{r7, lr}
 801143e:	b082      	sub	sp, #8
 8011440:	af00      	add	r7, sp, #0
 8011442:	4603      	mov	r3, r0
 8011444:	6039      	str	r1, [r7, #0]
 8011446:	71fb      	strb	r3, [r7, #7]
  /* Positionne l'evenement pour sa detection */
  switch (Id)
 8011448:	79fb      	ldrb	r3, [r7, #7]
 801144a:	2b03      	cmp	r3, #3
 801144c:	d85e      	bhi.n	801150c <USBPD_TIM_Start+0xd0>
 801144e:	a201      	add	r2, pc, #4	@ (adr r2, 8011454 <USBPD_TIM_Start+0x18>)
 8011450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011454:	08011465 	.word	0x08011465
 8011458:	0801148f 	.word	0x0801148f
 801145c:	080114b9 	.word	0x080114b9
 8011460:	080114e3 	.word	0x080114e3
  {
    case TIM_PORT0_CRC:
      TIMX_CHANNEL1_SETEVENT;
 8011464:	4b2c      	ldr	r3, [pc, #176]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011468:	683b      	ldr	r3, [r7, #0]
 801146a:	441a      	add	r2, r3
 801146c:	4b2b      	ldr	r3, [pc, #172]	@ (801151c <USBPD_TIM_Start+0xe0>)
 801146e:	fba3 1302 	umull	r1, r3, r3, r2
 8011472:	0b5b      	lsrs	r3, r3, #13
 8011474:	f242 7110 	movw	r1, #10000	@ 0x2710
 8011478:	fb01 f303 	mul.w	r3, r1, r3
 801147c:	1ad3      	subs	r3, r2, r3
 801147e:	4619      	mov	r1, r3
 8011480:	4825      	ldr	r0, [pc, #148]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011482:	f7ff fe7f 	bl	8011184 <LL_TIM_OC_SetCompareCH1>
 8011486:	4824      	ldr	r0, [pc, #144]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011488:	f7ff feb4 	bl	80111f4 <LL_TIM_ClearFlag_CC1>
      break;
 801148c:	e03f      	b.n	801150e <USBPD_TIM_Start+0xd2>
    case TIM_PORT0_RETRY:
      TIMX_CHANNEL2_SETEVENT;
 801148e:	4b22      	ldr	r3, [pc, #136]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011490:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011492:	683b      	ldr	r3, [r7, #0]
 8011494:	441a      	add	r2, r3
 8011496:	4b21      	ldr	r3, [pc, #132]	@ (801151c <USBPD_TIM_Start+0xe0>)
 8011498:	fba3 1302 	umull	r1, r3, r3, r2
 801149c:	0b5b      	lsrs	r3, r3, #13
 801149e:	f242 7110 	movw	r1, #10000	@ 0x2710
 80114a2:	fb01 f303 	mul.w	r3, r1, r3
 80114a6:	1ad3      	subs	r3, r2, r3
 80114a8:	4619      	mov	r1, r3
 80114aa:	481b      	ldr	r0, [pc, #108]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114ac:	f7ff fe78 	bl	80111a0 <LL_TIM_OC_SetCompareCH2>
 80114b0:	4819      	ldr	r0, [pc, #100]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114b2:	f7ff fec0 	bl	8011236 <LL_TIM_ClearFlag_CC2>
      break;
 80114b6:	e02a      	b.n	801150e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_CRC:
      TIMX_CHANNEL3_SETEVENT;
 80114b8:	4b17      	ldr	r3, [pc, #92]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	441a      	add	r2, r3
 80114c0:	4b16      	ldr	r3, [pc, #88]	@ (801151c <USBPD_TIM_Start+0xe0>)
 80114c2:	fba3 1302 	umull	r1, r3, r3, r2
 80114c6:	0b5b      	lsrs	r3, r3, #13
 80114c8:	f242 7110 	movw	r1, #10000	@ 0x2710
 80114cc:	fb01 f303 	mul.w	r3, r1, r3
 80114d0:	1ad3      	subs	r3, r2, r3
 80114d2:	4619      	mov	r1, r3
 80114d4:	4810      	ldr	r0, [pc, #64]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114d6:	f7ff fe71 	bl	80111bc <LL_TIM_OC_SetCompareCH3>
 80114da:	480f      	ldr	r0, [pc, #60]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114dc:	f7ff fecc 	bl	8011278 <LL_TIM_ClearFlag_CC3>
      break;
 80114e0:	e015      	b.n	801150e <USBPD_TIM_Start+0xd2>
    case TIM_PORT1_RETRY:
      TIMX_CHANNEL4_SETEVENT;
 80114e2:	4b0d      	ldr	r3, [pc, #52]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 80114e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80114e6:	683b      	ldr	r3, [r7, #0]
 80114e8:	441a      	add	r2, r3
 80114ea:	4b0c      	ldr	r3, [pc, #48]	@ (801151c <USBPD_TIM_Start+0xe0>)
 80114ec:	fba3 1302 	umull	r1, r3, r3, r2
 80114f0:	0b5b      	lsrs	r3, r3, #13
 80114f2:	f242 7110 	movw	r1, #10000	@ 0x2710
 80114f6:	fb01 f303 	mul.w	r3, r1, r3
 80114fa:	1ad3      	subs	r3, r2, r3
 80114fc:	4619      	mov	r1, r3
 80114fe:	4806      	ldr	r0, [pc, #24]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011500:	f7ff fe6a 	bl	80111d8 <LL_TIM_OC_SetCompareCH4>
 8011504:	4804      	ldr	r0, [pc, #16]	@ (8011518 <USBPD_TIM_Start+0xdc>)
 8011506:	f7ff fed8 	bl	80112ba <LL_TIM_ClearFlag_CC4>
      break;
 801150a:	e000      	b.n	801150e <USBPD_TIM_Start+0xd2>
    default:
      break;
 801150c:	bf00      	nop
  }
}
 801150e:	bf00      	nop
 8011510:	3708      	adds	r7, #8
 8011512:	46bd      	mov	sp, r7
 8011514:	bd80      	pop	{r7, pc}
 8011516:	bf00      	nop
 8011518:	40012c00 	.word	0x40012c00
 801151c:	d1b71759 	.word	0xd1b71759

08011520 <USBPD_TIM_IsExpired>:
  * @brief  check timer expiration
  * @param  timer id @TIM_identifier
  * @retval None
  */
uint32_t USBPD_TIM_IsExpired(TIM_identifier Id)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	4603      	mov	r3, r0
 8011528:	71fb      	strb	r3, [r7, #7]
  uint32_t _expired = 1u;
 801152a:	2301      	movs	r3, #1
 801152c:	60fb      	str	r3, [r7, #12]
  switch (Id)
 801152e:	79fb      	ldrb	r3, [r7, #7]
 8011530:	2b03      	cmp	r3, #3
 8011532:	d81f      	bhi.n	8011574 <USBPD_TIM_IsExpired+0x54>
 8011534:	a201      	add	r2, pc, #4	@ (adr r2, 801153c <USBPD_TIM_IsExpired+0x1c>)
 8011536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801153a:	bf00      	nop
 801153c:	0801154d 	.word	0x0801154d
 8011540:	08011557 	.word	0x08011557
 8011544:	08011561 	.word	0x08011561
 8011548:	0801156b 	.word	0x0801156b
  {
    case TIM_PORT0_CRC:
      _expired = TIMX_CHANNEL1_GETFLAG(TIMX);
 801154c:	480c      	ldr	r0, [pc, #48]	@ (8011580 <USBPD_TIM_IsExpired+0x60>)
 801154e:	f7ff fe5f 	bl	8011210 <LL_TIM_IsActiveFlag_CC1>
 8011552:	60f8      	str	r0, [r7, #12]
      break;
 8011554:	e00f      	b.n	8011576 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT0_RETRY:
      _expired = TIMX_CHANNEL2_GETFLAG(TIMX);
 8011556:	480a      	ldr	r0, [pc, #40]	@ (8011580 <USBPD_TIM_IsExpired+0x60>)
 8011558:	f7ff fe7b 	bl	8011252 <LL_TIM_IsActiveFlag_CC2>
 801155c:	60f8      	str	r0, [r7, #12]
      break;
 801155e:	e00a      	b.n	8011576 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_CRC:
      _expired = TIMX_CHANNEL3_GETFLAG(TIMX);
 8011560:	4807      	ldr	r0, [pc, #28]	@ (8011580 <USBPD_TIM_IsExpired+0x60>)
 8011562:	f7ff fe97 	bl	8011294 <LL_TIM_IsActiveFlag_CC3>
 8011566:	60f8      	str	r0, [r7, #12]
      break;
 8011568:	e005      	b.n	8011576 <USBPD_TIM_IsExpired+0x56>
    case TIM_PORT1_RETRY:
      _expired = TIMX_CHANNEL4_GETFLAG(TIMX);
 801156a:	4805      	ldr	r0, [pc, #20]	@ (8011580 <USBPD_TIM_IsExpired+0x60>)
 801156c:	f7ff feb3 	bl	80112d6 <LL_TIM_IsActiveFlag_CC4>
 8011570:	60f8      	str	r0, [r7, #12]
      break;
 8011572:	e000      	b.n	8011576 <USBPD_TIM_IsExpired+0x56>
    default:
      break;
 8011574:	bf00      	nop
  }
  return _expired;
 8011576:	68fb      	ldr	r3, [r7, #12]
}
 8011578:	4618      	mov	r0, r3
 801157a:	3710      	adds	r7, #16
 801157c:	46bd      	mov	sp, r7
 801157e:	bd80      	pop	{r7, pc}
 8011580:	40012c00 	.word	0x40012c00

08011584 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011584:	b480      	push	{r7}
 8011586:	b085      	sub	sp, #20
 8011588:	af00      	add	r7, sp, #0
 801158a:	4603      	mov	r3, r0
 801158c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801158e:	2300      	movs	r3, #0
 8011590:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011596:	2b84      	cmp	r3, #132	@ 0x84
 8011598:	d005      	beq.n	80115a6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801159a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801159e:	68fb      	ldr	r3, [r7, #12]
 80115a0:	4413      	add	r3, r2
 80115a2:	3303      	adds	r3, #3
 80115a4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80115a6:	68fb      	ldr	r3, [r7, #12]
}
 80115a8:	4618      	mov	r0, r3
 80115aa:	3714      	adds	r7, #20
 80115ac:	46bd      	mov	sp, r7
 80115ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115b2:	4770      	bx	lr

080115b4 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b083      	sub	sp, #12
 80115b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80115ba:	f3ef 8305 	mrs	r3, IPSR
 80115be:	607b      	str	r3, [r7, #4]
  return(result);
 80115c0:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	bf14      	ite	ne
 80115c6:	2301      	movne	r3, #1
 80115c8:	2300      	moveq	r3, #0
 80115ca:	b2db      	uxtb	r3, r3
}
 80115cc:	4618      	mov	r0, r3
 80115ce:	370c      	adds	r7, #12
 80115d0:	46bd      	mov	sp, r7
 80115d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115d6:	4770      	bx	lr

080115d8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80115d8:	b580      	push	{r7, lr}
 80115da:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80115dc:	f001 f8fa 	bl	80127d4 <vTaskStartScheduler>
  
  return osOK;
 80115e0:	2300      	movs	r3, #0
}
 80115e2:	4618      	mov	r0, r3
 80115e4:	bd80      	pop	{r7, pc}

080115e6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80115e6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115e8:	b087      	sub	sp, #28
 80115ea:	af02      	add	r7, sp, #8
 80115ec:	6078      	str	r0, [r7, #4]
 80115ee:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115f0:	687b      	ldr	r3, [r7, #4]
 80115f2:	685c      	ldr	r4, [r3, #4]
 80115f4:	687b      	ldr	r3, [r7, #4]
 80115f6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80115fc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011604:	4618      	mov	r0, r3
 8011606:	f7ff ffbd 	bl	8011584 <makeFreeRtosPriority>
 801160a:	4602      	mov	r2, r0
 801160c:	f107 030c 	add.w	r3, r7, #12
 8011610:	9301      	str	r3, [sp, #4]
 8011612:	9200      	str	r2, [sp, #0]
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	4632      	mov	r2, r6
 8011618:	4629      	mov	r1, r5
 801161a:	4620      	mov	r0, r4
 801161c:	f000 fe78 	bl	8012310 <xTaskCreate>
 8011620:	4603      	mov	r3, r0
 8011622:	2b01      	cmp	r3, #1
 8011624:	d001      	beq.n	801162a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8011626:	2300      	movs	r3, #0
 8011628:	e000      	b.n	801162c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801162a:	68fb      	ldr	r3, [r7, #12]
}
 801162c:	4618      	mov	r0, r3
 801162e:	3714      	adds	r7, #20
 8011630:	46bd      	mov	sp, r7
 8011632:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011634 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 801163c:	6878      	ldr	r0, [r7, #4]
 801163e:	f000 ff9b 	bl	8012578 <vTaskDelete>
  return osOK;
 8011642:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8011644:	4618      	mov	r0, r3
 8011646:	3708      	adds	r7, #8
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}

0801164c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b084      	sub	sp, #16
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011654:	687b      	ldr	r3, [r7, #4]
 8011656:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d001      	beq.n	8011662 <osDelay+0x16>
 801165e:	68fb      	ldr	r3, [r7, #12]
 8011660:	e000      	b.n	8011664 <osDelay+0x18>
 8011662:	2301      	movs	r3, #1
 8011664:	4618      	mov	r0, r3
 8011666:	f001 f817 	bl	8012698 <vTaskDelay>
  
  return osOK;
 801166a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801166c:	4618      	mov	r0, r3
 801166e:	3710      	adds	r7, #16
 8011670:	46bd      	mov	sp, r7
 8011672:	bd80      	pop	{r7, pc}

08011674 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8011674:	b580      	push	{r7, lr}
 8011676:	b082      	sub	sp, #8
 8011678:	af00      	add	r7, sp, #0
 801167a:	6078      	str	r0, [r7, #4]
 801167c:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 801167e:	687b      	ldr	r3, [r7, #4]
 8011680:	6818      	ldr	r0, [r3, #0]
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	685b      	ldr	r3, [r3, #4]
 8011686:	2200      	movs	r2, #0
 8011688:	4619      	mov	r1, r3
 801168a:	f000 f9d7 	bl	8011a3c <xQueueGenericCreate>
 801168e:	4603      	mov	r3, r0
#endif
}
 8011690:	4618      	mov	r0, r3
 8011692:	3708      	adds	r7, #8
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b086      	sub	sp, #24
 801169c:	af00      	add	r7, sp, #0
 801169e:	60f8      	str	r0, [r7, #12]
 80116a0:	60b9      	str	r1, [r7, #8]
 80116a2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80116a4:	2300      	movs	r3, #0
 80116a6:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80116a8:	687b      	ldr	r3, [r7, #4]
 80116aa:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80116ac:	697b      	ldr	r3, [r7, #20]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d101      	bne.n	80116b6 <osMessagePut+0x1e>
    ticks = 1;
 80116b2:	2301      	movs	r3, #1
 80116b4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80116b6:	f7ff ff7d 	bl	80115b4 <inHandlerMode>
 80116ba:	4603      	mov	r3, r0
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d018      	beq.n	80116f2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80116c0:	f107 0210 	add.w	r2, r7, #16
 80116c4:	f107 0108 	add.w	r1, r7, #8
 80116c8:	2300      	movs	r3, #0
 80116ca:	68f8      	ldr	r0, [r7, #12]
 80116cc:	f000 fb0e 	bl	8011cec <xQueueGenericSendFromISR>
 80116d0:	4603      	mov	r3, r0
 80116d2:	2b01      	cmp	r3, #1
 80116d4:	d001      	beq.n	80116da <osMessagePut+0x42>
      return osErrorOS;
 80116d6:	23ff      	movs	r3, #255	@ 0xff
 80116d8:	e018      	b.n	801170c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	2b00      	cmp	r3, #0
 80116de:	d014      	beq.n	801170a <osMessagePut+0x72>
 80116e0:	4b0c      	ldr	r3, [pc, #48]	@ (8011714 <osMessagePut+0x7c>)
 80116e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80116e6:	601a      	str	r2, [r3, #0]
 80116e8:	f3bf 8f4f 	dsb	sy
 80116ec:	f3bf 8f6f 	isb	sy
 80116f0:	e00b      	b.n	801170a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 80116f2:	f107 0108 	add.w	r1, r7, #8
 80116f6:	2300      	movs	r3, #0
 80116f8:	697a      	ldr	r2, [r7, #20]
 80116fa:	68f8      	ldr	r0, [r7, #12]
 80116fc:	f000 f9f4 	bl	8011ae8 <xQueueGenericSend>
 8011700:	4603      	mov	r3, r0
 8011702:	2b01      	cmp	r3, #1
 8011704:	d001      	beq.n	801170a <osMessagePut+0x72>
      return osErrorOS;
 8011706:	23ff      	movs	r3, #255	@ 0xff
 8011708:	e000      	b.n	801170c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 801170a:	2300      	movs	r3, #0
}
 801170c:	4618      	mov	r0, r3
 801170e:	3718      	adds	r7, #24
 8011710:	46bd      	mov	sp, r7
 8011712:	bd80      	pop	{r7, pc}
 8011714:	e000ed04 	.word	0xe000ed04

08011718 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8011718:	b590      	push	{r4, r7, lr}
 801171a:	b08b      	sub	sp, #44	@ 0x2c
 801171c:	af00      	add	r7, sp, #0
 801171e:	60f8      	str	r0, [r7, #12]
 8011720:	60b9      	str	r1, [r7, #8]
 8011722:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8011724:	68bb      	ldr	r3, [r7, #8]
 8011726:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8011728:	2300      	movs	r3, #0
 801172a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 801172c:	68bb      	ldr	r3, [r7, #8]
 801172e:	2b00      	cmp	r3, #0
 8011730:	d10a      	bne.n	8011748 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8011732:	2380      	movs	r3, #128	@ 0x80
 8011734:	617b      	str	r3, [r7, #20]
    return event;
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	461c      	mov	r4, r3
 801173a:	f107 0314 	add.w	r3, r7, #20
 801173e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8011742:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8011746:	e054      	b.n	80117f2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8011748:	2300      	movs	r3, #0
 801174a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 801174c:	2300      	movs	r3, #0
 801174e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (millisec == osWaitForever) {
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011756:	d103      	bne.n	8011760 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8011758:	f04f 33ff 	mov.w	r3, #4294967295
 801175c:	627b      	str	r3, [r7, #36]	@ 0x24
 801175e:	e009      	b.n	8011774 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8011760:	687b      	ldr	r3, [r7, #4]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d006      	beq.n	8011774 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8011766:	687b      	ldr	r3, [r7, #4]
 8011768:	627b      	str	r3, [r7, #36]	@ 0x24
    if (ticks == 0) {
 801176a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801176c:	2b00      	cmp	r3, #0
 801176e:	d101      	bne.n	8011774 <osMessageGet+0x5c>
      ticks = 1;
 8011770:	2301      	movs	r3, #1
 8011772:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  
  if (inHandlerMode()) {
 8011774:	f7ff ff1e 	bl	80115b4 <inHandlerMode>
 8011778:	4603      	mov	r3, r0
 801177a:	2b00      	cmp	r3, #0
 801177c:	d01c      	beq.n	80117b8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801177e:	f107 0220 	add.w	r2, r7, #32
 8011782:	f107 0314 	add.w	r3, r7, #20
 8011786:	3304      	adds	r3, #4
 8011788:	4619      	mov	r1, r3
 801178a:	68b8      	ldr	r0, [r7, #8]
 801178c:	f000 fc2e 	bl	8011fec <xQueueReceiveFromISR>
 8011790:	4603      	mov	r3, r0
 8011792:	2b01      	cmp	r3, #1
 8011794:	d102      	bne.n	801179c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8011796:	2310      	movs	r3, #16
 8011798:	617b      	str	r3, [r7, #20]
 801179a:	e001      	b.n	80117a0 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 801179c:	2300      	movs	r3, #0
 801179e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80117a0:	6a3b      	ldr	r3, [r7, #32]
 80117a2:	2b00      	cmp	r3, #0
 80117a4:	d01d      	beq.n	80117e2 <osMessageGet+0xca>
 80117a6:	4b15      	ldr	r3, [pc, #84]	@ (80117fc <osMessageGet+0xe4>)
 80117a8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80117ac:	601a      	str	r2, [r3, #0]
 80117ae:	f3bf 8f4f 	dsb	sy
 80117b2:	f3bf 8f6f 	isb	sy
 80117b6:	e014      	b.n	80117e2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80117b8:	f107 0314 	add.w	r3, r7, #20
 80117bc:	3304      	adds	r3, #4
 80117be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117c0:	4619      	mov	r1, r3
 80117c2:	68b8      	ldr	r0, [r7, #8]
 80117c4:	f000 fb30 	bl	8011e28 <xQueueReceive>
 80117c8:	4603      	mov	r3, r0
 80117ca:	2b01      	cmp	r3, #1
 80117cc:	d102      	bne.n	80117d4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80117ce:	2310      	movs	r3, #16
 80117d0:	617b      	str	r3, [r7, #20]
 80117d2:	e006      	b.n	80117e2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80117d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d101      	bne.n	80117de <osMessageGet+0xc6>
 80117da:	2300      	movs	r3, #0
 80117dc:	e000      	b.n	80117e0 <osMessageGet+0xc8>
 80117de:	2340      	movs	r3, #64	@ 0x40
 80117e0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	461c      	mov	r4, r3
 80117e6:	f107 0314 	add.w	r3, r7, #20
 80117ea:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80117ee:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80117f2:	68f8      	ldr	r0, [r7, #12]
 80117f4:	372c      	adds	r7, #44	@ 0x2c
 80117f6:	46bd      	mov	sp, r7
 80117f8:	bd90      	pop	{r4, r7, pc}
 80117fa:	bf00      	nop
 80117fc:	e000ed04 	.word	0xe000ed04

08011800 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8011800:	b480      	push	{r7}
 8011802:	b083      	sub	sp, #12
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	f103 0208 	add.w	r2, r3, #8
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8011812:	687b      	ldr	r3, [r7, #4]
 8011814:	f04f 32ff 	mov.w	r2, #4294967295
 8011818:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f103 0208 	add.w	r2, r3, #8
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8011824:	687b      	ldr	r3, [r7, #4]
 8011826:	f103 0208 	add.w	r2, r3, #8
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2200      	movs	r2, #0
 8011832:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8011834:	bf00      	nop
 8011836:	370c      	adds	r7, #12
 8011838:	46bd      	mov	sp, r7
 801183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801183e:	4770      	bx	lr

08011840 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8011840:	b480      	push	{r7}
 8011842:	b083      	sub	sp, #12
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	2200      	movs	r2, #0
 801184c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801184e:	bf00      	nop
 8011850:	370c      	adds	r7, #12
 8011852:	46bd      	mov	sp, r7
 8011854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011858:	4770      	bx	lr

0801185a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801185a:	b480      	push	{r7}
 801185c:	b085      	sub	sp, #20
 801185e:	af00      	add	r7, sp, #0
 8011860:	6078      	str	r0, [r7, #4]
 8011862:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	685b      	ldr	r3, [r3, #4]
 8011868:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801186a:	683b      	ldr	r3, [r7, #0]
 801186c:	68fa      	ldr	r2, [r7, #12]
 801186e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8011870:	68fb      	ldr	r3, [r7, #12]
 8011872:	689a      	ldr	r2, [r3, #8]
 8011874:	683b      	ldr	r3, [r7, #0]
 8011876:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8011878:	68fb      	ldr	r3, [r7, #12]
 801187a:	689b      	ldr	r3, [r3, #8]
 801187c:	683a      	ldr	r2, [r7, #0]
 801187e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8011880:	68fb      	ldr	r3, [r7, #12]
 8011882:	683a      	ldr	r2, [r7, #0]
 8011884:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	687a      	ldr	r2, [r7, #4]
 801188a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801188c:	687b      	ldr	r3, [r7, #4]
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	1c5a      	adds	r2, r3, #1
 8011892:	687b      	ldr	r3, [r7, #4]
 8011894:	601a      	str	r2, [r3, #0]
}
 8011896:	bf00      	nop
 8011898:	3714      	adds	r7, #20
 801189a:	46bd      	mov	sp, r7
 801189c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118a0:	4770      	bx	lr

080118a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80118a2:	b480      	push	{r7}
 80118a4:	b085      	sub	sp, #20
 80118a6:	af00      	add	r7, sp, #0
 80118a8:	6078      	str	r0, [r7, #4]
 80118aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80118ac:	683b      	ldr	r3, [r7, #0]
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80118b2:	68bb      	ldr	r3, [r7, #8]
 80118b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118b8:	d103      	bne.n	80118c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80118ba:	687b      	ldr	r3, [r7, #4]
 80118bc:	691b      	ldr	r3, [r3, #16]
 80118be:	60fb      	str	r3, [r7, #12]
 80118c0:	e00c      	b.n	80118dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80118c2:	687b      	ldr	r3, [r7, #4]
 80118c4:	3308      	adds	r3, #8
 80118c6:	60fb      	str	r3, [r7, #12]
 80118c8:	e002      	b.n	80118d0 <vListInsert+0x2e>
 80118ca:	68fb      	ldr	r3, [r7, #12]
 80118cc:	685b      	ldr	r3, [r3, #4]
 80118ce:	60fb      	str	r3, [r7, #12]
 80118d0:	68fb      	ldr	r3, [r7, #12]
 80118d2:	685b      	ldr	r3, [r3, #4]
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	68ba      	ldr	r2, [r7, #8]
 80118d8:	429a      	cmp	r2, r3
 80118da:	d2f6      	bcs.n	80118ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80118dc:	68fb      	ldr	r3, [r7, #12]
 80118de:	685a      	ldr	r2, [r3, #4]
 80118e0:	683b      	ldr	r3, [r7, #0]
 80118e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80118e4:	683b      	ldr	r3, [r7, #0]
 80118e6:	685b      	ldr	r3, [r3, #4]
 80118e8:	683a      	ldr	r2, [r7, #0]
 80118ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80118ec:	683b      	ldr	r3, [r7, #0]
 80118ee:	68fa      	ldr	r2, [r7, #12]
 80118f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80118f2:	68fb      	ldr	r3, [r7, #12]
 80118f4:	683a      	ldr	r2, [r7, #0]
 80118f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	687a      	ldr	r2, [r7, #4]
 80118fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	681b      	ldr	r3, [r3, #0]
 8011902:	1c5a      	adds	r2, r3, #1
 8011904:	687b      	ldr	r3, [r7, #4]
 8011906:	601a      	str	r2, [r3, #0]
}
 8011908:	bf00      	nop
 801190a:	3714      	adds	r7, #20
 801190c:	46bd      	mov	sp, r7
 801190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011912:	4770      	bx	lr

08011914 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8011914:	b480      	push	{r7}
 8011916:	b085      	sub	sp, #20
 8011918:	af00      	add	r7, sp, #0
 801191a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	691b      	ldr	r3, [r3, #16]
 8011920:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8011922:	687b      	ldr	r3, [r7, #4]
 8011924:	685b      	ldr	r3, [r3, #4]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	6892      	ldr	r2, [r2, #8]
 801192a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	689b      	ldr	r3, [r3, #8]
 8011930:	687a      	ldr	r2, [r7, #4]
 8011932:	6852      	ldr	r2, [r2, #4]
 8011934:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	685b      	ldr	r3, [r3, #4]
 801193a:	687a      	ldr	r2, [r7, #4]
 801193c:	429a      	cmp	r2, r3
 801193e:	d103      	bne.n	8011948 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8011940:	687b      	ldr	r3, [r7, #4]
 8011942:	689a      	ldr	r2, [r3, #8]
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	2200      	movs	r2, #0
 801194c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	1e5a      	subs	r2, r3, #1
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
}
 801195c:	4618      	mov	r0, r3
 801195e:	3714      	adds	r7, #20
 8011960:	46bd      	mov	sp, r7
 8011962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011966:	4770      	bx	lr

08011968 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8011968:	b580      	push	{r7, lr}
 801196a:	b084      	sub	sp, #16
 801196c:	af00      	add	r7, sp, #0
 801196e:	6078      	str	r0, [r7, #4]
 8011970:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8011972:	687b      	ldr	r3, [r7, #4]
 8011974:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	2b00      	cmp	r3, #0
 801197a:	d10b      	bne.n	8011994 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801197c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011980:	f383 8811 	msr	BASEPRI, r3
 8011984:	f3bf 8f6f 	isb	sy
 8011988:	f3bf 8f4f 	dsb	sy
 801198c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801198e:	bf00      	nop
 8011990:	bf00      	nop
 8011992:	e7fd      	b.n	8011990 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8011994:	f001 fd28 	bl	80133e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	681a      	ldr	r2, [r3, #0]
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119a0:	68f9      	ldr	r1, [r7, #12]
 80119a2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80119a4:	fb01 f303 	mul.w	r3, r1, r3
 80119a8:	441a      	add	r2, r3
 80119aa:	68fb      	ldr	r3, [r7, #12]
 80119ac:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	2200      	movs	r2, #0
 80119b2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	681a      	ldr	r2, [r3, #0]
 80119b8:	68fb      	ldr	r3, [r7, #12]
 80119ba:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80119bc:	68fb      	ldr	r3, [r7, #12]
 80119be:	681a      	ldr	r2, [r3, #0]
 80119c0:	68fb      	ldr	r3, [r7, #12]
 80119c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80119c4:	3b01      	subs	r3, #1
 80119c6:	68f9      	ldr	r1, [r7, #12]
 80119c8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80119ca:	fb01 f303 	mul.w	r3, r1, r3
 80119ce:	441a      	add	r2, r3
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80119d4:	68fb      	ldr	r3, [r7, #12]
 80119d6:	22ff      	movs	r2, #255	@ 0xff
 80119d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80119dc:	68fb      	ldr	r3, [r7, #12]
 80119de:	22ff      	movs	r2, #255	@ 0xff
 80119e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	2b00      	cmp	r3, #0
 80119e8:	d114      	bne.n	8011a14 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80119ea:	68fb      	ldr	r3, [r7, #12]
 80119ec:	691b      	ldr	r3, [r3, #16]
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d01a      	beq.n	8011a28 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80119f2:	68fb      	ldr	r3, [r7, #12]
 80119f4:	3310      	adds	r3, #16
 80119f6:	4618      	mov	r0, r3
 80119f8:	f001 f91c 	bl	8012c34 <xTaskRemoveFromEventList>
 80119fc:	4603      	mov	r3, r0
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d012      	beq.n	8011a28 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8011a02:	4b0d      	ldr	r3, [pc, #52]	@ (8011a38 <xQueueGenericReset+0xd0>)
 8011a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011a08:	601a      	str	r2, [r3, #0]
 8011a0a:	f3bf 8f4f 	dsb	sy
 8011a0e:	f3bf 8f6f 	isb	sy
 8011a12:	e009      	b.n	8011a28 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8011a14:	68fb      	ldr	r3, [r7, #12]
 8011a16:	3310      	adds	r3, #16
 8011a18:	4618      	mov	r0, r3
 8011a1a:	f7ff fef1 	bl	8011800 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8011a1e:	68fb      	ldr	r3, [r7, #12]
 8011a20:	3324      	adds	r3, #36	@ 0x24
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7ff feec 	bl	8011800 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8011a28:	f001 fd10 	bl	801344c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8011a2c:	2301      	movs	r3, #1
}
 8011a2e:	4618      	mov	r0, r3
 8011a30:	3710      	adds	r7, #16
 8011a32:	46bd      	mov	sp, r7
 8011a34:	bd80      	pop	{r7, pc}
 8011a36:	bf00      	nop
 8011a38:	e000ed04 	.word	0xe000ed04

08011a3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8011a3c:	b580      	push	{r7, lr}
 8011a3e:	b08a      	sub	sp, #40	@ 0x28
 8011a40:	af02      	add	r7, sp, #8
 8011a42:	60f8      	str	r0, [r7, #12]
 8011a44:	60b9      	str	r1, [r7, #8]
 8011a46:	4613      	mov	r3, r2
 8011a48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d10b      	bne.n	8011a68 <xQueueGenericCreate+0x2c>
	__asm volatile
 8011a50:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011a54:	f383 8811 	msr	BASEPRI, r3
 8011a58:	f3bf 8f6f 	isb	sy
 8011a5c:	f3bf 8f4f 	dsb	sy
 8011a60:	613b      	str	r3, [r7, #16]
}
 8011a62:	bf00      	nop
 8011a64:	bf00      	nop
 8011a66:	e7fd      	b.n	8011a64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011a68:	68fb      	ldr	r3, [r7, #12]
 8011a6a:	68ba      	ldr	r2, [r7, #8]
 8011a6c:	fb02 f303 	mul.w	r3, r2, r3
 8011a70:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8011a72:	69fb      	ldr	r3, [r7, #28]
 8011a74:	3348      	adds	r3, #72	@ 0x48
 8011a76:	4618      	mov	r0, r3
 8011a78:	f001 fdd8 	bl	801362c <pvPortMalloc>
 8011a7c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d00d      	beq.n	8011aa0 <xQueueGenericCreate+0x64>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8011a84:	69bb      	ldr	r3, [r7, #24]
 8011a86:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8011a88:	697b      	ldr	r3, [r7, #20]
 8011a8a:	3348      	adds	r3, #72	@ 0x48
 8011a8c:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8011a8e:	79fa      	ldrb	r2, [r7, #7]
 8011a90:	69bb      	ldr	r3, [r7, #24]
 8011a92:	9300      	str	r3, [sp, #0]
 8011a94:	4613      	mov	r3, r2
 8011a96:	697a      	ldr	r2, [r7, #20]
 8011a98:	68b9      	ldr	r1, [r7, #8]
 8011a9a:	68f8      	ldr	r0, [r7, #12]
 8011a9c:	f000 f805 	bl	8011aaa <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8011aa0:	69bb      	ldr	r3, [r7, #24]
	}
 8011aa2:	4618      	mov	r0, r3
 8011aa4:	3720      	adds	r7, #32
 8011aa6:	46bd      	mov	sp, r7
 8011aa8:	bd80      	pop	{r7, pc}

08011aaa <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8011aaa:	b580      	push	{r7, lr}
 8011aac:	b084      	sub	sp, #16
 8011aae:	af00      	add	r7, sp, #0
 8011ab0:	60f8      	str	r0, [r7, #12]
 8011ab2:	60b9      	str	r1, [r7, #8]
 8011ab4:	607a      	str	r2, [r7, #4]
 8011ab6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	2b00      	cmp	r3, #0
 8011abc:	d103      	bne.n	8011ac6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8011abe:	69bb      	ldr	r3, [r7, #24]
 8011ac0:	69ba      	ldr	r2, [r7, #24]
 8011ac2:	601a      	str	r2, [r3, #0]
 8011ac4:	e002      	b.n	8011acc <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8011ac6:	69bb      	ldr	r3, [r7, #24]
 8011ac8:	687a      	ldr	r2, [r7, #4]
 8011aca:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8011acc:	69bb      	ldr	r3, [r7, #24]
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8011ad2:	69bb      	ldr	r3, [r7, #24]
 8011ad4:	68ba      	ldr	r2, [r7, #8]
 8011ad6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8011ad8:	2101      	movs	r1, #1
 8011ada:	69b8      	ldr	r0, [r7, #24]
 8011adc:	f7ff ff44 	bl	8011968 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8011ae0:	bf00      	nop
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b08e      	sub	sp, #56	@ 0x38
 8011aec:	af00      	add	r7, sp, #0
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	607a      	str	r2, [r7, #4]
 8011af4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8011af6:	2300      	movs	r3, #0
 8011af8:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011afe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b00:	2b00      	cmp	r3, #0
 8011b02:	d10b      	bne.n	8011b1c <xQueueGenericSend+0x34>
	__asm volatile
 8011b04:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011b08:	f383 8811 	msr	BASEPRI, r3
 8011b0c:	f3bf 8f6f 	isb	sy
 8011b10:	f3bf 8f4f 	dsb	sy
 8011b14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011b16:	bf00      	nop
 8011b18:	bf00      	nop
 8011b1a:	e7fd      	b.n	8011b18 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011b1c:	68bb      	ldr	r3, [r7, #8]
 8011b1e:	2b00      	cmp	r3, #0
 8011b20:	d103      	bne.n	8011b2a <xQueueGenericSend+0x42>
 8011b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d101      	bne.n	8011b2e <xQueueGenericSend+0x46>
 8011b2a:	2301      	movs	r3, #1
 8011b2c:	e000      	b.n	8011b30 <xQueueGenericSend+0x48>
 8011b2e:	2300      	movs	r3, #0
 8011b30:	2b00      	cmp	r3, #0
 8011b32:	d10b      	bne.n	8011b4c <xQueueGenericSend+0x64>
	__asm volatile
 8011b34:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011b38:	f383 8811 	msr	BASEPRI, r3
 8011b3c:	f3bf 8f6f 	isb	sy
 8011b40:	f3bf 8f4f 	dsb	sy
 8011b44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011b46:	bf00      	nop
 8011b48:	bf00      	nop
 8011b4a:	e7fd      	b.n	8011b48 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011b4c:	683b      	ldr	r3, [r7, #0]
 8011b4e:	2b02      	cmp	r3, #2
 8011b50:	d103      	bne.n	8011b5a <xQueueGenericSend+0x72>
 8011b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011b56:	2b01      	cmp	r3, #1
 8011b58:	d101      	bne.n	8011b5e <xQueueGenericSend+0x76>
 8011b5a:	2301      	movs	r3, #1
 8011b5c:	e000      	b.n	8011b60 <xQueueGenericSend+0x78>
 8011b5e:	2300      	movs	r3, #0
 8011b60:	2b00      	cmp	r3, #0
 8011b62:	d10b      	bne.n	8011b7c <xQueueGenericSend+0x94>
	__asm volatile
 8011b64:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011b68:	f383 8811 	msr	BASEPRI, r3
 8011b6c:	f3bf 8f6f 	isb	sy
 8011b70:	f3bf 8f4f 	dsb	sy
 8011b74:	623b      	str	r3, [r7, #32]
}
 8011b76:	bf00      	nop
 8011b78:	bf00      	nop
 8011b7a:	e7fd      	b.n	8011b78 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011b7c:	f001 f9fa 	bl	8012f74 <xTaskGetSchedulerState>
 8011b80:	4603      	mov	r3, r0
 8011b82:	2b00      	cmp	r3, #0
 8011b84:	d102      	bne.n	8011b8c <xQueueGenericSend+0xa4>
 8011b86:	687b      	ldr	r3, [r7, #4]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d101      	bne.n	8011b90 <xQueueGenericSend+0xa8>
 8011b8c:	2301      	movs	r3, #1
 8011b8e:	e000      	b.n	8011b92 <xQueueGenericSend+0xaa>
 8011b90:	2300      	movs	r3, #0
 8011b92:	2b00      	cmp	r3, #0
 8011b94:	d10b      	bne.n	8011bae <xQueueGenericSend+0xc6>
	__asm volatile
 8011b96:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011b9a:	f383 8811 	msr	BASEPRI, r3
 8011b9e:	f3bf 8f6f 	isb	sy
 8011ba2:	f3bf 8f4f 	dsb	sy
 8011ba6:	61fb      	str	r3, [r7, #28]
}
 8011ba8:	bf00      	nop
 8011baa:	bf00      	nop
 8011bac:	e7fd      	b.n	8011baa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011bae:	f001 fc1b 	bl	80133e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011bba:	429a      	cmp	r2, r3
 8011bbc:	d302      	bcc.n	8011bc4 <xQueueGenericSend+0xdc>
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	2b02      	cmp	r3, #2
 8011bc2:	d129      	bne.n	8011c18 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011bc4:	683a      	ldr	r2, [r7, #0]
 8011bc6:	68b9      	ldr	r1, [r7, #8]
 8011bc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011bca:	f000 fa91 	bl	80120f0 <prvCopyDataToQueue>
 8011bce:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011bd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d010      	beq.n	8011bfa <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011bda:	3324      	adds	r3, #36	@ 0x24
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f001 f829 	bl	8012c34 <xTaskRemoveFromEventList>
 8011be2:	4603      	mov	r3, r0
 8011be4:	2b00      	cmp	r3, #0
 8011be6:	d013      	beq.n	8011c10 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8011be8:	4b3f      	ldr	r3, [pc, #252]	@ (8011ce8 <xQueueGenericSend+0x200>)
 8011bea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011bee:	601a      	str	r2, [r3, #0]
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	f3bf 8f6f 	isb	sy
 8011bf8:	e00a      	b.n	8011c10 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8011bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d007      	beq.n	8011c10 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8011c00:	4b39      	ldr	r3, [pc, #228]	@ (8011ce8 <xQueueGenericSend+0x200>)
 8011c02:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011c06:	601a      	str	r2, [r3, #0]
 8011c08:	f3bf 8f4f 	dsb	sy
 8011c0c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8011c10:	f001 fc1c 	bl	801344c <vPortExitCritical>
				return pdPASS;
 8011c14:	2301      	movs	r3, #1
 8011c16:	e063      	b.n	8011ce0 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	2b00      	cmp	r3, #0
 8011c1c:	d103      	bne.n	8011c26 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011c1e:	f001 fc15 	bl	801344c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8011c22:	2300      	movs	r3, #0
 8011c24:	e05c      	b.n	8011ce0 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011c28:	2b00      	cmp	r3, #0
 8011c2a:	d106      	bne.n	8011c3a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011c2c:	f107 0314 	add.w	r3, r7, #20
 8011c30:	4618      	mov	r0, r3
 8011c32:	f001 f863 	bl	8012cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011c36:	2301      	movs	r3, #1
 8011c38:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011c3a:	f001 fc07 	bl	801344c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011c3e:	f000 fe11 	bl	8012864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011c42:	f001 fbd1 	bl	80133e8 <vPortEnterCritical>
 8011c46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c48:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011c4c:	b25b      	sxtb	r3, r3
 8011c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c52:	d103      	bne.n	8011c5c <xQueueGenericSend+0x174>
 8011c54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c56:	2200      	movs	r2, #0
 8011c58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011c5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011c62:	b25b      	sxtb	r3, r3
 8011c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011c68:	d103      	bne.n	8011c72 <xQueueGenericSend+0x18a>
 8011c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c6c:	2200      	movs	r2, #0
 8011c6e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011c72:	f001 fbeb 	bl	801344c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011c76:	1d3a      	adds	r2, r7, #4
 8011c78:	f107 0314 	add.w	r3, r7, #20
 8011c7c:	4611      	mov	r1, r2
 8011c7e:	4618      	mov	r0, r3
 8011c80:	f001 f852 	bl	8012d28 <xTaskCheckForTimeOut>
 8011c84:	4603      	mov	r3, r0
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d124      	bne.n	8011cd4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8011c8a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011c8c:	f000 fb28 	bl	80122e0 <prvIsQueueFull>
 8011c90:	4603      	mov	r3, r0
 8011c92:	2b00      	cmp	r3, #0
 8011c94:	d018      	beq.n	8011cc8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8011c96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011c98:	3310      	adds	r3, #16
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	4611      	mov	r1, r2
 8011c9e:	4618      	mov	r0, r3
 8011ca0:	f000 ffa2 	bl	8012be8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8011ca4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011ca6:	f000 fab3 	bl	8012210 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8011caa:	f000 fde9 	bl	8012880 <xTaskResumeAll>
 8011cae:	4603      	mov	r3, r0
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	f47f af7c 	bne.w	8011bae <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8011cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8011ce8 <xQueueGenericSend+0x200>)
 8011cb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011cbc:	601a      	str	r2, [r3, #0]
 8011cbe:	f3bf 8f4f 	dsb	sy
 8011cc2:	f3bf 8f6f 	isb	sy
 8011cc6:	e772      	b.n	8011bae <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8011cc8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cca:	f000 faa1 	bl	8012210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011cce:	f000 fdd7 	bl	8012880 <xTaskResumeAll>
 8011cd2:	e76c      	b.n	8011bae <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8011cd4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8011cd6:	f000 fa9b 	bl	8012210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011cda:	f000 fdd1 	bl	8012880 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8011cde:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8011ce0:	4618      	mov	r0, r3
 8011ce2:	3738      	adds	r7, #56	@ 0x38
 8011ce4:	46bd      	mov	sp, r7
 8011ce6:	bd80      	pop	{r7, pc}
 8011ce8:	e000ed04 	.word	0xe000ed04

08011cec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8011cec:	b580      	push	{r7, lr}
 8011cee:	b090      	sub	sp, #64	@ 0x40
 8011cf0:	af00      	add	r7, sp, #0
 8011cf2:	60f8      	str	r0, [r7, #12]
 8011cf4:	60b9      	str	r1, [r7, #8]
 8011cf6:	607a      	str	r2, [r7, #4]
 8011cf8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8011cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d00:	2b00      	cmp	r3, #0
 8011d02:	d10b      	bne.n	8011d1c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8011d04:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011d08:	f383 8811 	msr	BASEPRI, r3
 8011d0c:	f3bf 8f6f 	isb	sy
 8011d10:	f3bf 8f4f 	dsb	sy
 8011d14:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8011d16:	bf00      	nop
 8011d18:	bf00      	nop
 8011d1a:	e7fd      	b.n	8011d18 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011d1c:	68bb      	ldr	r3, [r7, #8]
 8011d1e:	2b00      	cmp	r3, #0
 8011d20:	d103      	bne.n	8011d2a <xQueueGenericSendFromISR+0x3e>
 8011d22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d101      	bne.n	8011d2e <xQueueGenericSendFromISR+0x42>
 8011d2a:	2301      	movs	r3, #1
 8011d2c:	e000      	b.n	8011d30 <xQueueGenericSendFromISR+0x44>
 8011d2e:	2300      	movs	r3, #0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d10b      	bne.n	8011d4c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8011d34:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011d38:	f383 8811 	msr	BASEPRI, r3
 8011d3c:	f3bf 8f6f 	isb	sy
 8011d40:	f3bf 8f4f 	dsb	sy
 8011d44:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8011d46:	bf00      	nop
 8011d48:	bf00      	nop
 8011d4a:	e7fd      	b.n	8011d48 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8011d4c:	683b      	ldr	r3, [r7, #0]
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d103      	bne.n	8011d5a <xQueueGenericSendFromISR+0x6e>
 8011d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011d56:	2b01      	cmp	r3, #1
 8011d58:	d101      	bne.n	8011d5e <xQueueGenericSendFromISR+0x72>
 8011d5a:	2301      	movs	r3, #1
 8011d5c:	e000      	b.n	8011d60 <xQueueGenericSendFromISR+0x74>
 8011d5e:	2300      	movs	r3, #0
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10b      	bne.n	8011d7c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8011d64:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	623b      	str	r3, [r7, #32]
}
 8011d76:	bf00      	nop
 8011d78:	bf00      	nop
 8011d7a:	e7fd      	b.n	8011d78 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8011d7c:	f001 fc14 	bl	80135a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8011d80:	f3ef 8211 	mrs	r2, BASEPRI
 8011d84:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011d88:	f383 8811 	msr	BASEPRI, r3
 8011d8c:	f3bf 8f6f 	isb	sy
 8011d90:	f3bf 8f4f 	dsb	sy
 8011d94:	61fa      	str	r2, [r7, #28]
 8011d96:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8011d98:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8011d9a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8011d9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011d9e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011da0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011da2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8011da4:	429a      	cmp	r2, r3
 8011da6:	d302      	bcc.n	8011dae <xQueueGenericSendFromISR+0xc2>
 8011da8:	683b      	ldr	r3, [r7, #0]
 8011daa:	2b02      	cmp	r3, #2
 8011dac:	d12f      	bne.n	8011e0e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8011dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011db0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011db4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011dbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8011dbe:	683a      	ldr	r2, [r7, #0]
 8011dc0:	68b9      	ldr	r1, [r7, #8]
 8011dc2:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8011dc4:	f000 f994 	bl	80120f0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8011dc8:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8011dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011dd0:	d112      	bne.n	8011df8 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8011dd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011dd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011dd6:	2b00      	cmp	r3, #0
 8011dd8:	d016      	beq.n	8011e08 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8011dda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ddc:	3324      	adds	r3, #36	@ 0x24
 8011dde:	4618      	mov	r0, r3
 8011de0:	f000 ff28 	bl	8012c34 <xTaskRemoveFromEventList>
 8011de4:	4603      	mov	r3, r0
 8011de6:	2b00      	cmp	r3, #0
 8011de8:	d00e      	beq.n	8011e08 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8011dea:	687b      	ldr	r3, [r7, #4]
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d00b      	beq.n	8011e08 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8011df0:	687b      	ldr	r3, [r7, #4]
 8011df2:	2201      	movs	r2, #1
 8011df4:	601a      	str	r2, [r3, #0]
 8011df6:	e007      	b.n	8011e08 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8011df8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8011dfc:	3301      	adds	r3, #1
 8011dfe:	b2db      	uxtb	r3, r3
 8011e00:	b25a      	sxtb	r2, r3
 8011e02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011e04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8011e0c:	e001      	b.n	8011e12 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8011e0e:	2300      	movs	r3, #0
 8011e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011e12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011e14:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8011e16:	697b      	ldr	r3, [r7, #20]
 8011e18:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8011e1c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8011e1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8011e20:	4618      	mov	r0, r3
 8011e22:	3740      	adds	r7, #64	@ 0x40
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b08c      	sub	sp, #48	@ 0x30
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	60f8      	str	r0, [r7, #12]
 8011e30:	60b9      	str	r1, [r7, #8]
 8011e32:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8011e34:	2300      	movs	r3, #0
 8011e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8011e38:	68fb      	ldr	r3, [r7, #12]
 8011e3a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8011e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d10b      	bne.n	8011e5a <xQueueReceive+0x32>
	__asm volatile
 8011e42:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011e46:	f383 8811 	msr	BASEPRI, r3
 8011e4a:	f3bf 8f6f 	isb	sy
 8011e4e:	f3bf 8f4f 	dsb	sy
 8011e52:	623b      	str	r3, [r7, #32]
}
 8011e54:	bf00      	nop
 8011e56:	bf00      	nop
 8011e58:	e7fd      	b.n	8011e56 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8011e5a:	68bb      	ldr	r3, [r7, #8]
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d103      	bne.n	8011e68 <xQueueReceive+0x40>
 8011e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d101      	bne.n	8011e6c <xQueueReceive+0x44>
 8011e68:	2301      	movs	r3, #1
 8011e6a:	e000      	b.n	8011e6e <xQueueReceive+0x46>
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d10b      	bne.n	8011e8a <xQueueReceive+0x62>
	__asm volatile
 8011e72:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011e76:	f383 8811 	msr	BASEPRI, r3
 8011e7a:	f3bf 8f6f 	isb	sy
 8011e7e:	f3bf 8f4f 	dsb	sy
 8011e82:	61fb      	str	r3, [r7, #28]
}
 8011e84:	bf00      	nop
 8011e86:	bf00      	nop
 8011e88:	e7fd      	b.n	8011e86 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8011e8a:	f001 f873 	bl	8012f74 <xTaskGetSchedulerState>
 8011e8e:	4603      	mov	r3, r0
 8011e90:	2b00      	cmp	r3, #0
 8011e92:	d102      	bne.n	8011e9a <xQueueReceive+0x72>
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	2b00      	cmp	r3, #0
 8011e98:	d101      	bne.n	8011e9e <xQueueReceive+0x76>
 8011e9a:	2301      	movs	r3, #1
 8011e9c:	e000      	b.n	8011ea0 <xQueueReceive+0x78>
 8011e9e:	2300      	movs	r3, #0
 8011ea0:	2b00      	cmp	r3, #0
 8011ea2:	d10b      	bne.n	8011ebc <xQueueReceive+0x94>
	__asm volatile
 8011ea4:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8011ea8:	f383 8811 	msr	BASEPRI, r3
 8011eac:	f3bf 8f6f 	isb	sy
 8011eb0:	f3bf 8f4f 	dsb	sy
 8011eb4:	61bb      	str	r3, [r7, #24]
}
 8011eb6:	bf00      	nop
 8011eb8:	bf00      	nop
 8011eba:	e7fd      	b.n	8011eb8 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8011ebc:	f001 fa94 	bl	80133e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8011ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011ec4:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8011ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ec8:	2b00      	cmp	r3, #0
 8011eca:	d01f      	beq.n	8011f0c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8011ecc:	68b9      	ldr	r1, [r7, #8]
 8011ece:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011ed0:	f000 f978 	bl	80121c4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8011ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011ed6:	1e5a      	subs	r2, r3, #1
 8011ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011eda:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8011edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ede:	691b      	ldr	r3, [r3, #16]
 8011ee0:	2b00      	cmp	r3, #0
 8011ee2:	d00f      	beq.n	8011f04 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8011ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011ee6:	3310      	adds	r3, #16
 8011ee8:	4618      	mov	r0, r3
 8011eea:	f000 fea3 	bl	8012c34 <xTaskRemoveFromEventList>
 8011eee:	4603      	mov	r3, r0
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d007      	beq.n	8011f04 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8011ef4:	4b3c      	ldr	r3, [pc, #240]	@ (8011fe8 <xQueueReceive+0x1c0>)
 8011ef6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011efa:	601a      	str	r2, [r3, #0]
 8011efc:	f3bf 8f4f 	dsb	sy
 8011f00:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8011f04:	f001 faa2 	bl	801344c <vPortExitCritical>
				return pdPASS;
 8011f08:	2301      	movs	r3, #1
 8011f0a:	e069      	b.n	8011fe0 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2b00      	cmp	r3, #0
 8011f10:	d103      	bne.n	8011f1a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8011f12:	f001 fa9b 	bl	801344c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8011f16:	2300      	movs	r3, #0
 8011f18:	e062      	b.n	8011fe0 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8011f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d106      	bne.n	8011f2e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8011f20:	f107 0310 	add.w	r3, r7, #16
 8011f24:	4618      	mov	r0, r3
 8011f26:	f000 fee9 	bl	8012cfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8011f2a:	2301      	movs	r3, #1
 8011f2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8011f2e:	f001 fa8d 	bl	801344c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8011f32:	f000 fc97 	bl	8012864 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8011f36:	f001 fa57 	bl	80133e8 <vPortEnterCritical>
 8011f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8011f40:	b25b      	sxtb	r3, r3
 8011f42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f46:	d103      	bne.n	8011f50 <xQueueReceive+0x128>
 8011f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f4a:	2200      	movs	r2, #0
 8011f4c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8011f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f52:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8011f56:	b25b      	sxtb	r3, r3
 8011f58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011f5c:	d103      	bne.n	8011f66 <xQueueReceive+0x13e>
 8011f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f60:	2200      	movs	r2, #0
 8011f62:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8011f66:	f001 fa71 	bl	801344c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8011f6a:	1d3a      	adds	r2, r7, #4
 8011f6c:	f107 0310 	add.w	r3, r7, #16
 8011f70:	4611      	mov	r1, r2
 8011f72:	4618      	mov	r0, r3
 8011f74:	f000 fed8 	bl	8012d28 <xTaskCheckForTimeOut>
 8011f78:	4603      	mov	r3, r0
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	d123      	bne.n	8011fc6 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011f7e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f80:	f000 f998 	bl	80122b4 <prvIsQueueEmpty>
 8011f84:	4603      	mov	r3, r0
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d017      	beq.n	8011fba <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8011f8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8c:	3324      	adds	r3, #36	@ 0x24
 8011f8e:	687a      	ldr	r2, [r7, #4]
 8011f90:	4611      	mov	r1, r2
 8011f92:	4618      	mov	r0, r3
 8011f94:	f000 fe28 	bl	8012be8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8011f98:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011f9a:	f000 f939 	bl	8012210 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8011f9e:	f000 fc6f 	bl	8012880 <xTaskResumeAll>
 8011fa2:	4603      	mov	r3, r0
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d189      	bne.n	8011ebc <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8011fa8:	4b0f      	ldr	r3, [pc, #60]	@ (8011fe8 <xQueueReceive+0x1c0>)
 8011faa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8011fae:	601a      	str	r2, [r3, #0]
 8011fb0:	f3bf 8f4f 	dsb	sy
 8011fb4:	f3bf 8f6f 	isb	sy
 8011fb8:	e780      	b.n	8011ebc <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8011fba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fbc:	f000 f928 	bl	8012210 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8011fc0:	f000 fc5e 	bl	8012880 <xTaskResumeAll>
 8011fc4:	e77a      	b.n	8011ebc <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8011fc6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fc8:	f000 f922 	bl	8012210 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8011fcc:	f000 fc58 	bl	8012880 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8011fd0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8011fd2:	f000 f96f 	bl	80122b4 <prvIsQueueEmpty>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	f43f af6f 	beq.w	8011ebc <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8011fde:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	3730      	adds	r7, #48	@ 0x30
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bd80      	pop	{r7, pc}
 8011fe8:	e000ed04 	.word	0xe000ed04

08011fec <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8011fec:	b580      	push	{r7, lr}
 8011fee:	b08e      	sub	sp, #56	@ 0x38
 8011ff0:	af00      	add	r7, sp, #0
 8011ff2:	60f8      	str	r0, [r7, #12]
 8011ff4:	60b9      	str	r1, [r7, #8]
 8011ff6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8011ff8:	68fb      	ldr	r3, [r7, #12]
 8011ffa:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8011ffc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d10b      	bne.n	801201a <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8012002:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012006:	f383 8811 	msr	BASEPRI, r3
 801200a:	f3bf 8f6f 	isb	sy
 801200e:	f3bf 8f4f 	dsb	sy
 8012012:	623b      	str	r3, [r7, #32]
}
 8012014:	bf00      	nop
 8012016:	bf00      	nop
 8012018:	e7fd      	b.n	8012016 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 801201a:	68bb      	ldr	r3, [r7, #8]
 801201c:	2b00      	cmp	r3, #0
 801201e:	d103      	bne.n	8012028 <xQueueReceiveFromISR+0x3c>
 8012020:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012022:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012024:	2b00      	cmp	r3, #0
 8012026:	d101      	bne.n	801202c <xQueueReceiveFromISR+0x40>
 8012028:	2301      	movs	r3, #1
 801202a:	e000      	b.n	801202e <xQueueReceiveFromISR+0x42>
 801202c:	2300      	movs	r3, #0
 801202e:	2b00      	cmp	r3, #0
 8012030:	d10b      	bne.n	801204a <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8012032:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012036:	f383 8811 	msr	BASEPRI, r3
 801203a:	f3bf 8f6f 	isb	sy
 801203e:	f3bf 8f4f 	dsb	sy
 8012042:	61fb      	str	r3, [r7, #28]
}
 8012044:	bf00      	nop
 8012046:	bf00      	nop
 8012048:	e7fd      	b.n	8012046 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801204a:	f001 faad 	bl	80135a8 <vPortValidateInterruptPriority>
	__asm volatile
 801204e:	f3ef 8211 	mrs	r2, BASEPRI
 8012052:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012056:	f383 8811 	msr	BASEPRI, r3
 801205a:	f3bf 8f6f 	isb	sy
 801205e:	f3bf 8f4f 	dsb	sy
 8012062:	61ba      	str	r2, [r7, #24]
 8012064:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8012066:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012068:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801206a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801206c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801206e:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012072:	2b00      	cmp	r3, #0
 8012074:	d02f      	beq.n	80120d6 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8012076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012078:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801207c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012080:	68b9      	ldr	r1, [r7, #8]
 8012082:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8012084:	f000 f89e 	bl	80121c4 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012088:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801208a:	1e5a      	subs	r2, r3, #1
 801208c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801208e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8012090:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8012094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012098:	d112      	bne.n	80120c0 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801209a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801209c:	691b      	ldr	r3, [r3, #16]
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d016      	beq.n	80120d0 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80120a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120a4:	3310      	adds	r3, #16
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 fdc4 	bl	8012c34 <xTaskRemoveFromEventList>
 80120ac:	4603      	mov	r3, r0
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	d00e      	beq.n	80120d0 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80120b2:	687b      	ldr	r3, [r7, #4]
 80120b4:	2b00      	cmp	r3, #0
 80120b6:	d00b      	beq.n	80120d0 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2201      	movs	r2, #1
 80120bc:	601a      	str	r2, [r3, #0]
 80120be:	e007      	b.n	80120d0 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80120c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80120c4:	3301      	adds	r3, #1
 80120c6:	b2db      	uxtb	r3, r3
 80120c8:	b25a      	sxtb	r2, r3
 80120ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 80120d0:	2301      	movs	r3, #1
 80120d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80120d4:	e001      	b.n	80120da <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 80120d6:	2300      	movs	r3, #0
 80120d8:	637b      	str	r3, [r7, #52]	@ 0x34
 80120da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120dc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80120de:	693b      	ldr	r3, [r7, #16]
 80120e0:	f383 8811 	msr	BASEPRI, r3
}
 80120e4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80120e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80120e8:	4618      	mov	r0, r3
 80120ea:	3738      	adds	r7, #56	@ 0x38
 80120ec:	46bd      	mov	sp, r7
 80120ee:	bd80      	pop	{r7, pc}

080120f0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b086      	sub	sp, #24
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	60f8      	str	r0, [r7, #12]
 80120f8:	60b9      	str	r1, [r7, #8]
 80120fa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80120fc:	2300      	movs	r3, #0
 80120fe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012100:	68fb      	ldr	r3, [r7, #12]
 8012102:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012104:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8012106:	68fb      	ldr	r3, [r7, #12]
 8012108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801210a:	2b00      	cmp	r3, #0
 801210c:	d10d      	bne.n	801212a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	681b      	ldr	r3, [r3, #0]
 8012112:	2b00      	cmp	r3, #0
 8012114:	d14d      	bne.n	80121b2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	689b      	ldr	r3, [r3, #8]
 801211a:	4618      	mov	r0, r3
 801211c:	f000 ff48 	bl	8012fb0 <xTaskPriorityDisinherit>
 8012120:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8012122:	68fb      	ldr	r3, [r7, #12]
 8012124:	2200      	movs	r2, #0
 8012126:	609a      	str	r2, [r3, #8]
 8012128:	e043      	b.n	80121b2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801212a:	687b      	ldr	r3, [r7, #4]
 801212c:	2b00      	cmp	r3, #0
 801212e:	d119      	bne.n	8012164 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8012130:	68fb      	ldr	r3, [r7, #12]
 8012132:	6858      	ldr	r0, [r3, #4]
 8012134:	68fb      	ldr	r3, [r7, #12]
 8012136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012138:	461a      	mov	r2, r3
 801213a:	68b9      	ldr	r1, [r7, #8]
 801213c:	f008 faad 	bl	801a69a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8012140:	68fb      	ldr	r3, [r7, #12]
 8012142:	685a      	ldr	r2, [r3, #4]
 8012144:	68fb      	ldr	r3, [r7, #12]
 8012146:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012148:	441a      	add	r2, r3
 801214a:	68fb      	ldr	r3, [r7, #12]
 801214c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	685a      	ldr	r2, [r3, #4]
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	689b      	ldr	r3, [r3, #8]
 8012156:	429a      	cmp	r2, r3
 8012158:	d32b      	bcc.n	80121b2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801215a:	68fb      	ldr	r3, [r7, #12]
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	68fb      	ldr	r3, [r7, #12]
 8012160:	605a      	str	r2, [r3, #4]
 8012162:	e026      	b.n	80121b2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	68d8      	ldr	r0, [r3, #12]
 8012168:	68fb      	ldr	r3, [r7, #12]
 801216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801216c:	461a      	mov	r2, r3
 801216e:	68b9      	ldr	r1, [r7, #8]
 8012170:	f008 fa93 	bl	801a69a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	68da      	ldr	r2, [r3, #12]
 8012178:	68fb      	ldr	r3, [r7, #12]
 801217a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801217c:	425b      	negs	r3, r3
 801217e:	441a      	add	r2, r3
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	68da      	ldr	r2, [r3, #12]
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	429a      	cmp	r2, r3
 801218e:	d207      	bcs.n	80121a0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8012190:	68fb      	ldr	r3, [r7, #12]
 8012192:	689a      	ldr	r2, [r3, #8]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012198:	425b      	negs	r3, r3
 801219a:	441a      	add	r2, r3
 801219c:	68fb      	ldr	r3, [r7, #12]
 801219e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80121a0:	687b      	ldr	r3, [r7, #4]
 80121a2:	2b02      	cmp	r3, #2
 80121a4:	d105      	bne.n	80121b2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80121a6:	693b      	ldr	r3, [r7, #16]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	d002      	beq.n	80121b2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80121ac:	693b      	ldr	r3, [r7, #16]
 80121ae:	3b01      	subs	r3, #1
 80121b0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80121b2:	693b      	ldr	r3, [r7, #16]
 80121b4:	1c5a      	adds	r2, r3, #1
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80121ba:	697b      	ldr	r3, [r7, #20]
}
 80121bc:	4618      	mov	r0, r3
 80121be:	3718      	adds	r7, #24
 80121c0:	46bd      	mov	sp, r7
 80121c2:	bd80      	pop	{r7, pc}

080121c4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80121c4:	b580      	push	{r7, lr}
 80121c6:	b082      	sub	sp, #8
 80121c8:	af00      	add	r7, sp, #0
 80121ca:	6078      	str	r0, [r7, #4]
 80121cc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80121ce:	687b      	ldr	r3, [r7, #4]
 80121d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d018      	beq.n	8012208 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80121d6:	687b      	ldr	r3, [r7, #4]
 80121d8:	68da      	ldr	r2, [r3, #12]
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80121de:	441a      	add	r2, r3
 80121e0:	687b      	ldr	r3, [r7, #4]
 80121e2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	68da      	ldr	r2, [r3, #12]
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	689b      	ldr	r3, [r3, #8]
 80121ec:	429a      	cmp	r2, r3
 80121ee:	d303      	bcc.n	80121f8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	681a      	ldr	r2, [r3, #0]
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	68d9      	ldr	r1, [r3, #12]
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012200:	461a      	mov	r2, r3
 8012202:	6838      	ldr	r0, [r7, #0]
 8012204:	f008 fa49 	bl	801a69a <memcpy>
	}
}
 8012208:	bf00      	nop
 801220a:	3708      	adds	r7, #8
 801220c:	46bd      	mov	sp, r7
 801220e:	bd80      	pop	{r7, pc}

08012210 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8012210:	b580      	push	{r7, lr}
 8012212:	b084      	sub	sp, #16
 8012214:	af00      	add	r7, sp, #0
 8012216:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8012218:	f001 f8e6 	bl	80133e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8012222:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8012224:	e011      	b.n	801224a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801222a:	2b00      	cmp	r3, #0
 801222c:	d012      	beq.n	8012254 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	3324      	adds	r3, #36	@ 0x24
 8012232:	4618      	mov	r0, r3
 8012234:	f000 fcfe 	bl	8012c34 <xTaskRemoveFromEventList>
 8012238:	4603      	mov	r3, r0
 801223a:	2b00      	cmp	r3, #0
 801223c:	d001      	beq.n	8012242 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801223e:	f000 fdd7 	bl	8012df0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8012242:	7bfb      	ldrb	r3, [r7, #15]
 8012244:	3b01      	subs	r3, #1
 8012246:	b2db      	uxtb	r3, r3
 8012248:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801224a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801224e:	2b00      	cmp	r3, #0
 8012250:	dce9      	bgt.n	8012226 <prvUnlockQueue+0x16>
 8012252:	e000      	b.n	8012256 <prvUnlockQueue+0x46>
					break;
 8012254:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	22ff      	movs	r2, #255	@ 0xff
 801225a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 801225e:	f001 f8f5 	bl	801344c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8012262:	f001 f8c1 	bl	80133e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8012266:	687b      	ldr	r3, [r7, #4]
 8012268:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 801226c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801226e:	e011      	b.n	8012294 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	691b      	ldr	r3, [r3, #16]
 8012274:	2b00      	cmp	r3, #0
 8012276:	d012      	beq.n	801229e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	3310      	adds	r3, #16
 801227c:	4618      	mov	r0, r3
 801227e:	f000 fcd9 	bl	8012c34 <xTaskRemoveFromEventList>
 8012282:	4603      	mov	r3, r0
 8012284:	2b00      	cmp	r3, #0
 8012286:	d001      	beq.n	801228c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8012288:	f000 fdb2 	bl	8012df0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801228c:	7bbb      	ldrb	r3, [r7, #14]
 801228e:	3b01      	subs	r3, #1
 8012290:	b2db      	uxtb	r3, r3
 8012292:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8012294:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012298:	2b00      	cmp	r3, #0
 801229a:	dce9      	bgt.n	8012270 <prvUnlockQueue+0x60>
 801229c:	e000      	b.n	80122a0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 801229e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	22ff      	movs	r2, #255	@ 0xff
 80122a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80122a8:	f001 f8d0 	bl	801344c <vPortExitCritical>
}
 80122ac:	bf00      	nop
 80122ae:	3710      	adds	r7, #16
 80122b0:	46bd      	mov	sp, r7
 80122b2:	bd80      	pop	{r7, pc}

080122b4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80122b4:	b580      	push	{r7, lr}
 80122b6:	b084      	sub	sp, #16
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80122bc:	f001 f894 	bl	80133e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80122c4:	2b00      	cmp	r3, #0
 80122c6:	d102      	bne.n	80122ce <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80122c8:	2301      	movs	r3, #1
 80122ca:	60fb      	str	r3, [r7, #12]
 80122cc:	e001      	b.n	80122d2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80122ce:	2300      	movs	r3, #0
 80122d0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80122d2:	f001 f8bb 	bl	801344c <vPortExitCritical>

	return xReturn;
 80122d6:	68fb      	ldr	r3, [r7, #12]
}
 80122d8:	4618      	mov	r0, r3
 80122da:	3710      	adds	r7, #16
 80122dc:	46bd      	mov	sp, r7
 80122de:	bd80      	pop	{r7, pc}

080122e0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80122e0:	b580      	push	{r7, lr}
 80122e2:	b084      	sub	sp, #16
 80122e4:	af00      	add	r7, sp, #0
 80122e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80122e8:	f001 f87e 	bl	80133e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80122f0:	687b      	ldr	r3, [r7, #4]
 80122f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80122f4:	429a      	cmp	r2, r3
 80122f6:	d102      	bne.n	80122fe <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80122f8:	2301      	movs	r3, #1
 80122fa:	60fb      	str	r3, [r7, #12]
 80122fc:	e001      	b.n	8012302 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80122fe:	2300      	movs	r3, #0
 8012300:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8012302:	f001 f8a3 	bl	801344c <vPortExitCritical>

	return xReturn;
 8012306:	68fb      	ldr	r3, [r7, #12]
}
 8012308:	4618      	mov	r0, r3
 801230a:	3710      	adds	r7, #16
 801230c:	46bd      	mov	sp, r7
 801230e:	bd80      	pop	{r7, pc}

08012310 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8012310:	b580      	push	{r7, lr}
 8012312:	b08c      	sub	sp, #48	@ 0x30
 8012314:	af04      	add	r7, sp, #16
 8012316:	60f8      	str	r0, [r7, #12]
 8012318:	60b9      	str	r1, [r7, #8]
 801231a:	603b      	str	r3, [r7, #0]
 801231c:	4613      	mov	r3, r2
 801231e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8012320:	88fb      	ldrh	r3, [r7, #6]
 8012322:	009b      	lsls	r3, r3, #2
 8012324:	4618      	mov	r0, r3
 8012326:	f001 f981 	bl	801362c <pvPortMalloc>
 801232a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2b00      	cmp	r3, #0
 8012330:	d00e      	beq.n	8012350 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8012332:	2054      	movs	r0, #84	@ 0x54
 8012334:	f001 f97a 	bl	801362c <pvPortMalloc>
 8012338:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801233a:	69fb      	ldr	r3, [r7, #28]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d003      	beq.n	8012348 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8012340:	69fb      	ldr	r3, [r7, #28]
 8012342:	697a      	ldr	r2, [r7, #20]
 8012344:	631a      	str	r2, [r3, #48]	@ 0x30
 8012346:	e005      	b.n	8012354 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8012348:	6978      	ldr	r0, [r7, #20]
 801234a:	f001 fa3d 	bl	80137c8 <vPortFree>
 801234e:	e001      	b.n	8012354 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8012350:	2300      	movs	r3, #0
 8012352:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8012354:	69fb      	ldr	r3, [r7, #28]
 8012356:	2b00      	cmp	r3, #0
 8012358:	d013      	beq.n	8012382 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801235a:	88fa      	ldrh	r2, [r7, #6]
 801235c:	2300      	movs	r3, #0
 801235e:	9303      	str	r3, [sp, #12]
 8012360:	69fb      	ldr	r3, [r7, #28]
 8012362:	9302      	str	r3, [sp, #8]
 8012364:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012366:	9301      	str	r3, [sp, #4]
 8012368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801236a:	9300      	str	r3, [sp, #0]
 801236c:	683b      	ldr	r3, [r7, #0]
 801236e:	68b9      	ldr	r1, [r7, #8]
 8012370:	68f8      	ldr	r0, [r7, #12]
 8012372:	f000 f80e 	bl	8012392 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8012376:	69f8      	ldr	r0, [r7, #28]
 8012378:	f000 f894 	bl	80124a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801237c:	2301      	movs	r3, #1
 801237e:	61bb      	str	r3, [r7, #24]
 8012380:	e002      	b.n	8012388 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8012382:	f04f 33ff 	mov.w	r3, #4294967295
 8012386:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8012388:	69bb      	ldr	r3, [r7, #24]
	}
 801238a:	4618      	mov	r0, r3
 801238c:	3720      	adds	r7, #32
 801238e:	46bd      	mov	sp, r7
 8012390:	bd80      	pop	{r7, pc}

08012392 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8012392:	b580      	push	{r7, lr}
 8012394:	b088      	sub	sp, #32
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	60b9      	str	r1, [r7, #8]
 801239c:	607a      	str	r2, [r7, #4]
 801239e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80123a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80123aa:	3b01      	subs	r3, #1
 80123ac:	009b      	lsls	r3, r3, #2
 80123ae:	4413      	add	r3, r2
 80123b0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80123b2:	69bb      	ldr	r3, [r7, #24]
 80123b4:	f023 0307 	bic.w	r3, r3, #7
 80123b8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80123ba:	69bb      	ldr	r3, [r7, #24]
 80123bc:	f003 0307 	and.w	r3, r3, #7
 80123c0:	2b00      	cmp	r3, #0
 80123c2:	d00b      	beq.n	80123dc <prvInitialiseNewTask+0x4a>
	__asm volatile
 80123c4:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80123c8:	f383 8811 	msr	BASEPRI, r3
 80123cc:	f3bf 8f6f 	isb	sy
 80123d0:	f3bf 8f4f 	dsb	sy
 80123d4:	617b      	str	r3, [r7, #20]
}
 80123d6:	bf00      	nop
 80123d8:	bf00      	nop
 80123da:	e7fd      	b.n	80123d8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80123dc:	68bb      	ldr	r3, [r7, #8]
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d01f      	beq.n	8012422 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80123e2:	2300      	movs	r3, #0
 80123e4:	61fb      	str	r3, [r7, #28]
 80123e6:	e012      	b.n	801240e <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80123e8:	68ba      	ldr	r2, [r7, #8]
 80123ea:	69fb      	ldr	r3, [r7, #28]
 80123ec:	4413      	add	r3, r2
 80123ee:	7819      	ldrb	r1, [r3, #0]
 80123f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80123f2:	69fb      	ldr	r3, [r7, #28]
 80123f4:	4413      	add	r3, r2
 80123f6:	3334      	adds	r3, #52	@ 0x34
 80123f8:	460a      	mov	r2, r1
 80123fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80123fc:	68ba      	ldr	r2, [r7, #8]
 80123fe:	69fb      	ldr	r3, [r7, #28]
 8012400:	4413      	add	r3, r2
 8012402:	781b      	ldrb	r3, [r3, #0]
 8012404:	2b00      	cmp	r3, #0
 8012406:	d006      	beq.n	8012416 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8012408:	69fb      	ldr	r3, [r7, #28]
 801240a:	3301      	adds	r3, #1
 801240c:	61fb      	str	r3, [r7, #28]
 801240e:	69fb      	ldr	r3, [r7, #28]
 8012410:	2b0f      	cmp	r3, #15
 8012412:	d9e9      	bls.n	80123e8 <prvInitialiseNewTask+0x56>
 8012414:	e000      	b.n	8012418 <prvInitialiseNewTask+0x86>
			{
				break;
 8012416:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8012418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801241a:	2200      	movs	r2, #0
 801241c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8012420:	e003      	b.n	801242a <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8012422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012424:	2200      	movs	r2, #0
 8012426:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801242a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801242c:	2b06      	cmp	r3, #6
 801242e:	d901      	bls.n	8012434 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8012430:	2306      	movs	r3, #6
 8012432:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8012434:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012436:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012438:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801243a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801243c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801243e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8012440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012442:	2200      	movs	r2, #0
 8012444:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8012446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012448:	3304      	adds	r3, #4
 801244a:	4618      	mov	r0, r3
 801244c:	f7ff f9f8 	bl	8011840 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8012450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012452:	3318      	adds	r3, #24
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff f9f3 	bl	8011840 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801245a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801245c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801245e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012462:	f1c3 0207 	rsb	r2, r3, #7
 8012466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012468:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801246a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801246c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801246e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8012470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012472:	2200      	movs	r2, #0
 8012474:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8012476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012478:	2200      	movs	r2, #0
 801247a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801247e:	683a      	ldr	r2, [r7, #0]
 8012480:	68f9      	ldr	r1, [r7, #12]
 8012482:	69b8      	ldr	r0, [r7, #24]
 8012484:	f000 fe82 	bl	801318c <pxPortInitialiseStack>
 8012488:	4602      	mov	r2, r0
 801248a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801248c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801248e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d002      	beq.n	801249a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8012494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012498:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801249a:	bf00      	nop
 801249c:	3720      	adds	r7, #32
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
	...

080124a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80124a4:	b580      	push	{r7, lr}
 80124a6:	b082      	sub	sp, #8
 80124a8:	af00      	add	r7, sp, #0
 80124aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80124ac:	f000 ff9c 	bl	80133e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80124b0:	4b2a      	ldr	r3, [pc, #168]	@ (801255c <prvAddNewTaskToReadyList+0xb8>)
 80124b2:	681b      	ldr	r3, [r3, #0]
 80124b4:	3301      	adds	r3, #1
 80124b6:	4a29      	ldr	r2, [pc, #164]	@ (801255c <prvAddNewTaskToReadyList+0xb8>)
 80124b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80124ba:	4b29      	ldr	r3, [pc, #164]	@ (8012560 <prvAddNewTaskToReadyList+0xbc>)
 80124bc:	681b      	ldr	r3, [r3, #0]
 80124be:	2b00      	cmp	r3, #0
 80124c0:	d109      	bne.n	80124d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80124c2:	4a27      	ldr	r2, [pc, #156]	@ (8012560 <prvAddNewTaskToReadyList+0xbc>)
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80124c8:	4b24      	ldr	r3, [pc, #144]	@ (801255c <prvAddNewTaskToReadyList+0xb8>)
 80124ca:	681b      	ldr	r3, [r3, #0]
 80124cc:	2b01      	cmp	r3, #1
 80124ce:	d110      	bne.n	80124f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80124d0:	f000 fcb2 	bl	8012e38 <prvInitialiseTaskLists>
 80124d4:	e00d      	b.n	80124f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80124d6:	4b23      	ldr	r3, [pc, #140]	@ (8012564 <prvAddNewTaskToReadyList+0xc0>)
 80124d8:	681b      	ldr	r3, [r3, #0]
 80124da:	2b00      	cmp	r3, #0
 80124dc:	d109      	bne.n	80124f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80124de:	4b20      	ldr	r3, [pc, #128]	@ (8012560 <prvAddNewTaskToReadyList+0xbc>)
 80124e0:	681b      	ldr	r3, [r3, #0]
 80124e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80124e4:	687b      	ldr	r3, [r7, #4]
 80124e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80124e8:	429a      	cmp	r2, r3
 80124ea:	d802      	bhi.n	80124f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80124ec:	4a1c      	ldr	r2, [pc, #112]	@ (8012560 <prvAddNewTaskToReadyList+0xbc>)
 80124ee:	687b      	ldr	r3, [r7, #4]
 80124f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80124f2:	4b1d      	ldr	r3, [pc, #116]	@ (8012568 <prvAddNewTaskToReadyList+0xc4>)
 80124f4:	681b      	ldr	r3, [r3, #0]
 80124f6:	3301      	adds	r3, #1
 80124f8:	4a1b      	ldr	r2, [pc, #108]	@ (8012568 <prvAddNewTaskToReadyList+0xc4>)
 80124fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80124fc:	687b      	ldr	r3, [r7, #4]
 80124fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012500:	2201      	movs	r2, #1
 8012502:	409a      	lsls	r2, r3
 8012504:	4b19      	ldr	r3, [pc, #100]	@ (801256c <prvAddNewTaskToReadyList+0xc8>)
 8012506:	681b      	ldr	r3, [r3, #0]
 8012508:	4313      	orrs	r3, r2
 801250a:	4a18      	ldr	r2, [pc, #96]	@ (801256c <prvAddNewTaskToReadyList+0xc8>)
 801250c:	6013      	str	r3, [r2, #0]
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012512:	4613      	mov	r3, r2
 8012514:	009b      	lsls	r3, r3, #2
 8012516:	4413      	add	r3, r2
 8012518:	009b      	lsls	r3, r3, #2
 801251a:	4a15      	ldr	r2, [pc, #84]	@ (8012570 <prvAddNewTaskToReadyList+0xcc>)
 801251c:	441a      	add	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	3304      	adds	r3, #4
 8012522:	4619      	mov	r1, r3
 8012524:	4610      	mov	r0, r2
 8012526:	f7ff f998 	bl	801185a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801252a:	f000 ff8f 	bl	801344c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801252e:	4b0d      	ldr	r3, [pc, #52]	@ (8012564 <prvAddNewTaskToReadyList+0xc0>)
 8012530:	681b      	ldr	r3, [r3, #0]
 8012532:	2b00      	cmp	r3, #0
 8012534:	d00e      	beq.n	8012554 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8012536:	4b0a      	ldr	r3, [pc, #40]	@ (8012560 <prvAddNewTaskToReadyList+0xbc>)
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012540:	429a      	cmp	r2, r3
 8012542:	d207      	bcs.n	8012554 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8012544:	4b0b      	ldr	r3, [pc, #44]	@ (8012574 <prvAddNewTaskToReadyList+0xd0>)
 8012546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801254a:	601a      	str	r2, [r3, #0]
 801254c:	f3bf 8f4f 	dsb	sy
 8012550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8012554:	bf00      	nop
 8012556:	3708      	adds	r7, #8
 8012558:	46bd      	mov	sp, r7
 801255a:	bd80      	pop	{r7, pc}
 801255c:	20000c48 	.word	0x20000c48
 8012560:	20000b48 	.word	0x20000b48
 8012564:	20000c54 	.word	0x20000c54
 8012568:	20000c64 	.word	0x20000c64
 801256c:	20000c50 	.word	0x20000c50
 8012570:	20000b4c 	.word	0x20000b4c
 8012574:	e000ed04 	.word	0xe000ed04

08012578 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8012578:	b580      	push	{r7, lr}
 801257a:	b084      	sub	sp, #16
 801257c:	af00      	add	r7, sp, #0
 801257e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8012580:	f000 ff32 	bl	80133e8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	2b00      	cmp	r3, #0
 8012588:	d102      	bne.n	8012590 <vTaskDelete+0x18>
 801258a:	4b39      	ldr	r3, [pc, #228]	@ (8012670 <vTaskDelete+0xf8>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	e000      	b.n	8012592 <vTaskDelete+0x1a>
 8012590:	687b      	ldr	r3, [r7, #4]
 8012592:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	3304      	adds	r3, #4
 8012598:	4618      	mov	r0, r3
 801259a:	f7ff f9bb 	bl	8011914 <uxListRemove>
 801259e:	4603      	mov	r3, r0
 80125a0:	2b00      	cmp	r3, #0
 80125a2:	d115      	bne.n	80125d0 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80125a8:	4932      	ldr	r1, [pc, #200]	@ (8012674 <vTaskDelete+0xfc>)
 80125aa:	4613      	mov	r3, r2
 80125ac:	009b      	lsls	r3, r3, #2
 80125ae:	4413      	add	r3, r2
 80125b0:	009b      	lsls	r3, r3, #2
 80125b2:	440b      	add	r3, r1
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d10a      	bne.n	80125d0 <vTaskDelete+0x58>
 80125ba:	68fb      	ldr	r3, [r7, #12]
 80125bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80125be:	2201      	movs	r2, #1
 80125c0:	fa02 f303 	lsl.w	r3, r2, r3
 80125c4:	43da      	mvns	r2, r3
 80125c6:	4b2c      	ldr	r3, [pc, #176]	@ (8012678 <vTaskDelete+0x100>)
 80125c8:	681b      	ldr	r3, [r3, #0]
 80125ca:	4013      	ands	r3, r2
 80125cc:	4a2a      	ldr	r2, [pc, #168]	@ (8012678 <vTaskDelete+0x100>)
 80125ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80125d0:	68fb      	ldr	r3, [r7, #12]
 80125d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80125d4:	2b00      	cmp	r3, #0
 80125d6:	d004      	beq.n	80125e2 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80125d8:	68fb      	ldr	r3, [r7, #12]
 80125da:	3318      	adds	r3, #24
 80125dc:	4618      	mov	r0, r3
 80125de:	f7ff f999 	bl	8011914 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80125e2:	4b26      	ldr	r3, [pc, #152]	@ (801267c <vTaskDelete+0x104>)
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	3301      	adds	r3, #1
 80125e8:	4a24      	ldr	r2, [pc, #144]	@ (801267c <vTaskDelete+0x104>)
 80125ea:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80125ec:	4b20      	ldr	r3, [pc, #128]	@ (8012670 <vTaskDelete+0xf8>)
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	68fa      	ldr	r2, [r7, #12]
 80125f2:	429a      	cmp	r2, r3
 80125f4:	d10b      	bne.n	801260e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80125f6:	68fb      	ldr	r3, [r7, #12]
 80125f8:	3304      	adds	r3, #4
 80125fa:	4619      	mov	r1, r3
 80125fc:	4820      	ldr	r0, [pc, #128]	@ (8012680 <vTaskDelete+0x108>)
 80125fe:	f7ff f92c 	bl	801185a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8012602:	4b20      	ldr	r3, [pc, #128]	@ (8012684 <vTaskDelete+0x10c>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	3301      	adds	r3, #1
 8012608:	4a1e      	ldr	r2, [pc, #120]	@ (8012684 <vTaskDelete+0x10c>)
 801260a:	6013      	str	r3, [r2, #0]
 801260c:	e009      	b.n	8012622 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801260e:	4b1e      	ldr	r3, [pc, #120]	@ (8012688 <vTaskDelete+0x110>)
 8012610:	681b      	ldr	r3, [r3, #0]
 8012612:	3b01      	subs	r3, #1
 8012614:	4a1c      	ldr	r2, [pc, #112]	@ (8012688 <vTaskDelete+0x110>)
 8012616:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8012618:	68f8      	ldr	r0, [r7, #12]
 801261a:	f000 fc7b 	bl	8012f14 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801261e:	f000 fc89 	bl	8012f34 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8012622:	f000 ff13 	bl	801344c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8012626:	4b19      	ldr	r3, [pc, #100]	@ (801268c <vTaskDelete+0x114>)
 8012628:	681b      	ldr	r3, [r3, #0]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d01c      	beq.n	8012668 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 801262e:	4b10      	ldr	r3, [pc, #64]	@ (8012670 <vTaskDelete+0xf8>)
 8012630:	681b      	ldr	r3, [r3, #0]
 8012632:	68fa      	ldr	r2, [r7, #12]
 8012634:	429a      	cmp	r2, r3
 8012636:	d117      	bne.n	8012668 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8012638:	4b15      	ldr	r3, [pc, #84]	@ (8012690 <vTaskDelete+0x118>)
 801263a:	681b      	ldr	r3, [r3, #0]
 801263c:	2b00      	cmp	r3, #0
 801263e:	d00b      	beq.n	8012658 <vTaskDelete+0xe0>
	__asm volatile
 8012640:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012644:	f383 8811 	msr	BASEPRI, r3
 8012648:	f3bf 8f6f 	isb	sy
 801264c:	f3bf 8f4f 	dsb	sy
 8012650:	60bb      	str	r3, [r7, #8]
}
 8012652:	bf00      	nop
 8012654:	bf00      	nop
 8012656:	e7fd      	b.n	8012654 <vTaskDelete+0xdc>
				portYIELD_WITHIN_API();
 8012658:	4b0e      	ldr	r3, [pc, #56]	@ (8012694 <vTaskDelete+0x11c>)
 801265a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801265e:	601a      	str	r2, [r3, #0]
 8012660:	f3bf 8f4f 	dsb	sy
 8012664:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8012668:	bf00      	nop
 801266a:	3710      	adds	r7, #16
 801266c:	46bd      	mov	sp, r7
 801266e:	bd80      	pop	{r7, pc}
 8012670:	20000b48 	.word	0x20000b48
 8012674:	20000b4c 	.word	0x20000b4c
 8012678:	20000c50 	.word	0x20000c50
 801267c:	20000c64 	.word	0x20000c64
 8012680:	20000c1c 	.word	0x20000c1c
 8012684:	20000c30 	.word	0x20000c30
 8012688:	20000c48 	.word	0x20000c48
 801268c:	20000c54 	.word	0x20000c54
 8012690:	20000c70 	.word	0x20000c70
 8012694:	e000ed04 	.word	0xe000ed04

08012698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8012698:	b580      	push	{r7, lr}
 801269a:	b084      	sub	sp, #16
 801269c:	af00      	add	r7, sp, #0
 801269e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80126a0:	2300      	movs	r3, #0
 80126a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	2b00      	cmp	r3, #0
 80126a8:	d018      	beq.n	80126dc <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80126aa:	4b14      	ldr	r3, [pc, #80]	@ (80126fc <vTaskDelay+0x64>)
 80126ac:	681b      	ldr	r3, [r3, #0]
 80126ae:	2b00      	cmp	r3, #0
 80126b0:	d00b      	beq.n	80126ca <vTaskDelay+0x32>
	__asm volatile
 80126b2:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80126b6:	f383 8811 	msr	BASEPRI, r3
 80126ba:	f3bf 8f6f 	isb	sy
 80126be:	f3bf 8f4f 	dsb	sy
 80126c2:	60bb      	str	r3, [r7, #8]
}
 80126c4:	bf00      	nop
 80126c6:	bf00      	nop
 80126c8:	e7fd      	b.n	80126c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80126ca:	f000 f8cb 	bl	8012864 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80126ce:	2100      	movs	r1, #0
 80126d0:	6878      	ldr	r0, [r7, #4]
 80126d2:	f000 fcf5 	bl	80130c0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80126d6:	f000 f8d3 	bl	8012880 <xTaskResumeAll>
 80126da:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d107      	bne.n	80126f2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80126e2:	4b07      	ldr	r3, [pc, #28]	@ (8012700 <vTaskDelay+0x68>)
 80126e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80126e8:	601a      	str	r2, [r3, #0]
 80126ea:	f3bf 8f4f 	dsb	sy
 80126ee:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80126f2:	bf00      	nop
 80126f4:	3710      	adds	r7, #16
 80126f6:	46bd      	mov	sp, r7
 80126f8:	bd80      	pop	{r7, pc}
 80126fa:	bf00      	nop
 80126fc:	20000c70 	.word	0x20000c70
 8012700:	e000ed04 	.word	0xe000ed04

08012704 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 8012704:	b580      	push	{r7, lr}
 8012706:	b088      	sub	sp, #32
 8012708:	af00      	add	r7, sp, #0
 801270a:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 8012710:	69bb      	ldr	r3, [r7, #24]
 8012712:	2b00      	cmp	r3, #0
 8012714:	d10b      	bne.n	801272e <eTaskGetState+0x2a>
	__asm volatile
 8012716:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801271a:	f383 8811 	msr	BASEPRI, r3
 801271e:	f3bf 8f6f 	isb	sy
 8012722:	f3bf 8f4f 	dsb	sy
 8012726:	60bb      	str	r3, [r7, #8]
}
 8012728:	bf00      	nop
 801272a:	bf00      	nop
 801272c:	e7fd      	b.n	801272a <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 801272e:	4b24      	ldr	r3, [pc, #144]	@ (80127c0 <eTaskGetState+0xbc>)
 8012730:	681b      	ldr	r3, [r3, #0]
 8012732:	69ba      	ldr	r2, [r7, #24]
 8012734:	429a      	cmp	r2, r3
 8012736:	d102      	bne.n	801273e <eTaskGetState+0x3a>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 8012738:	2300      	movs	r3, #0
 801273a:	77fb      	strb	r3, [r7, #31]
 801273c:	e03a      	b.n	80127b4 <eTaskGetState+0xb0>
		}
		else
		{
			taskENTER_CRITICAL();
 801273e:	f000 fe53 	bl	80133e8 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8012742:	69bb      	ldr	r3, [r7, #24]
 8012744:	695b      	ldr	r3, [r3, #20]
 8012746:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8012748:	4b1e      	ldr	r3, [pc, #120]	@ (80127c4 <eTaskGetState+0xc0>)
 801274a:	681b      	ldr	r3, [r3, #0]
 801274c:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 801274e:	4b1e      	ldr	r3, [pc, #120]	@ (80127c8 <eTaskGetState+0xc4>)
 8012750:	681b      	ldr	r3, [r3, #0]
 8012752:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8012754:	f000 fe7a 	bl	801344c <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8012758:	697a      	ldr	r2, [r7, #20]
 801275a:	693b      	ldr	r3, [r7, #16]
 801275c:	429a      	cmp	r2, r3
 801275e:	d003      	beq.n	8012768 <eTaskGetState+0x64>
 8012760:	697a      	ldr	r2, [r7, #20]
 8012762:	68fb      	ldr	r3, [r7, #12]
 8012764:	429a      	cmp	r2, r3
 8012766:	d102      	bne.n	801276e <eTaskGetState+0x6a>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8012768:	2302      	movs	r3, #2
 801276a:	77fb      	strb	r3, [r7, #31]
 801276c:	e022      	b.n	80127b4 <eTaskGetState+0xb0>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 801276e:	697b      	ldr	r3, [r7, #20]
 8012770:	4a16      	ldr	r2, [pc, #88]	@ (80127cc <eTaskGetState+0xc8>)
 8012772:	4293      	cmp	r3, r2
 8012774:	d112      	bne.n	801279c <eTaskGetState+0x98>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8012776:	69bb      	ldr	r3, [r7, #24]
 8012778:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801277a:	2b00      	cmp	r3, #0
 801277c:	d10b      	bne.n	8012796 <eTaskGetState+0x92>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 801277e:	69bb      	ldr	r3, [r7, #24]
 8012780:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8012784:	b2db      	uxtb	r3, r3
 8012786:	2b01      	cmp	r3, #1
 8012788:	d102      	bne.n	8012790 <eTaskGetState+0x8c>
							{
								eReturn = eBlocked;
 801278a:	2302      	movs	r3, #2
 801278c:	77fb      	strb	r3, [r7, #31]
 801278e:	e011      	b.n	80127b4 <eTaskGetState+0xb0>
							}
							else
							{
								eReturn = eSuspended;
 8012790:	2303      	movs	r3, #3
 8012792:	77fb      	strb	r3, [r7, #31]
 8012794:	e00e      	b.n	80127b4 <eTaskGetState+0xb0>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8012796:	2302      	movs	r3, #2
 8012798:	77fb      	strb	r3, [r7, #31]
 801279a:	e00b      	b.n	80127b4 <eTaskGetState+0xb0>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	4a0c      	ldr	r2, [pc, #48]	@ (80127d0 <eTaskGetState+0xcc>)
 80127a0:	4293      	cmp	r3, r2
 80127a2:	d002      	beq.n	80127aa <eTaskGetState+0xa6>
 80127a4:	697b      	ldr	r3, [r7, #20]
 80127a6:	2b00      	cmp	r3, #0
 80127a8:	d102      	bne.n	80127b0 <eTaskGetState+0xac>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 80127aa:	2304      	movs	r3, #4
 80127ac:	77fb      	strb	r3, [r7, #31]
 80127ae:	e001      	b.n	80127b4 <eTaskGetState+0xb0>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 80127b0:	2301      	movs	r3, #1
 80127b2:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 80127b4:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80127b6:	4618      	mov	r0, r3
 80127b8:	3720      	adds	r7, #32
 80127ba:	46bd      	mov	sp, r7
 80127bc:	bd80      	pop	{r7, pc}
 80127be:	bf00      	nop
 80127c0:	20000b48 	.word	0x20000b48
 80127c4:	20000c00 	.word	0x20000c00
 80127c8:	20000c04 	.word	0x20000c04
 80127cc:	20000c34 	.word	0x20000c34
 80127d0:	20000c1c 	.word	0x20000c1c

080127d4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80127d4:	b580      	push	{r7, lr}
 80127d6:	b086      	sub	sp, #24
 80127d8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80127da:	4b1c      	ldr	r3, [pc, #112]	@ (801284c <vTaskStartScheduler+0x78>)
 80127dc:	9301      	str	r3, [sp, #4]
 80127de:	2300      	movs	r3, #0
 80127e0:	9300      	str	r3, [sp, #0]
 80127e2:	2300      	movs	r3, #0
 80127e4:	2280      	movs	r2, #128	@ 0x80
 80127e6:	491a      	ldr	r1, [pc, #104]	@ (8012850 <vTaskStartScheduler+0x7c>)
 80127e8:	481a      	ldr	r0, [pc, #104]	@ (8012854 <vTaskStartScheduler+0x80>)
 80127ea:	f7ff fd91 	bl	8012310 <xTaskCreate>
 80127ee:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	2b01      	cmp	r3, #1
 80127f4:	d116      	bne.n	8012824 <vTaskStartScheduler+0x50>
	__asm volatile
 80127f6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80127fa:	f383 8811 	msr	BASEPRI, r3
 80127fe:	f3bf 8f6f 	isb	sy
 8012802:	f3bf 8f4f 	dsb	sy
 8012806:	60bb      	str	r3, [r7, #8]
}
 8012808:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801280a:	4b13      	ldr	r3, [pc, #76]	@ (8012858 <vTaskStartScheduler+0x84>)
 801280c:	f04f 32ff 	mov.w	r2, #4294967295
 8012810:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8012812:	4b12      	ldr	r3, [pc, #72]	@ (801285c <vTaskStartScheduler+0x88>)
 8012814:	2201      	movs	r2, #1
 8012816:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8012818:	4b11      	ldr	r3, [pc, #68]	@ (8012860 <vTaskStartScheduler+0x8c>)
 801281a:	2200      	movs	r2, #0
 801281c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801281e:	f000 fd3f 	bl	80132a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8012822:	e00f      	b.n	8012844 <vTaskStartScheduler+0x70>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	f1b3 3fff 	cmp.w	r3, #4294967295
 801282a:	d10b      	bne.n	8012844 <vTaskStartScheduler+0x70>
	__asm volatile
 801282c:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012830:	f383 8811 	msr	BASEPRI, r3
 8012834:	f3bf 8f6f 	isb	sy
 8012838:	f3bf 8f4f 	dsb	sy
 801283c:	607b      	str	r3, [r7, #4]
}
 801283e:	bf00      	nop
 8012840:	bf00      	nop
 8012842:	e7fd      	b.n	8012840 <vTaskStartScheduler+0x6c>
}
 8012844:	bf00      	nop
 8012846:	3710      	adds	r7, #16
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	20000c6c 	.word	0x20000c6c
 8012850:	0801b23c 	.word	0x0801b23c
 8012854:	08012e09 	.word	0x08012e09
 8012858:	20000c68 	.word	0x20000c68
 801285c:	20000c54 	.word	0x20000c54
 8012860:	20000c4c 	.word	0x20000c4c

08012864 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8012864:	b480      	push	{r7}
 8012866:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8012868:	4b04      	ldr	r3, [pc, #16]	@ (801287c <vTaskSuspendAll+0x18>)
 801286a:	681b      	ldr	r3, [r3, #0]
 801286c:	3301      	adds	r3, #1
 801286e:	4a03      	ldr	r2, [pc, #12]	@ (801287c <vTaskSuspendAll+0x18>)
 8012870:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8012872:	bf00      	nop
 8012874:	46bd      	mov	sp, r7
 8012876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801287a:	4770      	bx	lr
 801287c:	20000c70 	.word	0x20000c70

08012880 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8012880:	b580      	push	{r7, lr}
 8012882:	b084      	sub	sp, #16
 8012884:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8012886:	2300      	movs	r3, #0
 8012888:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801288a:	2300      	movs	r3, #0
 801288c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801288e:	4b42      	ldr	r3, [pc, #264]	@ (8012998 <xTaskResumeAll+0x118>)
 8012890:	681b      	ldr	r3, [r3, #0]
 8012892:	2b00      	cmp	r3, #0
 8012894:	d10b      	bne.n	80128ae <xTaskResumeAll+0x2e>
	__asm volatile
 8012896:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801289a:	f383 8811 	msr	BASEPRI, r3
 801289e:	f3bf 8f6f 	isb	sy
 80128a2:	f3bf 8f4f 	dsb	sy
 80128a6:	603b      	str	r3, [r7, #0]
}
 80128a8:	bf00      	nop
 80128aa:	bf00      	nop
 80128ac:	e7fd      	b.n	80128aa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80128ae:	f000 fd9b 	bl	80133e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80128b2:	4b39      	ldr	r3, [pc, #228]	@ (8012998 <xTaskResumeAll+0x118>)
 80128b4:	681b      	ldr	r3, [r3, #0]
 80128b6:	3b01      	subs	r3, #1
 80128b8:	4a37      	ldr	r2, [pc, #220]	@ (8012998 <xTaskResumeAll+0x118>)
 80128ba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80128bc:	4b36      	ldr	r3, [pc, #216]	@ (8012998 <xTaskResumeAll+0x118>)
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	2b00      	cmp	r3, #0
 80128c2:	d161      	bne.n	8012988 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80128c4:	4b35      	ldr	r3, [pc, #212]	@ (801299c <xTaskResumeAll+0x11c>)
 80128c6:	681b      	ldr	r3, [r3, #0]
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	d05d      	beq.n	8012988 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80128cc:	e02e      	b.n	801292c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80128ce:	4b34      	ldr	r3, [pc, #208]	@ (80129a0 <xTaskResumeAll+0x120>)
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	68db      	ldr	r3, [r3, #12]
 80128d4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80128d6:	68fb      	ldr	r3, [r7, #12]
 80128d8:	3318      	adds	r3, #24
 80128da:	4618      	mov	r0, r3
 80128dc:	f7ff f81a 	bl	8011914 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80128e0:	68fb      	ldr	r3, [r7, #12]
 80128e2:	3304      	adds	r3, #4
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff f815 	bl	8011914 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80128ee:	2201      	movs	r2, #1
 80128f0:	409a      	lsls	r2, r3
 80128f2:	4b2c      	ldr	r3, [pc, #176]	@ (80129a4 <xTaskResumeAll+0x124>)
 80128f4:	681b      	ldr	r3, [r3, #0]
 80128f6:	4313      	orrs	r3, r2
 80128f8:	4a2a      	ldr	r2, [pc, #168]	@ (80129a4 <xTaskResumeAll+0x124>)
 80128fa:	6013      	str	r3, [r2, #0]
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012900:	4613      	mov	r3, r2
 8012902:	009b      	lsls	r3, r3, #2
 8012904:	4413      	add	r3, r2
 8012906:	009b      	lsls	r3, r3, #2
 8012908:	4a27      	ldr	r2, [pc, #156]	@ (80129a8 <xTaskResumeAll+0x128>)
 801290a:	441a      	add	r2, r3
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	3304      	adds	r3, #4
 8012910:	4619      	mov	r1, r3
 8012912:	4610      	mov	r0, r2
 8012914:	f7fe ffa1 	bl	801185a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012918:	68fb      	ldr	r3, [r7, #12]
 801291a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801291c:	4b23      	ldr	r3, [pc, #140]	@ (80129ac <xTaskResumeAll+0x12c>)
 801291e:	681b      	ldr	r3, [r3, #0]
 8012920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012922:	429a      	cmp	r2, r3
 8012924:	d302      	bcc.n	801292c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8012926:	4b22      	ldr	r3, [pc, #136]	@ (80129b0 <xTaskResumeAll+0x130>)
 8012928:	2201      	movs	r2, #1
 801292a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801292c:	4b1c      	ldr	r3, [pc, #112]	@ (80129a0 <xTaskResumeAll+0x120>)
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	2b00      	cmp	r3, #0
 8012932:	d1cc      	bne.n	80128ce <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d001      	beq.n	801293e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801293a:	f000 fafb 	bl	8012f34 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801293e:	4b1d      	ldr	r3, [pc, #116]	@ (80129b4 <xTaskResumeAll+0x134>)
 8012940:	681b      	ldr	r3, [r3, #0]
 8012942:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	2b00      	cmp	r3, #0
 8012948:	d010      	beq.n	801296c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801294a:	f000 f837 	bl	80129bc <xTaskIncrementTick>
 801294e:	4603      	mov	r3, r0
 8012950:	2b00      	cmp	r3, #0
 8012952:	d002      	beq.n	801295a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8012954:	4b16      	ldr	r3, [pc, #88]	@ (80129b0 <xTaskResumeAll+0x130>)
 8012956:	2201      	movs	r2, #1
 8012958:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801295a:	687b      	ldr	r3, [r7, #4]
 801295c:	3b01      	subs	r3, #1
 801295e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8012960:	687b      	ldr	r3, [r7, #4]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d1f1      	bne.n	801294a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8012966:	4b13      	ldr	r3, [pc, #76]	@ (80129b4 <xTaskResumeAll+0x134>)
 8012968:	2200      	movs	r2, #0
 801296a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801296c:	4b10      	ldr	r3, [pc, #64]	@ (80129b0 <xTaskResumeAll+0x130>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d009      	beq.n	8012988 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8012974:	2301      	movs	r3, #1
 8012976:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8012978:	4b0f      	ldr	r3, [pc, #60]	@ (80129b8 <xTaskResumeAll+0x138>)
 801297a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801297e:	601a      	str	r2, [r3, #0]
 8012980:	f3bf 8f4f 	dsb	sy
 8012984:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8012988:	f000 fd60 	bl	801344c <vPortExitCritical>

	return xAlreadyYielded;
 801298c:	68bb      	ldr	r3, [r7, #8]
}
 801298e:	4618      	mov	r0, r3
 8012990:	3710      	adds	r7, #16
 8012992:	46bd      	mov	sp, r7
 8012994:	bd80      	pop	{r7, pc}
 8012996:	bf00      	nop
 8012998:	20000c70 	.word	0x20000c70
 801299c:	20000c48 	.word	0x20000c48
 80129a0:	20000c08 	.word	0x20000c08
 80129a4:	20000c50 	.word	0x20000c50
 80129a8:	20000b4c 	.word	0x20000b4c
 80129ac:	20000b48 	.word	0x20000b48
 80129b0:	20000c5c 	.word	0x20000c5c
 80129b4:	20000c58 	.word	0x20000c58
 80129b8:	e000ed04 	.word	0xe000ed04

080129bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80129bc:	b580      	push	{r7, lr}
 80129be:	b086      	sub	sp, #24
 80129c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80129c2:	2300      	movs	r3, #0
 80129c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80129c6:	4b4f      	ldr	r3, [pc, #316]	@ (8012b04 <xTaskIncrementTick+0x148>)
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	2b00      	cmp	r3, #0
 80129cc:	f040 808f 	bne.w	8012aee <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80129d0:	4b4d      	ldr	r3, [pc, #308]	@ (8012b08 <xTaskIncrementTick+0x14c>)
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	3301      	adds	r3, #1
 80129d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80129d8:	4a4b      	ldr	r2, [pc, #300]	@ (8012b08 <xTaskIncrementTick+0x14c>)
 80129da:	693b      	ldr	r3, [r7, #16]
 80129dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80129de:	693b      	ldr	r3, [r7, #16]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d121      	bne.n	8012a28 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80129e4:	4b49      	ldr	r3, [pc, #292]	@ (8012b0c <xTaskIncrementTick+0x150>)
 80129e6:	681b      	ldr	r3, [r3, #0]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d00b      	beq.n	8012a06 <xTaskIncrementTick+0x4a>
	__asm volatile
 80129ee:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80129f2:	f383 8811 	msr	BASEPRI, r3
 80129f6:	f3bf 8f6f 	isb	sy
 80129fa:	f3bf 8f4f 	dsb	sy
 80129fe:	603b      	str	r3, [r7, #0]
}
 8012a00:	bf00      	nop
 8012a02:	bf00      	nop
 8012a04:	e7fd      	b.n	8012a02 <xTaskIncrementTick+0x46>
 8012a06:	4b41      	ldr	r3, [pc, #260]	@ (8012b0c <xTaskIncrementTick+0x150>)
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	60fb      	str	r3, [r7, #12]
 8012a0c:	4b40      	ldr	r3, [pc, #256]	@ (8012b10 <xTaskIncrementTick+0x154>)
 8012a0e:	681b      	ldr	r3, [r3, #0]
 8012a10:	4a3e      	ldr	r2, [pc, #248]	@ (8012b0c <xTaskIncrementTick+0x150>)
 8012a12:	6013      	str	r3, [r2, #0]
 8012a14:	4a3e      	ldr	r2, [pc, #248]	@ (8012b10 <xTaskIncrementTick+0x154>)
 8012a16:	68fb      	ldr	r3, [r7, #12]
 8012a18:	6013      	str	r3, [r2, #0]
 8012a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8012b14 <xTaskIncrementTick+0x158>)
 8012a1c:	681b      	ldr	r3, [r3, #0]
 8012a1e:	3301      	adds	r3, #1
 8012a20:	4a3c      	ldr	r2, [pc, #240]	@ (8012b14 <xTaskIncrementTick+0x158>)
 8012a22:	6013      	str	r3, [r2, #0]
 8012a24:	f000 fa86 	bl	8012f34 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8012a28:	4b3b      	ldr	r3, [pc, #236]	@ (8012b18 <xTaskIncrementTick+0x15c>)
 8012a2a:	681b      	ldr	r3, [r3, #0]
 8012a2c:	693a      	ldr	r2, [r7, #16]
 8012a2e:	429a      	cmp	r2, r3
 8012a30:	d348      	bcc.n	8012ac4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012a32:	4b36      	ldr	r3, [pc, #216]	@ (8012b0c <xTaskIncrementTick+0x150>)
 8012a34:	681b      	ldr	r3, [r3, #0]
 8012a36:	681b      	ldr	r3, [r3, #0]
 8012a38:	2b00      	cmp	r3, #0
 8012a3a:	d104      	bne.n	8012a46 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8012a3c:	4b36      	ldr	r3, [pc, #216]	@ (8012b18 <xTaskIncrementTick+0x15c>)
 8012a3e:	f04f 32ff 	mov.w	r2, #4294967295
 8012a42:	601a      	str	r2, [r3, #0]
					break;
 8012a44:	e03e      	b.n	8012ac4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012a46:	4b31      	ldr	r3, [pc, #196]	@ (8012b0c <xTaskIncrementTick+0x150>)
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	68db      	ldr	r3, [r3, #12]
 8012a4c:	68db      	ldr	r3, [r3, #12]
 8012a4e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8012a50:	68bb      	ldr	r3, [r7, #8]
 8012a52:	685b      	ldr	r3, [r3, #4]
 8012a54:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8012a56:	693a      	ldr	r2, [r7, #16]
 8012a58:	687b      	ldr	r3, [r7, #4]
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d203      	bcs.n	8012a66 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8012a5e:	4a2e      	ldr	r2, [pc, #184]	@ (8012b18 <xTaskIncrementTick+0x15c>)
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8012a64:	e02e      	b.n	8012ac4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012a66:	68bb      	ldr	r3, [r7, #8]
 8012a68:	3304      	adds	r3, #4
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	f7fe ff52 	bl	8011914 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a74:	2b00      	cmp	r3, #0
 8012a76:	d004      	beq.n	8012a82 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8012a78:	68bb      	ldr	r3, [r7, #8]
 8012a7a:	3318      	adds	r3, #24
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7fe ff49 	bl	8011914 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012a86:	2201      	movs	r2, #1
 8012a88:	409a      	lsls	r2, r3
 8012a8a:	4b24      	ldr	r3, [pc, #144]	@ (8012b1c <xTaskIncrementTick+0x160>)
 8012a8c:	681b      	ldr	r3, [r3, #0]
 8012a8e:	4313      	orrs	r3, r2
 8012a90:	4a22      	ldr	r2, [pc, #136]	@ (8012b1c <xTaskIncrementTick+0x160>)
 8012a92:	6013      	str	r3, [r2, #0]
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012a98:	4613      	mov	r3, r2
 8012a9a:	009b      	lsls	r3, r3, #2
 8012a9c:	4413      	add	r3, r2
 8012a9e:	009b      	lsls	r3, r3, #2
 8012aa0:	4a1f      	ldr	r2, [pc, #124]	@ (8012b20 <xTaskIncrementTick+0x164>)
 8012aa2:	441a      	add	r2, r3
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	3304      	adds	r3, #4
 8012aa8:	4619      	mov	r1, r3
 8012aaa:	4610      	mov	r0, r2
 8012aac:	f7fe fed5 	bl	801185a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8012ab0:	68bb      	ldr	r3, [r7, #8]
 8012ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8012b24 <xTaskIncrementTick+0x168>)
 8012ab6:	681b      	ldr	r3, [r3, #0]
 8012ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012aba:	429a      	cmp	r2, r3
 8012abc:	d3b9      	bcc.n	8012a32 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8012abe:	2301      	movs	r3, #1
 8012ac0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012ac2:	e7b6      	b.n	8012a32 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8012ac4:	4b17      	ldr	r3, [pc, #92]	@ (8012b24 <xTaskIncrementTick+0x168>)
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012aca:	4915      	ldr	r1, [pc, #84]	@ (8012b20 <xTaskIncrementTick+0x164>)
 8012acc:	4613      	mov	r3, r2
 8012ace:	009b      	lsls	r3, r3, #2
 8012ad0:	4413      	add	r3, r2
 8012ad2:	009b      	lsls	r3, r3, #2
 8012ad4:	440b      	add	r3, r1
 8012ad6:	681b      	ldr	r3, [r3, #0]
 8012ad8:	2b01      	cmp	r3, #1
 8012ada:	d901      	bls.n	8012ae0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8012adc:	2301      	movs	r3, #1
 8012ade:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8012ae0:	4b11      	ldr	r3, [pc, #68]	@ (8012b28 <xTaskIncrementTick+0x16c>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d007      	beq.n	8012af8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8012ae8:	2301      	movs	r3, #1
 8012aea:	617b      	str	r3, [r7, #20]
 8012aec:	e004      	b.n	8012af8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8012aee:	4b0f      	ldr	r3, [pc, #60]	@ (8012b2c <xTaskIncrementTick+0x170>)
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	3301      	adds	r3, #1
 8012af4:	4a0d      	ldr	r2, [pc, #52]	@ (8012b2c <xTaskIncrementTick+0x170>)
 8012af6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8012af8:	697b      	ldr	r3, [r7, #20]
}
 8012afa:	4618      	mov	r0, r3
 8012afc:	3718      	adds	r7, #24
 8012afe:	46bd      	mov	sp, r7
 8012b00:	bd80      	pop	{r7, pc}
 8012b02:	bf00      	nop
 8012b04:	20000c70 	.word	0x20000c70
 8012b08:	20000c4c 	.word	0x20000c4c
 8012b0c:	20000c00 	.word	0x20000c00
 8012b10:	20000c04 	.word	0x20000c04
 8012b14:	20000c60 	.word	0x20000c60
 8012b18:	20000c68 	.word	0x20000c68
 8012b1c:	20000c50 	.word	0x20000c50
 8012b20:	20000b4c 	.word	0x20000b4c
 8012b24:	20000b48 	.word	0x20000b48
 8012b28:	20000c5c 	.word	0x20000c5c
 8012b2c:	20000c58 	.word	0x20000c58

08012b30 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8012b30:	b480      	push	{r7}
 8012b32:	b087      	sub	sp, #28
 8012b34:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8012b36:	4b27      	ldr	r3, [pc, #156]	@ (8012bd4 <vTaskSwitchContext+0xa4>)
 8012b38:	681b      	ldr	r3, [r3, #0]
 8012b3a:	2b00      	cmp	r3, #0
 8012b3c:	d003      	beq.n	8012b46 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8012b3e:	4b26      	ldr	r3, [pc, #152]	@ (8012bd8 <vTaskSwitchContext+0xa8>)
 8012b40:	2201      	movs	r2, #1
 8012b42:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8012b44:	e040      	b.n	8012bc8 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8012b46:	4b24      	ldr	r3, [pc, #144]	@ (8012bd8 <vTaskSwitchContext+0xa8>)
 8012b48:	2200      	movs	r2, #0
 8012b4a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012b4c:	4b23      	ldr	r3, [pc, #140]	@ (8012bdc <vTaskSwitchContext+0xac>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8012b52:	68fb      	ldr	r3, [r7, #12]
 8012b54:	fab3 f383 	clz	r3, r3
 8012b58:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8012b5a:	7afb      	ldrb	r3, [r7, #11]
 8012b5c:	f1c3 031f 	rsb	r3, r3, #31
 8012b60:	617b      	str	r3, [r7, #20]
 8012b62:	491f      	ldr	r1, [pc, #124]	@ (8012be0 <vTaskSwitchContext+0xb0>)
 8012b64:	697a      	ldr	r2, [r7, #20]
 8012b66:	4613      	mov	r3, r2
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	4413      	add	r3, r2
 8012b6c:	009b      	lsls	r3, r3, #2
 8012b6e:	440b      	add	r3, r1
 8012b70:	681b      	ldr	r3, [r3, #0]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d10b      	bne.n	8012b8e <vTaskSwitchContext+0x5e>
	__asm volatile
 8012b76:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012b7a:	f383 8811 	msr	BASEPRI, r3
 8012b7e:	f3bf 8f6f 	isb	sy
 8012b82:	f3bf 8f4f 	dsb	sy
 8012b86:	607b      	str	r3, [r7, #4]
}
 8012b88:	bf00      	nop
 8012b8a:	bf00      	nop
 8012b8c:	e7fd      	b.n	8012b8a <vTaskSwitchContext+0x5a>
 8012b8e:	697a      	ldr	r2, [r7, #20]
 8012b90:	4613      	mov	r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	4413      	add	r3, r2
 8012b96:	009b      	lsls	r3, r3, #2
 8012b98:	4a11      	ldr	r2, [pc, #68]	@ (8012be0 <vTaskSwitchContext+0xb0>)
 8012b9a:	4413      	add	r3, r2
 8012b9c:	613b      	str	r3, [r7, #16]
 8012b9e:	693b      	ldr	r3, [r7, #16]
 8012ba0:	685b      	ldr	r3, [r3, #4]
 8012ba2:	685a      	ldr	r2, [r3, #4]
 8012ba4:	693b      	ldr	r3, [r7, #16]
 8012ba6:	605a      	str	r2, [r3, #4]
 8012ba8:	693b      	ldr	r3, [r7, #16]
 8012baa:	685a      	ldr	r2, [r3, #4]
 8012bac:	693b      	ldr	r3, [r7, #16]
 8012bae:	3308      	adds	r3, #8
 8012bb0:	429a      	cmp	r2, r3
 8012bb2:	d104      	bne.n	8012bbe <vTaskSwitchContext+0x8e>
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	685b      	ldr	r3, [r3, #4]
 8012bb8:	685a      	ldr	r2, [r3, #4]
 8012bba:	693b      	ldr	r3, [r7, #16]
 8012bbc:	605a      	str	r2, [r3, #4]
 8012bbe:	693b      	ldr	r3, [r7, #16]
 8012bc0:	685b      	ldr	r3, [r3, #4]
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	4a07      	ldr	r2, [pc, #28]	@ (8012be4 <vTaskSwitchContext+0xb4>)
 8012bc6:	6013      	str	r3, [r2, #0]
}
 8012bc8:	bf00      	nop
 8012bca:	371c      	adds	r7, #28
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr
 8012bd4:	20000c70 	.word	0x20000c70
 8012bd8:	20000c5c 	.word	0x20000c5c
 8012bdc:	20000c50 	.word	0x20000c50
 8012be0:	20000b4c 	.word	0x20000b4c
 8012be4:	20000b48 	.word	0x20000b48

08012be8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8012be8:	b580      	push	{r7, lr}
 8012bea:	b084      	sub	sp, #16
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
 8012bf0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8012bf2:	687b      	ldr	r3, [r7, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d10b      	bne.n	8012c10 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8012bf8:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012bfc:	f383 8811 	msr	BASEPRI, r3
 8012c00:	f3bf 8f6f 	isb	sy
 8012c04:	f3bf 8f4f 	dsb	sy
 8012c08:	60fb      	str	r3, [r7, #12]
}
 8012c0a:	bf00      	nop
 8012c0c:	bf00      	nop
 8012c0e:	e7fd      	b.n	8012c0c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8012c10:	4b07      	ldr	r3, [pc, #28]	@ (8012c30 <vTaskPlaceOnEventList+0x48>)
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	3318      	adds	r3, #24
 8012c16:	4619      	mov	r1, r3
 8012c18:	6878      	ldr	r0, [r7, #4]
 8012c1a:	f7fe fe42 	bl	80118a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8012c1e:	2101      	movs	r1, #1
 8012c20:	6838      	ldr	r0, [r7, #0]
 8012c22:	f000 fa4d 	bl	80130c0 <prvAddCurrentTaskToDelayedList>
}
 8012c26:	bf00      	nop
 8012c28:	3710      	adds	r7, #16
 8012c2a:	46bd      	mov	sp, r7
 8012c2c:	bd80      	pop	{r7, pc}
 8012c2e:	bf00      	nop
 8012c30:	20000b48 	.word	0x20000b48

08012c34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8012c34:	b580      	push	{r7, lr}
 8012c36:	b086      	sub	sp, #24
 8012c38:	af00      	add	r7, sp, #0
 8012c3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012c3c:	687b      	ldr	r3, [r7, #4]
 8012c3e:	68db      	ldr	r3, [r3, #12]
 8012c40:	68db      	ldr	r3, [r3, #12]
 8012c42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8012c44:	693b      	ldr	r3, [r7, #16]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d10b      	bne.n	8012c62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8012c4a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012c4e:	f383 8811 	msr	BASEPRI, r3
 8012c52:	f3bf 8f6f 	isb	sy
 8012c56:	f3bf 8f4f 	dsb	sy
 8012c5a:	60fb      	str	r3, [r7, #12]
}
 8012c5c:	bf00      	nop
 8012c5e:	bf00      	nop
 8012c60:	e7fd      	b.n	8012c5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	3318      	adds	r3, #24
 8012c66:	4618      	mov	r0, r3
 8012c68:	f7fe fe54 	bl	8011914 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012c6c:	4b1d      	ldr	r3, [pc, #116]	@ (8012ce4 <xTaskRemoveFromEventList+0xb0>)
 8012c6e:	681b      	ldr	r3, [r3, #0]
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d11c      	bne.n	8012cae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8012c74:	693b      	ldr	r3, [r7, #16]
 8012c76:	3304      	adds	r3, #4
 8012c78:	4618      	mov	r0, r3
 8012c7a:	f7fe fe4b 	bl	8011914 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8012c7e:	693b      	ldr	r3, [r7, #16]
 8012c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012c82:	2201      	movs	r2, #1
 8012c84:	409a      	lsls	r2, r3
 8012c86:	4b18      	ldr	r3, [pc, #96]	@ (8012ce8 <xTaskRemoveFromEventList+0xb4>)
 8012c88:	681b      	ldr	r3, [r3, #0]
 8012c8a:	4313      	orrs	r3, r2
 8012c8c:	4a16      	ldr	r2, [pc, #88]	@ (8012ce8 <xTaskRemoveFromEventList+0xb4>)
 8012c8e:	6013      	str	r3, [r2, #0]
 8012c90:	693b      	ldr	r3, [r7, #16]
 8012c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012c94:	4613      	mov	r3, r2
 8012c96:	009b      	lsls	r3, r3, #2
 8012c98:	4413      	add	r3, r2
 8012c9a:	009b      	lsls	r3, r3, #2
 8012c9c:	4a13      	ldr	r2, [pc, #76]	@ (8012cec <xTaskRemoveFromEventList+0xb8>)
 8012c9e:	441a      	add	r2, r3
 8012ca0:	693b      	ldr	r3, [r7, #16]
 8012ca2:	3304      	adds	r3, #4
 8012ca4:	4619      	mov	r1, r3
 8012ca6:	4610      	mov	r0, r2
 8012ca8:	f7fe fdd7 	bl	801185a <vListInsertEnd>
 8012cac:	e005      	b.n	8012cba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8012cae:	693b      	ldr	r3, [r7, #16]
 8012cb0:	3318      	adds	r3, #24
 8012cb2:	4619      	mov	r1, r3
 8012cb4:	480e      	ldr	r0, [pc, #56]	@ (8012cf0 <xTaskRemoveFromEventList+0xbc>)
 8012cb6:	f7fe fdd0 	bl	801185a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8012cba:	693b      	ldr	r3, [r7, #16]
 8012cbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012cbe:	4b0d      	ldr	r3, [pc, #52]	@ (8012cf4 <xTaskRemoveFromEventList+0xc0>)
 8012cc0:	681b      	ldr	r3, [r3, #0]
 8012cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012cc4:	429a      	cmp	r2, r3
 8012cc6:	d905      	bls.n	8012cd4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8012cc8:	2301      	movs	r3, #1
 8012cca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8012ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8012cf8 <xTaskRemoveFromEventList+0xc4>)
 8012cce:	2201      	movs	r2, #1
 8012cd0:	601a      	str	r2, [r3, #0]
 8012cd2:	e001      	b.n	8012cd8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8012cd4:	2300      	movs	r3, #0
 8012cd6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8012cd8:	697b      	ldr	r3, [r7, #20]
}
 8012cda:	4618      	mov	r0, r3
 8012cdc:	3718      	adds	r7, #24
 8012cde:	46bd      	mov	sp, r7
 8012ce0:	bd80      	pop	{r7, pc}
 8012ce2:	bf00      	nop
 8012ce4:	20000c70 	.word	0x20000c70
 8012ce8:	20000c50 	.word	0x20000c50
 8012cec:	20000b4c 	.word	0x20000b4c
 8012cf0:	20000c08 	.word	0x20000c08
 8012cf4:	20000b48 	.word	0x20000b48
 8012cf8:	20000c5c 	.word	0x20000c5c

08012cfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8012cfc:	b480      	push	{r7}
 8012cfe:	b083      	sub	sp, #12
 8012d00:	af00      	add	r7, sp, #0
 8012d02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8012d04:	4b06      	ldr	r3, [pc, #24]	@ (8012d20 <vTaskInternalSetTimeOutState+0x24>)
 8012d06:	681a      	ldr	r2, [r3, #0]
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8012d0c:	4b05      	ldr	r3, [pc, #20]	@ (8012d24 <vTaskInternalSetTimeOutState+0x28>)
 8012d0e:	681a      	ldr	r2, [r3, #0]
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	605a      	str	r2, [r3, #4]
}
 8012d14:	bf00      	nop
 8012d16:	370c      	adds	r7, #12
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d1e:	4770      	bx	lr
 8012d20:	20000c60 	.word	0x20000c60
 8012d24:	20000c4c 	.word	0x20000c4c

08012d28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8012d28:	b580      	push	{r7, lr}
 8012d2a:	b088      	sub	sp, #32
 8012d2c:	af00      	add	r7, sp, #0
 8012d2e:	6078      	str	r0, [r7, #4]
 8012d30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8012d32:	687b      	ldr	r3, [r7, #4]
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d10b      	bne.n	8012d50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8012d38:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012d3c:	f383 8811 	msr	BASEPRI, r3
 8012d40:	f3bf 8f6f 	isb	sy
 8012d44:	f3bf 8f4f 	dsb	sy
 8012d48:	613b      	str	r3, [r7, #16]
}
 8012d4a:	bf00      	nop
 8012d4c:	bf00      	nop
 8012d4e:	e7fd      	b.n	8012d4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8012d50:	683b      	ldr	r3, [r7, #0]
 8012d52:	2b00      	cmp	r3, #0
 8012d54:	d10b      	bne.n	8012d6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8012d56:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012d5a:	f383 8811 	msr	BASEPRI, r3
 8012d5e:	f3bf 8f6f 	isb	sy
 8012d62:	f3bf 8f4f 	dsb	sy
 8012d66:	60fb      	str	r3, [r7, #12]
}
 8012d68:	bf00      	nop
 8012d6a:	bf00      	nop
 8012d6c:	e7fd      	b.n	8012d6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8012d6e:	f000 fb3b 	bl	80133e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8012d72:	4b1d      	ldr	r3, [pc, #116]	@ (8012de8 <xTaskCheckForTimeOut+0xc0>)
 8012d74:	681b      	ldr	r3, [r3, #0]
 8012d76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	69ba      	ldr	r2, [r7, #24]
 8012d7e:	1ad3      	subs	r3, r2, r3
 8012d80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8012d82:	683b      	ldr	r3, [r7, #0]
 8012d84:	681b      	ldr	r3, [r3, #0]
 8012d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d8a:	d102      	bne.n	8012d92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8012d8c:	2300      	movs	r3, #0
 8012d8e:	61fb      	str	r3, [r7, #28]
 8012d90:	e023      	b.n	8012dda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8012d92:	687b      	ldr	r3, [r7, #4]
 8012d94:	681a      	ldr	r2, [r3, #0]
 8012d96:	4b15      	ldr	r3, [pc, #84]	@ (8012dec <xTaskCheckForTimeOut+0xc4>)
 8012d98:	681b      	ldr	r3, [r3, #0]
 8012d9a:	429a      	cmp	r2, r3
 8012d9c:	d007      	beq.n	8012dae <xTaskCheckForTimeOut+0x86>
 8012d9e:	687b      	ldr	r3, [r7, #4]
 8012da0:	685b      	ldr	r3, [r3, #4]
 8012da2:	69ba      	ldr	r2, [r7, #24]
 8012da4:	429a      	cmp	r2, r3
 8012da6:	d302      	bcc.n	8012dae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8012da8:	2301      	movs	r3, #1
 8012daa:	61fb      	str	r3, [r7, #28]
 8012dac:	e015      	b.n	8012dda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8012dae:	683b      	ldr	r3, [r7, #0]
 8012db0:	681b      	ldr	r3, [r3, #0]
 8012db2:	697a      	ldr	r2, [r7, #20]
 8012db4:	429a      	cmp	r2, r3
 8012db6:	d20b      	bcs.n	8012dd0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8012db8:	683b      	ldr	r3, [r7, #0]
 8012dba:	681a      	ldr	r2, [r3, #0]
 8012dbc:	697b      	ldr	r3, [r7, #20]
 8012dbe:	1ad2      	subs	r2, r2, r3
 8012dc0:	683b      	ldr	r3, [r7, #0]
 8012dc2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8012dc4:	6878      	ldr	r0, [r7, #4]
 8012dc6:	f7ff ff99 	bl	8012cfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8012dca:	2300      	movs	r3, #0
 8012dcc:	61fb      	str	r3, [r7, #28]
 8012dce:	e004      	b.n	8012dda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8012dd0:	683b      	ldr	r3, [r7, #0]
 8012dd2:	2200      	movs	r2, #0
 8012dd4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8012dd6:	2301      	movs	r3, #1
 8012dd8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8012dda:	f000 fb37 	bl	801344c <vPortExitCritical>

	return xReturn;
 8012dde:	69fb      	ldr	r3, [r7, #28]
}
 8012de0:	4618      	mov	r0, r3
 8012de2:	3720      	adds	r7, #32
 8012de4:	46bd      	mov	sp, r7
 8012de6:	bd80      	pop	{r7, pc}
 8012de8:	20000c4c 	.word	0x20000c4c
 8012dec:	20000c60 	.word	0x20000c60

08012df0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8012df0:	b480      	push	{r7}
 8012df2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8012df4:	4b03      	ldr	r3, [pc, #12]	@ (8012e04 <vTaskMissedYield+0x14>)
 8012df6:	2201      	movs	r2, #1
 8012df8:	601a      	str	r2, [r3, #0]
}
 8012dfa:	bf00      	nop
 8012dfc:	46bd      	mov	sp, r7
 8012dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e02:	4770      	bx	lr
 8012e04:	20000c5c 	.word	0x20000c5c

08012e08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8012e08:	b580      	push	{r7, lr}
 8012e0a:	b082      	sub	sp, #8
 8012e0c:	af00      	add	r7, sp, #0
 8012e0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8012e10:	f000 f852 	bl	8012eb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8012e14:	4b06      	ldr	r3, [pc, #24]	@ (8012e30 <prvIdleTask+0x28>)
 8012e16:	681b      	ldr	r3, [r3, #0]
 8012e18:	2b01      	cmp	r3, #1
 8012e1a:	d9f9      	bls.n	8012e10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8012e1c:	4b05      	ldr	r3, [pc, #20]	@ (8012e34 <prvIdleTask+0x2c>)
 8012e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8012e22:	601a      	str	r2, [r3, #0]
 8012e24:	f3bf 8f4f 	dsb	sy
 8012e28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8012e2c:	e7f0      	b.n	8012e10 <prvIdleTask+0x8>
 8012e2e:	bf00      	nop
 8012e30:	20000b4c 	.word	0x20000b4c
 8012e34:	e000ed04 	.word	0xe000ed04

08012e38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8012e38:	b580      	push	{r7, lr}
 8012e3a:	b082      	sub	sp, #8
 8012e3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e3e:	2300      	movs	r3, #0
 8012e40:	607b      	str	r3, [r7, #4]
 8012e42:	e00c      	b.n	8012e5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8012e44:	687a      	ldr	r2, [r7, #4]
 8012e46:	4613      	mov	r3, r2
 8012e48:	009b      	lsls	r3, r3, #2
 8012e4a:	4413      	add	r3, r2
 8012e4c:	009b      	lsls	r3, r3, #2
 8012e4e:	4a12      	ldr	r2, [pc, #72]	@ (8012e98 <prvInitialiseTaskLists+0x60>)
 8012e50:	4413      	add	r3, r2
 8012e52:	4618      	mov	r0, r3
 8012e54:	f7fe fcd4 	bl	8011800 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	3301      	adds	r3, #1
 8012e5c:	607b      	str	r3, [r7, #4]
 8012e5e:	687b      	ldr	r3, [r7, #4]
 8012e60:	2b06      	cmp	r3, #6
 8012e62:	d9ef      	bls.n	8012e44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8012e64:	480d      	ldr	r0, [pc, #52]	@ (8012e9c <prvInitialiseTaskLists+0x64>)
 8012e66:	f7fe fccb 	bl	8011800 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8012e6a:	480d      	ldr	r0, [pc, #52]	@ (8012ea0 <prvInitialiseTaskLists+0x68>)
 8012e6c:	f7fe fcc8 	bl	8011800 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8012e70:	480c      	ldr	r0, [pc, #48]	@ (8012ea4 <prvInitialiseTaskLists+0x6c>)
 8012e72:	f7fe fcc5 	bl	8011800 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8012e76:	480c      	ldr	r0, [pc, #48]	@ (8012ea8 <prvInitialiseTaskLists+0x70>)
 8012e78:	f7fe fcc2 	bl	8011800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8012e7c:	480b      	ldr	r0, [pc, #44]	@ (8012eac <prvInitialiseTaskLists+0x74>)
 8012e7e:	f7fe fcbf 	bl	8011800 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8012e82:	4b0b      	ldr	r3, [pc, #44]	@ (8012eb0 <prvInitialiseTaskLists+0x78>)
 8012e84:	4a05      	ldr	r2, [pc, #20]	@ (8012e9c <prvInitialiseTaskLists+0x64>)
 8012e86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8012e88:	4b0a      	ldr	r3, [pc, #40]	@ (8012eb4 <prvInitialiseTaskLists+0x7c>)
 8012e8a:	4a05      	ldr	r2, [pc, #20]	@ (8012ea0 <prvInitialiseTaskLists+0x68>)
 8012e8c:	601a      	str	r2, [r3, #0]
}
 8012e8e:	bf00      	nop
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	20000b4c 	.word	0x20000b4c
 8012e9c:	20000bd8 	.word	0x20000bd8
 8012ea0:	20000bec 	.word	0x20000bec
 8012ea4:	20000c08 	.word	0x20000c08
 8012ea8:	20000c1c 	.word	0x20000c1c
 8012eac:	20000c34 	.word	0x20000c34
 8012eb0:	20000c00 	.word	0x20000c00
 8012eb4:	20000c04 	.word	0x20000c04

08012eb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8012eb8:	b580      	push	{r7, lr}
 8012eba:	b082      	sub	sp, #8
 8012ebc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ebe:	e019      	b.n	8012ef4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8012ec0:	f000 fa92 	bl	80133e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012ec4:	4b10      	ldr	r3, [pc, #64]	@ (8012f08 <prvCheckTasksWaitingTermination+0x50>)
 8012ec6:	68db      	ldr	r3, [r3, #12]
 8012ec8:	68db      	ldr	r3, [r3, #12]
 8012eca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	3304      	adds	r3, #4
 8012ed0:	4618      	mov	r0, r3
 8012ed2:	f7fe fd1f 	bl	8011914 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8012ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8012f0c <prvCheckTasksWaitingTermination+0x54>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	3b01      	subs	r3, #1
 8012edc:	4a0b      	ldr	r2, [pc, #44]	@ (8012f0c <prvCheckTasksWaitingTermination+0x54>)
 8012ede:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8012ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8012f10 <prvCheckTasksWaitingTermination+0x58>)
 8012ee2:	681b      	ldr	r3, [r3, #0]
 8012ee4:	3b01      	subs	r3, #1
 8012ee6:	4a0a      	ldr	r2, [pc, #40]	@ (8012f10 <prvCheckTasksWaitingTermination+0x58>)
 8012ee8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8012eea:	f000 faaf 	bl	801344c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8012eee:	6878      	ldr	r0, [r7, #4]
 8012ef0:	f000 f810 	bl	8012f14 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8012ef4:	4b06      	ldr	r3, [pc, #24]	@ (8012f10 <prvCheckTasksWaitingTermination+0x58>)
 8012ef6:	681b      	ldr	r3, [r3, #0]
 8012ef8:	2b00      	cmp	r3, #0
 8012efa:	d1e1      	bne.n	8012ec0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8012efc:	bf00      	nop
 8012efe:	bf00      	nop
 8012f00:	3708      	adds	r7, #8
 8012f02:	46bd      	mov	sp, r7
 8012f04:	bd80      	pop	{r7, pc}
 8012f06:	bf00      	nop
 8012f08:	20000c1c 	.word	0x20000c1c
 8012f0c:	20000c48 	.word	0x20000c48
 8012f10:	20000c30 	.word	0x20000c30

08012f14 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8012f14:	b580      	push	{r7, lr}
 8012f16:	b082      	sub	sp, #8
 8012f18:	af00      	add	r7, sp, #0
 8012f1a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f20:	4618      	mov	r0, r3
 8012f22:	f000 fc51 	bl	80137c8 <vPortFree>
			vPortFree( pxTCB );
 8012f26:	6878      	ldr	r0, [r7, #4]
 8012f28:	f000 fc4e 	bl	80137c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8012f2c:	bf00      	nop
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}

08012f34 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8012f34:	b480      	push	{r7}
 8012f36:	b083      	sub	sp, #12
 8012f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8012f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8012f6c <prvResetNextTaskUnblockTime+0x38>)
 8012f3c:	681b      	ldr	r3, [r3, #0]
 8012f3e:	681b      	ldr	r3, [r3, #0]
 8012f40:	2b00      	cmp	r3, #0
 8012f42:	d104      	bne.n	8012f4e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8012f44:	4b0a      	ldr	r3, [pc, #40]	@ (8012f70 <prvResetNextTaskUnblockTime+0x3c>)
 8012f46:	f04f 32ff 	mov.w	r2, #4294967295
 8012f4a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8012f4c:	e008      	b.n	8012f60 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8012f4e:	4b07      	ldr	r3, [pc, #28]	@ (8012f6c <prvResetNextTaskUnblockTime+0x38>)
 8012f50:	681b      	ldr	r3, [r3, #0]
 8012f52:	68db      	ldr	r3, [r3, #12]
 8012f54:	68db      	ldr	r3, [r3, #12]
 8012f56:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8012f58:	687b      	ldr	r3, [r7, #4]
 8012f5a:	685b      	ldr	r3, [r3, #4]
 8012f5c:	4a04      	ldr	r2, [pc, #16]	@ (8012f70 <prvResetNextTaskUnblockTime+0x3c>)
 8012f5e:	6013      	str	r3, [r2, #0]
}
 8012f60:	bf00      	nop
 8012f62:	370c      	adds	r7, #12
 8012f64:	46bd      	mov	sp, r7
 8012f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f6a:	4770      	bx	lr
 8012f6c:	20000c00 	.word	0x20000c00
 8012f70:	20000c68 	.word	0x20000c68

08012f74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8012f74:	b480      	push	{r7}
 8012f76:	b083      	sub	sp, #12
 8012f78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8012f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8012fa8 <xTaskGetSchedulerState+0x34>)
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	2b00      	cmp	r3, #0
 8012f80:	d102      	bne.n	8012f88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8012f82:	2301      	movs	r3, #1
 8012f84:	607b      	str	r3, [r7, #4]
 8012f86:	e008      	b.n	8012f9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8012f88:	4b08      	ldr	r3, [pc, #32]	@ (8012fac <xTaskGetSchedulerState+0x38>)
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	2b00      	cmp	r3, #0
 8012f8e:	d102      	bne.n	8012f96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8012f90:	2302      	movs	r3, #2
 8012f92:	607b      	str	r3, [r7, #4]
 8012f94:	e001      	b.n	8012f9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8012f96:	2300      	movs	r3, #0
 8012f98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8012f9a:	687b      	ldr	r3, [r7, #4]
	}
 8012f9c:	4618      	mov	r0, r3
 8012f9e:	370c      	adds	r7, #12
 8012fa0:	46bd      	mov	sp, r7
 8012fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012fa6:	4770      	bx	lr
 8012fa8:	20000c54 	.word	0x20000c54
 8012fac:	20000c70 	.word	0x20000c70

08012fb0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8012fb0:	b580      	push	{r7, lr}
 8012fb2:	b086      	sub	sp, #24
 8012fb4:	af00      	add	r7, sp, #0
 8012fb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8012fb8:	687b      	ldr	r3, [r7, #4]
 8012fba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8012fbc:	2300      	movs	r3, #0
 8012fbe:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	2b00      	cmp	r3, #0
 8012fc4:	d070      	beq.n	80130a8 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8012fc6:	4b3b      	ldr	r3, [pc, #236]	@ (80130b4 <xTaskPriorityDisinherit+0x104>)
 8012fc8:	681b      	ldr	r3, [r3, #0]
 8012fca:	693a      	ldr	r2, [r7, #16]
 8012fcc:	429a      	cmp	r2, r3
 8012fce:	d00b      	beq.n	8012fe8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8012fd0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012fd4:	f383 8811 	msr	BASEPRI, r3
 8012fd8:	f3bf 8f6f 	isb	sy
 8012fdc:	f3bf 8f4f 	dsb	sy
 8012fe0:	60fb      	str	r3, [r7, #12]
}
 8012fe2:	bf00      	nop
 8012fe4:	bf00      	nop
 8012fe6:	e7fd      	b.n	8012fe4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8012fe8:	693b      	ldr	r3, [r7, #16]
 8012fea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012fec:	2b00      	cmp	r3, #0
 8012fee:	d10b      	bne.n	8013008 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8012ff0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8012ff4:	f383 8811 	msr	BASEPRI, r3
 8012ff8:	f3bf 8f6f 	isb	sy
 8012ffc:	f3bf 8f4f 	dsb	sy
 8013000:	60bb      	str	r3, [r7, #8]
}
 8013002:	bf00      	nop
 8013004:	bf00      	nop
 8013006:	e7fd      	b.n	8013004 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8013008:	693b      	ldr	r3, [r7, #16]
 801300a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801300c:	1e5a      	subs	r2, r3, #1
 801300e:	693b      	ldr	r3, [r7, #16]
 8013010:	649a      	str	r2, [r3, #72]	@ 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8013012:	693b      	ldr	r3, [r7, #16]
 8013014:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013016:	693b      	ldr	r3, [r7, #16]
 8013018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801301a:	429a      	cmp	r2, r3
 801301c:	d044      	beq.n	80130a8 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 801301e:	693b      	ldr	r3, [r7, #16]
 8013020:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013022:	2b00      	cmp	r3, #0
 8013024:	d140      	bne.n	80130a8 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8013026:	693b      	ldr	r3, [r7, #16]
 8013028:	3304      	adds	r3, #4
 801302a:	4618      	mov	r0, r3
 801302c:	f7fe fc72 	bl	8011914 <uxListRemove>
 8013030:	4603      	mov	r3, r0
 8013032:	2b00      	cmp	r3, #0
 8013034:	d115      	bne.n	8013062 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801303a:	491f      	ldr	r1, [pc, #124]	@ (80130b8 <xTaskPriorityDisinherit+0x108>)
 801303c:	4613      	mov	r3, r2
 801303e:	009b      	lsls	r3, r3, #2
 8013040:	4413      	add	r3, r2
 8013042:	009b      	lsls	r3, r3, #2
 8013044:	440b      	add	r3, r1
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d10a      	bne.n	8013062 <xTaskPriorityDisinherit+0xb2>
 801304c:	693b      	ldr	r3, [r7, #16]
 801304e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013050:	2201      	movs	r2, #1
 8013052:	fa02 f303 	lsl.w	r3, r2, r3
 8013056:	43da      	mvns	r2, r3
 8013058:	4b18      	ldr	r3, [pc, #96]	@ (80130bc <xTaskPriorityDisinherit+0x10c>)
 801305a:	681b      	ldr	r3, [r3, #0]
 801305c:	4013      	ands	r3, r2
 801305e:	4a17      	ldr	r2, [pc, #92]	@ (80130bc <xTaskPriorityDisinherit+0x10c>)
 8013060:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8013062:	693b      	ldr	r3, [r7, #16]
 8013064:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8013066:	693b      	ldr	r3, [r7, #16]
 8013068:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801306a:	693b      	ldr	r3, [r7, #16]
 801306c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801306e:	f1c3 0207 	rsb	r2, r3, #7
 8013072:	693b      	ldr	r3, [r7, #16]
 8013074:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8013076:	693b      	ldr	r3, [r7, #16]
 8013078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801307a:	2201      	movs	r2, #1
 801307c:	409a      	lsls	r2, r3
 801307e:	4b0f      	ldr	r3, [pc, #60]	@ (80130bc <xTaskPriorityDisinherit+0x10c>)
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	4313      	orrs	r3, r2
 8013084:	4a0d      	ldr	r2, [pc, #52]	@ (80130bc <xTaskPriorityDisinherit+0x10c>)
 8013086:	6013      	str	r3, [r2, #0]
 8013088:	693b      	ldr	r3, [r7, #16]
 801308a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801308c:	4613      	mov	r3, r2
 801308e:	009b      	lsls	r3, r3, #2
 8013090:	4413      	add	r3, r2
 8013092:	009b      	lsls	r3, r3, #2
 8013094:	4a08      	ldr	r2, [pc, #32]	@ (80130b8 <xTaskPriorityDisinherit+0x108>)
 8013096:	441a      	add	r2, r3
 8013098:	693b      	ldr	r3, [r7, #16]
 801309a:	3304      	adds	r3, #4
 801309c:	4619      	mov	r1, r3
 801309e:	4610      	mov	r0, r2
 80130a0:	f7fe fbdb 	bl	801185a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80130a4:	2301      	movs	r3, #1
 80130a6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80130a8:	697b      	ldr	r3, [r7, #20]
	}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3718      	adds	r7, #24
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}
 80130b2:	bf00      	nop
 80130b4:	20000b48 	.word	0x20000b48
 80130b8:	20000b4c 	.word	0x20000b4c
 80130bc:	20000c50 	.word	0x20000c50

080130c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80130c0:	b580      	push	{r7, lr}
 80130c2:	b084      	sub	sp, #16
 80130c4:	af00      	add	r7, sp, #0
 80130c6:	6078      	str	r0, [r7, #4]
 80130c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80130ca:	4b29      	ldr	r3, [pc, #164]	@ (8013170 <prvAddCurrentTaskToDelayedList+0xb0>)
 80130cc:	681b      	ldr	r3, [r3, #0]
 80130ce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80130d0:	4b28      	ldr	r3, [pc, #160]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80130d2:	681b      	ldr	r3, [r3, #0]
 80130d4:	3304      	adds	r3, #4
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7fe fc1c 	bl	8011914 <uxListRemove>
 80130dc:	4603      	mov	r3, r0
 80130de:	2b00      	cmp	r3, #0
 80130e0:	d10b      	bne.n	80130fa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80130e2:	4b24      	ldr	r3, [pc, #144]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130e8:	2201      	movs	r2, #1
 80130ea:	fa02 f303 	lsl.w	r3, r2, r3
 80130ee:	43da      	mvns	r2, r3
 80130f0:	4b21      	ldr	r3, [pc, #132]	@ (8013178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	4013      	ands	r3, r2
 80130f6:	4a20      	ldr	r2, [pc, #128]	@ (8013178 <prvAddCurrentTaskToDelayedList+0xb8>)
 80130f8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80130fa:	687b      	ldr	r3, [r7, #4]
 80130fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013100:	d10a      	bne.n	8013118 <prvAddCurrentTaskToDelayedList+0x58>
 8013102:	683b      	ldr	r3, [r7, #0]
 8013104:	2b00      	cmp	r3, #0
 8013106:	d007      	beq.n	8013118 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013108:	4b1a      	ldr	r3, [pc, #104]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	3304      	adds	r3, #4
 801310e:	4619      	mov	r1, r3
 8013110:	481a      	ldr	r0, [pc, #104]	@ (801317c <prvAddCurrentTaskToDelayedList+0xbc>)
 8013112:	f7fe fba2 	bl	801185a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8013116:	e026      	b.n	8013166 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8013118:	68fa      	ldr	r2, [r7, #12]
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	4413      	add	r3, r2
 801311e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8013120:	4b14      	ldr	r3, [pc, #80]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	68ba      	ldr	r2, [r7, #8]
 8013126:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8013128:	68ba      	ldr	r2, [r7, #8]
 801312a:	68fb      	ldr	r3, [r7, #12]
 801312c:	429a      	cmp	r2, r3
 801312e:	d209      	bcs.n	8013144 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013130:	4b13      	ldr	r3, [pc, #76]	@ (8013180 <prvAddCurrentTaskToDelayedList+0xc0>)
 8013132:	681a      	ldr	r2, [r3, #0]
 8013134:	4b0f      	ldr	r3, [pc, #60]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	3304      	adds	r3, #4
 801313a:	4619      	mov	r1, r3
 801313c:	4610      	mov	r0, r2
 801313e:	f7fe fbb0 	bl	80118a2 <vListInsert>
}
 8013142:	e010      	b.n	8013166 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8013144:	4b0f      	ldr	r3, [pc, #60]	@ (8013184 <prvAddCurrentTaskToDelayedList+0xc4>)
 8013146:	681a      	ldr	r2, [r3, #0]
 8013148:	4b0a      	ldr	r3, [pc, #40]	@ (8013174 <prvAddCurrentTaskToDelayedList+0xb4>)
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	3304      	adds	r3, #4
 801314e:	4619      	mov	r1, r3
 8013150:	4610      	mov	r0, r2
 8013152:	f7fe fba6 	bl	80118a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8013156:	4b0c      	ldr	r3, [pc, #48]	@ (8013188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013158:	681b      	ldr	r3, [r3, #0]
 801315a:	68ba      	ldr	r2, [r7, #8]
 801315c:	429a      	cmp	r2, r3
 801315e:	d202      	bcs.n	8013166 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8013160:	4a09      	ldr	r2, [pc, #36]	@ (8013188 <prvAddCurrentTaskToDelayedList+0xc8>)
 8013162:	68bb      	ldr	r3, [r7, #8]
 8013164:	6013      	str	r3, [r2, #0]
}
 8013166:	bf00      	nop
 8013168:	3710      	adds	r7, #16
 801316a:	46bd      	mov	sp, r7
 801316c:	bd80      	pop	{r7, pc}
 801316e:	bf00      	nop
 8013170:	20000c4c 	.word	0x20000c4c
 8013174:	20000b48 	.word	0x20000b48
 8013178:	20000c50 	.word	0x20000c50
 801317c:	20000c34 	.word	0x20000c34
 8013180:	20000c04 	.word	0x20000c04
 8013184:	20000c00 	.word	0x20000c00
 8013188:	20000c68 	.word	0x20000c68

0801318c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801318c:	b480      	push	{r7}
 801318e:	b085      	sub	sp, #20
 8013190:	af00      	add	r7, sp, #0
 8013192:	60f8      	str	r0, [r7, #12]
 8013194:	60b9      	str	r1, [r7, #8]
 8013196:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8013198:	68fb      	ldr	r3, [r7, #12]
 801319a:	3b04      	subs	r3, #4
 801319c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801319e:	68fb      	ldr	r3, [r7, #12]
 80131a0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80131a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	3b04      	subs	r3, #4
 80131aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80131ac:	68bb      	ldr	r3, [r7, #8]
 80131ae:	f023 0201 	bic.w	r2, r3, #1
 80131b2:	68fb      	ldr	r3, [r7, #12]
 80131b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	3b04      	subs	r3, #4
 80131ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80131bc:	4a0c      	ldr	r2, [pc, #48]	@ (80131f0 <pxPortInitialiseStack+0x64>)
 80131be:	68fb      	ldr	r3, [r7, #12]
 80131c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	3b14      	subs	r3, #20
 80131c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80131c8:	687a      	ldr	r2, [r7, #4]
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	3b04      	subs	r3, #4
 80131d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80131d4:	68fb      	ldr	r3, [r7, #12]
 80131d6:	f06f 0202 	mvn.w	r2, #2
 80131da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	3b20      	subs	r3, #32
 80131e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80131e2:	68fb      	ldr	r3, [r7, #12]
}
 80131e4:	4618      	mov	r0, r3
 80131e6:	3714      	adds	r7, #20
 80131e8:	46bd      	mov	sp, r7
 80131ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131ee:	4770      	bx	lr
 80131f0:	080131f5 	.word	0x080131f5

080131f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80131f4:	b480      	push	{r7}
 80131f6:	b085      	sub	sp, #20
 80131f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80131fa:	2300      	movs	r3, #0
 80131fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80131fe:	4b13      	ldr	r3, [pc, #76]	@ (801324c <prvTaskExitError+0x58>)
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013206:	d00b      	beq.n	8013220 <prvTaskExitError+0x2c>
	__asm volatile
 8013208:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801320c:	f383 8811 	msr	BASEPRI, r3
 8013210:	f3bf 8f6f 	isb	sy
 8013214:	f3bf 8f4f 	dsb	sy
 8013218:	60fb      	str	r3, [r7, #12]
}
 801321a:	bf00      	nop
 801321c:	bf00      	nop
 801321e:	e7fd      	b.n	801321c <prvTaskExitError+0x28>
	__asm volatile
 8013220:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013224:	f383 8811 	msr	BASEPRI, r3
 8013228:	f3bf 8f6f 	isb	sy
 801322c:	f3bf 8f4f 	dsb	sy
 8013230:	60bb      	str	r3, [r7, #8]
}
 8013232:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8013234:	bf00      	nop
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d0fc      	beq.n	8013236 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801323c:	bf00      	nop
 801323e:	bf00      	nop
 8013240:	3714      	adds	r7, #20
 8013242:	46bd      	mov	sp, r7
 8013244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013248:	4770      	bx	lr
 801324a:	bf00      	nop
 801324c:	2000009c 	.word	0x2000009c

08013250 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8013250:	4b07      	ldr	r3, [pc, #28]	@ (8013270 <pxCurrentTCBConst2>)
 8013252:	6819      	ldr	r1, [r3, #0]
 8013254:	6808      	ldr	r0, [r1, #0]
 8013256:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801325a:	f380 8809 	msr	PSP, r0
 801325e:	f3bf 8f6f 	isb	sy
 8013262:	f04f 0000 	mov.w	r0, #0
 8013266:	f380 8811 	msr	BASEPRI, r0
 801326a:	4770      	bx	lr
 801326c:	f3af 8000 	nop.w

08013270 <pxCurrentTCBConst2>:
 8013270:	20000b48 	.word	0x20000b48
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8013274:	bf00      	nop
 8013276:	bf00      	nop

08013278 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8013278:	4808      	ldr	r0, [pc, #32]	@ (801329c <prvPortStartFirstTask+0x24>)
 801327a:	6800      	ldr	r0, [r0, #0]
 801327c:	6800      	ldr	r0, [r0, #0]
 801327e:	f380 8808 	msr	MSP, r0
 8013282:	f04f 0000 	mov.w	r0, #0
 8013286:	f380 8814 	msr	CONTROL, r0
 801328a:	b662      	cpsie	i
 801328c:	b661      	cpsie	f
 801328e:	f3bf 8f4f 	dsb	sy
 8013292:	f3bf 8f6f 	isb	sy
 8013296:	df00      	svc	0
 8013298:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801329a:	bf00      	nop
 801329c:	e000ed08 	.word	0xe000ed08

080132a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80132a0:	b580      	push	{r7, lr}
 80132a2:	b086      	sub	sp, #24
 80132a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80132a6:	4b47      	ldr	r3, [pc, #284]	@ (80133c4 <xPortStartScheduler+0x124>)
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	4a47      	ldr	r2, [pc, #284]	@ (80133c8 <xPortStartScheduler+0x128>)
 80132ac:	4293      	cmp	r3, r2
 80132ae:	d10b      	bne.n	80132c8 <xPortStartScheduler+0x28>
	__asm volatile
 80132b0:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80132b4:	f383 8811 	msr	BASEPRI, r3
 80132b8:	f3bf 8f6f 	isb	sy
 80132bc:	f3bf 8f4f 	dsb	sy
 80132c0:	613b      	str	r3, [r7, #16]
}
 80132c2:	bf00      	nop
 80132c4:	bf00      	nop
 80132c6:	e7fd      	b.n	80132c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80132c8:	4b3e      	ldr	r3, [pc, #248]	@ (80133c4 <xPortStartScheduler+0x124>)
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	4a3f      	ldr	r2, [pc, #252]	@ (80133cc <xPortStartScheduler+0x12c>)
 80132ce:	4293      	cmp	r3, r2
 80132d0:	d10b      	bne.n	80132ea <xPortStartScheduler+0x4a>
	__asm volatile
 80132d2:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80132d6:	f383 8811 	msr	BASEPRI, r3
 80132da:	f3bf 8f6f 	isb	sy
 80132de:	f3bf 8f4f 	dsb	sy
 80132e2:	60fb      	str	r3, [r7, #12]
}
 80132e4:	bf00      	nop
 80132e6:	bf00      	nop
 80132e8:	e7fd      	b.n	80132e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80132ea:	4b39      	ldr	r3, [pc, #228]	@ (80133d0 <xPortStartScheduler+0x130>)
 80132ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80132ee:	697b      	ldr	r3, [r7, #20]
 80132f0:	781b      	ldrb	r3, [r3, #0]
 80132f2:	b2db      	uxtb	r3, r3
 80132f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80132f6:	697b      	ldr	r3, [r7, #20]
 80132f8:	22ff      	movs	r2, #255	@ 0xff
 80132fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80132fc:	697b      	ldr	r3, [r7, #20]
 80132fe:	781b      	ldrb	r3, [r3, #0]
 8013300:	b2db      	uxtb	r3, r3
 8013302:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8013304:	78fb      	ldrb	r3, [r7, #3]
 8013306:	b2db      	uxtb	r3, r3
 8013308:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 801330c:	b2da      	uxtb	r2, r3
 801330e:	4b31      	ldr	r3, [pc, #196]	@ (80133d4 <xPortStartScheduler+0x134>)
 8013310:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8013312:	4b31      	ldr	r3, [pc, #196]	@ (80133d8 <xPortStartScheduler+0x138>)
 8013314:	2207      	movs	r2, #7
 8013316:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8013318:	e009      	b.n	801332e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801331a:	4b2f      	ldr	r3, [pc, #188]	@ (80133d8 <xPortStartScheduler+0x138>)
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	3b01      	subs	r3, #1
 8013320:	4a2d      	ldr	r2, [pc, #180]	@ (80133d8 <xPortStartScheduler+0x138>)
 8013322:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8013324:	78fb      	ldrb	r3, [r7, #3]
 8013326:	b2db      	uxtb	r3, r3
 8013328:	005b      	lsls	r3, r3, #1
 801332a:	b2db      	uxtb	r3, r3
 801332c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801332e:	78fb      	ldrb	r3, [r7, #3]
 8013330:	b2db      	uxtb	r3, r3
 8013332:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8013336:	2b80      	cmp	r3, #128	@ 0x80
 8013338:	d0ef      	beq.n	801331a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801333a:	4b27      	ldr	r3, [pc, #156]	@ (80133d8 <xPortStartScheduler+0x138>)
 801333c:	681b      	ldr	r3, [r3, #0]
 801333e:	f1c3 0307 	rsb	r3, r3, #7
 8013342:	2b04      	cmp	r3, #4
 8013344:	d00b      	beq.n	801335e <xPortStartScheduler+0xbe>
	__asm volatile
 8013346:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801334a:	f383 8811 	msr	BASEPRI, r3
 801334e:	f3bf 8f6f 	isb	sy
 8013352:	f3bf 8f4f 	dsb	sy
 8013356:	60bb      	str	r3, [r7, #8]
}
 8013358:	bf00      	nop
 801335a:	bf00      	nop
 801335c:	e7fd      	b.n	801335a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801335e:	4b1e      	ldr	r3, [pc, #120]	@ (80133d8 <xPortStartScheduler+0x138>)
 8013360:	681b      	ldr	r3, [r3, #0]
 8013362:	021b      	lsls	r3, r3, #8
 8013364:	4a1c      	ldr	r2, [pc, #112]	@ (80133d8 <xPortStartScheduler+0x138>)
 8013366:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8013368:	4b1b      	ldr	r3, [pc, #108]	@ (80133d8 <xPortStartScheduler+0x138>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8013370:	4a19      	ldr	r2, [pc, #100]	@ (80133d8 <xPortStartScheduler+0x138>)
 8013372:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	b2da      	uxtb	r2, r3
 8013378:	697b      	ldr	r3, [r7, #20]
 801337a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801337c:	4b17      	ldr	r3, [pc, #92]	@ (80133dc <xPortStartScheduler+0x13c>)
 801337e:	681b      	ldr	r3, [r3, #0]
 8013380:	4a16      	ldr	r2, [pc, #88]	@ (80133dc <xPortStartScheduler+0x13c>)
 8013382:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8013386:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8013388:	4b14      	ldr	r3, [pc, #80]	@ (80133dc <xPortStartScheduler+0x13c>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	4a13      	ldr	r2, [pc, #76]	@ (80133dc <xPortStartScheduler+0x13c>)
 801338e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8013392:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8013394:	f000 f8da 	bl	801354c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8013398:	4b11      	ldr	r3, [pc, #68]	@ (80133e0 <xPortStartScheduler+0x140>)
 801339a:	2200      	movs	r2, #0
 801339c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801339e:	f000 f8f9 	bl	8013594 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80133a2:	4b10      	ldr	r3, [pc, #64]	@ (80133e4 <xPortStartScheduler+0x144>)
 80133a4:	681b      	ldr	r3, [r3, #0]
 80133a6:	4a0f      	ldr	r2, [pc, #60]	@ (80133e4 <xPortStartScheduler+0x144>)
 80133a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80133ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80133ae:	f7ff ff63 	bl	8013278 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80133b2:	f7ff fbbd 	bl	8012b30 <vTaskSwitchContext>
	prvTaskExitError();
 80133b6:	f7ff ff1d 	bl	80131f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80133ba:	2300      	movs	r3, #0
}
 80133bc:	4618      	mov	r0, r3
 80133be:	3718      	adds	r7, #24
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	e000ed00 	.word	0xe000ed00
 80133c8:	410fc271 	.word	0x410fc271
 80133cc:	410fc270 	.word	0x410fc270
 80133d0:	e000e400 	.word	0xe000e400
 80133d4:	20000c74 	.word	0x20000c74
 80133d8:	20000c78 	.word	0x20000c78
 80133dc:	e000ed20 	.word	0xe000ed20
 80133e0:	2000009c 	.word	0x2000009c
 80133e4:	e000ef34 	.word	0xe000ef34

080133e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80133e8:	b480      	push	{r7}
 80133ea:	b083      	sub	sp, #12
 80133ec:	af00      	add	r7, sp, #0
	__asm volatile
 80133ee:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80133f2:	f383 8811 	msr	BASEPRI, r3
 80133f6:	f3bf 8f6f 	isb	sy
 80133fa:	f3bf 8f4f 	dsb	sy
 80133fe:	607b      	str	r3, [r7, #4]
}
 8013400:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8013402:	4b10      	ldr	r3, [pc, #64]	@ (8013444 <vPortEnterCritical+0x5c>)
 8013404:	681b      	ldr	r3, [r3, #0]
 8013406:	3301      	adds	r3, #1
 8013408:	4a0e      	ldr	r2, [pc, #56]	@ (8013444 <vPortEnterCritical+0x5c>)
 801340a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801340c:	4b0d      	ldr	r3, [pc, #52]	@ (8013444 <vPortEnterCritical+0x5c>)
 801340e:	681b      	ldr	r3, [r3, #0]
 8013410:	2b01      	cmp	r3, #1
 8013412:	d110      	bne.n	8013436 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8013414:	4b0c      	ldr	r3, [pc, #48]	@ (8013448 <vPortEnterCritical+0x60>)
 8013416:	681b      	ldr	r3, [r3, #0]
 8013418:	b2db      	uxtb	r3, r3
 801341a:	2b00      	cmp	r3, #0
 801341c:	d00b      	beq.n	8013436 <vPortEnterCritical+0x4e>
	__asm volatile
 801341e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013422:	f383 8811 	msr	BASEPRI, r3
 8013426:	f3bf 8f6f 	isb	sy
 801342a:	f3bf 8f4f 	dsb	sy
 801342e:	603b      	str	r3, [r7, #0]
}
 8013430:	bf00      	nop
 8013432:	bf00      	nop
 8013434:	e7fd      	b.n	8013432 <vPortEnterCritical+0x4a>
	}
}
 8013436:	bf00      	nop
 8013438:	370c      	adds	r7, #12
 801343a:	46bd      	mov	sp, r7
 801343c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	2000009c 	.word	0x2000009c
 8013448:	e000ed04 	.word	0xe000ed04

0801344c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801344c:	b480      	push	{r7}
 801344e:	b083      	sub	sp, #12
 8013450:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8013452:	4b12      	ldr	r3, [pc, #72]	@ (801349c <vPortExitCritical+0x50>)
 8013454:	681b      	ldr	r3, [r3, #0]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d10b      	bne.n	8013472 <vPortExitCritical+0x26>
	__asm volatile
 801345a:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801345e:	f383 8811 	msr	BASEPRI, r3
 8013462:	f3bf 8f6f 	isb	sy
 8013466:	f3bf 8f4f 	dsb	sy
 801346a:	607b      	str	r3, [r7, #4]
}
 801346c:	bf00      	nop
 801346e:	bf00      	nop
 8013470:	e7fd      	b.n	801346e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8013472:	4b0a      	ldr	r3, [pc, #40]	@ (801349c <vPortExitCritical+0x50>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	3b01      	subs	r3, #1
 8013478:	4a08      	ldr	r2, [pc, #32]	@ (801349c <vPortExitCritical+0x50>)
 801347a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801347c:	4b07      	ldr	r3, [pc, #28]	@ (801349c <vPortExitCritical+0x50>)
 801347e:	681b      	ldr	r3, [r3, #0]
 8013480:	2b00      	cmp	r3, #0
 8013482:	d105      	bne.n	8013490 <vPortExitCritical+0x44>
 8013484:	2300      	movs	r3, #0
 8013486:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013488:	683b      	ldr	r3, [r7, #0]
 801348a:	f383 8811 	msr	BASEPRI, r3
}
 801348e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8013490:	bf00      	nop
 8013492:	370c      	adds	r7, #12
 8013494:	46bd      	mov	sp, r7
 8013496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801349a:	4770      	bx	lr
 801349c:	2000009c 	.word	0x2000009c

080134a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80134a0:	f3ef 8009 	mrs	r0, PSP
 80134a4:	f3bf 8f6f 	isb	sy
 80134a8:	4b15      	ldr	r3, [pc, #84]	@ (8013500 <pxCurrentTCBConst>)
 80134aa:	681a      	ldr	r2, [r3, #0]
 80134ac:	f01e 0f10 	tst.w	lr, #16
 80134b0:	bf08      	it	eq
 80134b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80134b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134ba:	6010      	str	r0, [r2, #0]
 80134bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80134c0:	f04f 0030 	mov.w	r0, #48	@ 0x30
 80134c4:	f380 8811 	msr	BASEPRI, r0
 80134c8:	f3bf 8f4f 	dsb	sy
 80134cc:	f3bf 8f6f 	isb	sy
 80134d0:	f7ff fb2e 	bl	8012b30 <vTaskSwitchContext>
 80134d4:	f04f 0000 	mov.w	r0, #0
 80134d8:	f380 8811 	msr	BASEPRI, r0
 80134dc:	bc09      	pop	{r0, r3}
 80134de:	6819      	ldr	r1, [r3, #0]
 80134e0:	6808      	ldr	r0, [r1, #0]
 80134e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80134e6:	f01e 0f10 	tst.w	lr, #16
 80134ea:	bf08      	it	eq
 80134ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80134f0:	f380 8809 	msr	PSP, r0
 80134f4:	f3bf 8f6f 	isb	sy
 80134f8:	4770      	bx	lr
 80134fa:	bf00      	nop
 80134fc:	f3af 8000 	nop.w

08013500 <pxCurrentTCBConst>:
 8013500:	20000b48 	.word	0x20000b48
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8013504:	bf00      	nop
 8013506:	bf00      	nop

08013508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8013508:	b580      	push	{r7, lr}
 801350a:	b082      	sub	sp, #8
 801350c:	af00      	add	r7, sp, #0
	__asm volatile
 801350e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013512:	f383 8811 	msr	BASEPRI, r3
 8013516:	f3bf 8f6f 	isb	sy
 801351a:	f3bf 8f4f 	dsb	sy
 801351e:	607b      	str	r3, [r7, #4]
}
 8013520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8013522:	f7ff fa4b 	bl	80129bc <xTaskIncrementTick>
 8013526:	4603      	mov	r3, r0
 8013528:	2b00      	cmp	r3, #0
 801352a:	d003      	beq.n	8013534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801352c:	4b06      	ldr	r3, [pc, #24]	@ (8013548 <xPortSysTickHandler+0x40>)
 801352e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8013532:	601a      	str	r2, [r3, #0]
 8013534:	2300      	movs	r3, #0
 8013536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	f383 8811 	msr	BASEPRI, r3
}
 801353e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8013540:	bf00      	nop
 8013542:	3708      	adds	r7, #8
 8013544:	46bd      	mov	sp, r7
 8013546:	bd80      	pop	{r7, pc}
 8013548:	e000ed04 	.word	0xe000ed04

0801354c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801354c:	b480      	push	{r7}
 801354e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8013550:	4b0b      	ldr	r3, [pc, #44]	@ (8013580 <vPortSetupTimerInterrupt+0x34>)
 8013552:	2200      	movs	r2, #0
 8013554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8013556:	4b0b      	ldr	r3, [pc, #44]	@ (8013584 <vPortSetupTimerInterrupt+0x38>)
 8013558:	2200      	movs	r2, #0
 801355a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801355c:	4b0a      	ldr	r3, [pc, #40]	@ (8013588 <vPortSetupTimerInterrupt+0x3c>)
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	4a0a      	ldr	r2, [pc, #40]	@ (801358c <vPortSetupTimerInterrupt+0x40>)
 8013562:	fba2 2303 	umull	r2, r3, r2, r3
 8013566:	099b      	lsrs	r3, r3, #6
 8013568:	4a09      	ldr	r2, [pc, #36]	@ (8013590 <vPortSetupTimerInterrupt+0x44>)
 801356a:	3b01      	subs	r3, #1
 801356c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801356e:	4b04      	ldr	r3, [pc, #16]	@ (8013580 <vPortSetupTimerInterrupt+0x34>)
 8013570:	2207      	movs	r2, #7
 8013572:	601a      	str	r2, [r3, #0]
}
 8013574:	bf00      	nop
 8013576:	46bd      	mov	sp, r7
 8013578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801357c:	4770      	bx	lr
 801357e:	bf00      	nop
 8013580:	e000e010 	.word	0xe000e010
 8013584:	e000e018 	.word	0xe000e018
 8013588:	20000004 	.word	0x20000004
 801358c:	10624dd3 	.word	0x10624dd3
 8013590:	e000e014 	.word	0xe000e014

08013594 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8013594:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80135a4 <vPortEnableVFP+0x10>
 8013598:	6801      	ldr	r1, [r0, #0]
 801359a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801359e:	6001      	str	r1, [r0, #0]
 80135a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80135a2:	bf00      	nop
 80135a4:	e000ed88 	.word	0xe000ed88

080135a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80135a8:	b480      	push	{r7}
 80135aa:	b085      	sub	sp, #20
 80135ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80135ae:	f3ef 8305 	mrs	r3, IPSR
 80135b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80135b4:	68fb      	ldr	r3, [r7, #12]
 80135b6:	2b0f      	cmp	r3, #15
 80135b8:	d915      	bls.n	80135e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80135ba:	4a18      	ldr	r2, [pc, #96]	@ (801361c <vPortValidateInterruptPriority+0x74>)
 80135bc:	68fb      	ldr	r3, [r7, #12]
 80135be:	4413      	add	r3, r2
 80135c0:	781b      	ldrb	r3, [r3, #0]
 80135c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80135c4:	4b16      	ldr	r3, [pc, #88]	@ (8013620 <vPortValidateInterruptPriority+0x78>)
 80135c6:	781b      	ldrb	r3, [r3, #0]
 80135c8:	7afa      	ldrb	r2, [r7, #11]
 80135ca:	429a      	cmp	r2, r3
 80135cc:	d20b      	bcs.n	80135e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80135ce:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80135d2:	f383 8811 	msr	BASEPRI, r3
 80135d6:	f3bf 8f6f 	isb	sy
 80135da:	f3bf 8f4f 	dsb	sy
 80135de:	607b      	str	r3, [r7, #4]
}
 80135e0:	bf00      	nop
 80135e2:	bf00      	nop
 80135e4:	e7fd      	b.n	80135e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80135e6:	4b0f      	ldr	r3, [pc, #60]	@ (8013624 <vPortValidateInterruptPriority+0x7c>)
 80135e8:	681b      	ldr	r3, [r3, #0]
 80135ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80135ee:	4b0e      	ldr	r3, [pc, #56]	@ (8013628 <vPortValidateInterruptPriority+0x80>)
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	429a      	cmp	r2, r3
 80135f4:	d90b      	bls.n	801360e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80135f6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80135fa:	f383 8811 	msr	BASEPRI, r3
 80135fe:	f3bf 8f6f 	isb	sy
 8013602:	f3bf 8f4f 	dsb	sy
 8013606:	603b      	str	r3, [r7, #0]
}
 8013608:	bf00      	nop
 801360a:	bf00      	nop
 801360c:	e7fd      	b.n	801360a <vPortValidateInterruptPriority+0x62>
	}
 801360e:	bf00      	nop
 8013610:	3714      	adds	r7, #20
 8013612:	46bd      	mov	sp, r7
 8013614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013618:	4770      	bx	lr
 801361a:	bf00      	nop
 801361c:	e000e3f0 	.word	0xe000e3f0
 8013620:	20000c74 	.word	0x20000c74
 8013624:	e000ed0c 	.word	0xe000ed0c
 8013628:	20000c78 	.word	0x20000c78

0801362c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b08a      	sub	sp, #40	@ 0x28
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8013634:	2300      	movs	r3, #0
 8013636:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8013638:	f7ff f914 	bl	8012864 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 801363c:	4b5c      	ldr	r3, [pc, #368]	@ (80137b0 <pvPortMalloc+0x184>)
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d101      	bne.n	8013648 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8013644:	f000 f924 	bl	8013890 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8013648:	4b5a      	ldr	r3, [pc, #360]	@ (80137b4 <pvPortMalloc+0x188>)
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	687b      	ldr	r3, [r7, #4]
 801364e:	4013      	ands	r3, r2
 8013650:	2b00      	cmp	r3, #0
 8013652:	f040 8095 	bne.w	8013780 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	2b00      	cmp	r3, #0
 801365a:	d01e      	beq.n	801369a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 801365c:	2208      	movs	r2, #8
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	4413      	add	r3, r2
 8013662:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8013664:	687b      	ldr	r3, [r7, #4]
 8013666:	f003 0307 	and.w	r3, r3, #7
 801366a:	2b00      	cmp	r3, #0
 801366c:	d015      	beq.n	801369a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	f023 0307 	bic.w	r3, r3, #7
 8013674:	3308      	adds	r3, #8
 8013676:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	f003 0307 	and.w	r3, r3, #7
 801367e:	2b00      	cmp	r3, #0
 8013680:	d00b      	beq.n	801369a <pvPortMalloc+0x6e>
	__asm volatile
 8013682:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013686:	f383 8811 	msr	BASEPRI, r3
 801368a:	f3bf 8f6f 	isb	sy
 801368e:	f3bf 8f4f 	dsb	sy
 8013692:	617b      	str	r3, [r7, #20]
}
 8013694:	bf00      	nop
 8013696:	bf00      	nop
 8013698:	e7fd      	b.n	8013696 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d06f      	beq.n	8013780 <pvPortMalloc+0x154>
 80136a0:	4b45      	ldr	r3, [pc, #276]	@ (80137b8 <pvPortMalloc+0x18c>)
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	687a      	ldr	r2, [r7, #4]
 80136a6:	429a      	cmp	r2, r3
 80136a8:	d86a      	bhi.n	8013780 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80136aa:	4b44      	ldr	r3, [pc, #272]	@ (80137bc <pvPortMalloc+0x190>)
 80136ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80136ae:	4b43      	ldr	r3, [pc, #268]	@ (80137bc <pvPortMalloc+0x190>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80136b4:	e004      	b.n	80136c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80136b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80136ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136bc:	681b      	ldr	r3, [r3, #0]
 80136be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80136c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136c2:	685b      	ldr	r3, [r3, #4]
 80136c4:	687a      	ldr	r2, [r7, #4]
 80136c6:	429a      	cmp	r2, r3
 80136c8:	d903      	bls.n	80136d2 <pvPortMalloc+0xa6>
 80136ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136cc:	681b      	ldr	r3, [r3, #0]
 80136ce:	2b00      	cmp	r3, #0
 80136d0:	d1f1      	bne.n	80136b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80136d2:	4b37      	ldr	r3, [pc, #220]	@ (80137b0 <pvPortMalloc+0x184>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80136d8:	429a      	cmp	r2, r3
 80136da:	d051      	beq.n	8013780 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80136dc:	6a3b      	ldr	r3, [r7, #32]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	2208      	movs	r2, #8
 80136e2:	4413      	add	r3, r2
 80136e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80136e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136e8:	681a      	ldr	r2, [r3, #0]
 80136ea:	6a3b      	ldr	r3, [r7, #32]
 80136ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80136ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80136f0:	685a      	ldr	r2, [r3, #4]
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	1ad2      	subs	r2, r2, r3
 80136f6:	2308      	movs	r3, #8
 80136f8:	005b      	lsls	r3, r3, #1
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d920      	bls.n	8013740 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80136fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	4413      	add	r3, r2
 8013704:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8013706:	69bb      	ldr	r3, [r7, #24]
 8013708:	f003 0307 	and.w	r3, r3, #7
 801370c:	2b00      	cmp	r3, #0
 801370e:	d00b      	beq.n	8013728 <pvPortMalloc+0xfc>
	__asm volatile
 8013710:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013714:	f383 8811 	msr	BASEPRI, r3
 8013718:	f3bf 8f6f 	isb	sy
 801371c:	f3bf 8f4f 	dsb	sy
 8013720:	613b      	str	r3, [r7, #16]
}
 8013722:	bf00      	nop
 8013724:	bf00      	nop
 8013726:	e7fd      	b.n	8013724 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8013728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801372a:	685a      	ldr	r2, [r3, #4]
 801372c:	687b      	ldr	r3, [r7, #4]
 801372e:	1ad2      	subs	r2, r2, r3
 8013730:	69bb      	ldr	r3, [r7, #24]
 8013732:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8013734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013736:	687a      	ldr	r2, [r7, #4]
 8013738:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 801373a:	69b8      	ldr	r0, [r7, #24]
 801373c:	f000 f90a 	bl	8013954 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8013740:	4b1d      	ldr	r3, [pc, #116]	@ (80137b8 <pvPortMalloc+0x18c>)
 8013742:	681a      	ldr	r2, [r3, #0]
 8013744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013746:	685b      	ldr	r3, [r3, #4]
 8013748:	1ad3      	subs	r3, r2, r3
 801374a:	4a1b      	ldr	r2, [pc, #108]	@ (80137b8 <pvPortMalloc+0x18c>)
 801374c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 801374e:	4b1a      	ldr	r3, [pc, #104]	@ (80137b8 <pvPortMalloc+0x18c>)
 8013750:	681a      	ldr	r2, [r3, #0]
 8013752:	4b1b      	ldr	r3, [pc, #108]	@ (80137c0 <pvPortMalloc+0x194>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	429a      	cmp	r2, r3
 8013758:	d203      	bcs.n	8013762 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 801375a:	4b17      	ldr	r3, [pc, #92]	@ (80137b8 <pvPortMalloc+0x18c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	4a18      	ldr	r2, [pc, #96]	@ (80137c0 <pvPortMalloc+0x194>)
 8013760:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8013762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013764:	685a      	ldr	r2, [r3, #4]
 8013766:	4b13      	ldr	r3, [pc, #76]	@ (80137b4 <pvPortMalloc+0x188>)
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	431a      	orrs	r2, r3
 801376c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801376e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8013770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013772:	2200      	movs	r2, #0
 8013774:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8013776:	4b13      	ldr	r3, [pc, #76]	@ (80137c4 <pvPortMalloc+0x198>)
 8013778:	681b      	ldr	r3, [r3, #0]
 801377a:	3301      	adds	r3, #1
 801377c:	4a11      	ldr	r2, [pc, #68]	@ (80137c4 <pvPortMalloc+0x198>)
 801377e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8013780:	f7ff f87e 	bl	8012880 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	f003 0307 	and.w	r3, r3, #7
 801378a:	2b00      	cmp	r3, #0
 801378c:	d00b      	beq.n	80137a6 <pvPortMalloc+0x17a>
	__asm volatile
 801378e:	f04f 0330 	mov.w	r3, #48	@ 0x30
 8013792:	f383 8811 	msr	BASEPRI, r3
 8013796:	f3bf 8f6f 	isb	sy
 801379a:	f3bf 8f4f 	dsb	sy
 801379e:	60fb      	str	r3, [r7, #12]
}
 80137a0:	bf00      	nop
 80137a2:	bf00      	nop
 80137a4:	e7fd      	b.n	80137a2 <pvPortMalloc+0x176>
	return pvReturn;
 80137a6:	69fb      	ldr	r3, [r7, #28]
}
 80137a8:	4618      	mov	r0, r3
 80137aa:	3728      	adds	r7, #40	@ 0x28
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}
 80137b0:	200027dc 	.word	0x200027dc
 80137b4:	200027f0 	.word	0x200027f0
 80137b8:	200027e0 	.word	0x200027e0
 80137bc:	200027d4 	.word	0x200027d4
 80137c0:	200027e4 	.word	0x200027e4
 80137c4:	200027e8 	.word	0x200027e8

080137c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b086      	sub	sp, #24
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d04f      	beq.n	801387a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80137da:	2308      	movs	r3, #8
 80137dc:	425b      	negs	r3, r3
 80137de:	697a      	ldr	r2, [r7, #20]
 80137e0:	4413      	add	r3, r2
 80137e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80137e4:	697b      	ldr	r3, [r7, #20]
 80137e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	685a      	ldr	r2, [r3, #4]
 80137ec:	4b25      	ldr	r3, [pc, #148]	@ (8013884 <vPortFree+0xbc>)
 80137ee:	681b      	ldr	r3, [r3, #0]
 80137f0:	4013      	ands	r3, r2
 80137f2:	2b00      	cmp	r3, #0
 80137f4:	d10b      	bne.n	801380e <vPortFree+0x46>
	__asm volatile
 80137f6:	f04f 0330 	mov.w	r3, #48	@ 0x30
 80137fa:	f383 8811 	msr	BASEPRI, r3
 80137fe:	f3bf 8f6f 	isb	sy
 8013802:	f3bf 8f4f 	dsb	sy
 8013806:	60fb      	str	r3, [r7, #12]
}
 8013808:	bf00      	nop
 801380a:	bf00      	nop
 801380c:	e7fd      	b.n	801380a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 801380e:	693b      	ldr	r3, [r7, #16]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	2b00      	cmp	r3, #0
 8013814:	d00b      	beq.n	801382e <vPortFree+0x66>
	__asm volatile
 8013816:	f04f 0330 	mov.w	r3, #48	@ 0x30
 801381a:	f383 8811 	msr	BASEPRI, r3
 801381e:	f3bf 8f6f 	isb	sy
 8013822:	f3bf 8f4f 	dsb	sy
 8013826:	60bb      	str	r3, [r7, #8]
}
 8013828:	bf00      	nop
 801382a:	bf00      	nop
 801382c:	e7fd      	b.n	801382a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 801382e:	693b      	ldr	r3, [r7, #16]
 8013830:	685a      	ldr	r2, [r3, #4]
 8013832:	4b14      	ldr	r3, [pc, #80]	@ (8013884 <vPortFree+0xbc>)
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	4013      	ands	r3, r2
 8013838:	2b00      	cmp	r3, #0
 801383a:	d01e      	beq.n	801387a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 801383c:	693b      	ldr	r3, [r7, #16]
 801383e:	681b      	ldr	r3, [r3, #0]
 8013840:	2b00      	cmp	r3, #0
 8013842:	d11a      	bne.n	801387a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8013844:	693b      	ldr	r3, [r7, #16]
 8013846:	685a      	ldr	r2, [r3, #4]
 8013848:	4b0e      	ldr	r3, [pc, #56]	@ (8013884 <vPortFree+0xbc>)
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	43db      	mvns	r3, r3
 801384e:	401a      	ands	r2, r3
 8013850:	693b      	ldr	r3, [r7, #16]
 8013852:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8013854:	f7ff f806 	bl	8012864 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8013858:	693b      	ldr	r3, [r7, #16]
 801385a:	685a      	ldr	r2, [r3, #4]
 801385c:	4b0a      	ldr	r3, [pc, #40]	@ (8013888 <vPortFree+0xc0>)
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4413      	add	r3, r2
 8013862:	4a09      	ldr	r2, [pc, #36]	@ (8013888 <vPortFree+0xc0>)
 8013864:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8013866:	6938      	ldr	r0, [r7, #16]
 8013868:	f000 f874 	bl	8013954 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 801386c:	4b07      	ldr	r3, [pc, #28]	@ (801388c <vPortFree+0xc4>)
 801386e:	681b      	ldr	r3, [r3, #0]
 8013870:	3301      	adds	r3, #1
 8013872:	4a06      	ldr	r2, [pc, #24]	@ (801388c <vPortFree+0xc4>)
 8013874:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8013876:	f7ff f803 	bl	8012880 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801387a:	bf00      	nop
 801387c:	3718      	adds	r7, #24
 801387e:	46bd      	mov	sp, r7
 8013880:	bd80      	pop	{r7, pc}
 8013882:	bf00      	nop
 8013884:	200027f0 	.word	0x200027f0
 8013888:	200027e0 	.word	0x200027e0
 801388c:	200027ec 	.word	0x200027ec

08013890 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8013890:	b480      	push	{r7}
 8013892:	b085      	sub	sp, #20
 8013894:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8013896:	f641 3358 	movw	r3, #7000	@ 0x1b58
 801389a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801389c:	4b27      	ldr	r3, [pc, #156]	@ (801393c <prvHeapInit+0xac>)
 801389e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80138a0:	68fb      	ldr	r3, [r7, #12]
 80138a2:	f003 0307 	and.w	r3, r3, #7
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	d00c      	beq.n	80138c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80138aa:	68fb      	ldr	r3, [r7, #12]
 80138ac:	3307      	adds	r3, #7
 80138ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80138b0:	68fb      	ldr	r3, [r7, #12]
 80138b2:	f023 0307 	bic.w	r3, r3, #7
 80138b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80138b8:	68ba      	ldr	r2, [r7, #8]
 80138ba:	68fb      	ldr	r3, [r7, #12]
 80138bc:	1ad3      	subs	r3, r2, r3
 80138be:	4a1f      	ldr	r2, [pc, #124]	@ (801393c <prvHeapInit+0xac>)
 80138c0:	4413      	add	r3, r2
 80138c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80138c4:	68fb      	ldr	r3, [r7, #12]
 80138c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80138c8:	4a1d      	ldr	r2, [pc, #116]	@ (8013940 <prvHeapInit+0xb0>)
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80138ce:	4b1c      	ldr	r3, [pc, #112]	@ (8013940 <prvHeapInit+0xb0>)
 80138d0:	2200      	movs	r2, #0
 80138d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	68ba      	ldr	r2, [r7, #8]
 80138d8:	4413      	add	r3, r2
 80138da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80138dc:	2208      	movs	r2, #8
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	1a9b      	subs	r3, r3, r2
 80138e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80138e4:	68fb      	ldr	r3, [r7, #12]
 80138e6:	f023 0307 	bic.w	r3, r3, #7
 80138ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80138ec:	68fb      	ldr	r3, [r7, #12]
 80138ee:	4a15      	ldr	r2, [pc, #84]	@ (8013944 <prvHeapInit+0xb4>)
 80138f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80138f2:	4b14      	ldr	r3, [pc, #80]	@ (8013944 <prvHeapInit+0xb4>)
 80138f4:	681b      	ldr	r3, [r3, #0]
 80138f6:	2200      	movs	r2, #0
 80138f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80138fa:	4b12      	ldr	r3, [pc, #72]	@ (8013944 <prvHeapInit+0xb4>)
 80138fc:	681b      	ldr	r3, [r3, #0]
 80138fe:	2200      	movs	r2, #0
 8013900:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8013902:	687b      	ldr	r3, [r7, #4]
 8013904:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8013906:	683b      	ldr	r3, [r7, #0]
 8013908:	68fa      	ldr	r2, [r7, #12]
 801390a:	1ad2      	subs	r2, r2, r3
 801390c:	683b      	ldr	r3, [r7, #0]
 801390e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8013910:	4b0c      	ldr	r3, [pc, #48]	@ (8013944 <prvHeapInit+0xb4>)
 8013912:	681a      	ldr	r2, [r3, #0]
 8013914:	683b      	ldr	r3, [r7, #0]
 8013916:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013918:	683b      	ldr	r3, [r7, #0]
 801391a:	685b      	ldr	r3, [r3, #4]
 801391c:	4a0a      	ldr	r2, [pc, #40]	@ (8013948 <prvHeapInit+0xb8>)
 801391e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8013920:	683b      	ldr	r3, [r7, #0]
 8013922:	685b      	ldr	r3, [r3, #4]
 8013924:	4a09      	ldr	r2, [pc, #36]	@ (801394c <prvHeapInit+0xbc>)
 8013926:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8013928:	4b09      	ldr	r3, [pc, #36]	@ (8013950 <prvHeapInit+0xc0>)
 801392a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801392e:	601a      	str	r2, [r3, #0]
}
 8013930:	bf00      	nop
 8013932:	3714      	adds	r7, #20
 8013934:	46bd      	mov	sp, r7
 8013936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801393a:	4770      	bx	lr
 801393c:	20000c7c 	.word	0x20000c7c
 8013940:	200027d4 	.word	0x200027d4
 8013944:	200027dc 	.word	0x200027dc
 8013948:	200027e4 	.word	0x200027e4
 801394c:	200027e0 	.word	0x200027e0
 8013950:	200027f0 	.word	0x200027f0

08013954 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8013954:	b480      	push	{r7}
 8013956:	b085      	sub	sp, #20
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 801395c:	4b28      	ldr	r3, [pc, #160]	@ (8013a00 <prvInsertBlockIntoFreeList+0xac>)
 801395e:	60fb      	str	r3, [r7, #12]
 8013960:	e002      	b.n	8013968 <prvInsertBlockIntoFreeList+0x14>
 8013962:	68fb      	ldr	r3, [r7, #12]
 8013964:	681b      	ldr	r3, [r3, #0]
 8013966:	60fb      	str	r3, [r7, #12]
 8013968:	68fb      	ldr	r3, [r7, #12]
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	687a      	ldr	r2, [r7, #4]
 801396e:	429a      	cmp	r2, r3
 8013970:	d8f7      	bhi.n	8013962 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8013972:	68fb      	ldr	r3, [r7, #12]
 8013974:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	685b      	ldr	r3, [r3, #4]
 801397a:	68ba      	ldr	r2, [r7, #8]
 801397c:	4413      	add	r3, r2
 801397e:	687a      	ldr	r2, [r7, #4]
 8013980:	429a      	cmp	r2, r3
 8013982:	d108      	bne.n	8013996 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	685a      	ldr	r2, [r3, #4]
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	685b      	ldr	r3, [r3, #4]
 801398c:	441a      	add	r2, r3
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8013992:	68fb      	ldr	r3, [r7, #12]
 8013994:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8013996:	687b      	ldr	r3, [r7, #4]
 8013998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	685b      	ldr	r3, [r3, #4]
 801399e:	68ba      	ldr	r2, [r7, #8]
 80139a0:	441a      	add	r2, r3
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	429a      	cmp	r2, r3
 80139a8:	d118      	bne.n	80139dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	681a      	ldr	r2, [r3, #0]
 80139ae:	4b15      	ldr	r3, [pc, #84]	@ (8013a04 <prvInsertBlockIntoFreeList+0xb0>)
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	429a      	cmp	r2, r3
 80139b4:	d00d      	beq.n	80139d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	685a      	ldr	r2, [r3, #4]
 80139ba:	68fb      	ldr	r3, [r7, #12]
 80139bc:	681b      	ldr	r3, [r3, #0]
 80139be:	685b      	ldr	r3, [r3, #4]
 80139c0:	441a      	add	r2, r3
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	681b      	ldr	r3, [r3, #0]
 80139ca:	681a      	ldr	r2, [r3, #0]
 80139cc:	687b      	ldr	r3, [r7, #4]
 80139ce:	601a      	str	r2, [r3, #0]
 80139d0:	e008      	b.n	80139e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80139d2:	4b0c      	ldr	r3, [pc, #48]	@ (8013a04 <prvInsertBlockIntoFreeList+0xb0>)
 80139d4:	681a      	ldr	r2, [r3, #0]
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	601a      	str	r2, [r3, #0]
 80139da:	e003      	b.n	80139e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80139dc:	68fb      	ldr	r3, [r7, #12]
 80139de:	681a      	ldr	r2, [r3, #0]
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80139e4:	68fa      	ldr	r2, [r7, #12]
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	429a      	cmp	r2, r3
 80139ea:	d002      	beq.n	80139f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80139ec:	68fb      	ldr	r3, [r7, #12]
 80139ee:	687a      	ldr	r2, [r7, #4]
 80139f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80139f2:	bf00      	nop
 80139f4:	3714      	adds	r7, #20
 80139f6:	46bd      	mov	sp, r7
 80139f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80139fc:	4770      	bx	lr
 80139fe:	bf00      	nop
 8013a00:	200027d4 	.word	0x200027d4
 8013a04:	200027dc 	.word	0x200027dc

08013a08 <LL_EXTI_ClearFlag_0_31>:
  * @note   (*): Available in some devices
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  WRITE_REG(EXTI->PR1, ExtiLine);
 8013a10:	4a04      	ldr	r2, [pc, #16]	@ (8013a24 <LL_EXTI_ClearFlag_0_31+0x1c>)
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	6153      	str	r3, [r2, #20]
}
 8013a16:	bf00      	nop
 8013a18:	370c      	adds	r7, #12
 8013a1a:	46bd      	mov	sp, r7
 8013a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a20:	4770      	bx	lr
 8013a22:	bf00      	nop
 8013a24:	40010400 	.word	0x40010400

08013a28 <MX_TCPP_Init>:
/* Private variables ---------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/

void MX_TCPP_Init(void)
{
 8013a28:	b480      	push	{r7}
 8013a2a:	af00      	add	r7, sp, #0

}
 8013a2c:	bf00      	nop
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a34:	4770      	bx	lr

08013a36 <EXTI9_5_IRQHandler>:
  * @brief  This function handles the external line interrupt request.
  *         (Associated to FLGn line in case of TCPP0203 management)
  * @retval None
  */
void TCPP0203_PORT0_FLG_EXTI_IRQHANDLER(void)
{
 8013a36:	b580      	push	{r7, lr}
 8013a38:	af00      	add	r7, sp, #0
  BSP_USBPD_PWR_EventCallback(USBPD_PWR_TYPE_C_PORT_1);
 8013a3a:	2000      	movs	r0, #0
 8013a3c:	f7f5 fb88 	bl	8009150 <BSP_USBPD_PWR_EventCallback>
  TCPP0203_PORT0_FLG_EXTI_CLEAR_FLAG();
 8013a40:	2020      	movs	r0, #32
 8013a42:	f7ff ffe1 	bl	8013a08 <LL_EXTI_ClearFlag_0_31>
}
 8013a46:	bf00      	nop
 8013a48:	bd80      	pop	{r7, pc}
	...

08013a4c <MX_USBPD_Init>:

/* USER CODE BEGIN 2 */
/* USER CODE END 2 */
/* USBPD init function */
void MX_USBPD_Init(void)
{
 8013a4c:	b580      	push	{r7, lr}
 8013a4e:	af00      	add	r7, sp, #0

  /* Global Init of USBPD HW */
  USBPD_HW_IF_GlobalHwInit();
 8013a50:	f7fc fc57 	bl	8010302 <USBPD_HW_IF_GlobalHwInit>

  /* Initialize the Device Policy Manager */
  if (USBPD_OK != USBPD_DPM_InitCore())
 8013a54:	f000 f826 	bl	8013aa4 <USBPD_DPM_InitCore>
 8013a58:	4603      	mov	r3, r0
 8013a5a:	2b00      	cmp	r3, #0
 8013a5c:	d001      	beq.n	8013a62 <MX_USBPD_Init+0x16>
  {
    while(1);
 8013a5e:	bf00      	nop
 8013a60:	e7fd      	b.n	8013a5e <MX_USBPD_Init+0x12>
  }

  /* Initialize GUI before retrieving PDO from RAM */
  GUI_Init(BSP_GetBoardName, BSP_GetBoardID, HW_IF_PWR_GetVoltage, HW_IF_PWR_GetCurrent);
 8013a62:	4b0c      	ldr	r3, [pc, #48]	@ (8013a94 <MX_USBPD_Init+0x48>)
 8013a64:	4a0c      	ldr	r2, [pc, #48]	@ (8013a98 <MX_USBPD_Init+0x4c>)
 8013a66:	490d      	ldr	r1, [pc, #52]	@ (8013a9c <MX_USBPD_Init+0x50>)
 8013a68:	480d      	ldr	r0, [pc, #52]	@ (8013aa0 <MX_USBPD_Init+0x54>)
 8013a6a:	f002 fcd7 	bl	801641c <GUI_Init>

  /* Initialise the DPM application */
  if (USBPD_OK != USBPD_DPM_UserInit())
 8013a6e:	f000 fa3f 	bl	8013ef0 <USBPD_DPM_UserInit>
 8013a72:	4603      	mov	r3, r0
 8013a74:	2b00      	cmp	r3, #0
 8013a76:	d001      	beq.n	8013a7c <MX_USBPD_Init+0x30>
  {
    while(1);
 8013a78:	bf00      	nop
 8013a7a:	e7fd      	b.n	8013a78 <MX_USBPD_Init+0x2c>
  }

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

  if (USBPD_OK != USBPD_DPM_InitOS())
 8013a7c:	f000 f8c2 	bl	8013c04 <USBPD_DPM_InitOS>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d001      	beq.n	8013a8a <MX_USBPD_Init+0x3e>
  {
    while(1);
 8013a86:	bf00      	nop
 8013a88:	e7fd      	b.n	8013a86 <MX_USBPD_Init+0x3a>
  __ASM volatile ("cpsie i" : : : "memory");
 8013a8a:	b662      	cpsie	i
}
 8013a8c:	bf00      	nop
  /* USER CODE BEGIN EnableIRQ */
  /* Enable IRQ which has been disabled by FreeRTOS services */
  __enable_irq();
  /* USER CODE END EnableIRQ */

}
 8013a8e:	bf00      	nop
 8013a90:	bd80      	pop	{r7, pc}
 8013a92:	bf00      	nop
 8013a94:	08010e95 	.word	0x08010e95
 8013a98:	08010e71 	.word	0x08010e71
 8013a9c:	080077c5 	.word	0x080077c5
 8013aa0:	080077b1 	.word	0x080077b1

08013aa4 <USBPD_DPM_InitCore>:
/**
  * @brief  Initialize the core stack (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitCore(void)
{
 8013aa4:	b580      	push	{r7, lr}
 8013aa6:	b082      	sub	sp, #8
 8013aa8:	af00      	add	r7, sp, #0
  /* variable to get dynamique memory allocated by usbpd stack */
  uint32_t stack_dynamemsize;
  USBPD_StatusTypeDef _retr = USBPD_OK;
 8013aaa:	2300      	movs	r3, #0
 8013aac:	71fb      	strb	r3, [r7, #7]
    USBPD_DPM_CADCallback,
    USBPD_DPM_CADTaskWakeUp
  };

  /* Check the lib selected */
  if (USBPD_TRUE != USBPD_PE_CheckLIB(_LIB_ID))
 8013aae:	4850      	ldr	r0, [pc, #320]	@ (8013bf0 <USBPD_DPM_InitCore+0x14c>)
 8013ab0:	f7ed fcc3 	bl	800143a <USBPD_PE_CheckLIB>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	2b01      	cmp	r3, #1
 8013ab8:	d001      	beq.n	8013abe <USBPD_DPM_InitCore+0x1a>
  {
    return USBPD_ERROR;
 8013aba:	2302      	movs	r3, #2
 8013abc:	e094      	b.n	8013be8 <USBPD_DPM_InitCore+0x144>
  }

  /* to get how much memory are dynamically allocated by the stack
     the memory return is corresponding to 2 ports so if the application
     managed only one port divide the value return by 2                   */
  stack_dynamemsize = USBPD_PE_GetMemoryConsumption();
 8013abe:	f7ed fcc7 	bl	8001450 <USBPD_PE_GetMemoryConsumption>
 8013ac2:	6038      	str	r0, [r7, #0]

  /* done to avoid warning */
  (void)stack_dynamemsize;

  /* Initialise the TRACE */
  USBPD_TRACE_Init();
 8013ac4:	f7fa fd8e 	bl	800e5e4 <USBPD_TRACE_Init>

  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8013ac8:	2300      	movs	r3, #0
 8013aca:	71bb      	strb	r3, [r7, #6]
 8013acc:	e087      	b.n	8013bde <USBPD_DPM_InitCore+0x13a>
  {
    /* Variable to be sure that DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_FALSE;
 8013ace:	79bb      	ldrb	r3, [r7, #6]
 8013ad0:	4a48      	ldr	r2, [pc, #288]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	4413      	add	r3, r2
 8013ad6:	785a      	ldrb	r2, [r3, #1]
 8013ad8:	f36f 02c3 	bfc	r2, #3, #1
 8013adc:	705a      	strb	r2, [r3, #1]

    /* check the stack settings */
    DPM_Params[_port_index].PE_SpecRevision  = DPM_Settings[_port_index].PE_SpecRevision;
 8013ade:	79b9      	ldrb	r1, [r7, #6]
 8013ae0:	79ba      	ldrb	r2, [r7, #6]
 8013ae2:	4845      	ldr	r0, [pc, #276]	@ (8013bf8 <USBPD_DPM_InitCore+0x154>)
 8013ae4:	460b      	mov	r3, r1
 8013ae6:	005b      	lsls	r3, r3, #1
 8013ae8:	440b      	add	r3, r1
 8013aea:	009b      	lsls	r3, r3, #2
 8013aec:	4403      	add	r3, r0
 8013aee:	791b      	ldrb	r3, [r3, #4]
 8013af0:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8013af4:	b2d8      	uxtb	r0, r3
 8013af6:	493f      	ldr	r1, [pc, #252]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013af8:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013afc:	f360 0301 	bfi	r3, r0, #0, #2
 8013b00:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_PowerRole     = DPM_Settings[_port_index].PE_DefaultRole;
 8013b04:	79b9      	ldrb	r1, [r7, #6]
 8013b06:	79ba      	ldrb	r2, [r7, #6]
 8013b08:	483b      	ldr	r0, [pc, #236]	@ (8013bf8 <USBPD_DPM_InitCore+0x154>)
 8013b0a:	460b      	mov	r3, r1
 8013b0c:	005b      	lsls	r3, r3, #1
 8013b0e:	440b      	add	r3, r1
 8013b10:	009b      	lsls	r3, r3, #2
 8013b12:	4403      	add	r3, r0
 8013b14:	791b      	ldrb	r3, [r3, #4]
 8013b16:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013b1a:	b2d8      	uxtb	r0, r3
 8013b1c:	4935      	ldr	r1, [pc, #212]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b1e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013b22:	f360 0382 	bfi	r3, r0, #2, #1
 8013b26:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].PE_SwapOngoing   = USBPD_FALSE;
 8013b2a:	79ba      	ldrb	r2, [r7, #6]
 8013b2c:	4931      	ldr	r1, [pc, #196]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b2e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013b32:	f36f 1304 	bfc	r3, #4, #1
 8013b36:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].ActiveCCIs       = CCNONE;
 8013b3a:	79ba      	ldrb	r2, [r7, #6]
 8013b3c:	492d      	ldr	r1, [pc, #180]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b3e:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013b42:	f36f 1387 	bfc	r3, #6, #2
 8013b46:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
    DPM_Params[_port_index].VconnCCIs        = CCNONE;
 8013b4a:	79bb      	ldrb	r3, [r7, #6]
 8013b4c:	4a29      	ldr	r2, [pc, #164]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	4413      	add	r3, r2
 8013b52:	785a      	ldrb	r2, [r3, #1]
 8013b54:	f36f 1246 	bfc	r2, #5, #2
 8013b58:	705a      	strb	r2, [r3, #1]
    DPM_Params[_port_index].VconnStatus      = USBPD_FALSE;
 8013b5a:	79bb      	ldrb	r3, [r7, #6]
 8013b5c:	4a25      	ldr	r2, [pc, #148]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b5e:	009b      	lsls	r3, r3, #2
 8013b60:	4413      	add	r3, r2
 8013b62:	785a      	ldrb	r2, [r3, #1]
 8013b64:	f36f 12c7 	bfc	r2, #7, #1
 8013b68:	705a      	strb	r2, [r3, #1]

    /* CAD SET UP : Port 0 */
    CHECK_CAD_FUNCTION_CALL(USBPD_CAD_Init(_port_index, (USBPD_CAD_Callbacks *)&CAD_cbs,
 8013b6a:	79ba      	ldrb	r2, [r7, #6]
 8013b6c:	4613      	mov	r3, r2
 8013b6e:	005b      	lsls	r3, r3, #1
 8013b70:	4413      	add	r3, r2
 8013b72:	009b      	lsls	r3, r3, #2
 8013b74:	4a20      	ldr	r2, [pc, #128]	@ (8013bf8 <USBPD_DPM_InitCore+0x154>)
 8013b76:	441a      	add	r2, r3
 8013b78:	79bb      	ldrb	r3, [r7, #6]
 8013b7a:	009b      	lsls	r3, r3, #2
 8013b7c:	491d      	ldr	r1, [pc, #116]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013b7e:	440b      	add	r3, r1
 8013b80:	79b8      	ldrb	r0, [r7, #6]
 8013b82:	491e      	ldr	r1, [pc, #120]	@ (8013bfc <USBPD_DPM_InitCore+0x158>)
 8013b84:	f7ec fb4c 	bl	8000220 <USBPD_CAD_Init>
 8013b88:	4603      	mov	r3, r0
 8013b8a:	2b00      	cmp	r3, #0
 8013b8c:	d001      	beq.n	8013b92 <USBPD_DPM_InitCore+0xee>
 8013b8e:	2302      	movs	r3, #2
 8013b90:	e02a      	b.n	8013be8 <USBPD_DPM_InitCore+0x144>
                                           (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index], &DPM_Params[_port_index]));

    /* PE SET UP : Port 0 */
    CHECK_PE_FUNCTION_CALL(USBPD_PE_Init(_port_index, (USBPD_SettingsTypeDef *)&DPM_Settings[_port_index],
 8013b92:	79ba      	ldrb	r2, [r7, #6]
 8013b94:	4613      	mov	r3, r2
 8013b96:	005b      	lsls	r3, r3, #1
 8013b98:	4413      	add	r3, r2
 8013b9a:	009b      	lsls	r3, r3, #2
 8013b9c:	4a16      	ldr	r2, [pc, #88]	@ (8013bf8 <USBPD_DPM_InitCore+0x154>)
 8013b9e:	1899      	adds	r1, r3, r2
 8013ba0:	79bb      	ldrb	r3, [r7, #6]
 8013ba2:	009b      	lsls	r3, r3, #2
 8013ba4:	4a13      	ldr	r2, [pc, #76]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013ba6:	441a      	add	r2, r3
 8013ba8:	79b8      	ldrb	r0, [r7, #6]
 8013baa:	4b15      	ldr	r3, [pc, #84]	@ (8013c00 <USBPD_DPM_InitCore+0x15c>)
 8013bac:	f7ec fc06 	bl	80003bc <USBPD_PE_Init>
 8013bb0:	4603      	mov	r3, r0
 8013bb2:	71fb      	strb	r3, [r7, #7]
 8013bb4:	79fb      	ldrb	r3, [r7, #7]
 8013bb6:	2b00      	cmp	r3, #0
 8013bb8:	d001      	beq.n	8013bbe <USBPD_DPM_InitCore+0x11a>
 8013bba:	79fb      	ldrb	r3, [r7, #7]
 8013bbc:	e014      	b.n	8013be8 <USBPD_DPM_InitCore+0x144>
                                         &DPM_Params[_port_index], &dpmCallbacks));

  /* DPM is correctly initialized */
    DPM_Params[_port_index].DPM_Initialized = USBPD_TRUE;
 8013bbe:	79bb      	ldrb	r3, [r7, #6]
 8013bc0:	4a0c      	ldr	r2, [pc, #48]	@ (8013bf4 <USBPD_DPM_InitCore+0x150>)
 8013bc2:	009b      	lsls	r3, r3, #2
 8013bc4:	4413      	add	r3, r2
 8013bc6:	785a      	ldrb	r2, [r3, #1]
 8013bc8:	f042 0208 	orr.w	r2, r2, #8
 8013bcc:	705a      	strb	r2, [r3, #1]

    /* Enable CAD on Port 0 */
  USBPD_CAD_PortEnable(_port_index, USBPD_CAD_ENABLE);
 8013bce:	79bb      	ldrb	r3, [r7, #6]
 8013bd0:	2101      	movs	r1, #1
 8013bd2:	4618      	mov	r0, r3
 8013bd4:	f7ec fb4c 	bl	8000270 <USBPD_CAD_PortEnable>
  for (uint8_t _port_index = 0; _port_index < USBPD_PORT_COUNT; ++_port_index)
 8013bd8:	79bb      	ldrb	r3, [r7, #6]
 8013bda:	3301      	adds	r3, #1
 8013bdc:	71bb      	strb	r3, [r7, #6]
 8013bde:	79bb      	ldrb	r3, [r7, #6]
 8013be0:	2b00      	cmp	r3, #0
 8013be2:	f43f af74 	beq.w	8013ace <USBPD_DPM_InitCore+0x2a>
  }

  return _retr;
 8013be6:	79fb      	ldrb	r3, [r7, #7]
}
 8013be8:	4618      	mov	r0, r3
 8013bea:	3708      	adds	r7, #8
 8013bec:	46bd      	mov	sp, r7
 8013bee:	bd80      	pop	{r7, pc}
 8013bf0:	30410000 	.word	0x30410000
 8013bf4:	20002800 	.word	0x20002800
 8013bf8:	200000a0 	.word	0x200000a0
 8013bfc:	0801b9dc 	.word	0x0801b9dc
 8013c00:	0801b9e4 	.word	0x0801b9e4

08013c04 <USBPD_DPM_InitOS>:
/**
  * @brief  Initialize the OS parts (task, queue,... )
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_InitOS(void)
{
 8013c04:	b580      	push	{r7, lr}
 8013c06:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  CADQueueId = osMessageCreate(osMessageQ(queueCAD), NULL);
 8013c08:	2100      	movs	r1, #0
 8013c0a:	480e      	ldr	r0, [pc, #56]	@ (8013c44 <USBPD_DPM_InitOS+0x40>)
 8013c0c:	f7fd fd32 	bl	8011674 <osMessageCreate>
 8013c10:	4603      	mov	r3, r0
 8013c12:	4a0d      	ldr	r2, [pc, #52]	@ (8013c48 <USBPD_DPM_InitOS+0x44>)
 8013c14:	6013      	str	r3, [r2, #0]
  if (osThreadCreate(osThread(CAD), NULL) == NULL)
 8013c16:	2100      	movs	r1, #0
 8013c18:	480c      	ldr	r0, [pc, #48]	@ (8013c4c <USBPD_DPM_InitOS+0x48>)
 8013c1a:	f7fd fce4 	bl	80115e6 <osThreadCreate>
 8013c1e:	4603      	mov	r3, r0
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d101      	bne.n	8013c28 <USBPD_DPM_InitOS+0x24>
#else
  CADQueueId = osMessageQueueNew (2, sizeof(uint16_t), NULL);
  if (NULL == osThreadNew(USBPD_CAD_Task, &CADQueueId, &CAD_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    return USBPD_ERROR;
 8013c24:	2302      	movs	r3, #2
 8013c26:	e00a      	b.n	8013c3e <USBPD_DPM_InitOS+0x3a>
  }

  /* Create the queue corresponding to PE task */
#if (osCMSIS < 0x20000U)
  PEQueueId[0] = osMessageCreate(osMessageQ(queuePE), NULL);
 8013c28:	2100      	movs	r1, #0
 8013c2a:	4809      	ldr	r0, [pc, #36]	@ (8013c50 <USBPD_DPM_InitOS+0x4c>)
 8013c2c:	f7fd fd22 	bl	8011674 <osMessageCreate>
 8013c30:	4603      	mov	r3, r0
 8013c32:	4a08      	ldr	r2, [pc, #32]	@ (8013c54 <USBPD_DPM_InitOS+0x50>)
 8013c34:	6013      	str	r3, [r2, #0]
  PEQueueId[1] = osMessageQueueNew (1, sizeof(uint16_t), NULL);
#endif /* USBPD_PORT_COUNT == 2 */
#endif /* osCMSIS < 0x20000U */

  /* PE task to be created on attachment */
  DPM_PEThreadId_Table[USBPD_PORT_0] = NULL;
 8013c36:	4b08      	ldr	r3, [pc, #32]	@ (8013c58 <USBPD_DPM_InitOS+0x54>)
 8013c38:	2200      	movs	r2, #0
 8013c3a:	601a      	str	r2, [r3, #0]
#if USBPD_PORT_COUNT == 2
  DPM_PEThreadId_Table[USBPD_PORT_1] = NULL;
#endif /* USBPD_PORT_COUNT == 2 */

  return USBPD_OK;
 8013c3c:	2300      	movs	r3, #0
}
 8013c3e:	4618      	mov	r0, r3
 8013c40:	bd80      	pop	{r7, pc}
 8013c42:	bf00      	nop
 8013c44:	0801b9d4 	.word	0x0801b9d4
 8013c48:	200027f4 	.word	0x200027f4
 8013c4c:	0801b9c0 	.word	0x0801b9c0
 8013c50:	0801b9b8 	.word	0x0801b9b8
 8013c54:	200027fc 	.word	0x200027fc
 8013c58:	200027f8 	.word	0x200027f8

08013c5c <USBPD_DPM_TimerCounter>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD status
  */
void USBPD_DPM_TimerCounter(void)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	af00      	add	r7, sp, #0
  /* Call PE/PRL timers functions only if DPM is initialized */
  if (USBPD_TRUE == DPM_Params[USBPD_PORT_0].DPM_Initialized)
 8013c60:	4b08      	ldr	r3, [pc, #32]	@ (8013c84 <USBPD_DPM_TimerCounter+0x28>)
 8013c62:	785b      	ldrb	r3, [r3, #1]
 8013c64:	f003 0308 	and.w	r3, r3, #8
 8013c68:	b2db      	uxtb	r3, r3
 8013c6a:	2b00      	cmp	r3, #0
 8013c6c:	d008      	beq.n	8013c80 <USBPD_DPM_TimerCounter+0x24>
  {
    USBPD_DPM_UserTimerCounter(USBPD_PORT_0);
 8013c6e:	2000      	movs	r0, #0
 8013c70:	f000 f9dc 	bl	801402c <USBPD_DPM_UserTimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_0);
 8013c74:	2000      	movs	r0, #0
 8013c76:	f7ec fbf7 	bl	8000468 <USBPD_PE_TimerCounter>
    USBPD_PRL_TimerCounter(USBPD_PORT_0);
 8013c7a:	2000      	movs	r0, #0
 8013c7c:	f7f1 f954 	bl	8004f28 <USBPD_PRL_TimerCounter>
    USBPD_PE_TimerCounter(USBPD_PORT_1);
    USBPD_PRL_TimerCounter(USBPD_PORT_1);
  }
#endif /* USBPD_PORT_COUNT == 2 */

}
 8013c80:	bf00      	nop
 8013c82:	bd80      	pop	{r7, pc}
 8013c84:	20002800 	.word	0x20002800

08013c88 <USBPD_PE_TaskWakeUp>:
  * @brief  WakeUp PE task
  * @param  PortNum port number
  * @retval None
  */
static void USBPD_PE_TaskWakeUp(uint8_t PortNum)
{
 8013c88:	b580      	push	{r7, lr}
 8013c8a:	b082      	sub	sp, #8
 8013c8c:	af00      	add	r7, sp, #0
 8013c8e:	4603      	mov	r3, r0
 8013c90:	71fb      	strb	r3, [r7, #7]
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(PEQueueId[PortNum], 0xFFFF, 0);
 8013c92:	79fb      	ldrb	r3, [r7, #7]
 8013c94:	4a06      	ldr	r2, [pc, #24]	@ (8013cb0 <USBPD_PE_TaskWakeUp+0x28>)
 8013c96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013c9a:	2200      	movs	r2, #0
 8013c9c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013ca0:	4618      	mov	r0, r3
 8013ca2:	f7fd fcf9 	bl	8011698 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(PEQueueId[PortNum], &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8013ca6:	bf00      	nop
 8013ca8:	3708      	adds	r7, #8
 8013caa:	46bd      	mov	sp, r7
 8013cac:	bd80      	pop	{r7, pc}
 8013cae:	bf00      	nop
 8013cb0:	200027fc 	.word	0x200027fc

08013cb4 <USBPD_DPM_CADTaskWakeUp>:
/**
  * @brief  WakeUp CAD task
  * @retval None
  */
static void USBPD_DPM_CADTaskWakeUp(void)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  (void)osMessagePut(CADQueueId, 0xFFFF, 0);
 8013cb8:	4b04      	ldr	r3, [pc, #16]	@ (8013ccc <USBPD_DPM_CADTaskWakeUp+0x18>)
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	2200      	movs	r2, #0
 8013cbe:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013cc2:	4618      	mov	r0, r3
 8013cc4:	f7fd fce8 	bl	8011698 <osMessagePut>
#else
  uint32_t event = 0xFFFFU;
  (void)osMessageQueuePut(CADQueueId, &event, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
}
 8013cc8:	bf00      	nop
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	200027f4 	.word	0x200027f4

08013cd0 <USBPD_PE_Task>:
  * @brief  Main task for PE layer
  * @param  argument Not used
  * @retval None
  */
void USBPD_PE_Task(void const *argument)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b088      	sub	sp, #32
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6178      	str	r0, [r7, #20]
  uint8_t _port = (uint32_t)argument;
 8013cd8:	697b      	ldr	r3, [r7, #20]
 8013cda:	77fb      	strb	r3, [r7, #31]
  uint32_t _timing;

  for(;;)
  {
    _timing = USBPD_PE_StateMachine_SRC(_port);
 8013cdc:	7ffb      	ldrb	r3, [r7, #31]
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ee fe24 	bl	800292c <USBPD_PE_StateMachine_SRC>
 8013ce4:	61b8      	str	r0, [r7, #24]
    osMessageGet(PEQueueId[_port],_timing);
 8013ce6:	7ffb      	ldrb	r3, [r7, #31]
 8013ce8:	4a04      	ldr	r2, [pc, #16]	@ (8013cfc <USBPD_PE_Task+0x2c>)
 8013cea:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8013cee:	463b      	mov	r3, r7
 8013cf0:	69ba      	ldr	r2, [r7, #24]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f7fd fd10 	bl	8011718 <osMessageGet>
    _timing = USBPD_PE_StateMachine_SRC(_port);
 8013cf8:	bf00      	nop
 8013cfa:	e7ef      	b.n	8013cdc <USBPD_PE_Task+0xc>
 8013cfc:	200027fc 	.word	0x200027fc

08013d00 <USBPD_CAD_Task>:
#if (osCMSIS < 0x20000U)
void USBPD_CAD_Task(void const *argument)
#else
void USBPD_CAD_Task(void *argument)
#endif /* osCMSIS < 0x20000U */
{
 8013d00:	b590      	push	{r4, r7, lr}
 8013d02:	b087      	sub	sp, #28
 8013d04:	af00      	add	r7, sp, #0
 8013d06:	6178      	str	r0, [r7, #20]
  for (;;)
  {
#if (osCMSIS < 0x20000U)
    osMessageGet(CADQueueId, USBPD_CAD_Process());
 8013d08:	4b05      	ldr	r3, [pc, #20]	@ (8013d20 <USBPD_CAD_Task+0x20>)
 8013d0a:	681c      	ldr	r4, [r3, #0]
 8013d0c:	f7ec fab7 	bl	800027e <USBPD_CAD_Process>
 8013d10:	4602      	mov	r2, r0
 8013d12:	463b      	mov	r3, r7
 8013d14:	4621      	mov	r1, r4
 8013d16:	4618      	mov	r0, r3
 8013d18:	f7fd fcfe 	bl	8011718 <osMessageGet>
 8013d1c:	e7f4      	b.n	8013d08 <USBPD_CAD_Task+0x8>
 8013d1e:	bf00      	nop
 8013d20:	200027f4 	.word	0x200027f4

08013d24 <USBPD_DPM_CADCallback>:
  * @param  State     CAD state
  * @param  Cc        The Communication Channel for the USBPD communication
  * @retval None
  */
void USBPD_DPM_CADCallback(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8013d24:	b580      	push	{r7, lr}
 8013d26:	b086      	sub	sp, #24
 8013d28:	af02      	add	r7, sp, #8
 8013d2a:	4603      	mov	r3, r0
 8013d2c:	603a      	str	r2, [r7, #0]
 8013d2e:	71fb      	strb	r3, [r7, #7]
 8013d30:	460b      	mov	r3, r1
 8013d32:	71bb      	strb	r3, [r7, #6]
  USBPD_TRACE_Add(USBPD_TRACE_CADEVENT, PortNum, (uint8_t)State, NULL, 0);
 8013d34:	79ba      	ldrb	r2, [r7, #6]
 8013d36:	79f9      	ldrb	r1, [r7, #7]
 8013d38:	2300      	movs	r3, #0
 8013d3a:	9300      	str	r3, [sp, #0]
 8013d3c:	2300      	movs	r3, #0
 8013d3e:	2003      	movs	r0, #3
 8013d40:	f7fa fc62 	bl	800e608 <USBPD_TRACE_Add>

  switch (State)
 8013d44:	79bb      	ldrb	r3, [r7, #6]
 8013d46:	3b01      	subs	r3, #1
 8013d48:	2b03      	cmp	r3, #3
 8013d4a:	d867      	bhi.n	8013e1c <USBPD_DPM_CADCallback+0xf8>
 8013d4c:	a201      	add	r2, pc, #4	@ (adr r2, 8013d54 <USBPD_DPM_CADCallback+0x30>)
 8013d4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013d52:	bf00      	nop
 8013d54:	08013d81 	.word	0x08013d81
 8013d58:	08013d73 	.word	0x08013d73
 8013d5c:	08013d81 	.word	0x08013d81
 8013d60:	08013d65 	.word	0x08013d65
    case USBPD_CAD_EVENT_ATTEMC :
    {
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnStatus = USBPD_TRUE;
#endif /* _VCONN_SUPPORT */
      DPM_ManageAttachedState(PortNum, State, Cc);
 8013d64:	79b9      	ldrb	r1, [r7, #6]
 8013d66:	79fb      	ldrb	r3, [r7, #7]
 8013d68:	683a      	ldr	r2, [r7, #0]
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	f000 f860 	bl	8013e30 <DPM_ManageAttachedState>
#ifdef _VCONN_SUPPORT
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=TRUE");
#endif /* _VCONN_SUPPORT */
      break;
 8013d70:	e055      	b.n	8013e1e <USBPD_DPM_CADCallback+0xfa>
    }
    case USBPD_CAD_EVENT_ATTACHED :
      DPM_ManageAttachedState(PortNum, State, Cc);
 8013d72:	79b9      	ldrb	r1, [r7, #6]
 8013d74:	79fb      	ldrb	r3, [r7, #7]
 8013d76:	683a      	ldr	r2, [r7, #0]
 8013d78:	4618      	mov	r0, r3
 8013d7a:	f000 f859 	bl	8013e30 <DPM_ManageAttachedState>
      break;
 8013d7e:	e04e      	b.n	8013e1e <USBPD_DPM_CADCallback+0xfa>
    case USBPD_CAD_EVENT_DETACHED :
    case USBPD_CAD_EVENT_EMC :
    {
      /* The ufp is detached */
      (void)USBPD_PE_IsCableConnected(PortNum, 0);
 8013d80:	79fb      	ldrb	r3, [r7, #7]
 8013d82:	2100      	movs	r1, #0
 8013d84:	4618      	mov	r0, r3
 8013d86:	f7ec fbc2 	bl	800050e <USBPD_PE_IsCableConnected>
      /* Terminate PE task */
      if (DPM_PEThreadId_Table[PortNum] != NULL)
 8013d8a:	79fb      	ldrb	r3, [r7, #7]
 8013d8c:	4a26      	ldr	r2, [pc, #152]	@ (8013e28 <USBPD_DPM_CADCallback+0x104>)
 8013d8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d92:	2b00      	cmp	r3, #0
 8013d94:	d023      	beq.n	8013dde <USBPD_DPM_CADCallback+0xba>
      {
        uint8_t _timeout = 0;
 8013d96:	2300      	movs	r3, #0
 8013d98:	73fb      	strb	r3, [r7, #15]
        /* Let time to PE to complete the ongoing action */
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8013d9a:	e008      	b.n	8013dae <USBPD_DPM_CADCallback+0x8a>
        {
          osDelay(1);
 8013d9c:	2001      	movs	r0, #1
 8013d9e:	f7fd fc55 	bl	801164c <osDelay>
          _timeout++;
 8013da2:	7bfb      	ldrb	r3, [r7, #15]
 8013da4:	3301      	adds	r3, #1
 8013da6:	73fb      	strb	r3, [r7, #15]
          if (_timeout > 30)
 8013da8:	7bfb      	ldrb	r3, [r7, #15]
 8013daa:	2b1e      	cmp	r3, #30
 8013dac:	d80a      	bhi.n	8013dc4 <USBPD_DPM_CADCallback+0xa0>
        while (eBlocked != eTaskGetState(DPM_PEThreadId_Table[PortNum]))
 8013dae:	79fb      	ldrb	r3, [r7, #7]
 8013db0:	4a1d      	ldr	r2, [pc, #116]	@ (8013e28 <USBPD_DPM_CADCallback+0x104>)
 8013db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013db6:	4618      	mov	r0, r3
 8013db8:	f7fe fca4 	bl	8012704 <eTaskGetState>
 8013dbc:	4603      	mov	r3, r0
 8013dbe:	2b02      	cmp	r3, #2
 8013dc0:	d1ec      	bne.n	8013d9c <USBPD_DPM_CADCallback+0x78>
 8013dc2:	e000      	b.n	8013dc6 <USBPD_DPM_CADCallback+0xa2>
          {
            break;
 8013dc4:	bf00      	nop
          }
        };

        /* Kill PE task */
        osThreadTerminate(DPM_PEThreadId_Table[PortNum]);
 8013dc6:	79fb      	ldrb	r3, [r7, #7]
 8013dc8:	4a17      	ldr	r2, [pc, #92]	@ (8013e28 <USBPD_DPM_CADCallback+0x104>)
 8013dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013dce:	4618      	mov	r0, r3
 8013dd0:	f7fd fc30 	bl	8011634 <osThreadTerminate>
        DPM_PEThreadId_Table[PortNum] = NULL;
 8013dd4:	79fb      	ldrb	r3, [r7, #7]
 8013dd6:	4a14      	ldr	r2, [pc, #80]	@ (8013e28 <USBPD_DPM_CADCallback+0x104>)
 8013dd8:	2100      	movs	r1, #0
 8013dda:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      }
      DPM_Params[PortNum].PE_SwapOngoing = USBPD_FALSE;
 8013dde:	79fa      	ldrb	r2, [r7, #7]
 8013de0:	4912      	ldr	r1, [pc, #72]	@ (8013e2c <USBPD_DPM_CADCallback+0x108>)
 8013de2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013de6:	f36f 1304 	bfc	r3, #4, #1
 8013dea:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].ActiveCCIs = CCNONE;
 8013dee:	79fa      	ldrb	r2, [r7, #7]
 8013df0:	490e      	ldr	r1, [pc, #56]	@ (8013e2c <USBPD_DPM_CADCallback+0x108>)
 8013df2:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013df6:	f36f 1387 	bfc	r3, #6, #2
 8013dfa:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
      DPM_Params[PortNum].PE_Power   = USBPD_POWER_NO;
 8013dfe:	79fb      	ldrb	r3, [r7, #7]
 8013e00:	4a0a      	ldr	r2, [pc, #40]	@ (8013e2c <USBPD_DPM_CADCallback+0x108>)
 8013e02:	009b      	lsls	r3, r3, #2
 8013e04:	4413      	add	r3, r2
 8013e06:	785a      	ldrb	r2, [r3, #1]
 8013e08:	f36f 0202 	bfc	r2, #0, #3
 8013e0c:	705a      	strb	r2, [r3, #1]
      USBPD_DPM_UserCableDetection(PortNum, State);
 8013e0e:	79ba      	ldrb	r2, [r7, #6]
 8013e10:	79fb      	ldrb	r3, [r7, #7]
 8013e12:	4611      	mov	r1, r2
 8013e14:	4618      	mov	r0, r3
 8013e16:	f000 f893 	bl	8013f40 <USBPD_DPM_UserCableDetection>
#ifdef _VCONN_SUPPORT
      DPM_Params[PortNum].VconnCCIs = CCNONE;
      DPM_Params[PortNum].VconnStatus = USBPD_FALSE;
      DPM_CORE_DEBUG_TRACE(PortNum, "Note: VconnStatus=FALSE");
#endif /* _VCONN_SUPPORT */
      break;
 8013e1a:	e000      	b.n	8013e1e <USBPD_DPM_CADCallback+0xfa>
    }
    default :
      /* nothing to do */
      break;
 8013e1c:	bf00      	nop
  }
}
 8013e1e:	bf00      	nop
 8013e20:	3710      	adds	r7, #16
 8013e22:	46bd      	mov	sp, r7
 8013e24:	bd80      	pop	{r7, pc}
 8013e26:	bf00      	nop
 8013e28:	200027f8 	.word	0x200027f8
 8013e2c:	20002800 	.word	0x20002800

08013e30 <DPM_ManageAttachedState>:

static void DPM_ManageAttachedState(uint8_t PortNum, USBPD_CAD_EVENT State, CCxPin_TypeDef Cc)
{
 8013e30:	b590      	push	{r4, r7, lr}
 8013e32:	b083      	sub	sp, #12
 8013e34:	af00      	add	r7, sp, #0
 8013e36:	4603      	mov	r3, r0
 8013e38:	603a      	str	r2, [r7, #0]
 8013e3a:	71fb      	strb	r3, [r7, #7]
 8013e3c:	460b      	mov	r3, r1
 8013e3e:	71bb      	strb	r3, [r7, #6]
  if (CC2 == Cc)
  {
    DPM_Params[PortNum].VconnCCIs = CC1;
  }
#endif /* _VCONN_SUPPORT */
  DPM_Params[PortNum].ActiveCCIs = Cc;
 8013e40:	79fa      	ldrb	r2, [r7, #7]
 8013e42:	683b      	ldr	r3, [r7, #0]
 8013e44:	f003 0303 	and.w	r3, r3, #3
 8013e48:	b2d8      	uxtb	r0, r3
 8013e4a:	491a      	ldr	r1, [pc, #104]	@ (8013eb4 <DPM_ManageAttachedState+0x84>)
 8013e4c:	f811 3022 	ldrb.w	r3, [r1, r2, lsl #2]
 8013e50:	f360 1387 	bfi	r3, r0, #6, #2
 8013e54:	f801 3022 	strb.w	r3, [r1, r2, lsl #2]
  (void)USBPD_PE_IsCableConnected(PortNum, 1);
 8013e58:	79fb      	ldrb	r3, [r7, #7]
 8013e5a:	2101      	movs	r1, #1
 8013e5c:	4618      	mov	r0, r3
 8013e5e:	f7ec fb56 	bl	800050e <USBPD_PE_IsCableConnected>

  USBPD_DPM_UserCableDetection(PortNum, State);
 8013e62:	79ba      	ldrb	r2, [r7, #6]
 8013e64:	79fb      	ldrb	r3, [r7, #7]
 8013e66:	4611      	mov	r1, r2
 8013e68:	4618      	mov	r0, r3
 8013e6a:	f000 f869 	bl	8013f40 <USBPD_DPM_UserCableDetection>

  /* Create PE task */
  if (DPM_PEThreadId_Table[PortNum] == NULL)
 8013e6e:	79fb      	ldrb	r3, [r7, #7]
 8013e70:	4a11      	ldr	r2, [pc, #68]	@ (8013eb8 <DPM_ManageAttachedState+0x88>)
 8013e72:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013e76:	2b00      	cmp	r3, #0
 8013e78:	d117      	bne.n	8013eaa <DPM_ManageAttachedState+0x7a>
  {
#if (osCMSIS < 0x20000U)
    DPM_PEThreadId_Table[PortNum] = osThreadCreate(OSTHREAD_PE(PortNum), (void *)((uint32_t)PortNum));
 8013e7a:	79fb      	ldrb	r3, [r7, #7]
 8013e7c:	2b00      	cmp	r3, #0
 8013e7e:	d101      	bne.n	8013e84 <DPM_ManageAttachedState+0x54>
 8013e80:	4b0e      	ldr	r3, [pc, #56]	@ (8013ebc <DPM_ManageAttachedState+0x8c>)
 8013e82:	e000      	b.n	8013e86 <DPM_ManageAttachedState+0x56>
 8013e84:	4b0e      	ldr	r3, [pc, #56]	@ (8013ec0 <DPM_ManageAttachedState+0x90>)
 8013e86:	79fa      	ldrb	r2, [r7, #7]
 8013e88:	79fc      	ldrb	r4, [r7, #7]
 8013e8a:	4611      	mov	r1, r2
 8013e8c:	4618      	mov	r0, r3
 8013e8e:	f7fd fbaa 	bl	80115e6 <osThreadCreate>
 8013e92:	4603      	mov	r3, r0
 8013e94:	4a08      	ldr	r2, [pc, #32]	@ (8013eb8 <DPM_ManageAttachedState+0x88>)
 8013e96:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
#else
    DPM_PEThreadId_Table[PortNum] = osThreadNew(OSTHREAD_PE(PortNum), NULL, OSTHREAD_PE_ATTR(PortNum));
#endif /* osCMSIS < 0x20000U */
    if (DPM_PEThreadId_Table[PortNum] == NULL)
 8013e9a:	79fb      	ldrb	r3, [r7, #7]
 8013e9c:	4a06      	ldr	r2, [pc, #24]	@ (8013eb8 <DPM_ManageAttachedState+0x88>)
 8013e9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d101      	bne.n	8013eaa <DPM_ManageAttachedState+0x7a>
    {
      /* should not occur. May be an issue with FreeRTOS heap size too small */
      while (1);
 8013ea6:	bf00      	nop
 8013ea8:	e7fd      	b.n	8013ea6 <DPM_ManageAttachedState+0x76>
    }
  }
}
 8013eaa:	bf00      	nop
 8013eac:	370c      	adds	r7, #12
 8013eae:	46bd      	mov	sp, r7
 8013eb0:	bd90      	pop	{r4, r7, pc}
 8013eb2:	bf00      	nop
 8013eb4:	20002800 	.word	0x20002800
 8013eb8:	200027f8 	.word	0x200027f8
 8013ebc:	0801b990 	.word	0x0801b990
 8013ec0:	0801b9a4 	.word	0x0801b9a4

08013ec4 <__NVIC_SystemReset>:
{
 8013ec4:	b480      	push	{r7}
 8013ec6:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8013ec8:	f3bf 8f4f 	dsb	sy
}
 8013ecc:	bf00      	nop
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8013ece:	4b06      	ldr	r3, [pc, #24]	@ (8013ee8 <__NVIC_SystemReset+0x24>)
 8013ed0:	68db      	ldr	r3, [r3, #12]
 8013ed2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8013ed6:	4904      	ldr	r1, [pc, #16]	@ (8013ee8 <__NVIC_SystemReset+0x24>)
 8013ed8:	4b04      	ldr	r3, [pc, #16]	@ (8013eec <__NVIC_SystemReset+0x28>)
 8013eda:	4313      	orrs	r3, r2
 8013edc:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8013ede:	f3bf 8f4f 	dsb	sy
}
 8013ee2:	bf00      	nop
    __NOP();
 8013ee4:	bf00      	nop
 8013ee6:	e7fd      	b.n	8013ee4 <__NVIC_SystemReset+0x20>
 8013ee8:	e000ed00 	.word	0xe000ed00
 8013eec:	05fa0004 	.word	0x05fa0004

08013ef0 <USBPD_DPM_UserInit>:
/**
  * @brief  Initialize DPM (port power role, PWR_IF, CAD and PE Init procedures)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_UserInit(void)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_DPM_UserInit */

  /* PWR SET UP */
  if(USBPD_OK !=  USBPD_PWR_IF_Init())
 8013ef4:	f001 f9a0 	bl	8015238 <USBPD_PWR_IF_Init>
 8013ef8:	4603      	mov	r3, r0
 8013efa:	2b00      	cmp	r3, #0
 8013efc:	d001      	beq.n	8013f02 <USBPD_DPM_UserInit+0x12>
  {
    return USBPD_ERROR;
 8013efe:	2302      	movs	r3, #2
 8013f00:	e000      	b.n	8013f04 <USBPD_DPM_UserInit+0x14>
  }
  return USBPD_OK;
 8013f02:	2300      	movs	r3, #0
/* USER CODE END USBPD_DPM_UserInit */
}
 8013f04:	4618      	mov	r0, r3
 8013f06:	bd80      	pop	{r7, pc}

08013f08 <USBPD_DPM_SetNotification_GUI>:
  * @param  PtrPost       Pointer on function to send GUI notifications
  * @param  PtrSaveInfo   Pointer on function to save information from Port Partner
  * @retval None
  */
void USBPD_DPM_SetNotification_GUI(GUI_NOTIFICATION_FORMAT_SEND PtrFormatSend, GUI_NOTIFICATION_POST PtrPost, GUI_SAVE_INFO PtrSaveInfo)
{
 8013f08:	b480      	push	{r7}
 8013f0a:	b085      	sub	sp, #20
 8013f0c:	af00      	add	r7, sp, #0
 8013f0e:	60f8      	str	r0, [r7, #12]
 8013f10:	60b9      	str	r1, [r7, #8]
 8013f12:	607a      	str	r2, [r7, #4]
  DPM_GUI_PostNotificationMessage   = PtrPost;
 8013f14:	4a07      	ldr	r2, [pc, #28]	@ (8013f34 <USBPD_DPM_SetNotification_GUI+0x2c>)
 8013f16:	68bb      	ldr	r3, [r7, #8]
 8013f18:	6013      	str	r3, [r2, #0]
  DPM_GUI_FormatAndSendNotification = PtrFormatSend;
 8013f1a:	4a07      	ldr	r2, [pc, #28]	@ (8013f38 <USBPD_DPM_SetNotification_GUI+0x30>)
 8013f1c:	68fb      	ldr	r3, [r7, #12]
 8013f1e:	6013      	str	r3, [r2, #0]
  DPM_GUI_SaveInfo                  = PtrSaveInfo;
 8013f20:	4a06      	ldr	r2, [pc, #24]	@ (8013f3c <USBPD_DPM_SetNotification_GUI+0x34>)
 8013f22:	687b      	ldr	r3, [r7, #4]
 8013f24:	6013      	str	r3, [r2, #0]
}
 8013f26:	bf00      	nop
 8013f28:	3714      	adds	r7, #20
 8013f2a:	46bd      	mov	sp, r7
 8013f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f30:	4770      	bx	lr
 8013f32:	bf00      	nop
 8013f34:	20002804 	.word	0x20002804
 8013f38:	20002808 	.word	0x20002808
 8013f3c:	2000280c 	.word	0x2000280c

08013f40 <USBPD_DPM_UserCableDetection>:
  * @param  PortNum The handle of the port
  * @param  State CAD state
  * @retval None
  */
void USBPD_DPM_UserCableDetection(uint8_t PortNum, USBPD_CAD_EVENT State)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b082      	sub	sp, #8
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	4603      	mov	r3, r0
 8013f48:	460a      	mov	r2, r1
 8013f4a:	71fb      	strb	r3, [r7, #7]
 8013f4c:	4613      	mov	r3, r2
 8013f4e:	71bb      	strb	r3, [r7, #6]
  switch(State)
 8013f50:	79bb      	ldrb	r3, [r7, #6]
 8013f52:	2b02      	cmp	r3, #2
 8013f54:	d001      	beq.n	8013f5a <USBPD_DPM_UserCableDetection+0x1a>
 8013f56:	2b04      	cmp	r3, #4
 8013f58:	d10a      	bne.n	8013f70 <USBPD_DPM_UserCableDetection+0x30>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8013f5a:	4b32      	ldr	r3, [pc, #200]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f5c:	681b      	ldr	r3, [r3, #0]
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d012      	beq.n	8013f88 <USBPD_DPM_UserCableDetection+0x48>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 8013f62:	4b30      	ldr	r3, [pc, #192]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	79f8      	ldrb	r0, [r7, #7]
 8013f68:	2200      	movs	r2, #0
 8013f6a:	2120      	movs	r1, #32
 8013f6c:	4798      	blx	r3
    }
    break;
 8013f6e:	e00b      	b.n	8013f88 <USBPD_DPM_UserCableDetection+0x48>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8013f70:	4b2c      	ldr	r3, [pc, #176]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f72:	681b      	ldr	r3, [r3, #0]
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d008      	beq.n	8013f8a <USBPD_DPM_UserCableDetection+0x4a>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 8013f78:	4b2a      	ldr	r3, [pc, #168]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f7a:	681b      	ldr	r3, [r3, #0]
 8013f7c:	79f8      	ldrb	r0, [r7, #7]
 8013f7e:	2200      	movs	r2, #0
 8013f80:	f248 0120 	movw	r1, #32800	@ 0x8020
 8013f84:	4798      	blx	r3
 8013f86:	e000      	b.n	8013f8a <USBPD_DPM_UserCableDetection+0x4a>
    break;
 8013f88:	bf00      	nop
    }
  }
/* USER CODE BEGIN USBPD_DPM_UserCableDetection */

#ifdef _GUI_INTERFACE
  switch(State)
 8013f8a:	79bb      	ldrb	r3, [r7, #6]
 8013f8c:	2b02      	cmp	r3, #2
 8013f8e:	d001      	beq.n	8013f94 <USBPD_DPM_UserCableDetection+0x54>
 8013f90:	2b04      	cmp	r3, #4
 8013f92:	d10a      	bne.n	8013faa <USBPD_DPM_UserCableDetection+0x6a>
  {
  case USBPD_CAD_EVENT_ATTEMC:
  case USBPD_CAD_EVENT_ATTACHED:
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8013f94:	4b23      	ldr	r3, [pc, #140]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	2b00      	cmp	r3, #0
 8013f9a:	d012      	beq.n	8013fc2 <USBPD_DPM_UserCableDetection+0x82>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED, 0);
 8013f9c:	4b21      	ldr	r3, [pc, #132]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013f9e:	681b      	ldr	r3, [r3, #0]
 8013fa0:	79f8      	ldrb	r0, [r7, #7]
 8013fa2:	2200      	movs	r2, #0
 8013fa4:	2120      	movs	r1, #32
 8013fa6:	4798      	blx	r3
    }
    break;
 8013fa8:	e00b      	b.n	8013fc2 <USBPD_DPM_UserCableDetection+0x82>
  default :
    /* Format and send a notification to GUI if enabled */
    if (NULL != DPM_GUI_FormatAndSendNotification)
 8013faa:	4b1e      	ldr	r3, [pc, #120]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d008      	beq.n	8013fc4 <USBPD_DPM_UserCableDetection+0x84>
    {
      DPM_GUI_FormatAndSendNotification(PortNum, DPM_GUI_NOTIF_ISCONNECTED | DPM_GUI_NOTIF_POWER_EVENT, 0);
 8013fb2:	4b1c      	ldr	r3, [pc, #112]	@ (8014024 <USBPD_DPM_UserCableDetection+0xe4>)
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	79f8      	ldrb	r0, [r7, #7]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f248 0120 	movw	r1, #32800	@ 0x8020
 8013fbe:	4798      	blx	r3
 8013fc0:	e000      	b.n	8013fc4 <USBPD_DPM_UserCableDetection+0x84>
    break;
 8013fc2:	bf00      	nop
    }
  }
#endif /*_GUI_INTERFACE*/

  switch(State)
 8013fc4:	79bb      	ldrb	r3, [r7, #6]
 8013fc6:	2b02      	cmp	r3, #2
 8013fc8:	d001      	beq.n	8013fce <USBPD_DPM_UserCableDetection+0x8e>
 8013fca:	2b04      	cmp	r3, #4
 8013fcc:	d111      	bne.n	8013ff2 <USBPD_DPM_UserCableDetection+0xb2>
  {
  case USBPD_CAD_EVENT_ATTACHED:
  case USBPD_CAD_EVENT_ATTEMC:
    {
    if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 8013fce:	79fb      	ldrb	r3, [r7, #7]
 8013fd0:	4a15      	ldr	r2, [pc, #84]	@ (8014028 <USBPD_DPM_UserCableDetection+0xe8>)
 8013fd2:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013fd6:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013fda:	b2db      	uxtb	r3, r3
 8013fdc:	2b01      	cmp	r3, #1
 8013fde:	d11a      	bne.n	8014016 <USBPD_DPM_UserCableDetection+0xd6>
    {
      if (USBPD_OK != USBPD_PWR_IF_VBUSEnable(PortNum))
 8013fe0:	79fb      	ldrb	r3, [r7, #7]
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f001 f9b0 	bl	8015348 <USBPD_PWR_IF_VBUSEnable>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	2b00      	cmp	r3, #0
 8013fec:	d013      	beq.n	8014016 <USBPD_DPM_UserCableDetection+0xd6>
      {
        /* Should not occur */
        NVIC_SystemReset();
 8013fee:	f7ff ff69 	bl	8013ec4 <__NVIC_SystemReset>
    }
  case USBPD_CAD_EVENT_DETACHED :
  case USBPD_CAD_EVENT_EMC :
  default :

    if (DPM_Params[PortNum].PE_PowerRole == USBPD_PORTPOWERROLE_SRC)
 8013ff2:	79fb      	ldrb	r3, [r7, #7]
 8013ff4:	4a0c      	ldr	r2, [pc, #48]	@ (8014028 <USBPD_DPM_UserCableDetection+0xe8>)
 8013ff6:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8013ffa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8013ffe:	b2db      	uxtb	r3, r3
 8014000:	2b01      	cmp	r3, #1
 8014002:	d10a      	bne.n	801401a <USBPD_DPM_UserCableDetection+0xda>
    {
      if (USBPD_OK != USBPD_PWR_IF_VBUSDisable(PortNum))
 8014004:	79fb      	ldrb	r3, [r7, #7]
 8014006:	4618      	mov	r0, r3
 8014008:	f001 f9b2 	bl	8015370 <USBPD_PWR_IF_VBUSDisable>
 801400c:	4603      	mov	r3, r0
 801400e:	2b00      	cmp	r3, #0
 8014010:	d003      	beq.n	801401a <USBPD_DPM_UserCableDetection+0xda>
      {
        /* Should not occur */
        while(1);
 8014012:	bf00      	nop
 8014014:	e7fd      	b.n	8014012 <USBPD_DPM_UserCableDetection+0xd2>
    break;
 8014016:	bf00      	nop
 8014018:	e000      	b.n	801401c <USBPD_DPM_UserCableDetection+0xdc>
      }
    }
    break;
 801401a:	bf00      	nop
  }

/* USER CODE END USBPD_DPM_UserCableDetection */
}
 801401c:	bf00      	nop
 801401e:	3708      	adds	r7, #8
 8014020:	46bd      	mov	sp, r7
 8014022:	bd80      	pop	{r7, pc}
 8014024:	20002808 	.word	0x20002808
 8014028:	20002800 	.word	0x20002800

0801402c <USBPD_DPM_UserTimerCounter>:
  * @brief  function used to manage user timer.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_UserTimerCounter(uint8_t PortNum)
{
 801402c:	b480      	push	{r7}
 801402e:	b083      	sub	sp, #12
 8014030:	af00      	add	r7, sp, #0
 8014032:	4603      	mov	r3, r0
 8014034:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_UserTimerCounter */

/* USER CODE END USBPD_DPM_UserTimerCounter */
}
 8014036:	bf00      	nop
 8014038:	370c      	adds	r7, #12
 801403a:	46bd      	mov	sp, r7
 801403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014040:	4770      	bx	lr
	...

08014044 <USBPD_DPM_Notification>:
  * @param  PortNum The current port number
  * @param  EventVal @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void USBPD_DPM_Notification(uint8_t PortNum, USBPD_NotifyEventValue_TypeDef EventVal)
{
 8014044:	b580      	push	{r7, lr}
 8014046:	b092      	sub	sp, #72	@ 0x48
 8014048:	af02      	add	r7, sp, #8
 801404a:	4603      	mov	r3, r0
 801404c:	460a      	mov	r2, r1
 801404e:	71fb      	strb	r3, [r7, #7]
 8014050:	4613      	mov	r3, r2
 8014052:	71bb      	strb	r3, [r7, #6]
  /* Forward PE notifications to GUI if enabled */
  if (NULL != DPM_GUI_PostNotificationMessage)
 8014054:	4b1a      	ldr	r3, [pc, #104]	@ (80140c0 <USBPD_DPM_Notification+0x7c>)
 8014056:	681b      	ldr	r3, [r3, #0]
 8014058:	2b00      	cmp	r3, #0
 801405a:	d006      	beq.n	801406a <USBPD_DPM_Notification+0x26>
  {
    DPM_GUI_PostNotificationMessage(PortNum, EventVal);
 801405c:	4b18      	ldr	r3, [pc, #96]	@ (80140c0 <USBPD_DPM_Notification+0x7c>)
 801405e:	681b      	ldr	r3, [r3, #0]
 8014060:	79ba      	ldrb	r2, [r7, #6]
 8014062:	b291      	uxth	r1, r2
 8014064:	79fa      	ldrb	r2, [r7, #7]
 8014066:	4610      	mov	r0, r2
 8014068:	4798      	blx	r3
//    case USBPD_NOTIFY_DATAROLESWAP_DFP :
//      break;
//    case USBPD_NOTIFY_DATAROLESWAP_UFP :
//      break;
    default:
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 801406a:	79bb      	ldrb	r3, [r7, #6]
 801406c:	f107 000c 	add.w	r0, r7, #12
 8014070:	4a14      	ldr	r2, [pc, #80]	@ (80140c4 <USBPD_DPM_Notification+0x80>)
 8014072:	2132      	movs	r1, #50	@ 0x32
 8014074:	f006 fa74 	bl	801a560 <sniprintf>
 8014078:	4603      	mov	r3, r0
 801407a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 801407e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014082:	2b31      	cmp	r3, #49	@ 0x31
 8014084:	d80e      	bhi.n	80140a4 <USBPD_DPM_Notification+0x60>
 8014086:	f107 030c 	add.w	r3, r7, #12
 801408a:	4618      	mov	r0, r3
 801408c:	f7f1 fd28 	bl	8005ae0 <strlen>
 8014090:	4602      	mov	r2, r0
 8014092:	f107 030c 	add.w	r3, r7, #12
 8014096:	79f9      	ldrb	r1, [r7, #7]
 8014098:	9200      	str	r2, [sp, #0]
 801409a:	2200      	movs	r2, #0
 801409c:	2006      	movs	r0, #6
 801409e:	f7fa fab3 	bl	800e608 <USBPD_TRACE_Add>
      break;
 80140a2:	e008      	b.n	80140b6 <USBPD_DPM_Notification+0x72>
      DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: USBPD_DPM_Notification:%d", EventVal);
 80140a4:	f107 030c 	add.w	r3, r7, #12
 80140a8:	79f9      	ldrb	r1, [r7, #7]
 80140aa:	2232      	movs	r2, #50	@ 0x32
 80140ac:	9200      	str	r2, [sp, #0]
 80140ae:	2200      	movs	r2, #0
 80140b0:	2006      	movs	r0, #6
 80140b2:	f7fa faa9 	bl	800e608 <USBPD_TRACE_Add>
      break;
 80140b6:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_Notification */
}
 80140b8:	bf00      	nop
 80140ba:	3740      	adds	r7, #64	@ 0x40
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	20002804 	.word	0x20002804
 80140c4:	0801b258 	.word	0x0801b258

080140c8 <USBPD_DPM_HardReset>:
  * @param  CurrentRole the current role
  * @param  Status status on hard reset event
  * @retval None
  */
void USBPD_DPM_HardReset(uint8_t PortNum, USBPD_PortPowerRole_TypeDef CurrentRole, USBPD_HR_Status_TypeDef Status)
{
 80140c8:	b580      	push	{r7, lr}
 80140ca:	b082      	sub	sp, #8
 80140cc:	af00      	add	r7, sp, #0
 80140ce:	4603      	mov	r3, r0
 80140d0:	6039      	str	r1, [r7, #0]
 80140d2:	71fb      	strb	r3, [r7, #7]
 80140d4:	4613      	mov	r3, r2
 80140d6:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_HardReset */
  switch (Status)
 80140d8:	79bb      	ldrb	r3, [r7, #6]
 80140da:	2b03      	cmp	r3, #3
 80140dc:	d002      	beq.n	80140e4 <USBPD_DPM_HardReset+0x1c>
 80140de:	2b04      	cmp	r3, #4
 80140e0:	d009      	beq.n	80140f6 <USBPD_DPM_HardReset+0x2e>
      /* Power on the power supply */
      DPM_TurnOnPower(PortNum, CurrentRole);
    }
    break;
  default:
    break;
 80140e2:	e014      	b.n	801410e <USBPD_DPM_HardReset+0x46>
    if (USBPD_PORTPOWERROLE_SRC == CurrentRole)
 80140e4:	683b      	ldr	r3, [r7, #0]
 80140e6:	2b01      	cmp	r3, #1
 80140e8:	d10e      	bne.n	8014108 <USBPD_DPM_HardReset+0x40>
      DPM_TurnOffPower(PortNum, USBPD_PORTPOWERROLE_SRC);
 80140ea:	79fb      	ldrb	r3, [r7, #7]
 80140ec:	2101      	movs	r1, #1
 80140ee:	4618      	mov	r0, r3
 80140f0:	f001 f880 	bl	80151f4 <DPM_TurnOffPower>
    break;
 80140f4:	e008      	b.n	8014108 <USBPD_DPM_HardReset+0x40>
    if (CurrentRole == USBPD_PORTPOWERROLE_SRC)
 80140f6:	683b      	ldr	r3, [r7, #0]
 80140f8:	2b01      	cmp	r3, #1
 80140fa:	d107      	bne.n	801410c <USBPD_DPM_HardReset+0x44>
      DPM_TurnOnPower(PortNum, CurrentRole);
 80140fc:	79fb      	ldrb	r3, [r7, #7]
 80140fe:	6839      	ldr	r1, [r7, #0]
 8014100:	4618      	mov	r0, r3
 8014102:	f001 f888 	bl	8015216 <DPM_TurnOnPower>
    break;
 8014106:	e001      	b.n	801410c <USBPD_DPM_HardReset+0x44>
    break;
 8014108:	bf00      	nop
 801410a:	e000      	b.n	801410e <USBPD_DPM_HardReset+0x46>
    break;
 801410c:	bf00      	nop
  }

/* USER CODE END USBPD_DPM_HardReset */
}
 801410e:	bf00      	nop
 8014110:	3708      	adds	r7, #8
 8014112:	46bd      	mov	sp, r7
 8014114:	bd80      	pop	{r7, pc}

08014116 <USBPD_DPM_SetupNewPower>:
  * @brief  Request the DPM to setup the new power level.
  * @param  PortNum The current port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_DPM_SetupNewPower(uint8_t PortNum)
{
 8014116:	b580      	push	{r7, lr}
 8014118:	b082      	sub	sp, #8
 801411a:	af00      	add	r7, sp, #0
 801411c:	4603      	mov	r3, r0
 801411e:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_SetupNewPower */
  return USBPD_PWR_IF_SetProfile(PortNum);
 8014120:	79fb      	ldrb	r3, [r7, #7]
 8014122:	4618      	mov	r0, r3
 8014124:	f001 f8a0 	bl	8015268 <USBPD_PWR_IF_SetProfile>
 8014128:	4603      	mov	r3, r0
/* USER CODE END USBPD_DPM_SetupNewPower */
}
 801412a:	4618      	mov	r0, r3
 801412c:	3708      	adds	r7, #8
 801412e:	46bd      	mov	sp, r7
 8014130:	bd80      	pop	{r7, pc}
	...

08014134 <USBPD_DPM_GetDataInfo>:
  * @param  Ptr     Pointer on address where DPM data should be written (u8 pointer)
  * @param  Size    Pointer on nb of u8 written by DPM
  * @retval None
  */
void USBPD_DPM_GetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8014134:	b580      	push	{r7, lr}
 8014136:	b086      	sub	sp, #24
 8014138:	af00      	add	r7, sp, #0
 801413a:	60ba      	str	r2, [r7, #8]
 801413c:	607b      	str	r3, [r7, #4]
 801413e:	4603      	mov	r3, r0
 8014140:	73fb      	strb	r3, [r7, #15]
 8014142:	460b      	mov	r3, r1
 8014144:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_GetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 8014146:	7bbb      	ldrb	r3, [r7, #14]
 8014148:	2b14      	cmp	r3, #20
 801414a:	d023      	beq.n	8014194 <USBPD_DPM_GetDataInfo+0x60>
 801414c:	2b14      	cmp	r3, #20
 801414e:	dc43      	bgt.n	80141d8 <USBPD_DPM_GetDataInfo+0xa4>
 8014150:	2b00      	cmp	r3, #0
 8014152:	d013      	beq.n	801417c <USBPD_DPM_GetDataInfo+0x48>
 8014154:	2b03      	cmp	r3, #3
 8014156:	d13f      	bne.n	80141d8 <USBPD_DPM_GetDataInfo+0xa4>
  {
/* Case Requested voltage value Data information */
  case USBPD_CORE_DATATYPE_REQ_VOLTAGE :
    *Size = 4;
 8014158:	687b      	ldr	r3, [r7, #4]
 801415a:	2204      	movs	r2, #4
 801415c:	601a      	str	r2, [r3, #0]
    (void)memcpy((uint8_t*)Ptr, (uint8_t *)&DPM_Ports[PortNum].DPM_RequestedVoltage, *Size);
 801415e:	7bfa      	ldrb	r2, [r7, #15]
 8014160:	4613      	mov	r3, r2
 8014162:	011b      	lsls	r3, r3, #4
 8014164:	1a9b      	subs	r3, r3, r2
 8014166:	00db      	lsls	r3, r3, #3
 8014168:	3370      	adds	r3, #112	@ 0x70
 801416a:	4a1e      	ldr	r2, [pc, #120]	@ (80141e4 <USBPD_DPM_GetDataInfo+0xb0>)
 801416c:	1899      	adds	r1, r3, r2
 801416e:	687b      	ldr	r3, [r7, #4]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	461a      	mov	r2, r3
 8014174:	68b8      	ldr	r0, [r7, #8]
 8014176:	f006 fa90 	bl	801a69a <memcpy>
    break;
 801417a:	e02e      	b.n	80141da <USBPD_DPM_GetDataInfo+0xa6>
  case USBPD_CORE_DATATYPE_SRC_PDO :
    USBPD_PWR_IF_GetPortPDOs(PortNum, DataId, Ptr, Size);
 801417c:	7bb9      	ldrb	r1, [r7, #14]
 801417e:	7bf8      	ldrb	r0, [r7, #15]
 8014180:	687b      	ldr	r3, [r7, #4]
 8014182:	68ba      	ldr	r2, [r7, #8]
 8014184:	f001 f908 	bl	8015398 <USBPD_PWR_IF_GetPortPDOs>
    *Size *= 4;
 8014188:	687b      	ldr	r3, [r7, #4]
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	009a      	lsls	r2, r3, #2
 801418e:	687b      	ldr	r3, [r7, #4]
 8014190:	601a      	str	r2, [r3, #0]
    break;
 8014192:	e022      	b.n	80141da <USBPD_DPM_GetDataInfo+0xa6>
  case USBPD_CORE_REVISION:
    {
      *Size = sizeof(USBPD_RevisionDO_TypeDef);
 8014194:	687b      	ldr	r3, [r7, #4]
 8014196:	2204      	movs	r2, #4
 8014198:	601a      	str	r2, [r3, #0]
      USBPD_RevisionDO_TypeDef rev =
 801419a:	2300      	movs	r3, #0
 801419c:	617b      	str	r3, [r7, #20]
 801419e:	7dbb      	ldrb	r3, [r7, #22]
 80141a0:	2207      	movs	r2, #7
 80141a2:	f362 0303 	bfi	r3, r2, #0, #4
 80141a6:	75bb      	strb	r3, [r7, #22]
 80141a8:	7dbb      	ldrb	r3, [r7, #22]
 80141aa:	2201      	movs	r2, #1
 80141ac:	f362 1307 	bfi	r3, r2, #4, #4
 80141b0:	75bb      	strb	r3, [r7, #22]
 80141b2:	7dfb      	ldrb	r3, [r7, #23]
 80141b4:	2201      	movs	r2, #1
 80141b6:	f362 0303 	bfi	r3, r2, #0, #4
 80141ba:	75fb      	strb	r3, [r7, #23]
 80141bc:	7dfb      	ldrb	r3, [r7, #23]
 80141be:	2203      	movs	r2, #3
 80141c0:	f362 1307 	bfi	r3, r2, #4, #4
 80141c4:	75fb      	strb	r3, [r7, #23]
        .b.Revision_minor = USBPD_REV_MINOR,         /*!< Minor revision */
        .b.Version_major  = USBPD_VERSION_MAJOR,     /*!< Major version  */
        .b.Version_minor  = USBPD_VERSION_MINOR      /*!< Minor version  */
      };

      memcpy((uint8_t *)Ptr, &rev, *Size);
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	681a      	ldr	r2, [r3, #0]
 80141ca:	f107 0314 	add.w	r3, r7, #20
 80141ce:	4619      	mov	r1, r3
 80141d0:	68b8      	ldr	r0, [r7, #8]
 80141d2:	f006 fa62 	bl	801a69a <memcpy>
      break;
 80141d6:	e000      	b.n	80141da <USBPD_DPM_GetDataInfo+0xa6>
    }

  default:
    break;
 80141d8:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_GetDataInfo */
}
 80141da:	bf00      	nop
 80141dc:	3718      	adds	r7, #24
 80141de:	46bd      	mov	sp, r7
 80141e0:	bd80      	pop	{r7, pc}
 80141e2:	bf00      	nop
 80141e4:	20002810 	.word	0x20002810

080141e8 <USBPD_DPM_SetDataInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in DPM
  * @retval None
  */
void USBPD_DPM_SetDataInfo(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t Size)
{
 80141e8:	b590      	push	{r4, r7, lr}
 80141ea:	b089      	sub	sp, #36	@ 0x24
 80141ec:	af00      	add	r7, sp, #0
 80141ee:	60ba      	str	r2, [r7, #8]
 80141f0:	607b      	str	r3, [r7, #4]
 80141f2:	4603      	mov	r3, r0
 80141f4:	73fb      	strb	r3, [r7, #15]
 80141f6:	460b      	mov	r3, r1
 80141f8:	73bb      	strb	r3, [r7, #14]
/* USER CODE BEGIN USBPD_DPM_SetDataInfo */
  /* Check type of information targeted by request */
  switch(DataId)
 80141fa:	7bbb      	ldrb	r3, [r7, #14]
 80141fc:	3b02      	subs	r3, #2
 80141fe:	2b12      	cmp	r3, #18
 8014200:	f200 8099 	bhi.w	8014336 <USBPD_DPM_SetDataInfo+0x14e>
 8014204:	a201      	add	r2, pc, #4	@ (adr r2, 801420c <USBPD_DPM_SetDataInfo+0x24>)
 8014206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801420a:	bf00      	nop
 801420c:	08014259 	.word	0x08014259
 8014210:	08014337 	.word	0x08014337
 8014214:	08014337 	.word	0x08014337
 8014218:	080142b3 	.word	0x080142b3
 801421c:	0801430d 	.word	0x0801430d
 8014220:	08014337 	.word	0x08014337
 8014224:	08014337 	.word	0x08014337
 8014228:	08014337 	.word	0x08014337
 801422c:	08014337 	.word	0x08014337
 8014230:	08014337 	.word	0x08014337
 8014234:	08014337 	.word	0x08014337
 8014238:	08014337 	.word	0x08014337
 801423c:	08014337 	.word	0x08014337
 8014240:	08014337 	.word	0x08014337
 8014244:	08014337 	.word	0x08014337
 8014248:	08014337 	.word	0x08014337
 801424c:	08014337 	.word	0x08014337
 8014250:	08014337 	.word	0x08014337
 8014254:	0801432b 	.word	0x0801432b
  {
    /* Case Received Request PDO Data information : */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4)
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	2b04      	cmp	r3, #4
 801425c:	d16d      	bne.n	801433a <USBPD_DPM_SetDataInfo+0x152>
      {
        uint8_t* temp;
        temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPosition;
 801425e:	7bfa      	ldrb	r2, [r7, #15]
 8014260:	4613      	mov	r3, r2
 8014262:	011b      	lsls	r3, r3, #4
 8014264:	1a9b      	subs	r3, r3, r2
 8014266:	00db      	lsls	r3, r3, #3
 8014268:	3368      	adds	r3, #104	@ 0x68
 801426a:	4a3e      	ldr	r2, [pc, #248]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 801426c:	4413      	add	r3, r2
 801426e:	617b      	str	r3, [r7, #20]
        (void)memcpy(temp, Ptr, Size);
 8014270:	687a      	ldr	r2, [r7, #4]
 8014272:	68b9      	ldr	r1, [r7, #8]
 8014274:	6978      	ldr	r0, [r7, #20]
 8014276:	f006 fa10 	bl	801a69a <memcpy>
        DPM_Ports[PortNum].DPM_RDOPositionPrevious = *Ptr;
 801427a:	68bb      	ldr	r3, [r7, #8]
 801427c:	781b      	ldrb	r3, [r3, #0]
 801427e:	7bfa      	ldrb	r2, [r7, #15]
 8014280:	4618      	mov	r0, r3
 8014282:	4938      	ldr	r1, [pc, #224]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 8014284:	4613      	mov	r3, r2
 8014286:	011b      	lsls	r3, r3, #4
 8014288:	1a9b      	subs	r3, r3, r2
 801428a:	00db      	lsls	r3, r3, #3
 801428c:	440b      	add	r3, r1
 801428e:	336c      	adds	r3, #108	@ 0x6c
 8014290:	6018      	str	r0, [r3, #0]
        temp = (uint8_t*)&DPM_Ports[PortNum].DPM_RDOPositionPrevious;
 8014292:	7bfa      	ldrb	r2, [r7, #15]
 8014294:	4613      	mov	r3, r2
 8014296:	011b      	lsls	r3, r3, #4
 8014298:	1a9b      	subs	r3, r3, r2
 801429a:	00db      	lsls	r3, r3, #3
 801429c:	3368      	adds	r3, #104	@ 0x68
 801429e:	4a31      	ldr	r2, [pc, #196]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 80142a0:	4413      	add	r3, r2
 80142a2:	3304      	adds	r3, #4
 80142a4:	617b      	str	r3, [r7, #20]
        (void)memcpy(temp, Ptr, Size);
 80142a6:	687a      	ldr	r2, [r7, #4]
 80142a8:	68b9      	ldr	r1, [r7, #8]
 80142aa:	6978      	ldr	r0, [r7, #20]
 80142ac:	f006 f9f5 	bl	801a69a <memcpy>
      }
      break;
 80142b0:	e043      	b.n	801433a <USBPD_DPM_SetDataInfo+0x152>

    /* Case Received Sink PDO values Data information :*/
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4))
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2b1c      	cmp	r3, #28
 80142b6:	d842      	bhi.n	801433e <USBPD_DPM_SetDataInfo+0x156>
      {
        uint8_t* rdo;
        DPM_Ports[PortNum].DPM_NumberOfRcvSNKPDO = (Size / 4);
 80142b8:	7bfa      	ldrb	r2, [r7, #15]
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	0899      	lsrs	r1, r3, #2
 80142be:	4829      	ldr	r0, [pc, #164]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 80142c0:	4613      	mov	r3, r2
 80142c2:	011b      	lsls	r3, r3, #4
 80142c4:	1a9b      	subs	r3, r3, r2
 80142c6:	00db      	lsls	r3, r3, #3
 80142c8:	4403      	add	r3, r0
 80142ca:	331c      	adds	r3, #28
 80142cc:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (uint32_t index = 0; index < (Size / 4); index++)
 80142ce:	2300      	movs	r3, #0
 80142d0:	61fb      	str	r3, [r7, #28]
 80142d2:	e015      	b.n	8014300 <USBPD_DPM_SetDataInfo+0x118>
        {
          rdo = (uint8_t*)&DPM_Ports[PortNum].DPM_ListOfRcvSNKPDO[index];
 80142d4:	7bfa      	ldrb	r2, [r7, #15]
 80142d6:	4613      	mov	r3, r2
 80142d8:	011b      	lsls	r3, r3, #4
 80142da:	1a9b      	subs	r3, r3, r2
 80142dc:	005b      	lsls	r3, r3, #1
 80142de:	69fa      	ldr	r2, [r7, #28]
 80142e0:	4413      	add	r3, r2
 80142e2:	009b      	lsls	r3, r3, #2
 80142e4:	4a1f      	ldr	r2, [pc, #124]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 80142e6:	4413      	add	r3, r2
 80142e8:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4u)), (4u * sizeof(uint8_t)));
 80142ea:	69fb      	ldr	r3, [r7, #28]
 80142ec:	009b      	lsls	r3, r3, #2
 80142ee:	68ba      	ldr	r2, [r7, #8]
 80142f0:	4413      	add	r3, r2
 80142f2:	681b      	ldr	r3, [r3, #0]
 80142f4:	461a      	mov	r2, r3
 80142f6:	69bb      	ldr	r3, [r7, #24]
 80142f8:	601a      	str	r2, [r3, #0]
        for (uint32_t index = 0; index < (Size / 4); index++)
 80142fa:	69fb      	ldr	r3, [r7, #28]
 80142fc:	3301      	adds	r3, #1
 80142fe:	61fb      	str	r3, [r7, #28]
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	089b      	lsrs	r3, r3, #2
 8014304:	69fa      	ldr	r2, [r7, #28]
 8014306:	429a      	cmp	r2, r3
 8014308:	d3e4      	bcc.n	80142d4 <USBPD_DPM_SetDataInfo+0xec>
        }
      }
      break;
 801430a:	e018      	b.n	801433e <USBPD_DPM_SetDataInfo+0x156>

    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :  /*!< Storage of Received Sink Request PDO value                */
      if (Size == 4)
 801430c:	687b      	ldr	r3, [r7, #4]
 801430e:	2b04      	cmp	r3, #4
 8014310:	d117      	bne.n	8014342 <USBPD_DPM_SetDataInfo+0x15a>
      {
        memcpy((uint8_t *)&DPM_Ports[PortNum].DPM_RcvRequestDOMsg,  Ptr, 4);
 8014312:	7bfa      	ldrb	r2, [r7, #15]
 8014314:	4613      	mov	r3, r2
 8014316:	011b      	lsls	r3, r3, #4
 8014318:	1a9b      	subs	r3, r3, r2
 801431a:	00db      	lsls	r3, r3, #3
 801431c:	3340      	adds	r3, #64	@ 0x40
 801431e:	4a11      	ldr	r2, [pc, #68]	@ (8014364 <USBPD_DPM_SetDataInfo+0x17c>)
 8014320:	4413      	add	r3, r2
 8014322:	68ba      	ldr	r2, [r7, #8]
 8014324:	6812      	ldr	r2, [r2, #0]
 8014326:	601a      	str	r2, [r3, #0]
      }
      break;
 8014328:	e00b      	b.n	8014342 <USBPD_DPM_SetDataInfo+0x15a>

    case USBPD_CORE_REVISION:
      {
        /* Does nothing: User have to implement a global revision variable */
        USBPD_RevisionDO_TypeDef rev = {0};
 801432a:	2300      	movs	r3, #0
 801432c:	613b      	str	r3, [r7, #16]
        memcpy((uint8_t *)&rev, Ptr, sizeof(USBPD_RevisionDO_TypeDef));
 801432e:	68bb      	ldr	r3, [r7, #8]
 8014330:	681b      	ldr	r3, [r3, #0]
 8014332:	613b      	str	r3, [r7, #16]
        break;
 8014334:	e006      	b.n	8014344 <USBPD_DPM_SetDataInfo+0x15c>
      }

    default:
    break;
 8014336:	bf00      	nop
 8014338:	e004      	b.n	8014344 <USBPD_DPM_SetDataInfo+0x15c>
      break;
 801433a:	bf00      	nop
 801433c:	e002      	b.n	8014344 <USBPD_DPM_SetDataInfo+0x15c>
      break;
 801433e:	bf00      	nop
 8014340:	e000      	b.n	8014344 <USBPD_DPM_SetDataInfo+0x15c>
      break;
 8014342:	bf00      	nop
  }
/* USER CODE END USBPD_DPM_SetDataInfo */

  /* Forward info to GUI if enabled */
  if (NULL != DPM_GUI_SaveInfo)
 8014344:	4b08      	ldr	r3, [pc, #32]	@ (8014368 <USBPD_DPM_SetDataInfo+0x180>)
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	2b00      	cmp	r3, #0
 801434a:	d006      	beq.n	801435a <USBPD_DPM_SetDataInfo+0x172>
  {
    DPM_GUI_SaveInfo(PortNum, DataId, Ptr, Size);
 801434c:	4b06      	ldr	r3, [pc, #24]	@ (8014368 <USBPD_DPM_SetDataInfo+0x180>)
 801434e:	681c      	ldr	r4, [r3, #0]
 8014350:	7bb9      	ldrb	r1, [r7, #14]
 8014352:	7bf8      	ldrb	r0, [r7, #15]
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	68ba      	ldr	r2, [r7, #8]
 8014358:	47a0      	blx	r4
  }
}
 801435a:	bf00      	nop
 801435c:	3724      	adds	r7, #36	@ 0x24
 801435e:	46bd      	mov	sp, r7
 8014360:	bd90      	pop	{r4, r7, pc}
 8014362:	bf00      	nop
 8014364:	20002810 	.word	0x20002810
 8014368:	2000280c 	.word	0x2000280c

0801436c <USBPD_DPM_EvaluateRequest>:
  * @param  PortNum Port number
  * @param  PtrPowerObject  Pointer on the power data object
  * @retval USBPD status : USBPD_ACCEPT, USBPD_REJECT, USBPD_WAIT, USBPD_GOTOMIN
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateRequest(uint8_t PortNum, USBPD_CORE_PDO_Type_TypeDef *PtrPowerObject)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b086      	sub	sp, #24
 8014370:	af00      	add	r7, sp, #0
 8014372:	4603      	mov	r3, r0
 8014374:	6039      	str	r1, [r7, #0]
 8014376:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateRequest */
  USBPD_StatusTypeDef _retr = USBPD_REJECT;
 8014378:	230c      	movs	r3, #12
 801437a:	75fb      	strb	r3, [r7, #23]

  USBPD_PDO_TypeDef pdo;
  USBPD_SNKRDO_TypeDef rdo;
  /* read the request value received */
  rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 801437c:	79fa      	ldrb	r2, [r7, #7]
 801437e:	493d      	ldr	r1, [pc, #244]	@ (8014474 <USBPD_DPM_EvaluateRequest+0x108>)
 8014380:	4613      	mov	r3, r2
 8014382:	011b      	lsls	r3, r3, #4
 8014384:	1a9b      	subs	r3, r3, r2
 8014386:	00db      	lsls	r3, r3, #3
 8014388:	440b      	add	r3, r1
 801438a:	3340      	adds	r3, #64	@ 0x40
 801438c:	681b      	ldr	r3, [r3, #0]
 801438e:	60fb      	str	r3, [r7, #12]

  /* Search PDO in Port Source PDO list, that corresponds to Position provided in Request RDO */
  if (USBPD_PWR_IF_SearchRequestedPDO(PortNum,  rdo.GenericRDO.ObjectPosition, &pdo.d32) == USBPD_OK)
 8014390:	7bfb      	ldrb	r3, [r7, #15]
 8014392:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8014396:	b2db      	uxtb	r3, r3
 8014398:	4619      	mov	r1, r3
 801439a:	f107 0210 	add.w	r2, r7, #16
 801439e:	79fb      	ldrb	r3, [r7, #7]
 80143a0:	4618      	mov	r0, r3
 80143a2:	f001 f89f 	bl	80154e4 <USBPD_PWR_IF_SearchRequestedPDO>
 80143a6:	4603      	mov	r3, r0
 80143a8:	2b00      	cmp	r3, #0
 80143aa:	d15d      	bne.n	8014468 <USBPD_DPM_EvaluateRequest+0xfc>
  {
    /* Evaluate the request */
    if(pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_FIXED)
 80143ac:	7cfb      	ldrb	r3, [r7, #19]
 80143ae:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80143b2:	b2db      	uxtb	r3, r3
 80143b4:	2b00      	cmp	r3, #0
 80143b6:	d157      	bne.n	8014468 <USBPD_DPM_EvaluateRequest+0xfc>
    {
      if((rdo.FixedVariableRDO.OperatingCurrentIn10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits)
 80143b8:	68fb      	ldr	r3, [r7, #12]
 80143ba:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80143be:	b29a      	uxth	r2, r3
 80143c0:	8a3b      	ldrh	r3, [r7, #16]
 80143c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80143c6:	b29b      	uxth	r3, r3
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d80f      	bhi.n	80143ec <USBPD_DPM_EvaluateRequest+0x80>
         || ((rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits > pdo.SRCFixedPDO.MaxCurrentIn10mAunits)&&(rdo.FixedVariableRDO.CapabilityMismatch==0)))
 80143cc:	89bb      	ldrh	r3, [r7, #12]
 80143ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80143d2:	b29a      	uxth	r2, r3
 80143d4:	8a3b      	ldrh	r3, [r7, #16]
 80143d6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80143da:	b29b      	uxth	r3, r3
 80143dc:	429a      	cmp	r2, r3
 80143de:	d908      	bls.n	80143f2 <USBPD_DPM_EvaluateRequest+0x86>
 80143e0:	7bfb      	ldrb	r3, [r7, #15]
 80143e2:	f003 0304 	and.w	r3, r3, #4
 80143e6:	b2db      	uxtb	r3, r3
 80143e8:	2b00      	cmp	r3, #0
 80143ea:	d102      	bne.n	80143f2 <USBPD_DPM_EvaluateRequest+0x86>
      {
        /* Sink requests too much maximum operating current */
        /* USBPD_DPM_EvaluateRequest: Sink requests too much maximum operating current */
        _retr =  USBPD_REJECT;
 80143ec:	230c      	movs	r3, #12
 80143ee:	75fb      	strb	r3, [r7, #23]
 80143f0:	e03a      	b.n	8014468 <USBPD_DPM_EvaluateRequest+0xfc>
      }
      else
      {
        /* Save the power object */
        *PtrPowerObject = pdo.GenericPDO.PowerObject;
 80143f2:	7cfb      	ldrb	r3, [r7, #19]
 80143f4:	f3c3 1381 	ubfx	r3, r3, #6, #2
 80143f8:	b2db      	uxtb	r3, r3
 80143fa:	461a      	mov	r2, r3
 80143fc:	683b      	ldr	r3, [r7, #0]
 80143fe:	601a      	str	r2, [r3, #0]
        /* Set RDO position and requested voltage in DPM port structure */
        DPM_Ports[PortNum].DPM_RequestedVoltage = pdo.SRCFixedPDO.VoltageIn50mVunits * 50;
 8014400:	693b      	ldr	r3, [r7, #16]
 8014402:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8014406:	b29b      	uxth	r3, r3
 8014408:	461a      	mov	r2, r3
 801440a:	2332      	movs	r3, #50	@ 0x32
 801440c:	fb02 f303 	mul.w	r3, r2, r3
 8014410:	79fa      	ldrb	r2, [r7, #7]
 8014412:	4618      	mov	r0, r3
 8014414:	4917      	ldr	r1, [pc, #92]	@ (8014474 <USBPD_DPM_EvaluateRequest+0x108>)
 8014416:	4613      	mov	r3, r2
 8014418:	011b      	lsls	r3, r3, #4
 801441a:	1a9b      	subs	r3, r3, r2
 801441c:	00db      	lsls	r3, r3, #3
 801441e:	440b      	add	r3, r1
 8014420:	3370      	adds	r3, #112	@ 0x70
 8014422:	6018      	str	r0, [r3, #0]
        DPM_Ports[PortNum].DPM_RDOPositionPrevious = DPM_Ports[PortNum].DPM_RDOPosition;
 8014424:	79f9      	ldrb	r1, [r7, #7]
 8014426:	79fa      	ldrb	r2, [r7, #7]
 8014428:	4812      	ldr	r0, [pc, #72]	@ (8014474 <USBPD_DPM_EvaluateRequest+0x108>)
 801442a:	460b      	mov	r3, r1
 801442c:	011b      	lsls	r3, r3, #4
 801442e:	1a5b      	subs	r3, r3, r1
 8014430:	00db      	lsls	r3, r3, #3
 8014432:	4403      	add	r3, r0
 8014434:	3368      	adds	r3, #104	@ 0x68
 8014436:	6819      	ldr	r1, [r3, #0]
 8014438:	480e      	ldr	r0, [pc, #56]	@ (8014474 <USBPD_DPM_EvaluateRequest+0x108>)
 801443a:	4613      	mov	r3, r2
 801443c:	011b      	lsls	r3, r3, #4
 801443e:	1a9b      	subs	r3, r3, r2
 8014440:	00db      	lsls	r3, r3, #3
 8014442:	4403      	add	r3, r0
 8014444:	336c      	adds	r3, #108	@ 0x6c
 8014446:	6019      	str	r1, [r3, #0]
        DPM_Ports[PortNum].DPM_RDOPosition = rdo.GenericRDO.ObjectPosition;
 8014448:	7bfb      	ldrb	r3, [r7, #15]
 801444a:	f3c3 1302 	ubfx	r3, r3, #4, #3
 801444e:	b2db      	uxtb	r3, r3
 8014450:	79fa      	ldrb	r2, [r7, #7]
 8014452:	4618      	mov	r0, r3
 8014454:	4907      	ldr	r1, [pc, #28]	@ (8014474 <USBPD_DPM_EvaluateRequest+0x108>)
 8014456:	4613      	mov	r3, r2
 8014458:	011b      	lsls	r3, r3, #4
 801445a:	1a9b      	subs	r3, r3, r2
 801445c:	00db      	lsls	r3, r3, #3
 801445e:	440b      	add	r3, r1
 8014460:	3368      	adds	r3, #104	@ 0x68
 8014462:	6018      	str	r0, [r3, #0]
         _retr = USBPD_ACCEPT;
 8014464:	230a      	movs	r3, #10
 8014466:	75fb      	strb	r3, [r7, #23]
      }
    }
  }
  return _retr;
 8014468:	7dfb      	ldrb	r3, [r7, #23]
/* USER CODE END USBPD_DPM_EvaluateRequest */
}
 801446a:	4618      	mov	r0, r3
 801446c:	3718      	adds	r7, #24
 801446e:	46bd      	mov	sp, r7
 8014470:	bd80      	pop	{r7, pc}
 8014472:	bf00      	nop
 8014474:	20002810 	.word	0x20002810

08014478 <USBPD_DPM_ExtendedMessageReceived>:
  * @param  ptrData   Pointer on address Extended Message data could be read (u8 pointer)
  * @param  DataSize  Nb of u8 that compose Extended message
  * @retval None
  */
void USBPD_DPM_ExtendedMessageReceived(uint8_t PortNum, USBPD_ExtendedMsg_TypeDef MsgType, uint8_t *ptrData, uint16_t DataSize)
{
 8014478:	b480      	push	{r7}
 801447a:	b083      	sub	sp, #12
 801447c:	af00      	add	r7, sp, #0
 801447e:	603a      	str	r2, [r7, #0]
 8014480:	461a      	mov	r2, r3
 8014482:	4603      	mov	r3, r0
 8014484:	71fb      	strb	r3, [r7, #7]
 8014486:	460b      	mov	r3, r1
 8014488:	71bb      	strb	r3, [r7, #6]
 801448a:	4613      	mov	r3, r2
 801448c:	80bb      	strh	r3, [r7, #4]
/* USER CODE BEGIN USBPD_DPM_ExtendedMessageReceived */

/* USER CODE END USBPD_DPM_ExtendedMessageReceived */
}
 801448e:	bf00      	nop
 8014490:	370c      	adds	r7, #12
 8014492:	46bd      	mov	sp, r7
 8014494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014498:	4770      	bx	lr

0801449a <USBPD_DPM_EnterErrorRecovery>:
  * @brief  DPM callback to allow PE to enter ERROR_RECOVERY state.
  * @param  PortNum Port number
  * @retval None
  */
void USBPD_DPM_EnterErrorRecovery(uint8_t PortNum)
{
 801449a:	b580      	push	{r7, lr}
 801449c:	b082      	sub	sp, #8
 801449e:	af00      	add	r7, sp, #0
 80144a0:	4603      	mov	r3, r0
 80144a2:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EnterErrorRecovery */
  /* Inform CAD to enter recovery mode */
  USBPD_CAD_EnterErrorRecovery(PortNum);
 80144a4:	79fb      	ldrb	r3, [r7, #7]
 80144a6:	4618      	mov	r0, r3
 80144a8:	f7eb ff7a 	bl	80003a0 <USBPD_CAD_EnterErrorRecovery>
/* USER CODE END USBPD_DPM_EnterErrorRecovery */
}
 80144ac:	bf00      	nop
 80144ae:	3708      	adds	r7, #8
 80144b0:	46bd      	mov	sp, r7
 80144b2:	bd80      	pop	{r7, pc}

080144b4 <USBPD_DPM_EvaluateDataRoleSwap>:
            @ref USBPD_ACCEPT if DRS can be accepted
            @ref USBPD_REJECT if DRS is not accepted in one data role (DFP or UFP) or in PD2.0 config
            @ref USBPD_NOTSUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only
  */
USBPD_StatusTypeDef USBPD_DPM_EvaluateDataRoleSwap(uint8_t PortNum)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b085      	sub	sp, #20
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	4603      	mov	r3, r0
 80144bc:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_DPM_EvaluateDataRoleSwap */
  USBPD_StatusTypeDef status = USBPD_REJECT;
 80144be:	230c      	movs	r3, #12
 80144c0:	73fb      	strb	r3, [r7, #15]
  /* Sent NOT_SUPPORTED if DRS is not supported at all by the application (in both data roles) - P3.0 only */
  if ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DataSwap)
 80144c2:	79fa      	ldrb	r2, [r7, #7]
 80144c4:	492e      	ldr	r1, [pc, #184]	@ (8014580 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80144c6:	4613      	mov	r3, r2
 80144c8:	00db      	lsls	r3, r3, #3
 80144ca:	1a9b      	subs	r3, r3, r2
 80144cc:	011b      	lsls	r3, r3, #4
 80144ce:	440b      	add	r3, r1
 80144d0:	781b      	ldrb	r3, [r3, #0]
 80144d2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80144d6:	b2db      	uxtb	r3, r3
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d019      	beq.n	8014510 <USBPD_DPM_EvaluateDataRoleSwap+0x5c>
    || ((USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP)
 80144dc:	79fa      	ldrb	r2, [r7, #7]
 80144de:	4928      	ldr	r1, [pc, #160]	@ (8014580 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80144e0:	4613      	mov	r3, r2
 80144e2:	00db      	lsls	r3, r3, #3
 80144e4:	1a9b      	subs	r3, r3, r2
 80144e6:	011b      	lsls	r3, r3, #4
 80144e8:	440b      	add	r3, r1
 80144ea:	781b      	ldrb	r3, [r3, #0]
 80144ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80144f0:	b2db      	uxtb	r3, r3
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d10f      	bne.n	8014516 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
    && (USBPD_FALSE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP)))
 80144f6:	79fa      	ldrb	r2, [r7, #7]
 80144f8:	4921      	ldr	r1, [pc, #132]	@ (8014580 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 80144fa:	4613      	mov	r3, r2
 80144fc:	00db      	lsls	r3, r3, #3
 80144fe:	1a9b      	subs	r3, r3, r2
 8014500:	011b      	lsls	r3, r3, #4
 8014502:	440b      	add	r3, r1
 8014504:	781b      	ldrb	r3, [r3, #0]
 8014506:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801450a:	b2db      	uxtb	r3, r3
 801450c:	2b00      	cmp	r3, #0
 801450e:	d102      	bne.n	8014516 <USBPD_DPM_EvaluateDataRoleSwap+0x62>
  {
    status = USBPD_NOTSUPPORTED;
 8014510:	2301      	movs	r3, #1
 8014512:	73fb      	strb	r3, [r7, #15]
 8014514:	e02d      	b.n	8014572 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
  }
  else
  {
    /* ACCEPT DRS if at least supported by 1 data role */
    if (((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP) && (USBPD_PORTDATAROLE_UFP == DPM_Params[PortNum].PE_DataRole))
 8014516:	79fa      	ldrb	r2, [r7, #7]
 8014518:	4919      	ldr	r1, [pc, #100]	@ (8014580 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 801451a:	4613      	mov	r3, r2
 801451c:	00db      	lsls	r3, r3, #3
 801451e:	1a9b      	subs	r3, r3, r2
 8014520:	011b      	lsls	r3, r3, #4
 8014522:	440b      	add	r3, r1
 8014524:	781b      	ldrb	r3, [r3, #0]
 8014526:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801452a:	b2db      	uxtb	r3, r3
 801452c:	2b01      	cmp	r3, #1
 801452e:	d108      	bne.n	8014542 <USBPD_DPM_EvaluateDataRoleSwap+0x8e>
 8014530:	79fb      	ldrb	r3, [r7, #7]
 8014532:	4a14      	ldr	r2, [pc, #80]	@ (8014584 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 8014534:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014538:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801453c:	b2db      	uxtb	r3, r3
 801453e:	2b00      	cmp	r3, #0
 8014540:	d015      	beq.n	801456e <USBPD_DPM_EvaluateDataRoleSwap+0xba>
       || ((USBPD_TRUE == DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP) && (USBPD_PORTDATAROLE_DFP == DPM_Params[PortNum].PE_DataRole)))
 8014542:	79fa      	ldrb	r2, [r7, #7]
 8014544:	490e      	ldr	r1, [pc, #56]	@ (8014580 <USBPD_DPM_EvaluateDataRoleSwap+0xcc>)
 8014546:	4613      	mov	r3, r2
 8014548:	00db      	lsls	r3, r3, #3
 801454a:	1a9b      	subs	r3, r3, r2
 801454c:	011b      	lsls	r3, r3, #4
 801454e:	440b      	add	r3, r1
 8014550:	781b      	ldrb	r3, [r3, #0]
 8014552:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014556:	b2db      	uxtb	r3, r3
 8014558:	2b01      	cmp	r3, #1
 801455a:	d10a      	bne.n	8014572 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
 801455c:	79fb      	ldrb	r3, [r7, #7]
 801455e:	4a09      	ldr	r2, [pc, #36]	@ (8014584 <USBPD_DPM_EvaluateDataRoleSwap+0xd0>)
 8014560:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8014564:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8014568:	b2db      	uxtb	r3, r3
 801456a:	2b01      	cmp	r3, #1
 801456c:	d101      	bne.n	8014572 <USBPD_DPM_EvaluateDataRoleSwap+0xbe>
    {
      status = USBPD_ACCEPT;
 801456e:	230a      	movs	r3, #10
 8014570:	73fb      	strb	r3, [r7, #15]
    }
  }
  return status;
 8014572:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_DPM_EvaluateDataRoleSwap */
}
 8014574:	4618      	mov	r0, r3
 8014576:	3714      	adds	r7, #20
 8014578:	46bd      	mov	sp, r7
 801457a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801457e:	4770      	bx	lr
 8014580:	200000b4 	.word	0x200000b4
 8014584:	20002800 	.word	0x20002800

08014588 <USBPD_DPM_IsPowerReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD_DISABLE or USBPD_ENABLE
  */
USBPD_FunctionalState USBPD_DPM_IsPowerReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 8014588:	b580      	push	{r7, lr}
 801458a:	b082      	sub	sp, #8
 801458c:	af00      	add	r7, sp, #0
 801458e:	4603      	mov	r3, r0
 8014590:	460a      	mov	r2, r1
 8014592:	71fb      	strb	r3, [r7, #7]
 8014594:	4613      	mov	r3, r2
 8014596:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_DPM_IsPowerReady */
  return ((USBPD_OK == USBPD_PWR_IF_SupplyReady(PortNum, Vsafe)) ? USBPD_ENABLE : USBPD_DISABLE);
 8014598:	79ba      	ldrb	r2, [r7, #6]
 801459a:	79fb      	ldrb	r3, [r7, #7]
 801459c:	4611      	mov	r1, r2
 801459e:	4618      	mov	r0, r3
 80145a0:	f000 fea2 	bl	80152e8 <USBPD_PWR_IF_SupplyReady>
 80145a4:	4603      	mov	r3, r0
 80145a6:	2b00      	cmp	r3, #0
 80145a8:	bf0c      	ite	eq
 80145aa:	2301      	moveq	r3, #1
 80145ac:	2300      	movne	r3, #0
 80145ae:	b2db      	uxtb	r3, r3
/* USER CODE END USBPD_DPM_IsPowerReady */
}
 80145b0:	4618      	mov	r0, r3
 80145b2:	3708      	adds	r7, #8
 80145b4:	46bd      	mov	sp, r7
 80145b6:	bd80      	pop	{r7, pc}

080145b8 <USBPD_DPM_RequestHardReset>:
  * @brief  Request the PE to send a hard reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestHardReset(uint8_t PortNum)
{
 80145b8:	b580      	push	{r7, lr}
 80145ba:	b092      	sub	sp, #72	@ 0x48
 80145bc:	af02      	add	r7, sp, #8
 80145be:	4603      	mov	r3, r0
 80145c0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_HardReset(PortNum);
 80145c2:	79fb      	ldrb	r3, [r7, #7]
 80145c4:	4618      	mov	r0, r3
 80145c6:	f7eb ffe7 	bl	8000598 <USBPD_PE_Request_HardReset>
 80145ca:	4603      	mov	r3, r0
 80145cc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "HARD RESET not accepted by the stack");
 80145d0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d025      	beq.n	8014624 <USBPD_DPM_RequestHardReset+0x6c>
 80145d8:	f107 030c 	add.w	r3, r7, #12
 80145dc:	4a14      	ldr	r2, [pc, #80]	@ (8014630 <USBPD_DPM_RequestHardReset+0x78>)
 80145de:	2132      	movs	r1, #50	@ 0x32
 80145e0:	4618      	mov	r0, r3
 80145e2:	f005 ffbd 	bl	801a560 <sniprintf>
 80145e6:	4603      	mov	r3, r0
 80145e8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80145ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80145f0:	2b31      	cmp	r3, #49	@ 0x31
 80145f2:	d80e      	bhi.n	8014612 <USBPD_DPM_RequestHardReset+0x5a>
 80145f4:	f107 030c 	add.w	r3, r7, #12
 80145f8:	4618      	mov	r0, r3
 80145fa:	f7f1 fa71 	bl	8005ae0 <strlen>
 80145fe:	4602      	mov	r2, r0
 8014600:	f107 030c 	add.w	r3, r7, #12
 8014604:	79f9      	ldrb	r1, [r7, #7]
 8014606:	9200      	str	r2, [sp, #0]
 8014608:	2200      	movs	r2, #0
 801460a:	2006      	movs	r0, #6
 801460c:	f7f9 fffc 	bl	800e608 <USBPD_TRACE_Add>
 8014610:	e008      	b.n	8014624 <USBPD_DPM_RequestHardReset+0x6c>
 8014612:	f107 030c 	add.w	r3, r7, #12
 8014616:	79f9      	ldrb	r1, [r7, #7]
 8014618:	2232      	movs	r2, #50	@ 0x32
 801461a:	9200      	str	r2, [sp, #0]
 801461c:	2200      	movs	r2, #0
 801461e:	2006      	movs	r0, #6
 8014620:	f7f9 fff2 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014624:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014628:	4618      	mov	r0, r3
 801462a:	3740      	adds	r7, #64	@ 0x40
 801462c:	46bd      	mov	sp, r7
 801462e:	bd80      	pop	{r7, pc}
 8014630:	0801b27c 	.word	0x0801b27c

08014634 <USBPD_DPM_RequestCableReset>:
            The DFP has to be supplying VCONN prior to a Cable Reset
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestCableReset(uint8_t PortNum)
{
 8014634:	b580      	push	{r7, lr}
 8014636:	b092      	sub	sp, #72	@ 0x48
 8014638:	af02      	add	r7, sp, #8
 801463a:	4603      	mov	r3, r0
 801463c:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CableReset(PortNum);
 801463e:	79fb      	ldrb	r3, [r7, #7]
 8014640:	4618      	mov	r0, r3
 8014642:	f7eb ffb7 	bl	80005b4 <USBPD_PE_Request_CableReset>
 8014646:	4603      	mov	r3, r0
 8014648:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "CABLE RESET not accepted by the stack");
 801464c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014650:	2b00      	cmp	r3, #0
 8014652:	d025      	beq.n	80146a0 <USBPD_DPM_RequestCableReset+0x6c>
 8014654:	f107 030c 	add.w	r3, r7, #12
 8014658:	4a14      	ldr	r2, [pc, #80]	@ (80146ac <USBPD_DPM_RequestCableReset+0x78>)
 801465a:	2132      	movs	r1, #50	@ 0x32
 801465c:	4618      	mov	r0, r3
 801465e:	f005 ff7f 	bl	801a560 <sniprintf>
 8014662:	4603      	mov	r3, r0
 8014664:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014668:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801466c:	2b31      	cmp	r3, #49	@ 0x31
 801466e:	d80e      	bhi.n	801468e <USBPD_DPM_RequestCableReset+0x5a>
 8014670:	f107 030c 	add.w	r3, r7, #12
 8014674:	4618      	mov	r0, r3
 8014676:	f7f1 fa33 	bl	8005ae0 <strlen>
 801467a:	4602      	mov	r2, r0
 801467c:	f107 030c 	add.w	r3, r7, #12
 8014680:	79f9      	ldrb	r1, [r7, #7]
 8014682:	9200      	str	r2, [sp, #0]
 8014684:	2200      	movs	r2, #0
 8014686:	2006      	movs	r0, #6
 8014688:	f7f9 ffbe 	bl	800e608 <USBPD_TRACE_Add>
 801468c:	e008      	b.n	80146a0 <USBPD_DPM_RequestCableReset+0x6c>
 801468e:	f107 030c 	add.w	r3, r7, #12
 8014692:	79f9      	ldrb	r1, [r7, #7]
 8014694:	2232      	movs	r2, #50	@ 0x32
 8014696:	9200      	str	r2, [sp, #0]
 8014698:	2200      	movs	r2, #0
 801469a:	2006      	movs	r0, #6
 801469c:	f7f9 ffb4 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80146a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3740      	adds	r7, #64	@ 0x40
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}
 80146ac:	0801b2a4 	.word	0x0801b2a4

080146b0 <USBPD_DPM_RequestGotoMin>:
  * @brief  Request the PE to send a GOTOMIN message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGotoMin(uint8_t PortNum)
{
 80146b0:	b580      	push	{r7, lr}
 80146b2:	b092      	sub	sp, #72	@ 0x48
 80146b4:	af02      	add	r7, sp, #8
 80146b6:	4603      	mov	r3, r0
 80146b8:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GOTOMIN, USBPD_SOPTYPE_SOP);
 80146ba:	79fb      	ldrb	r3, [r7, #7]
 80146bc:	2200      	movs	r2, #0
 80146be:	2102      	movs	r1, #2
 80146c0:	4618      	mov	r0, r3
 80146c2:	f7eb ff8b 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 80146c6:	4603      	mov	r3, r0
 80146c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GOTOMIN not accepted by the stack");
 80146cc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d025      	beq.n	8014720 <USBPD_DPM_RequestGotoMin+0x70>
 80146d4:	f107 030c 	add.w	r3, r7, #12
 80146d8:	4a14      	ldr	r2, [pc, #80]	@ (801472c <USBPD_DPM_RequestGotoMin+0x7c>)
 80146da:	2132      	movs	r1, #50	@ 0x32
 80146dc:	4618      	mov	r0, r3
 80146de:	f005 ff3f 	bl	801a560 <sniprintf>
 80146e2:	4603      	mov	r3, r0
 80146e4:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80146e8:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80146ec:	2b31      	cmp	r3, #49	@ 0x31
 80146ee:	d80e      	bhi.n	801470e <USBPD_DPM_RequestGotoMin+0x5e>
 80146f0:	f107 030c 	add.w	r3, r7, #12
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f1 f9f3 	bl	8005ae0 <strlen>
 80146fa:	4602      	mov	r2, r0
 80146fc:	f107 030c 	add.w	r3, r7, #12
 8014700:	79f9      	ldrb	r1, [r7, #7]
 8014702:	9200      	str	r2, [sp, #0]
 8014704:	2200      	movs	r2, #0
 8014706:	2006      	movs	r0, #6
 8014708:	f7f9 ff7e 	bl	800e608 <USBPD_TRACE_Add>
 801470c:	e008      	b.n	8014720 <USBPD_DPM_RequestGotoMin+0x70>
 801470e:	f107 030c 	add.w	r3, r7, #12
 8014712:	79f9      	ldrb	r1, [r7, #7]
 8014714:	2232      	movs	r2, #50	@ 0x32
 8014716:	9200      	str	r2, [sp, #0]
 8014718:	2200      	movs	r2, #0
 801471a:	2006      	movs	r0, #6
 801471c:	f7f9 ff74 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014720:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014724:	4618      	mov	r0, r3
 8014726:	3740      	adds	r7, #64	@ 0x40
 8014728:	46bd      	mov	sp, r7
 801472a:	bd80      	pop	{r7, pc}
 801472c:	0801b2cc 	.word	0x0801b2cc

08014730 <USBPD_DPM_RequestPing>:
  *         If PD2.0 is used, PING timer needs to be implemented on user side.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPing(uint8_t PortNum)
{
 8014730:	b580      	push	{r7, lr}
 8014732:	b092      	sub	sp, #72	@ 0x48
 8014734:	af02      	add	r7, sp, #8
 8014736:	4603      	mov	r3, r0
 8014738:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_PING, USBPD_SOPTYPE_SOP);
 801473a:	79fb      	ldrb	r3, [r7, #7]
 801473c:	2200      	movs	r2, #0
 801473e:	2105      	movs	r1, #5
 8014740:	4618      	mov	r0, r3
 8014742:	f7eb ff4b 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014746:	4603      	mov	r3, r0
 8014748:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "PING not accepted by the stack");
 801474c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014750:	2b00      	cmp	r3, #0
 8014752:	d025      	beq.n	80147a0 <USBPD_DPM_RequestPing+0x70>
 8014754:	f107 030c 	add.w	r3, r7, #12
 8014758:	4a14      	ldr	r2, [pc, #80]	@ (80147ac <USBPD_DPM_RequestPing+0x7c>)
 801475a:	2132      	movs	r1, #50	@ 0x32
 801475c:	4618      	mov	r0, r3
 801475e:	f005 feff 	bl	801a560 <sniprintf>
 8014762:	4603      	mov	r3, r0
 8014764:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014768:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801476c:	2b31      	cmp	r3, #49	@ 0x31
 801476e:	d80e      	bhi.n	801478e <USBPD_DPM_RequestPing+0x5e>
 8014770:	f107 030c 	add.w	r3, r7, #12
 8014774:	4618      	mov	r0, r3
 8014776:	f7f1 f9b3 	bl	8005ae0 <strlen>
 801477a:	4602      	mov	r2, r0
 801477c:	f107 030c 	add.w	r3, r7, #12
 8014780:	79f9      	ldrb	r1, [r7, #7]
 8014782:	9200      	str	r2, [sp, #0]
 8014784:	2200      	movs	r2, #0
 8014786:	2006      	movs	r0, #6
 8014788:	f7f9 ff3e 	bl	800e608 <USBPD_TRACE_Add>
 801478c:	e008      	b.n	80147a0 <USBPD_DPM_RequestPing+0x70>
 801478e:	f107 030c 	add.w	r3, r7, #12
 8014792:	79f9      	ldrb	r1, [r7, #7]
 8014794:	2232      	movs	r2, #50	@ 0x32
 8014796:	9200      	str	r2, [sp, #0]
 8014798:	2200      	movs	r2, #0
 801479a:	2006      	movs	r0, #6
 801479c:	f7f9 ff34 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80147a0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80147a4:	4618      	mov	r0, r3
 80147a6:	3740      	adds	r7, #64	@ 0x40
 80147a8:	46bd      	mov	sp, r7
 80147aa:	bd80      	pop	{r7, pc}
 80147ac:	0801b2f0 	.word	0x0801b2f0

080147b0 <USBPD_DPM_RequestMessageRequest>:
  * @param  IndexSrcPDO Index on the selected SRC PDO (value between 1 to 7)
  * @param  RequestedVoltage Requested voltage (in MV and use mainly for APDO)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestMessageRequest(uint8_t PortNum, uint8_t IndexSrcPDO, uint16_t RequestedVoltage)
{
 80147b0:	b580      	push	{r7, lr}
 80147b2:	b092      	sub	sp, #72	@ 0x48
 80147b4:	af02      	add	r7, sp, #8
 80147b6:	4603      	mov	r3, r0
 80147b8:	71fb      	strb	r3, [r7, #7]
 80147ba:	460b      	mov	r3, r1
 80147bc:	71bb      	strb	r3, [r7, #6]
 80147be:	4613      	mov	r3, r2
 80147c0:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 80147c2:	2302      	movs	r3, #2
 80147c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
/* USER CODE BEGIN USBPD_DPM_RequestMessageRequest */
  /* To be adapted to call the PE function */
  /*       _status = USBPD_PE_Send_Request(PortNum, rdo.d32, pdo_object);*/
  DPM_USER_DEBUG_TRACE(PortNum, "ADVICE: update USBPD_DPM_RequestMessageRequest");
 80147c8:	f107 0308 	add.w	r3, r7, #8
 80147cc:	4a29      	ldr	r2, [pc, #164]	@ (8014874 <USBPD_DPM_RequestMessageRequest+0xc4>)
 80147ce:	2132      	movs	r1, #50	@ 0x32
 80147d0:	4618      	mov	r0, r3
 80147d2:	f005 fec5 	bl	801a560 <sniprintf>
 80147d6:	4603      	mov	r3, r0
 80147d8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80147dc:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80147e0:	2b31      	cmp	r3, #49	@ 0x31
 80147e2:	d80e      	bhi.n	8014802 <USBPD_DPM_RequestMessageRequest+0x52>
 80147e4:	f107 0308 	add.w	r3, r7, #8
 80147e8:	4618      	mov	r0, r3
 80147ea:	f7f1 f979 	bl	8005ae0 <strlen>
 80147ee:	4602      	mov	r2, r0
 80147f0:	f107 0308 	add.w	r3, r7, #8
 80147f4:	79f9      	ldrb	r1, [r7, #7]
 80147f6:	9200      	str	r2, [sp, #0]
 80147f8:	2200      	movs	r2, #0
 80147fa:	2006      	movs	r0, #6
 80147fc:	f7f9 ff04 	bl	800e608 <USBPD_TRACE_Add>
 8014800:	e008      	b.n	8014814 <USBPD_DPM_RequestMessageRequest+0x64>
 8014802:	f107 0308 	add.w	r3, r7, #8
 8014806:	79f9      	ldrb	r1, [r7, #7]
 8014808:	2232      	movs	r2, #50	@ 0x32
 801480a:	9200      	str	r2, [sp, #0]
 801480c:	2200      	movs	r2, #0
 801480e:	2006      	movs	r0, #6
 8014810:	f7f9 fefa 	bl	800e608 <USBPD_TRACE_Add>
/* USER CODE END USBPD_DPM_RequestMessageRequest */
  DPM_USER_ERROR_TRACE(PortNum, _status, "REQUEST not accepted by the stack");
 8014814:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014818:	2b00      	cmp	r3, #0
 801481a:	d025      	beq.n	8014868 <USBPD_DPM_RequestMessageRequest+0xb8>
 801481c:	f107 0308 	add.w	r3, r7, #8
 8014820:	4a15      	ldr	r2, [pc, #84]	@ (8014878 <USBPD_DPM_RequestMessageRequest+0xc8>)
 8014822:	2132      	movs	r1, #50	@ 0x32
 8014824:	4618      	mov	r0, r3
 8014826:	f005 fe9b 	bl	801a560 <sniprintf>
 801482a:	4603      	mov	r3, r0
 801482c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
 8014830:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8014834:	2b31      	cmp	r3, #49	@ 0x31
 8014836:	d80e      	bhi.n	8014856 <USBPD_DPM_RequestMessageRequest+0xa6>
 8014838:	f107 0308 	add.w	r3, r7, #8
 801483c:	4618      	mov	r0, r3
 801483e:	f7f1 f94f 	bl	8005ae0 <strlen>
 8014842:	4602      	mov	r2, r0
 8014844:	f107 0308 	add.w	r3, r7, #8
 8014848:	79f9      	ldrb	r1, [r7, #7]
 801484a:	9200      	str	r2, [sp, #0]
 801484c:	2200      	movs	r2, #0
 801484e:	2006      	movs	r0, #6
 8014850:	f7f9 feda 	bl	800e608 <USBPD_TRACE_Add>
 8014854:	e008      	b.n	8014868 <USBPD_DPM_RequestMessageRequest+0xb8>
 8014856:	f107 0308 	add.w	r3, r7, #8
 801485a:	79f9      	ldrb	r1, [r7, #7]
 801485c:	2232      	movs	r2, #50	@ 0x32
 801485e:	9200      	str	r2, [sp, #0]
 8014860:	2200      	movs	r2, #0
 8014862:	2006      	movs	r0, #6
 8014864:	f7f9 fed0 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014868:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 801486c:	4618      	mov	r0, r3
 801486e:	3740      	adds	r7, #64	@ 0x40
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}
 8014874:	0801b310 	.word	0x0801b310
 8014878:	0801b340 	.word	0x0801b340

0801487c <USBPD_DPM_RequestGetSourceCapability>:
  * @brief  Request the PE to send a GET_SRC_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapability(uint8_t PortNum)
{
 801487c:	b580      	push	{r7, lr}
 801487e:	b092      	sub	sp, #72	@ 0x48
 8014880:	af02      	add	r7, sp, #8
 8014882:	4603      	mov	r3, r0
 8014884:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAP, USBPD_SOPTYPE_SOP);
 8014886:	79fb      	ldrb	r3, [r7, #7]
 8014888:	2200      	movs	r2, #0
 801488a:	2107      	movs	r1, #7
 801488c:	4618      	mov	r0, r3
 801488e:	f7eb fea5 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014892:	4603      	mov	r3, r0
 8014894:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA not accepted by the stack");
 8014898:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801489c:	2b00      	cmp	r3, #0
 801489e:	d025      	beq.n	80148ec <USBPD_DPM_RequestGetSourceCapability+0x70>
 80148a0:	f107 030c 	add.w	r3, r7, #12
 80148a4:	4a14      	ldr	r2, [pc, #80]	@ (80148f8 <USBPD_DPM_RequestGetSourceCapability+0x7c>)
 80148a6:	2132      	movs	r1, #50	@ 0x32
 80148a8:	4618      	mov	r0, r3
 80148aa:	f005 fe59 	bl	801a560 <sniprintf>
 80148ae:	4603      	mov	r3, r0
 80148b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80148b4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80148b8:	2b31      	cmp	r3, #49	@ 0x31
 80148ba:	d80e      	bhi.n	80148da <USBPD_DPM_RequestGetSourceCapability+0x5e>
 80148bc:	f107 030c 	add.w	r3, r7, #12
 80148c0:	4618      	mov	r0, r3
 80148c2:	f7f1 f90d 	bl	8005ae0 <strlen>
 80148c6:	4602      	mov	r2, r0
 80148c8:	f107 030c 	add.w	r3, r7, #12
 80148cc:	79f9      	ldrb	r1, [r7, #7]
 80148ce:	9200      	str	r2, [sp, #0]
 80148d0:	2200      	movs	r2, #0
 80148d2:	2006      	movs	r0, #6
 80148d4:	f7f9 fe98 	bl	800e608 <USBPD_TRACE_Add>
 80148d8:	e008      	b.n	80148ec <USBPD_DPM_RequestGetSourceCapability+0x70>
 80148da:	f107 030c 	add.w	r3, r7, #12
 80148de:	79f9      	ldrb	r1, [r7, #7]
 80148e0:	2232      	movs	r2, #50	@ 0x32
 80148e2:	9200      	str	r2, [sp, #0]
 80148e4:	2200      	movs	r2, #0
 80148e6:	2006      	movs	r0, #6
 80148e8:	f7f9 fe8e 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80148ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80148f0:	4618      	mov	r0, r3
 80148f2:	3740      	adds	r7, #64	@ 0x40
 80148f4:	46bd      	mov	sp, r7
 80148f6:	bd80      	pop	{r7, pc}
 80148f8:	0801b364 	.word	0x0801b364

080148fc <USBPD_DPM_RequestGetSinkCapability>:
  * @brief  Request the PE to send a GET_SNK_CAPA message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapability(uint8_t PortNum)
{
 80148fc:	b580      	push	{r7, lr}
 80148fe:	b092      	sub	sp, #72	@ 0x48
 8014900:	af02      	add	r7, sp, #8
 8014902:	4603      	mov	r3, r0
 8014904:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SNK_CAP, USBPD_SOPTYPE_SOP);
 8014906:	79fb      	ldrb	r3, [r7, #7]
 8014908:	2200      	movs	r2, #0
 801490a:	2108      	movs	r1, #8
 801490c:	4618      	mov	r0, r3
 801490e:	f7eb fe65 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014912:	4603      	mov	r3, r0
 8014914:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SINK_CAPA not accepted by the stack");
 8014918:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801491c:	2b00      	cmp	r3, #0
 801491e:	d025      	beq.n	801496c <USBPD_DPM_RequestGetSinkCapability+0x70>
 8014920:	f107 030c 	add.w	r3, r7, #12
 8014924:	4a14      	ldr	r2, [pc, #80]	@ (8014978 <USBPD_DPM_RequestGetSinkCapability+0x7c>)
 8014926:	2132      	movs	r1, #50	@ 0x32
 8014928:	4618      	mov	r0, r3
 801492a:	f005 fe19 	bl	801a560 <sniprintf>
 801492e:	4603      	mov	r3, r0
 8014930:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014934:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014938:	2b31      	cmp	r3, #49	@ 0x31
 801493a:	d80e      	bhi.n	801495a <USBPD_DPM_RequestGetSinkCapability+0x5e>
 801493c:	f107 030c 	add.w	r3, r7, #12
 8014940:	4618      	mov	r0, r3
 8014942:	f7f1 f8cd 	bl	8005ae0 <strlen>
 8014946:	4602      	mov	r2, r0
 8014948:	f107 030c 	add.w	r3, r7, #12
 801494c:	79f9      	ldrb	r1, [r7, #7]
 801494e:	9200      	str	r2, [sp, #0]
 8014950:	2200      	movs	r2, #0
 8014952:	2006      	movs	r0, #6
 8014954:	f7f9 fe58 	bl	800e608 <USBPD_TRACE_Add>
 8014958:	e008      	b.n	801496c <USBPD_DPM_RequestGetSinkCapability+0x70>
 801495a:	f107 030c 	add.w	r3, r7, #12
 801495e:	79f9      	ldrb	r1, [r7, #7]
 8014960:	2232      	movs	r2, #50	@ 0x32
 8014962:	9200      	str	r2, [sp, #0]
 8014964:	2200      	movs	r2, #0
 8014966:	2006      	movs	r0, #6
 8014968:	f7f9 fe4e 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 801496c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014970:	4618      	mov	r0, r3
 8014972:	3740      	adds	r7, #64	@ 0x40
 8014974:	46bd      	mov	sp, r7
 8014976:	bd80      	pop	{r7, pc}
 8014978:	0801b38c 	.word	0x0801b38c

0801497c <USBPD_DPM_RequestDataRoleSwap>:
  * @brief  Request the PE to perform a Data Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestDataRoleSwap(uint8_t PortNum)
{
 801497c:	b580      	push	{r7, lr}
 801497e:	b092      	sub	sp, #72	@ 0x48
 8014980:	af02      	add	r7, sp, #8
 8014982:	4603      	mov	r3, r0
 8014984:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_DR_SWAP, USBPD_SOPTYPE_SOP);
 8014986:	79fb      	ldrb	r3, [r7, #7]
 8014988:	2200      	movs	r2, #0
 801498a:	2109      	movs	r1, #9
 801498c:	4618      	mov	r0, r3
 801498e:	f7eb fe25 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014992:	4603      	mov	r3, r0
 8014994:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "DRS not accepted by the stack");
 8014998:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801499c:	2b00      	cmp	r3, #0
 801499e:	d025      	beq.n	80149ec <USBPD_DPM_RequestDataRoleSwap+0x70>
 80149a0:	f107 030c 	add.w	r3, r7, #12
 80149a4:	4a14      	ldr	r2, [pc, #80]	@ (80149f8 <USBPD_DPM_RequestDataRoleSwap+0x7c>)
 80149a6:	2132      	movs	r1, #50	@ 0x32
 80149a8:	4618      	mov	r0, r3
 80149aa:	f005 fdd9 	bl	801a560 <sniprintf>
 80149ae:	4603      	mov	r3, r0
 80149b0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80149b4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80149b8:	2b31      	cmp	r3, #49	@ 0x31
 80149ba:	d80e      	bhi.n	80149da <USBPD_DPM_RequestDataRoleSwap+0x5e>
 80149bc:	f107 030c 	add.w	r3, r7, #12
 80149c0:	4618      	mov	r0, r3
 80149c2:	f7f1 f88d 	bl	8005ae0 <strlen>
 80149c6:	4602      	mov	r2, r0
 80149c8:	f107 030c 	add.w	r3, r7, #12
 80149cc:	79f9      	ldrb	r1, [r7, #7]
 80149ce:	9200      	str	r2, [sp, #0]
 80149d0:	2200      	movs	r2, #0
 80149d2:	2006      	movs	r0, #6
 80149d4:	f7f9 fe18 	bl	800e608 <USBPD_TRACE_Add>
 80149d8:	e008      	b.n	80149ec <USBPD_DPM_RequestDataRoleSwap+0x70>
 80149da:	f107 030c 	add.w	r3, r7, #12
 80149de:	79f9      	ldrb	r1, [r7, #7]
 80149e0:	2232      	movs	r2, #50	@ 0x32
 80149e2:	9200      	str	r2, [sp, #0]
 80149e4:	2200      	movs	r2, #0
 80149e6:	2006      	movs	r0, #6
 80149e8:	f7f9 fe0e 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80149ec:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80149f0:	4618      	mov	r0, r3
 80149f2:	3740      	adds	r7, #64	@ 0x40
 80149f4:	46bd      	mov	sp, r7
 80149f6:	bd80      	pop	{r7, pc}
 80149f8:	0801b3b4 	.word	0x0801b3b4

080149fc <USBPD_DPM_RequestPowerRoleSwap>:
  * @brief  Request the PE to perform a Power Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestPowerRoleSwap(uint8_t PortNum)
{
 80149fc:	b580      	push	{r7, lr}
 80149fe:	b092      	sub	sp, #72	@ 0x48
 8014a00:	af02      	add	r7, sp, #8
 8014a02:	4603      	mov	r3, r0
 8014a04:	71fb      	strb	r3, [r7, #7]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "PRS not accepted by the stack");
 8014a06:	f107 030c 	add.w	r3, r7, #12
 8014a0a:	4a14      	ldr	r2, [pc, #80]	@ (8014a5c <USBPD_DPM_RequestPowerRoleSwap+0x60>)
 8014a0c:	2132      	movs	r1, #50	@ 0x32
 8014a0e:	4618      	mov	r0, r3
 8014a10:	f005 fda6 	bl	801a560 <sniprintf>
 8014a14:	4603      	mov	r3, r0
 8014a16:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014a1e:	2b31      	cmp	r3, #49	@ 0x31
 8014a20:	d80e      	bhi.n	8014a40 <USBPD_DPM_RequestPowerRoleSwap+0x44>
 8014a22:	f107 030c 	add.w	r3, r7, #12
 8014a26:	4618      	mov	r0, r3
 8014a28:	f7f1 f85a 	bl	8005ae0 <strlen>
 8014a2c:	4602      	mov	r2, r0
 8014a2e:	f107 030c 	add.w	r3, r7, #12
 8014a32:	79f9      	ldrb	r1, [r7, #7]
 8014a34:	9200      	str	r2, [sp, #0]
 8014a36:	2200      	movs	r2, #0
 8014a38:	2006      	movs	r0, #6
 8014a3a:	f7f9 fde5 	bl	800e608 <USBPD_TRACE_Add>
 8014a3e:	e008      	b.n	8014a52 <USBPD_DPM_RequestPowerRoleSwap+0x56>
 8014a40:	f107 030c 	add.w	r3, r7, #12
 8014a44:	79f9      	ldrb	r1, [r7, #7]
 8014a46:	2232      	movs	r2, #50	@ 0x32
 8014a48:	9200      	str	r2, [sp, #0]
 8014a4a:	2200      	movs	r2, #0
 8014a4c:	2006      	movs	r0, #6
 8014a4e:	f7f9 fddb 	bl	800e608 <USBPD_TRACE_Add>
  return USBPD_ERROR;
 8014a52:	2302      	movs	r3, #2
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3740      	adds	r7, #64	@ 0x40
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd80      	pop	{r7, pc}
 8014a5c:	0801b3d4 	.word	0x0801b3d4

08014a60 <USBPD_DPM_RequestVconnSwap>:
  * @brief  Request the PE to perform a VCONN Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestVconnSwap(uint8_t PortNum)
{
 8014a60:	b580      	push	{r7, lr}
 8014a62:	b092      	sub	sp, #72	@ 0x48
 8014a64:	af02      	add	r7, sp, #8
 8014a66:	4603      	mov	r3, r0
 8014a68:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_VCONN_SWAP, USBPD_SOPTYPE_SOP);
 8014a6a:	79fb      	ldrb	r3, [r7, #7]
 8014a6c:	2200      	movs	r2, #0
 8014a6e:	210b      	movs	r1, #11
 8014a70:	4618      	mov	r0, r3
 8014a72:	f7eb fdb3 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014a76:	4603      	mov	r3, r0
 8014a78:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "VCS not accepted by the stack");
 8014a7c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d025      	beq.n	8014ad0 <USBPD_DPM_RequestVconnSwap+0x70>
 8014a84:	f107 030c 	add.w	r3, r7, #12
 8014a88:	4a14      	ldr	r2, [pc, #80]	@ (8014adc <USBPD_DPM_RequestVconnSwap+0x7c>)
 8014a8a:	2132      	movs	r1, #50	@ 0x32
 8014a8c:	4618      	mov	r0, r3
 8014a8e:	f005 fd67 	bl	801a560 <sniprintf>
 8014a92:	4603      	mov	r3, r0
 8014a94:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014a98:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014a9c:	2b31      	cmp	r3, #49	@ 0x31
 8014a9e:	d80e      	bhi.n	8014abe <USBPD_DPM_RequestVconnSwap+0x5e>
 8014aa0:	f107 030c 	add.w	r3, r7, #12
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7f1 f81b 	bl	8005ae0 <strlen>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	f107 030c 	add.w	r3, r7, #12
 8014ab0:	79f9      	ldrb	r1, [r7, #7]
 8014ab2:	9200      	str	r2, [sp, #0]
 8014ab4:	2200      	movs	r2, #0
 8014ab6:	2006      	movs	r0, #6
 8014ab8:	f7f9 fda6 	bl	800e608 <USBPD_TRACE_Add>
 8014abc:	e008      	b.n	8014ad0 <USBPD_DPM_RequestVconnSwap+0x70>
 8014abe:	f107 030c 	add.w	r3, r7, #12
 8014ac2:	79f9      	ldrb	r1, [r7, #7]
 8014ac4:	2232      	movs	r2, #50	@ 0x32
 8014ac6:	9200      	str	r2, [sp, #0]
 8014ac8:	2200      	movs	r2, #0
 8014aca:	2006      	movs	r0, #6
 8014acc:	f7f9 fd9c 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014ad0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014ad4:	4618      	mov	r0, r3
 8014ad6:	3740      	adds	r7, #64	@ 0x40
 8014ad8:	46bd      	mov	sp, r7
 8014ada:	bd80      	pop	{r7, pc}
 8014adc:	0801b3f4 	.word	0x0801b3f4

08014ae0 <USBPD_DPM_RequestSoftReset>:
  * @param  PortNum The current port number
  * @param  SOPType SOP Type based on @ref USBPD_SOPType_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSoftReset(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType)
{
 8014ae0:	b580      	push	{r7, lr}
 8014ae2:	b092      	sub	sp, #72	@ 0x48
 8014ae4:	af02      	add	r7, sp, #8
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	460a      	mov	r2, r1
 8014aea:	71fb      	strb	r3, [r7, #7]
 8014aec:	4613      	mov	r3, r2
 8014aee:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_SOFT_RESET, SOPType);
 8014af0:	79ba      	ldrb	r2, [r7, #6]
 8014af2:	79fb      	ldrb	r3, [r7, #7]
 8014af4:	210d      	movs	r1, #13
 8014af6:	4618      	mov	r0, r3
 8014af8:	f7eb fd70 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014afc:	4603      	mov	r3, r0
 8014afe:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SOFT_RESET not accepted by the stack");
 8014b02:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014b06:	2b00      	cmp	r3, #0
 8014b08:	d025      	beq.n	8014b56 <USBPD_DPM_RequestSoftReset+0x76>
 8014b0a:	f107 030c 	add.w	r3, r7, #12
 8014b0e:	4a15      	ldr	r2, [pc, #84]	@ (8014b64 <USBPD_DPM_RequestSoftReset+0x84>)
 8014b10:	2132      	movs	r1, #50	@ 0x32
 8014b12:	4618      	mov	r0, r3
 8014b14:	f005 fd24 	bl	801a560 <sniprintf>
 8014b18:	4603      	mov	r3, r0
 8014b1a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014b1e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014b22:	2b31      	cmp	r3, #49	@ 0x31
 8014b24:	d80e      	bhi.n	8014b44 <USBPD_DPM_RequestSoftReset+0x64>
 8014b26:	f107 030c 	add.w	r3, r7, #12
 8014b2a:	4618      	mov	r0, r3
 8014b2c:	f7f0 ffd8 	bl	8005ae0 <strlen>
 8014b30:	4602      	mov	r2, r0
 8014b32:	f107 030c 	add.w	r3, r7, #12
 8014b36:	79f9      	ldrb	r1, [r7, #7]
 8014b38:	9200      	str	r2, [sp, #0]
 8014b3a:	2200      	movs	r2, #0
 8014b3c:	2006      	movs	r0, #6
 8014b3e:	f7f9 fd63 	bl	800e608 <USBPD_TRACE_Add>
 8014b42:	e008      	b.n	8014b56 <USBPD_DPM_RequestSoftReset+0x76>
 8014b44:	f107 030c 	add.w	r3, r7, #12
 8014b48:	79f9      	ldrb	r1, [r7, #7]
 8014b4a:	2232      	movs	r2, #50	@ 0x32
 8014b4c:	9200      	str	r2, [sp, #0]
 8014b4e:	2200      	movs	r2, #0
 8014b50:	2006      	movs	r0, #6
 8014b52:	f7f9 fd59 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014b56:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3740      	adds	r7, #64	@ 0x40
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}
 8014b62:	bf00      	nop
 8014b64:	0801b414 	.word	0x0801b414

08014b68 <USBPD_DPM_RequestSourceCapability>:
  * @brief  Request the PE to send a Source Capability message.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSourceCapability(uint8_t PortNum)
{
 8014b68:	b580      	push	{r7, lr}
 8014b6a:	b092      	sub	sp, #72	@ 0x48
 8014b6c:	af02      	add	r7, sp, #8
 8014b6e:	4603      	mov	r3, r0
 8014b70:	71fb      	strb	r3, [r7, #7]
  /* PE will directly get the PDO saved in structure @ref PWR_Port_PDO_Storage */
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_SRC_CAPABILITIES, NULL);
 8014b72:	79fb      	ldrb	r3, [r7, #7]
 8014b74:	2200      	movs	r2, #0
 8014b76:	2101      	movs	r1, #1
 8014b78:	4618      	mov	r0, r3
 8014b7a:	f7eb fdd0 	bl	800071e <USBPD_PE_Request_DataMessage>
 8014b7e:	4603      	mov	r3, r0
 8014b80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SRC_CAPA not accepted by the stack");
 8014b84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014b88:	2b00      	cmp	r3, #0
 8014b8a:	d025      	beq.n	8014bd8 <USBPD_DPM_RequestSourceCapability+0x70>
 8014b8c:	f107 030c 	add.w	r3, r7, #12
 8014b90:	4a14      	ldr	r2, [pc, #80]	@ (8014be4 <USBPD_DPM_RequestSourceCapability+0x7c>)
 8014b92:	2132      	movs	r1, #50	@ 0x32
 8014b94:	4618      	mov	r0, r3
 8014b96:	f005 fce3 	bl	801a560 <sniprintf>
 8014b9a:	4603      	mov	r3, r0
 8014b9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014ba0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014ba4:	2b31      	cmp	r3, #49	@ 0x31
 8014ba6:	d80e      	bhi.n	8014bc6 <USBPD_DPM_RequestSourceCapability+0x5e>
 8014ba8:	f107 030c 	add.w	r3, r7, #12
 8014bac:	4618      	mov	r0, r3
 8014bae:	f7f0 ff97 	bl	8005ae0 <strlen>
 8014bb2:	4602      	mov	r2, r0
 8014bb4:	f107 030c 	add.w	r3, r7, #12
 8014bb8:	79f9      	ldrb	r1, [r7, #7]
 8014bba:	9200      	str	r2, [sp, #0]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	2006      	movs	r0, #6
 8014bc0:	f7f9 fd22 	bl	800e608 <USBPD_TRACE_Add>
 8014bc4:	e008      	b.n	8014bd8 <USBPD_DPM_RequestSourceCapability+0x70>
 8014bc6:	f107 030c 	add.w	r3, r7, #12
 8014bca:	79f9      	ldrb	r1, [r7, #7]
 8014bcc:	2232      	movs	r2, #50	@ 0x32
 8014bce:	9200      	str	r2, [sp, #0]
 8014bd0:	2200      	movs	r2, #0
 8014bd2:	2006      	movs	r0, #6
 8014bd4:	f7f9 fd18 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014bd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014bdc:	4618      	mov	r0, r3
 8014bde:	3740      	adds	r7, #64	@ 0x40
 8014be0:	46bd      	mov	sp, r7
 8014be2:	bd80      	pop	{r7, pc}
 8014be4:	0801b43c 	.word	0x0801b43c

08014be8 <USBPD_DPM_RequestAlert>:
  * @param  PortNum The current port number
  * @param  Alert   Alert based on @ref USBPD_ADO_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestAlert(uint8_t PortNum, USBPD_ADO_TypeDef Alert)
{
 8014be8:	b580      	push	{r7, lr}
 8014bea:	b092      	sub	sp, #72	@ 0x48
 8014bec:	af02      	add	r7, sp, #8
 8014bee:	4603      	mov	r3, r0
 8014bf0:	6039      	str	r1, [r7, #0]
 8014bf2:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_ALERT, (uint32_t*)&Alert.d32);
 8014bf4:	463a      	mov	r2, r7
 8014bf6:	79fb      	ldrb	r3, [r7, #7]
 8014bf8:	2106      	movs	r1, #6
 8014bfa:	4618      	mov	r0, r3
 8014bfc:	f7eb fd8f 	bl	800071e <USBPD_PE_Request_DataMessage>
 8014c00:	4603      	mov	r3, r0
 8014c02:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "ALERT not accepted by the stack");
 8014c06:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014c0a:	2b00      	cmp	r3, #0
 8014c0c:	d025      	beq.n	8014c5a <USBPD_DPM_RequestAlert+0x72>
 8014c0e:	f107 030c 	add.w	r3, r7, #12
 8014c12:	4a15      	ldr	r2, [pc, #84]	@ (8014c68 <USBPD_DPM_RequestAlert+0x80>)
 8014c14:	2132      	movs	r1, #50	@ 0x32
 8014c16:	4618      	mov	r0, r3
 8014c18:	f005 fca2 	bl	801a560 <sniprintf>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014c22:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014c26:	2b31      	cmp	r3, #49	@ 0x31
 8014c28:	d80e      	bhi.n	8014c48 <USBPD_DPM_RequestAlert+0x60>
 8014c2a:	f107 030c 	add.w	r3, r7, #12
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7f0 ff56 	bl	8005ae0 <strlen>
 8014c34:	4602      	mov	r2, r0
 8014c36:	f107 030c 	add.w	r3, r7, #12
 8014c3a:	79f9      	ldrb	r1, [r7, #7]
 8014c3c:	9200      	str	r2, [sp, #0]
 8014c3e:	2200      	movs	r2, #0
 8014c40:	2006      	movs	r0, #6
 8014c42:	f7f9 fce1 	bl	800e608 <USBPD_TRACE_Add>
 8014c46:	e008      	b.n	8014c5a <USBPD_DPM_RequestAlert+0x72>
 8014c48:	f107 030c 	add.w	r3, r7, #12
 8014c4c:	79f9      	ldrb	r1, [r7, #7]
 8014c4e:	2232      	movs	r2, #50	@ 0x32
 8014c50:	9200      	str	r2, [sp, #0]
 8014c52:	2200      	movs	r2, #0
 8014c54:	2006      	movs	r0, #6
 8014c56:	f7f9 fcd7 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014c5a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014c5e:	4618      	mov	r0, r3
 8014c60:	3740      	adds	r7, #64	@ 0x40
 8014c62:	46bd      	mov	sp, r7
 8014c64:	bd80      	pop	{r7, pc}
 8014c66:	bf00      	nop
 8014c68:	0801b5cc 	.word	0x0801b5cc

08014c6c <USBPD_DPM_RequestGetSourceCapabilityExt>:
  * @brief  Request the PE to get a source capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSourceCapabilityExt(uint8_t PortNum)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b092      	sub	sp, #72	@ 0x48
 8014c70:	af02      	add	r7, sp, #8
 8014c72:	4603      	mov	r3, r0
 8014c74:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_SRC_CAPEXT, USBPD_SOPTYPE_SOP);
 8014c76:	79fb      	ldrb	r3, [r7, #7]
 8014c78:	2200      	movs	r2, #0
 8014c7a:	2111      	movs	r1, #17
 8014c7c:	4618      	mov	r0, r3
 8014c7e:	f7eb fcad 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014c82:	4603      	mov	r3, r0
 8014c84:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_SRC_CAPA_EXT not accepted by the stack");
 8014c88:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014c8c:	2b00      	cmp	r3, #0
 8014c8e:	d025      	beq.n	8014cdc <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8014c90:	f107 030c 	add.w	r3, r7, #12
 8014c94:	4a14      	ldr	r2, [pc, #80]	@ (8014ce8 <USBPD_DPM_RequestGetSourceCapabilityExt+0x7c>)
 8014c96:	2132      	movs	r1, #50	@ 0x32
 8014c98:	4618      	mov	r0, r3
 8014c9a:	f005 fc61 	bl	801a560 <sniprintf>
 8014c9e:	4603      	mov	r3, r0
 8014ca0:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014ca4:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014ca8:	2b31      	cmp	r3, #49	@ 0x31
 8014caa:	d80e      	bhi.n	8014cca <USBPD_DPM_RequestGetSourceCapabilityExt+0x5e>
 8014cac:	f107 030c 	add.w	r3, r7, #12
 8014cb0:	4618      	mov	r0, r3
 8014cb2:	f7f0 ff15 	bl	8005ae0 <strlen>
 8014cb6:	4602      	mov	r2, r0
 8014cb8:	f107 030c 	add.w	r3, r7, #12
 8014cbc:	79f9      	ldrb	r1, [r7, #7]
 8014cbe:	9200      	str	r2, [sp, #0]
 8014cc0:	2200      	movs	r2, #0
 8014cc2:	2006      	movs	r0, #6
 8014cc4:	f7f9 fca0 	bl	800e608 <USBPD_TRACE_Add>
 8014cc8:	e008      	b.n	8014cdc <USBPD_DPM_RequestGetSourceCapabilityExt+0x70>
 8014cca:	f107 030c 	add.w	r3, r7, #12
 8014cce:	79f9      	ldrb	r1, [r7, #7]
 8014cd0:	2232      	movs	r2, #50	@ 0x32
 8014cd2:	9200      	str	r2, [sp, #0]
 8014cd4:	2200      	movs	r2, #0
 8014cd6:	2006      	movs	r0, #6
 8014cd8:	f7f9 fc96 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014cdc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	3740      	adds	r7, #64	@ 0x40
 8014ce4:	46bd      	mov	sp, r7
 8014ce6:	bd80      	pop	{r7, pc}
 8014ce8:	0801b5ec 	.word	0x0801b5ec

08014cec <USBPD_DPM_RequestGetSinkCapabilityExt>:
  * @brief  Request the PE to get a sink capability extended
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetSinkCapabilityExt(uint8_t PortNum)
{
 8014cec:	b580      	push	{r7, lr}
 8014cee:	b092      	sub	sp, #72	@ 0x48
 8014cf0:	af02      	add	r7, sp, #8
 8014cf2:	4603      	mov	r3, r0
 8014cf4:	71fb      	strb	r3, [r7, #7]
  DPM_USER_ERROR_TRACE(PortNum, USBPD_ERROR, "GET_SINK_CAPA_EXT not accepted by the stack");
 8014cf6:	f107 030c 	add.w	r3, r7, #12
 8014cfa:	4a14      	ldr	r2, [pc, #80]	@ (8014d4c <USBPD_DPM_RequestGetSinkCapabilityExt+0x60>)
 8014cfc:	2132      	movs	r1, #50	@ 0x32
 8014cfe:	4618      	mov	r0, r3
 8014d00:	f005 fc2e 	bl	801a560 <sniprintf>
 8014d04:	4603      	mov	r3, r0
 8014d06:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 8014d0a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d0e:	2b31      	cmp	r3, #49	@ 0x31
 8014d10:	d80e      	bhi.n	8014d30 <USBPD_DPM_RequestGetSinkCapabilityExt+0x44>
 8014d12:	f107 030c 	add.w	r3, r7, #12
 8014d16:	4618      	mov	r0, r3
 8014d18:	f7f0 fee2 	bl	8005ae0 <strlen>
 8014d1c:	4602      	mov	r2, r0
 8014d1e:	f107 030c 	add.w	r3, r7, #12
 8014d22:	79f9      	ldrb	r1, [r7, #7]
 8014d24:	9200      	str	r2, [sp, #0]
 8014d26:	2200      	movs	r2, #0
 8014d28:	2006      	movs	r0, #6
 8014d2a:	f7f9 fc6d 	bl	800e608 <USBPD_TRACE_Add>
 8014d2e:	e008      	b.n	8014d42 <USBPD_DPM_RequestGetSinkCapabilityExt+0x56>
 8014d30:	f107 030c 	add.w	r3, r7, #12
 8014d34:	79f9      	ldrb	r1, [r7, #7]
 8014d36:	2232      	movs	r2, #50	@ 0x32
 8014d38:	9200      	str	r2, [sp, #0]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	2006      	movs	r0, #6
 8014d3e:	f7f9 fc63 	bl	800e608 <USBPD_TRACE_Add>
  return USBPD_ERROR;
 8014d42:	2302      	movs	r3, #2
}
 8014d44:	4618      	mov	r0, r3
 8014d46:	3740      	adds	r7, #64	@ 0x40
 8014d48:	46bd      	mov	sp, r7
 8014d4a:	bd80      	pop	{r7, pc}
 8014d4c:	0801b618 	.word	0x0801b618

08014d50 <USBPD_DPM_RequestGetManufacturerInfo>:
  * @param  SOPType SOP Type
  * @param  pManuInfoData Pointer on manufacturer info based on @ref USBPD_GMIDB_TypeDef
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetManufacturerInfo(uint8_t PortNum, USBPD_SOPType_TypeDef SOPType, uint8_t* pManuInfoData)
{
 8014d50:	b580      	push	{r7, lr}
 8014d52:	b092      	sub	sp, #72	@ 0x48
 8014d54:	af02      	add	r7, sp, #8
 8014d56:	4603      	mov	r3, r0
 8014d58:	603a      	str	r2, [r7, #0]
 8014d5a:	71fb      	strb	r3, [r7, #7]
 8014d5c:	460b      	mov	r3, r1
 8014d5e:	71bb      	strb	r3, [r7, #6]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 8014d60:	2302      	movs	r3, #2
 8014d62:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  if (USBPD_SOPTYPE_SOP == SOPType)
 8014d66:	79bb      	ldrb	r3, [r7, #6]
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	d10a      	bne.n	8014d82 <USBPD_DPM_RequestGetManufacturerInfo+0x32>
  {
    _status = USBPD_PE_SendExtendedMessage(PortNum, SOPType, USBPD_EXT_GET_MANUFACTURER_INFO, (uint8_t*)pManuInfoData, sizeof(USBPD_GMIDB_TypeDef));
 8014d6c:	79b9      	ldrb	r1, [r7, #6]
 8014d6e:	79f8      	ldrb	r0, [r7, #7]
 8014d70:	2302      	movs	r3, #2
 8014d72:	9300      	str	r3, [sp, #0]
 8014d74:	683b      	ldr	r3, [r7, #0]
 8014d76:	2206      	movs	r2, #6
 8014d78:	f7eb fd3d 	bl	80007f6 <USBPD_PE_SendExtendedMessage>
 8014d7c:	4603      	mov	r3, r0
 8014d7e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  }
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_MANU_INFO not accepted by the stack");
 8014d82:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d025      	beq.n	8014dd6 <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8014d8a:	f107 030c 	add.w	r3, r7, #12
 8014d8e:	4a15      	ldr	r2, [pc, #84]	@ (8014de4 <USBPD_DPM_RequestGetManufacturerInfo+0x94>)
 8014d90:	2132      	movs	r1, #50	@ 0x32
 8014d92:	4618      	mov	r0, r3
 8014d94:	f005 fbe4 	bl	801a560 <sniprintf>
 8014d98:	4603      	mov	r3, r0
 8014d9a:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014d9e:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014da2:	2b31      	cmp	r3, #49	@ 0x31
 8014da4:	d80e      	bhi.n	8014dc4 <USBPD_DPM_RequestGetManufacturerInfo+0x74>
 8014da6:	f107 030c 	add.w	r3, r7, #12
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7f0 fe98 	bl	8005ae0 <strlen>
 8014db0:	4602      	mov	r2, r0
 8014db2:	f107 030c 	add.w	r3, r7, #12
 8014db6:	79f9      	ldrb	r1, [r7, #7]
 8014db8:	9200      	str	r2, [sp, #0]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	2006      	movs	r0, #6
 8014dbe:	f7f9 fc23 	bl	800e608 <USBPD_TRACE_Add>
 8014dc2:	e008      	b.n	8014dd6 <USBPD_DPM_RequestGetManufacturerInfo+0x86>
 8014dc4:	f107 030c 	add.w	r3, r7, #12
 8014dc8:	79f9      	ldrb	r1, [r7, #7]
 8014dca:	2232      	movs	r2, #50	@ 0x32
 8014dcc:	9200      	str	r2, [sp, #0]
 8014dce:	2200      	movs	r2, #0
 8014dd0:	2006      	movs	r0, #6
 8014dd2:	f7f9 fc19 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014dd6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014dda:	4618      	mov	r0, r3
 8014ddc:	3740      	adds	r7, #64	@ 0x40
 8014dde:	46bd      	mov	sp, r7
 8014de0:	bd80      	pop	{r7, pc}
 8014de2:	bf00      	nop
 8014de4:	0801b644 	.word	0x0801b644

08014de8 <USBPD_DPM_RequestGetPPS_Status>:
  * @brief  Request the PE to request a GET_PPS_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetPPS_Status(uint8_t PortNum)
{
 8014de8:	b580      	push	{r7, lr}
 8014dea:	b092      	sub	sp, #72	@ 0x48
 8014dec:	af02      	add	r7, sp, #8
 8014dee:	4603      	mov	r3, r0
 8014df0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_PPS_STATUS, USBPD_SOPTYPE_SOP);
 8014df2:	79fb      	ldrb	r3, [r7, #7]
 8014df4:	2200      	movs	r2, #0
 8014df6:	2114      	movs	r1, #20
 8014df8:	4618      	mov	r0, r3
 8014dfa:	f7eb fbef 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014dfe:	4603      	mov	r3, r0
 8014e00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_PPS_STATUS not accepted by the stack");
 8014e04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014e08:	2b00      	cmp	r3, #0
 8014e0a:	d025      	beq.n	8014e58 <USBPD_DPM_RequestGetPPS_Status+0x70>
 8014e0c:	f107 030c 	add.w	r3, r7, #12
 8014e10:	4a14      	ldr	r2, [pc, #80]	@ (8014e64 <USBPD_DPM_RequestGetPPS_Status+0x7c>)
 8014e12:	2132      	movs	r1, #50	@ 0x32
 8014e14:	4618      	mov	r0, r3
 8014e16:	f005 fba3 	bl	801a560 <sniprintf>
 8014e1a:	4603      	mov	r3, r0
 8014e1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014e20:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014e24:	2b31      	cmp	r3, #49	@ 0x31
 8014e26:	d80e      	bhi.n	8014e46 <USBPD_DPM_RequestGetPPS_Status+0x5e>
 8014e28:	f107 030c 	add.w	r3, r7, #12
 8014e2c:	4618      	mov	r0, r3
 8014e2e:	f7f0 fe57 	bl	8005ae0 <strlen>
 8014e32:	4602      	mov	r2, r0
 8014e34:	f107 030c 	add.w	r3, r7, #12
 8014e38:	79f9      	ldrb	r1, [r7, #7]
 8014e3a:	9200      	str	r2, [sp, #0]
 8014e3c:	2200      	movs	r2, #0
 8014e3e:	2006      	movs	r0, #6
 8014e40:	f7f9 fbe2 	bl	800e608 <USBPD_TRACE_Add>
 8014e44:	e008      	b.n	8014e58 <USBPD_DPM_RequestGetPPS_Status+0x70>
 8014e46:	f107 030c 	add.w	r3, r7, #12
 8014e4a:	79f9      	ldrb	r1, [r7, #7]
 8014e4c:	2232      	movs	r2, #50	@ 0x32
 8014e4e:	9200      	str	r2, [sp, #0]
 8014e50:	2200      	movs	r2, #0
 8014e52:	2006      	movs	r0, #6
 8014e54:	f7f9 fbd8 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014e58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014e5c:	4618      	mov	r0, r3
 8014e5e:	3740      	adds	r7, #64	@ 0x40
 8014e60:	46bd      	mov	sp, r7
 8014e62:	bd80      	pop	{r7, pc}
 8014e64:	0801b66c 	.word	0x0801b66c

08014e68 <USBPD_DPM_RequestGetStatus>:
  * @brief  Request the PE to request a GET_STATUS
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetStatus(uint8_t PortNum)
{
 8014e68:	b580      	push	{r7, lr}
 8014e6a:	b092      	sub	sp, #72	@ 0x48
 8014e6c:	af02      	add	r7, sp, #8
 8014e6e:	4603      	mov	r3, r0
 8014e70:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_STATUS, USBPD_SOPTYPE_SOP);
 8014e72:	79fb      	ldrb	r3, [r7, #7]
 8014e74:	2200      	movs	r2, #0
 8014e76:	2112      	movs	r1, #18
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7eb fbaf 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_STATUS not accepted by the stack");
 8014e84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014e88:	2b00      	cmp	r3, #0
 8014e8a:	d025      	beq.n	8014ed8 <USBPD_DPM_RequestGetStatus+0x70>
 8014e8c:	f107 030c 	add.w	r3, r7, #12
 8014e90:	4a14      	ldr	r2, [pc, #80]	@ (8014ee4 <USBPD_DPM_RequestGetStatus+0x7c>)
 8014e92:	2132      	movs	r1, #50	@ 0x32
 8014e94:	4618      	mov	r0, r3
 8014e96:	f005 fb63 	bl	801a560 <sniprintf>
 8014e9a:	4603      	mov	r3, r0
 8014e9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014ea0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014ea4:	2b31      	cmp	r3, #49	@ 0x31
 8014ea6:	d80e      	bhi.n	8014ec6 <USBPD_DPM_RequestGetStatus+0x5e>
 8014ea8:	f107 030c 	add.w	r3, r7, #12
 8014eac:	4618      	mov	r0, r3
 8014eae:	f7f0 fe17 	bl	8005ae0 <strlen>
 8014eb2:	4602      	mov	r2, r0
 8014eb4:	f107 030c 	add.w	r3, r7, #12
 8014eb8:	79f9      	ldrb	r1, [r7, #7]
 8014eba:	9200      	str	r2, [sp, #0]
 8014ebc:	2200      	movs	r2, #0
 8014ebe:	2006      	movs	r0, #6
 8014ec0:	f7f9 fba2 	bl	800e608 <USBPD_TRACE_Add>
 8014ec4:	e008      	b.n	8014ed8 <USBPD_DPM_RequestGetStatus+0x70>
 8014ec6:	f107 030c 	add.w	r3, r7, #12
 8014eca:	79f9      	ldrb	r1, [r7, #7]
 8014ecc:	2232      	movs	r2, #50	@ 0x32
 8014ece:	9200      	str	r2, [sp, #0]
 8014ed0:	2200      	movs	r2, #0
 8014ed2:	2006      	movs	r0, #6
 8014ed4:	f7f9 fb98 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014ed8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014edc:	4618      	mov	r0, r3
 8014ede:	3740      	adds	r7, #64	@ 0x40
 8014ee0:	46bd      	mov	sp, r7
 8014ee2:	bd80      	pop	{r7, pc}
 8014ee4:	0801b698 	.word	0x0801b698

08014ee8 <USBPD_DPM_RequestFastRoleSwap>:
  * @brief  Request the PE to perform a Fast Role Swap.
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestFastRoleSwap(uint8_t PortNum)
{
 8014ee8:	b580      	push	{r7, lr}
 8014eea:	b092      	sub	sp, #72	@ 0x48
 8014eec:	af02      	add	r7, sp, #8
 8014eee:	4603      	mov	r3, r0
 8014ef0:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_FR_SWAP, USBPD_SOPTYPE_SOP);
 8014ef2:	79fb      	ldrb	r3, [r7, #7]
 8014ef4:	2200      	movs	r2, #0
 8014ef6:	2113      	movs	r1, #19
 8014ef8:	4618      	mov	r0, r3
 8014efa:	f7eb fb6f 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014efe:	4603      	mov	r3, r0
 8014f00:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "FRS not accepted by the stack");
 8014f04:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d025      	beq.n	8014f58 <USBPD_DPM_RequestFastRoleSwap+0x70>
 8014f0c:	f107 030c 	add.w	r3, r7, #12
 8014f10:	4a14      	ldr	r2, [pc, #80]	@ (8014f64 <USBPD_DPM_RequestFastRoleSwap+0x7c>)
 8014f12:	2132      	movs	r1, #50	@ 0x32
 8014f14:	4618      	mov	r0, r3
 8014f16:	f005 fb23 	bl	801a560 <sniprintf>
 8014f1a:	4603      	mov	r3, r0
 8014f1c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014f20:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014f24:	2b31      	cmp	r3, #49	@ 0x31
 8014f26:	d80e      	bhi.n	8014f46 <USBPD_DPM_RequestFastRoleSwap+0x5e>
 8014f28:	f107 030c 	add.w	r3, r7, #12
 8014f2c:	4618      	mov	r0, r3
 8014f2e:	f7f0 fdd7 	bl	8005ae0 <strlen>
 8014f32:	4602      	mov	r2, r0
 8014f34:	f107 030c 	add.w	r3, r7, #12
 8014f38:	79f9      	ldrb	r1, [r7, #7]
 8014f3a:	9200      	str	r2, [sp, #0]
 8014f3c:	2200      	movs	r2, #0
 8014f3e:	2006      	movs	r0, #6
 8014f40:	f7f9 fb62 	bl	800e608 <USBPD_TRACE_Add>
 8014f44:	e008      	b.n	8014f58 <USBPD_DPM_RequestFastRoleSwap+0x70>
 8014f46:	f107 030c 	add.w	r3, r7, #12
 8014f4a:	79f9      	ldrb	r1, [r7, #7]
 8014f4c:	2232      	movs	r2, #50	@ 0x32
 8014f4e:	9200      	str	r2, [sp, #0]
 8014f50:	2200      	movs	r2, #0
 8014f52:	2006      	movs	r0, #6
 8014f54:	f7f9 fb58 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014f58:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014f5c:	4618      	mov	r0, r3
 8014f5e:	3740      	adds	r7, #64	@ 0x40
 8014f60:	46bd      	mov	sp, r7
 8014f62:	bd80      	pop	{r7, pc}
 8014f64:	0801b6c0 	.word	0x0801b6c0

08014f68 <USBPD_DPM_RequestGetCountryCodes>:
  * @brief  Request the PE to send a GET_COUNTRY_CODES message
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryCodes(uint8_t PortNum)
{
 8014f68:	b580      	push	{r7, lr}
 8014f6a:	b092      	sub	sp, #72	@ 0x48
 8014f6c:	af02      	add	r7, sp, #8
 8014f6e:	4603      	mov	r3, r0
 8014f70:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_CtrlMessage(PortNum, USBPD_CONTROLMSG_GET_COUNTRY_CODES, USBPD_SOPTYPE_SOP);
 8014f72:	79fb      	ldrb	r3, [r7, #7]
 8014f74:	2200      	movs	r2, #0
 8014f76:	2115      	movs	r1, #21
 8014f78:	4618      	mov	r0, r3
 8014f7a:	f7eb fb2f 	bl	80005dc <USBPD_PE_Request_CtrlMessage>
 8014f7e:	4603      	mov	r3, r0
 8014f80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_CODES not accepted by the stack");
 8014f84:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d025      	beq.n	8014fd8 <USBPD_DPM_RequestGetCountryCodes+0x70>
 8014f8c:	f107 030c 	add.w	r3, r7, #12
 8014f90:	4a14      	ldr	r2, [pc, #80]	@ (8014fe4 <USBPD_DPM_RequestGetCountryCodes+0x7c>)
 8014f92:	2132      	movs	r1, #50	@ 0x32
 8014f94:	4618      	mov	r0, r3
 8014f96:	f005 fae3 	bl	801a560 <sniprintf>
 8014f9a:	4603      	mov	r3, r0
 8014f9c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8014fa0:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8014fa4:	2b31      	cmp	r3, #49	@ 0x31
 8014fa6:	d80e      	bhi.n	8014fc6 <USBPD_DPM_RequestGetCountryCodes+0x5e>
 8014fa8:	f107 030c 	add.w	r3, r7, #12
 8014fac:	4618      	mov	r0, r3
 8014fae:	f7f0 fd97 	bl	8005ae0 <strlen>
 8014fb2:	4602      	mov	r2, r0
 8014fb4:	f107 030c 	add.w	r3, r7, #12
 8014fb8:	79f9      	ldrb	r1, [r7, #7]
 8014fba:	9200      	str	r2, [sp, #0]
 8014fbc:	2200      	movs	r2, #0
 8014fbe:	2006      	movs	r0, #6
 8014fc0:	f7f9 fb22 	bl	800e608 <USBPD_TRACE_Add>
 8014fc4:	e008      	b.n	8014fd8 <USBPD_DPM_RequestGetCountryCodes+0x70>
 8014fc6:	f107 030c 	add.w	r3, r7, #12
 8014fca:	79f9      	ldrb	r1, [r7, #7]
 8014fcc:	2232      	movs	r2, #50	@ 0x32
 8014fce:	9200      	str	r2, [sp, #0]
 8014fd0:	2200      	movs	r2, #0
 8014fd2:	2006      	movs	r0, #6
 8014fd4:	f7f9 fb18 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 8014fd8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8014fdc:	4618      	mov	r0, r3
 8014fde:	3740      	adds	r7, #64	@ 0x40
 8014fe0:	46bd      	mov	sp, r7
 8014fe2:	bd80      	pop	{r7, pc}
 8014fe4:	0801b6e0 	.word	0x0801b6e0

08014fe8 <USBPD_DPM_RequestGetCountryInfo>:
  * @param  PortNum     The current port number
  * @param  CountryCode Country code (1st character and 2nd of the Alpha-2 Country)
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetCountryInfo(uint8_t PortNum, uint16_t CountryCode)
{
 8014fe8:	b580      	push	{r7, lr}
 8014fea:	b092      	sub	sp, #72	@ 0x48
 8014fec:	af02      	add	r7, sp, #8
 8014fee:	4603      	mov	r3, r0
 8014ff0:	460a      	mov	r2, r1
 8014ff2:	71fb      	strb	r3, [r7, #7]
 8014ff4:	4613      	mov	r3, r2
 8014ff6:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_PE_Request_DataMessage(PortNum, USBPD_DATAMSG_GET_COUNTRY_INFO, (uint32_t*)&CountryCode);
 8014ff8:	1d3a      	adds	r2, r7, #4
 8014ffa:	79fb      	ldrb	r3, [r7, #7]
 8014ffc:	2107      	movs	r1, #7
 8014ffe:	4618      	mov	r0, r3
 8015000:	f7eb fb8d 	bl	800071e <USBPD_PE_Request_DataMessage>
 8015004:	4603      	mov	r3, r0
 8015006:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_COUNTRY_INFO not accepted by the stack");
 801500a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801500e:	2b00      	cmp	r3, #0
 8015010:	d025      	beq.n	801505e <USBPD_DPM_RequestGetCountryInfo+0x76>
 8015012:	f107 030c 	add.w	r3, r7, #12
 8015016:	4a15      	ldr	r2, [pc, #84]	@ (801506c <USBPD_DPM_RequestGetCountryInfo+0x84>)
 8015018:	2132      	movs	r1, #50	@ 0x32
 801501a:	4618      	mov	r0, r3
 801501c:	f005 faa0 	bl	801a560 <sniprintf>
 8015020:	4603      	mov	r3, r0
 8015022:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8015026:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801502a:	2b31      	cmp	r3, #49	@ 0x31
 801502c:	d80e      	bhi.n	801504c <USBPD_DPM_RequestGetCountryInfo+0x64>
 801502e:	f107 030c 	add.w	r3, r7, #12
 8015032:	4618      	mov	r0, r3
 8015034:	f7f0 fd54 	bl	8005ae0 <strlen>
 8015038:	4602      	mov	r2, r0
 801503a:	f107 030c 	add.w	r3, r7, #12
 801503e:	79f9      	ldrb	r1, [r7, #7]
 8015040:	9200      	str	r2, [sp, #0]
 8015042:	2200      	movs	r2, #0
 8015044:	2006      	movs	r0, #6
 8015046:	f7f9 fadf 	bl	800e608 <USBPD_TRACE_Add>
 801504a:	e008      	b.n	801505e <USBPD_DPM_RequestGetCountryInfo+0x76>
 801504c:	f107 030c 	add.w	r3, r7, #12
 8015050:	79f9      	ldrb	r1, [r7, #7]
 8015052:	2232      	movs	r2, #50	@ 0x32
 8015054:	9200      	str	r2, [sp, #0]
 8015056:	2200      	movs	r2, #0
 8015058:	2006      	movs	r0, #6
 801505a:	f7f9 fad5 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 801505e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8015062:	4618      	mov	r0, r3
 8015064:	3740      	adds	r7, #64	@ 0x40
 8015066:	46bd      	mov	sp, r7
 8015068:	bd80      	pop	{r7, pc}
 801506a:	bf00      	nop
 801506c:	0801b70c 	.word	0x0801b70c

08015070 <USBPD_DPM_RequestGetBatteryCapability>:
  * @param  PortNum         The current port number
  * @param  pBatteryCapRef  Pointer on the Battery Capability reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryCapability(uint8_t PortNum, uint8_t *pBatteryCapRef)
{
 8015070:	b580      	push	{r7, lr}
 8015072:	b092      	sub	sp, #72	@ 0x48
 8015074:	af02      	add	r7, sp, #8
 8015076:	4603      	mov	r3, r0
 8015078:	6039      	str	r1, [r7, #0]
 801507a:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_CAP, (uint8_t*)pBatteryCapRef, 1);
 801507c:	79f8      	ldrb	r0, [r7, #7]
 801507e:	2301      	movs	r3, #1
 8015080:	9300      	str	r3, [sp, #0]
 8015082:	683b      	ldr	r3, [r7, #0]
 8015084:	2203      	movs	r2, #3
 8015086:	2100      	movs	r1, #0
 8015088:	f7eb fbb5 	bl	80007f6 <USBPD_PE_SendExtendedMessage>
 801508c:	4603      	mov	r3, r0
 801508e:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_CAPA not accepted by the stack");
 8015092:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015096:	2b00      	cmp	r3, #0
 8015098:	d025      	beq.n	80150e6 <USBPD_DPM_RequestGetBatteryCapability+0x76>
 801509a:	f107 030c 	add.w	r3, r7, #12
 801509e:	4a15      	ldr	r2, [pc, #84]	@ (80150f4 <USBPD_DPM_RequestGetBatteryCapability+0x84>)
 80150a0:	2132      	movs	r1, #50	@ 0x32
 80150a2:	4618      	mov	r0, r3
 80150a4:	f005 fa5c 	bl	801a560 <sniprintf>
 80150a8:	4603      	mov	r3, r0
 80150aa:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80150ae:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80150b2:	2b31      	cmp	r3, #49	@ 0x31
 80150b4:	d80e      	bhi.n	80150d4 <USBPD_DPM_RequestGetBatteryCapability+0x64>
 80150b6:	f107 030c 	add.w	r3, r7, #12
 80150ba:	4618      	mov	r0, r3
 80150bc:	f7f0 fd10 	bl	8005ae0 <strlen>
 80150c0:	4602      	mov	r2, r0
 80150c2:	f107 030c 	add.w	r3, r7, #12
 80150c6:	79f9      	ldrb	r1, [r7, #7]
 80150c8:	9200      	str	r2, [sp, #0]
 80150ca:	2200      	movs	r2, #0
 80150cc:	2006      	movs	r0, #6
 80150ce:	f7f9 fa9b 	bl	800e608 <USBPD_TRACE_Add>
 80150d2:	e008      	b.n	80150e6 <USBPD_DPM_RequestGetBatteryCapability+0x76>
 80150d4:	f107 030c 	add.w	r3, r7, #12
 80150d8:	79f9      	ldrb	r1, [r7, #7]
 80150da:	2232      	movs	r2, #50	@ 0x32
 80150dc:	9200      	str	r2, [sp, #0]
 80150de:	2200      	movs	r2, #0
 80150e0:	2006      	movs	r0, #6
 80150e2:	f7f9 fa91 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80150e6:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80150ea:	4618      	mov	r0, r3
 80150ec:	3740      	adds	r7, #64	@ 0x40
 80150ee:	46bd      	mov	sp, r7
 80150f0:	bd80      	pop	{r7, pc}
 80150f2:	bf00      	nop
 80150f4:	0801b738 	.word	0x0801b738

080150f8 <USBPD_DPM_RequestGetBatteryStatus>:
  * @param  PortNum           The current port number
  * @param  pBatteryStatusRef Pointer on the Battery Status reference
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestGetBatteryStatus(uint8_t PortNum, uint8_t *pBatteryStatusRef)
{
 80150f8:	b580      	push	{r7, lr}
 80150fa:	b092      	sub	sp, #72	@ 0x48
 80150fc:	af02      	add	r7, sp, #8
 80150fe:	4603      	mov	r3, r0
 8015100:	6039      	str	r1, [r7, #0]
 8015102:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_PE_SendExtendedMessage(PortNum, USBPD_SOPTYPE_SOP, USBPD_EXT_GET_BATTERY_STATUS, (uint8_t*)pBatteryStatusRef, 1);
 8015104:	79f8      	ldrb	r0, [r7, #7]
 8015106:	2301      	movs	r3, #1
 8015108:	9300      	str	r3, [sp, #0]
 801510a:	683b      	ldr	r3, [r7, #0]
 801510c:	2204      	movs	r2, #4
 801510e:	2100      	movs	r1, #0
 8015110:	f7eb fb71 	bl	80007f6 <USBPD_PE_SendExtendedMessage>
 8015114:	4603      	mov	r3, r0
 8015116:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "GET_BATTERY_STATUS not accepted by the stack");
 801511a:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801511e:	2b00      	cmp	r3, #0
 8015120:	d025      	beq.n	801516e <USBPD_DPM_RequestGetBatteryStatus+0x76>
 8015122:	f107 030c 	add.w	r3, r7, #12
 8015126:	4a15      	ldr	r2, [pc, #84]	@ (801517c <USBPD_DPM_RequestGetBatteryStatus+0x84>)
 8015128:	2132      	movs	r1, #50	@ 0x32
 801512a:	4618      	mov	r0, r3
 801512c:	f005 fa18 	bl	801a560 <sniprintf>
 8015130:	4603      	mov	r3, r0
 8015132:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8015136:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 801513a:	2b31      	cmp	r3, #49	@ 0x31
 801513c:	d80e      	bhi.n	801515c <USBPD_DPM_RequestGetBatteryStatus+0x64>
 801513e:	f107 030c 	add.w	r3, r7, #12
 8015142:	4618      	mov	r0, r3
 8015144:	f7f0 fccc 	bl	8005ae0 <strlen>
 8015148:	4602      	mov	r2, r0
 801514a:	f107 030c 	add.w	r3, r7, #12
 801514e:	79f9      	ldrb	r1, [r7, #7]
 8015150:	9200      	str	r2, [sp, #0]
 8015152:	2200      	movs	r2, #0
 8015154:	2006      	movs	r0, #6
 8015156:	f7f9 fa57 	bl	800e608 <USBPD_TRACE_Add>
 801515a:	e008      	b.n	801516e <USBPD_DPM_RequestGetBatteryStatus+0x76>
 801515c:	f107 030c 	add.w	r3, r7, #12
 8015160:	79f9      	ldrb	r1, [r7, #7]
 8015162:	2232      	movs	r2, #50	@ 0x32
 8015164:	9200      	str	r2, [sp, #0]
 8015166:	2200      	movs	r2, #0
 8015168:	2006      	movs	r0, #6
 801516a:	f7f9 fa4d 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 801516e:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 8015172:	4618      	mov	r0, r3
 8015174:	3740      	adds	r7, #64	@ 0x40
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}
 801517a:	bf00      	nop
 801517c:	0801b764 	.word	0x0801b764

08015180 <USBPD_DPM_RequestSecurityRequest>:
  * @brief  Request the PE to send a SECURITY_REQUEST
  * @param  PortNum The current port number
  * @retval USBPD Status
  */
USBPD_StatusTypeDef USBPD_DPM_RequestSecurityRequest(uint8_t PortNum)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b092      	sub	sp, #72	@ 0x48
 8015184:	af02      	add	r7, sp, #8
 8015186:	4603      	mov	r3, r0
 8015188:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef _status = USBPD_ERROR;
 801518a:	2302      	movs	r3, #2
 801518c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  DPM_USER_ERROR_TRACE(PortNum, _status, "SECURITY_REQUEST not accepted by the stack");
 8015190:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8015194:	2b00      	cmp	r3, #0
 8015196:	d025      	beq.n	80151e4 <USBPD_DPM_RequestSecurityRequest+0x64>
 8015198:	f107 030c 	add.w	r3, r7, #12
 801519c:	4a14      	ldr	r2, [pc, #80]	@ (80151f0 <USBPD_DPM_RequestSecurityRequest+0x70>)
 801519e:	2132      	movs	r1, #50	@ 0x32
 80151a0:	4618      	mov	r0, r3
 80151a2:	f005 f9dd 	bl	801a560 <sniprintf>
 80151a6:	4603      	mov	r3, r0
 80151a8:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80151ac:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80151b0:	2b31      	cmp	r3, #49	@ 0x31
 80151b2:	d80e      	bhi.n	80151d2 <USBPD_DPM_RequestSecurityRequest+0x52>
 80151b4:	f107 030c 	add.w	r3, r7, #12
 80151b8:	4618      	mov	r0, r3
 80151ba:	f7f0 fc91 	bl	8005ae0 <strlen>
 80151be:	4602      	mov	r2, r0
 80151c0:	f107 030c 	add.w	r3, r7, #12
 80151c4:	79f9      	ldrb	r1, [r7, #7]
 80151c6:	9200      	str	r2, [sp, #0]
 80151c8:	2200      	movs	r2, #0
 80151ca:	2006      	movs	r0, #6
 80151cc:	f7f9 fa1c 	bl	800e608 <USBPD_TRACE_Add>
 80151d0:	e008      	b.n	80151e4 <USBPD_DPM_RequestSecurityRequest+0x64>
 80151d2:	f107 030c 	add.w	r3, r7, #12
 80151d6:	79f9      	ldrb	r1, [r7, #7]
 80151d8:	2232      	movs	r2, #50	@ 0x32
 80151da:	9200      	str	r2, [sp, #0]
 80151dc:	2200      	movs	r2, #0
 80151de:	2006      	movs	r0, #6
 80151e0:	f7f9 fa12 	bl	800e608 <USBPD_TRACE_Add>
  return _status;
 80151e4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80151e8:	4618      	mov	r0, r3
 80151ea:	3740      	adds	r7, #64	@ 0x40
 80151ec:	46bd      	mov	sp, r7
 80151ee:	bd80      	pop	{r7, pc}
 80151f0:	0801b794 	.word	0x0801b794

080151f4 <DPM_TurnOffPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_OK, USBPD_ERROR
  */
static USBPD_StatusTypeDef DPM_TurnOffPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 80151f4:	b580      	push	{r7, lr}
 80151f6:	b084      	sub	sp, #16
 80151f8:	af00      	add	r7, sp, #0
 80151fa:	4603      	mov	r3, r0
 80151fc:	6039      	str	r1, [r7, #0]
 80151fe:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef status;
  status = USBPD_PWR_IF_VBUSDisable(PortNum);
 8015200:	79fb      	ldrb	r3, [r7, #7]
 8015202:	4618      	mov	r0, r3
 8015204:	f000 f8b4 	bl	8015370 <USBPD_PWR_IF_VBUSDisable>
 8015208:	4603      	mov	r3, r0
 801520a:	73fb      	strb	r3, [r7, #15]
  return status;
 801520c:	7bfb      	ldrb	r3, [r7, #15]
}
 801520e:	4618      	mov	r0, r3
 8015210:	3710      	adds	r7, #16
 8015212:	46bd      	mov	sp, r7
 8015214:	bd80      	pop	{r7, pc}

08015216 <DPM_TurnOnPower>:
  * @param  PortNum The current port number
  * @param  Role    Port power role
  * @retval USBPD_ACCEPT, USBPD_WAIT, USBPD_REJECT
  */
static USBPD_StatusTypeDef DPM_TurnOnPower(uint8_t PortNum, USBPD_PortPowerRole_TypeDef Role)
{
 8015216:	b580      	push	{r7, lr}
 8015218:	b084      	sub	sp, #16
 801521a:	af00      	add	r7, sp, #0
 801521c:	4603      	mov	r3, r0
 801521e:	6039      	str	r1, [r7, #0]
 8015220:	71fb      	strb	r3, [r7, #7]
  USBPD_StatusTypeDef status;
  /* Enable the output */
  status = USBPD_PWR_IF_VBUSEnable(PortNum);
 8015222:	79fb      	ldrb	r3, [r7, #7]
 8015224:	4618      	mov	r0, r3
 8015226:	f000 f88f 	bl	8015348 <USBPD_PWR_IF_VBUSEnable>
 801522a:	4603      	mov	r3, r0
 801522c:	73fb      	strb	r3, [r7, #15]
  return status;
 801522e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015230:	4618      	mov	r0, r3
 8015232:	3710      	adds	r7, #16
 8015234:	46bd      	mov	sp, r7
 8015236:	bd80      	pop	{r7, pc}

08015238 <USBPD_PWR_IF_Init>:
  * @brief  Initialize structures and variables related to power board profiles
  *         used by Sink and Source, for all available ports.
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_Init(void)
{
 8015238:	b480      	push	{r7}
 801523a:	b083      	sub	sp, #12
 801523c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN USBPD_PWR_IF_Init */
  USBPD_StatusTypeDef _status = USBPD_OK;
 801523e:	2300      	movs	r3, #0
 8015240:	71fb      	strb	r3, [r7, #7]

  /* Set links to PDO values and number for Port 0 (defined in PDO arrays in H file). */
  PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.ListOfPDO = (uint32_t *) PORT0_PDO_ListSRC;
 8015242:	4b06      	ldr	r3, [pc, #24]	@ (801525c <USBPD_PWR_IF_Init+0x24>)
 8015244:	4a06      	ldr	r2, [pc, #24]	@ (8015260 <USBPD_PWR_IF_Init+0x28>)
 8015246:	601a      	str	r2, [r3, #0]
  PWR_Port_PDO_Storage[USBPD_PORT_0].SourcePDO.NumberOfPDO = &USBPD_NbPDO[1];
 8015248:	4b04      	ldr	r3, [pc, #16]	@ (801525c <USBPD_PWR_IF_Init+0x24>)
 801524a:	4a06      	ldr	r2, [pc, #24]	@ (8015264 <USBPD_PWR_IF_Init+0x2c>)
 801524c:	605a      	str	r2, [r3, #4]

  return _status;
 801524e:	79fb      	ldrb	r3, [r7, #7]
/* USER CODE END USBPD_PWR_IF_Init */
}
 8015250:	4618      	mov	r0, r3
 8015252:	370c      	adds	r7, #12
 8015254:	46bd      	mov	sp, r7
 8015256:	f85d 7b04 	ldr.w	r7, [sp], #4
 801525a:	4770      	bx	lr
 801525c:	200028a4 	.word	0x200028a4
 8015260:	20000128 	.word	0x20000128
 8015264:	20000125 	.word	0x20000125

08015268 <USBPD_PWR_IF_SetProfile>:
  * @brief  Sets the required power profile, now it works only with Fixed ones
  * @param  PortNum Port number
  * @retval USBPD status
*/
USBPD_StatusTypeDef USBPD_PWR_IF_SetProfile(uint8_t PortNum)
{
 8015268:	b590      	push	{r4, r7, lr}
 801526a:	b085      	sub	sp, #20
 801526c:	af00      	add	r7, sp, #0
 801526e:	4603      	mov	r3, r0
 8015270:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_SetProfile */
  USBPD_PDO_TypeDef        _pdo;
  USBPD_SNKRDO_TypeDef     _rdo;
  _rdo.d32 = DPM_Ports[PortNum].DPM_RcvRequestDOMsg;
 8015272:	79fa      	ldrb	r2, [r7, #7]
 8015274:	491a      	ldr	r1, [pc, #104]	@ (80152e0 <USBPD_PWR_IF_SetProfile+0x78>)
 8015276:	4613      	mov	r3, r2
 8015278:	011b      	lsls	r3, r3, #4
 801527a:	1a9b      	subs	r3, r3, r2
 801527c:	00db      	lsls	r3, r3, #3
 801527e:	440b      	add	r3, r1
 8015280:	3340      	adds	r3, #64	@ 0x40
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	60bb      	str	r3, [r7, #8]
  _pdo.d32 = PORT0_PDO_ListSRC[0];
 8015286:	4b17      	ldr	r3, [pc, #92]	@ (80152e4 <USBPD_PWR_IF_SetProfile+0x7c>)
 8015288:	681b      	ldr	r3, [r3, #0]
 801528a:	60fb      	str	r3, [r7, #12]
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 801528c:	79f8      	ldrb	r0, [r7, #7]
                                               _pdo.SRCFixedPDO.VoltageIn50mVunits * 50,
 801528e:	68fb      	ldr	r3, [r7, #12]
 8015290:	f3c3 2389 	ubfx	r3, r3, #10, #10
 8015294:	b29b      	uxth	r3, r3
 8015296:	461a      	mov	r2, r3
 8015298:	2332      	movs	r3, #50	@ 0x32
 801529a:	fb02 f303 	mul.w	r3, r2, r3
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 801529e:	4619      	mov	r1, r3
                                               (_rdo.FixedVariableRDO.OperatingCurrentIn10mAunits * 10),
 80152a0:	68bb      	ldr	r3, [r7, #8]
 80152a2:	f3c3 2389 	ubfx	r3, r3, #10, #10
 80152a6:	b29b      	uxth	r3, r3
 80152a8:	461a      	mov	r2, r3
 80152aa:	4613      	mov	r3, r2
 80152ac:	009b      	lsls	r3, r3, #2
 80152ae:	4413      	add	r3, r2
 80152b0:	005b      	lsls	r3, r3, #1
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 80152b2:	461c      	mov	r4, r3
                                               (_rdo.FixedVariableRDO.MaxOperatingCurrent10mAunits * 10)
 80152b4:	893b      	ldrh	r3, [r7, #8]
 80152b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80152ba:	b29b      	uxth	r3, r3
 80152bc:	461a      	mov	r2, r3
 80152be:	4613      	mov	r3, r2
 80152c0:	009b      	lsls	r3, r3, #2
 80152c2:	4413      	add	r3, r2
 80152c4:	005b      	lsls	r3, r3, #1
  return (BSP_ERROR_NONE == BSP_USBPD_PWR_VBUSSetVoltage_Fixed(PortNum,
 80152c6:	4622      	mov	r2, r4
 80152c8:	f7f3 feb8 	bl	800903c <BSP_USBPD_PWR_VBUSSetVoltage_Fixed>
 80152cc:	4603      	mov	r3, r0
                                               )? USBPD_OK : USBPD_ERROR);
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	d101      	bne.n	80152d6 <USBPD_PWR_IF_SetProfile+0x6e>
 80152d2:	2300      	movs	r3, #0
 80152d4:	e000      	b.n	80152d8 <USBPD_PWR_IF_SetProfile+0x70>
 80152d6:	2302      	movs	r3, #2

/* USER CODE END USBPD_PWR_IF_SetProfile */
}
 80152d8:	4618      	mov	r0, r3
 80152da:	3714      	adds	r7, #20
 80152dc:	46bd      	mov	sp, r7
 80152de:	bd90      	pop	{r4, r7, pc}
 80152e0:	20002810 	.word	0x20002810
 80152e4:	20000128 	.word	0x20000128

080152e8 <USBPD_PWR_IF_SupplyReady>:
  * @param  PortNum Port number
  * @param  Vsafe   Vsafe status based on @ref USBPD_VSAFE_StatusTypeDef
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SupplyReady(uint8_t PortNum, USBPD_VSAFE_StatusTypeDef Vsafe)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b084      	sub	sp, #16
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	4603      	mov	r3, r0
 80152f0:	460a      	mov	r2, r1
 80152f2:	71fb      	strb	r3, [r7, #7]
 80152f4:	4613      	mov	r3, r2
 80152f6:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_SupplyReady */
  USBPD_StatusTypeDef status = USBPD_ERROR;
 80152f8:	2302      	movs	r3, #2
 80152fa:	73fb      	strb	r3, [r7, #15]
  uint32_t _voltage;

  /* check for valid port */
  if (!USBPD_PORT_IsValid(PortNum))
 80152fc:	79fb      	ldrb	r3, [r7, #7]
 80152fe:	2b00      	cmp	r3, #0
 8015300:	d001      	beq.n	8015306 <USBPD_PWR_IF_SupplyReady+0x1e>
  {
    return USBPD_ERROR;
 8015302:	2302      	movs	r3, #2
 8015304:	e01c      	b.n	8015340 <USBPD_PWR_IF_SupplyReady+0x58>
  }

  BSP_USBPD_PWR_VBUSGetVoltage(PortNum, &_voltage);
 8015306:	79fb      	ldrb	r3, [r7, #7]
 8015308:	f107 0208 	add.w	r2, r7, #8
 801530c:	4611      	mov	r1, r2
 801530e:	4618      	mov	r0, r3
 8015310:	f7f3 fece 	bl	80090b0 <BSP_USBPD_PWR_VBUSGetVoltage>
  if (USBPD_VSAFE_0V == Vsafe)
 8015314:	79bb      	ldrb	r3, [r7, #6]
 8015316:	2b00      	cmp	r3, #0
 8015318:	d109      	bne.n	801532e <USBPD_PWR_IF_SupplyReady+0x46>
  {
    /* Vsafe0V */
    status = ((_voltage < USBPD_PWR_LOW_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801531a:	68bb      	ldr	r3, [r7, #8]
 801531c:	f240 22ed 	movw	r2, #749	@ 0x2ed
 8015320:	4293      	cmp	r3, r2
 8015322:	d801      	bhi.n	8015328 <USBPD_PWR_IF_SupplyReady+0x40>
 8015324:	2300      	movs	r3, #0
 8015326:	e000      	b.n	801532a <USBPD_PWR_IF_SupplyReady+0x42>
 8015328:	2302      	movs	r3, #2
 801532a:	73fb      	strb	r3, [r7, #15]
 801532c:	e007      	b.n	801533e <USBPD_PWR_IF_SupplyReady+0x56>
  }
  else
  {
    /* Vsafe5V */
    status = ((_voltage > USBPD_PWR_HIGH_VBUS_THRESHOLD) ? USBPD_OK : USBPD_ERROR);
 801532e:	68bb      	ldr	r3, [r7, #8]
 8015330:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015334:	d901      	bls.n	801533a <USBPD_PWR_IF_SupplyReady+0x52>
 8015336:	2300      	movs	r3, #0
 8015338:	e000      	b.n	801533c <USBPD_PWR_IF_SupplyReady+0x54>
 801533a:	2302      	movs	r3, #2
 801533c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801533e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_SupplyReady */
}
 8015340:	4618      	mov	r0, r3
 8015342:	3710      	adds	r7, #16
 8015344:	46bd      	mov	sp, r7
 8015346:	bd80      	pop	{r7, pc}

08015348 <USBPD_PWR_IF_VBUSEnable>:
  * @brief  Enables VBUS power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSEnable(uint8_t PortNum)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b086      	sub	sp, #24
 801534c:	af02      	add	r7, sp, #8
 801534e:	4603      	mov	r3, r0
 8015350:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSEnable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_ENABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 8015352:	79f8      	ldrb	r0, [r7, #7]
 8015354:	2301      	movs	r3, #1
 8015356:	9300      	str	r3, [sp, #0]
 8015358:	2300      	movs	r3, #0
 801535a:	2200      	movs	r2, #0
 801535c:	2101      	movs	r1, #1
 801535e:	f7fb fdab 	bl	8010eb8 <HW_IF_PWR_Enable>
 8015362:	4603      	mov	r3, r0
 8015364:	73fb      	strb	r3, [r7, #15]
  return _status;
 8015366:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_VBUSEnable */
}
 8015368:	4618      	mov	r0, r3
 801536a:	3710      	adds	r7, #16
 801536c:	46bd      	mov	sp, r7
 801536e:	bd80      	pop	{r7, pc}

08015370 <USBPD_PWR_IF_VBUSDisable>:
  * @brief  Disable VBUS/VCONN the power on a specified port
  * @param  PortNum Port number
  * @retval USBPD status
  */
USBPD_StatusTypeDef USBPD_PWR_IF_VBUSDisable(uint8_t PortNum)
{
 8015370:	b580      	push	{r7, lr}
 8015372:	b086      	sub	sp, #24
 8015374:	af02      	add	r7, sp, #8
 8015376:	4603      	mov	r3, r0
 8015378:	71fb      	strb	r3, [r7, #7]
/* USER CODE BEGIN USBPD_PWR_IF_VBUSDisable */
  USBPD_StatusTypeDef _status = (USBPD_StatusTypeDef)HW_IF_PWR_Enable(PortNum, USBPD_DISABLE, CCNONE, USBPD_FALSE, USBPD_PORTPOWERROLE_SRC);
 801537a:	79f8      	ldrb	r0, [r7, #7]
 801537c:	2301      	movs	r3, #1
 801537e:	9300      	str	r3, [sp, #0]
 8015380:	2300      	movs	r3, #0
 8015382:	2200      	movs	r2, #0
 8015384:	2100      	movs	r1, #0
 8015386:	f7fb fd97 	bl	8010eb8 <HW_IF_PWR_Enable>
 801538a:	4603      	mov	r3, r0
 801538c:	73fb      	strb	r3, [r7, #15]
  return _status;
 801538e:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_VBUSDisable */
}
 8015390:	4618      	mov	r0, r3
 8015392:	3710      	adds	r7, #16
 8015394:	46bd      	mov	sp, r7
 8015396:	bd80      	pop	{r7, pc}

08015398 <USBPD_PWR_IF_GetPortPDOs>:
  * @param  Ptr Pointer on address where PDO values should be written (u8 pointer)
  * @param  Size Pointer on nb of u32 written by PWR_IF (nb of PDOs)
  * @retval None
  */
void USBPD_PWR_IF_GetPortPDOs(uint8_t PortNum, USBPD_CORE_DataInfoType_TypeDef DataId, uint8_t *Ptr, uint32_t *Size)
{
 8015398:	b580      	push	{r7, lr}
 801539a:	b08a      	sub	sp, #40	@ 0x28
 801539c:	af00      	add	r7, sp, #0
 801539e:	60ba      	str	r2, [r7, #8]
 80153a0:	607b      	str	r3, [r7, #4]
 80153a2:	4603      	mov	r3, r0
 80153a4:	73fb      	strb	r3, [r7, #15]
 80153a6:	460b      	mov	r3, r1
 80153a8:	73bb      	strb	r3, [r7, #14]
    if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 80153aa:	7bbb      	ldrb	r3, [r7, #14]
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d10c      	bne.n	80153ca <USBPD_PWR_IF_GetPortPDOs+0x32>
    {
      *Size = USBPD_NbPDO[1];
 80153b0:	4b47      	ldr	r3, [pc, #284]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153b2:	785b      	ldrb	r3, [r3, #1]
 80153b4:	461a      	mov	r2, r3
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	601a      	str	r2, [r3, #0]
      memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * USBPD_NbPDO[1]);
 80153ba:	4b45      	ldr	r3, [pc, #276]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153bc:	785b      	ldrb	r3, [r3, #1]
 80153be:	009b      	lsls	r3, r3, #2
 80153c0:	461a      	mov	r2, r3
 80153c2:	4944      	ldr	r1, [pc, #272]	@ (80154d4 <USBPD_PWR_IF_GetPortPDOs+0x13c>)
 80153c4:	68b8      	ldr	r0, [r7, #8]
 80153c6:	f005 f968 	bl	801a69a <memcpy>
    }
/* USER CODE BEGIN USBPD_PWR_IF_GetPortPDOs */

  if (DataId == USBPD_CORE_DATATYPE_SRC_PDO)
 80153ca:	7bbb      	ldrb	r3, [r7, #14]
 80153cc:	2b00      	cmp	r3, #0
 80153ce:	d10d      	bne.n	80153ec <USBPD_PWR_IF_GetPortPDOs+0x54>
  {
#if defined (_GUI_INTERFACE)
    *Size = USBPD_NbPDO[1];
 80153d0:	4b3f      	ldr	r3, [pc, #252]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153d2:	785b      	ldrb	r3, [r3, #1]
 80153d4:	461a      	mov	r2, r3
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	601a      	str	r2, [r3, #0]
    memcpy(Ptr,PORT0_PDO_ListSRC, sizeof(uint32_t) * USBPD_NbPDO[1]);
 80153da:	4b3d      	ldr	r3, [pc, #244]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153dc:	785b      	ldrb	r3, [r3, #1]
 80153de:	009b      	lsls	r3, r3, #2
 80153e0:	461a      	mov	r2, r3
 80153e2:	493c      	ldr	r1, [pc, #240]	@ (80154d4 <USBPD_PWR_IF_GetPortPDOs+0x13c>)
 80153e4:	68b8      	ldr	r0, [r7, #8]
 80153e6:	f005 f958 	bl	801a69a <memcpy>
 80153ea:	e00c      	b.n	8015406 <USBPD_PWR_IF_GetPortPDOs+0x6e>
#endif /* _GUI_INTERFACE */
  }
  else
  {
#if defined (_GUI_INTERFACE)
    *Size = USBPD_NbPDO[0];
 80153ec:	4b38      	ldr	r3, [pc, #224]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153ee:	781b      	ldrb	r3, [r3, #0]
 80153f0:	461a      	mov	r2, r3
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	601a      	str	r2, [r3, #0]
    memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * USBPD_NbPDO[0]);
 80153f6:	4b36      	ldr	r3, [pc, #216]	@ (80154d0 <USBPD_PWR_IF_GetPortPDOs+0x138>)
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	009b      	lsls	r3, r3, #2
 80153fc:	461a      	mov	r2, r3
 80153fe:	4936      	ldr	r1, [pc, #216]	@ (80154d8 <USBPD_PWR_IF_GetPortPDOs+0x140>)
 8015400:	68b8      	ldr	r0, [r7, #8]
 8015402:	f005 f94a 	bl	801a69a <memcpy>
    *Size = PORT0_NB_SINKPDO;
    memcpy(Ptr,PORT0_PDO_ListSNK, sizeof(uint32_t) * PORT0_NB_SINKPDO);
#endif /* _GUI_INTERFACE */
  }

  uint32_t   nbpdo, index, nb_valid_pdo = 0;
 8015406:	2300      	movs	r3, #0
 8015408:	61fb      	str	r3, [r7, #28]
  uint32_t   *ptpdoarray = NULL;
 801540a:	2300      	movs	r3, #0
 801540c:	61bb      	str	r3, [r7, #24]
  USBPD_PDO_TypeDef pdo_first;
  USBPD_PDO_TypeDef pdo;

  /* Check if valid port */
  if (USBPD_PORT_IsValid(PortNum))
 801540e:	7bfb      	ldrb	r3, [r7, #15]
 8015410:	2b00      	cmp	r3, #0
 8015412:	d158      	bne.n	80154c6 <USBPD_PWR_IF_GetPortPDOs+0x12e>
  {
    /* According to type of PDO to be read, set pointer on values and nb of elements */
    switch (DataId)
 8015414:	7bbb      	ldrb	r3, [r7, #14]
 8015416:	2b00      	cmp	r3, #0
 8015418:	d11e      	bne.n	8015458 <USBPD_PWR_IF_GetPortPDOs+0xc0>
    {
      case USBPD_CORE_DATATYPE_SRC_PDO :
        nbpdo = *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO;
 801541a:	7bfb      	ldrb	r3, [r7, #15]
 801541c:	4a2f      	ldr	r2, [pc, #188]	@ (80154dc <USBPD_PWR_IF_GetPortPDOs+0x144>)
 801541e:	011b      	lsls	r3, r3, #4
 8015420:	4413      	add	r3, r2
 8015422:	3304      	adds	r3, #4
 8015424:	681b      	ldr	r3, [r3, #0]
 8015426:	781b      	ldrb	r3, [r3, #0]
 8015428:	627b      	str	r3, [r7, #36]	@ 0x24
        ptpdoarray = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO;
 801542a:	7bfb      	ldrb	r3, [r7, #15]
 801542c:	4a2b      	ldr	r2, [pc, #172]	@ (80154dc <USBPD_PWR_IF_GetPortPDOs+0x144>)
 801542e:	011b      	lsls	r3, r3, #4
 8015430:	4413      	add	r3, r2
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	61bb      	str	r3, [r7, #24]
        /* Save the 1st PDO */
        pdo_first.d32 = *ptpdoarray;
 8015436:	69bb      	ldr	r3, [r7, #24]
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	617b      	str	r3, [r7, #20]
        /* Reset unchunked bit if current revision is PD2.0*/
        if (USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 801543c:	7bfb      	ldrb	r3, [r7, #15]
 801543e:	4a28      	ldr	r2, [pc, #160]	@ (80154e0 <USBPD_PWR_IF_GetPortPDOs+0x148>)
 8015440:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015444:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015448:	b2db      	uxtb	r3, r3
 801544a:	2b01      	cmp	r3, #1
 801544c:	d107      	bne.n	801545e <USBPD_PWR_IF_GetPortPDOs+0xc6>
        {
          pdo_first.SRCFixedPDO.UnchunkedExtendedMessage  = USBPD_PDO_SRC_FIXED_UNCHUNK_NOT_SUPPORTED;
 801544e:	7dfb      	ldrb	r3, [r7, #23]
 8015450:	f36f 0300 	bfc	r3, #0, #1
 8015454:	75fb      	strb	r3, [r7, #23]
        }
        break;
 8015456:	e002      	b.n	801545e <USBPD_PWR_IF_GetPortPDOs+0xc6>

      default:
        nbpdo = 0;
 8015458:	2300      	movs	r3, #0
 801545a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 801545c:	e000      	b.n	8015460 <USBPD_PWR_IF_GetPortPDOs+0xc8>
        break;
 801545e:	bf00      	nop
    }
    /* Copy PDO data in output buffer */
    for (index = 0; index < nbpdo; index++)
 8015460:	2300      	movs	r3, #0
 8015462:	623b      	str	r3, [r7, #32]
 8015464:	e028      	b.n	80154b8 <USBPD_PWR_IF_GetPortPDOs+0x120>
    {
      pdo.d32 = *ptpdoarray;
 8015466:	69bb      	ldr	r3, [r7, #24]
 8015468:	681b      	ldr	r3, [r3, #0]
 801546a:	613b      	str	r3, [r7, #16]
      /* Copy only PDO (and not APDO in case of current revision is PD2.0) */
      if ((USBPD_SPECIFICATION_REV2 == DPM_Params[PortNum].PE_SpecRevision)
 801546c:	7bfb      	ldrb	r3, [r7, #15]
 801546e:	4a1c      	ldr	r2, [pc, #112]	@ (80154e0 <USBPD_PWR_IF_GetPortPDOs+0x148>)
 8015470:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8015474:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8015478:	b2db      	uxtb	r3, r3
 801547a:	2b01      	cmp	r3, #1
 801547c:	d105      	bne.n	801548a <USBPD_PWR_IF_GetPortPDOs+0xf2>
         && (pdo.GenericPDO.PowerObject == USBPD_CORE_PDO_TYPE_APDO))
 801547e:	7cfb      	ldrb	r3, [r7, #19]
 8015480:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8015484:	b2db      	uxtb	r3, r3
 8015486:	2bc0      	cmp	r3, #192	@ 0xc0
 8015488:	d010      	beq.n	80154ac <USBPD_PWR_IF_GetPortPDOs+0x114>
      {
      }
      else
      {
        /* Copy 1st PDO as potentially FRS or UNCHUNKED bits have been reset */
        if (0 == index)
 801548a:	6a3b      	ldr	r3, [r7, #32]
 801548c:	2b00      	cmp	r3, #0
 801548e:	d103      	bne.n	8015498 <USBPD_PWR_IF_GetPortPDOs+0x100>
        {
          (void)memcpy(Ptr, (uint8_t*)&pdo_first.d32, 4u);
 8015490:	697a      	ldr	r2, [r7, #20]
 8015492:	68bb      	ldr	r3, [r7, #8]
 8015494:	601a      	str	r2, [r3, #0]
 8015496:	e006      	b.n	80154a6 <USBPD_PWR_IF_GetPortPDOs+0x10e>
        }
        else
        {
          (void)memcpy((Ptr + (nb_valid_pdo * 4u)), (uint8_t*)ptpdoarray, 4u);
 8015498:	69fb      	ldr	r3, [r7, #28]
 801549a:	009b      	lsls	r3, r3, #2
 801549c:	68ba      	ldr	r2, [r7, #8]
 801549e:	4413      	add	r3, r2
 80154a0:	69ba      	ldr	r2, [r7, #24]
 80154a2:	6812      	ldr	r2, [r2, #0]
 80154a4:	601a      	str	r2, [r3, #0]
        }
        nb_valid_pdo++;
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	3301      	adds	r3, #1
 80154aa:	61fb      	str	r3, [r7, #28]
      }
      ptpdoarray++;
 80154ac:	69bb      	ldr	r3, [r7, #24]
 80154ae:	3304      	adds	r3, #4
 80154b0:	61bb      	str	r3, [r7, #24]
    for (index = 0; index < nbpdo; index++)
 80154b2:	6a3b      	ldr	r3, [r7, #32]
 80154b4:	3301      	adds	r3, #1
 80154b6:	623b      	str	r3, [r7, #32]
 80154b8:	6a3a      	ldr	r2, [r7, #32]
 80154ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80154bc:	429a      	cmp	r2, r3
 80154be:	d3d2      	bcc.n	8015466 <USBPD_PWR_IF_GetPortPDOs+0xce>
    }
    /* Set nb of read PDO (nb of u32 elements); */
    *Size = nb_valid_pdo;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	69fa      	ldr	r2, [r7, #28]
 80154c4:	601a      	str	r2, [r3, #0]
  }

/* USER CODE END USBPD_PWR_IF_GetPortPDOs */
}
 80154c6:	bf00      	nop
 80154c8:	3728      	adds	r7, #40	@ 0x28
 80154ca:	46bd      	mov	sp, r7
 80154cc:	bd80      	pop	{r7, pc}
 80154ce:	bf00      	nop
 80154d0:	20000124 	.word	0x20000124
 80154d4:	20000128 	.word	0x20000128
 80154d8:	20002888 	.word	0x20002888
 80154dc:	200028a4 	.word	0x200028a4
 80154e0:	20002800 	.word	0x20002800

080154e4 <USBPD_PWR_IF_SearchRequestedPDO>:
  * @retval Status of search
  *         USBPD_OK : Src PDO found for requested DO position (output Pdo parameter is set)
  *         USBPD_FAIL : Position is not compliant with current Src PDO for this port (no corresponding PDO value)
  */
USBPD_StatusTypeDef USBPD_PWR_IF_SearchRequestedPDO(uint8_t PortNum, uint32_t RdoPosition, uint32_t *Pdo)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b085      	sub	sp, #20
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	4603      	mov	r3, r0
 80154ec:	60b9      	str	r1, [r7, #8]
 80154ee:	607a      	str	r2, [r7, #4]
 80154f0:	73fb      	strb	r3, [r7, #15]
/* USER CODE BEGIN USBPD_PWR_IF_SearchRequestedPDO */
  if((RdoPosition == 0) || (RdoPosition > *PWR_Port_PDO_Storage[PortNum].SourcePDO.NumberOfPDO))
 80154f2:	68bb      	ldr	r3, [r7, #8]
 80154f4:	2b00      	cmp	r3, #0
 80154f6:	d00a      	beq.n	801550e <USBPD_PWR_IF_SearchRequestedPDO+0x2a>
 80154f8:	7bfb      	ldrb	r3, [r7, #15]
 80154fa:	4a10      	ldr	r2, [pc, #64]	@ (801553c <USBPD_PWR_IF_SearchRequestedPDO+0x58>)
 80154fc:	011b      	lsls	r3, r3, #4
 80154fe:	4413      	add	r3, r2
 8015500:	3304      	adds	r3, #4
 8015502:	681b      	ldr	r3, [r3, #0]
 8015504:	781b      	ldrb	r3, [r3, #0]
 8015506:	461a      	mov	r2, r3
 8015508:	68bb      	ldr	r3, [r7, #8]
 801550a:	4293      	cmp	r3, r2
 801550c:	d901      	bls.n	8015512 <USBPD_PWR_IF_SearchRequestedPDO+0x2e>
  {
    /* Invalid PDO index */
    return USBPD_FAIL;
 801550e:	2310      	movs	r3, #16
 8015510:	e00e      	b.n	8015530 <USBPD_PWR_IF_SearchRequestedPDO+0x4c>
  }
  *Pdo = PWR_Port_PDO_Storage[PortNum].SourcePDO.ListOfPDO[RdoPosition - 1];
 8015512:	7bfb      	ldrb	r3, [r7, #15]
 8015514:	4a09      	ldr	r2, [pc, #36]	@ (801553c <USBPD_PWR_IF_SearchRequestedPDO+0x58>)
 8015516:	011b      	lsls	r3, r3, #4
 8015518:	4413      	add	r3, r2
 801551a:	681a      	ldr	r2, [r3, #0]
 801551c:	68bb      	ldr	r3, [r7, #8]
 801551e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8015522:	3b01      	subs	r3, #1
 8015524:	009b      	lsls	r3, r3, #2
 8015526:	4413      	add	r3, r2
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	687b      	ldr	r3, [r7, #4]
 801552c:	601a      	str	r2, [r3, #0]
  return USBPD_OK;
 801552e:	2300      	movs	r3, #0

/* USER CODE END USBPD_PWR_IF_SearchRequestedPDO */
}
 8015530:	4618      	mov	r0, r3
 8015532:	3714      	adds	r7, #20
 8015534:	46bd      	mov	sp, r7
 8015536:	f85d 7b04 	ldr.w	r7, [sp], #4
 801553a:	4770      	bx	lr
 801553c:	200028a4 	.word	0x200028a4

08015540 <USBPD_PWR_IF_GetVBUSStatus>:
  * @param PortNum Port number
  * @param PowerTypeStatus  Power type status based on @ref USBPD_VBUSPOWER_STATUS
  * @retval UBBPD_TRUE or USBPD_FALSE
  */
uint8_t USBPD_PWR_IF_GetVBUSStatus(uint8_t PortNum, USBPD_VBUSPOWER_STATUS PowerTypeStatus)
{
 8015540:	b580      	push	{r7, lr}
 8015542:	b084      	sub	sp, #16
 8015544:	af00      	add	r7, sp, #0
 8015546:	4603      	mov	r3, r0
 8015548:	460a      	mov	r2, r1
 801554a:	71fb      	strb	r3, [r7, #7]
 801554c:	4613      	mov	r3, r2
 801554e:	71bb      	strb	r3, [r7, #6]
/* USER CODE BEGIN USBPD_PWR_IF_GetVBUSStatus */
  uint8_t _status = USBPD_FALSE;
 8015550:	2300      	movs	r3, #0
 8015552:	73fb      	strb	r3, [r7, #15]
  uint32_t _vbus = HW_IF_PWR_GetVoltage(PortNum);
 8015554:	79fb      	ldrb	r3, [r7, #7]
 8015556:	4618      	mov	r0, r3
 8015558:	f7fb fc8a 	bl	8010e70 <HW_IF_PWR_GetVoltage>
 801555c:	4603      	mov	r3, r0
 801555e:	60bb      	str	r3, [r7, #8]

  switch(PowerTypeStatus)
 8015560:	79bb      	ldrb	r3, [r7, #6]
 8015562:	2b02      	cmp	r3, #2
 8015564:	d015      	beq.n	8015592 <USBPD_PWR_IF_GetVBUSStatus+0x52>
 8015566:	2b02      	cmp	r3, #2
 8015568:	dc1a      	bgt.n	80155a0 <USBPD_PWR_IF_GetVBUSStatus+0x60>
 801556a:	2b00      	cmp	r3, #0
 801556c:	d002      	beq.n	8015574 <USBPD_PWR_IF_GetVBUSStatus+0x34>
 801556e:	2b01      	cmp	r3, #1
 8015570:	d008      	beq.n	8015584 <USBPD_PWR_IF_GetVBUSStatus+0x44>
    break;
  case USBPD_PWR_SNKDETACH:
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
    break;
  default :
    break;
 8015572:	e015      	b.n	80155a0 <USBPD_PWR_IF_GetVBUSStatus+0x60>
    if (_vbus < USBPD_PWR_LOW_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015574:	68bb      	ldr	r3, [r7, #8]
 8015576:	f240 22ed 	movw	r2, #749	@ 0x2ed
 801557a:	4293      	cmp	r3, r2
 801557c:	d812      	bhi.n	80155a4 <USBPD_PWR_IF_GetVBUSStatus+0x64>
 801557e:	2301      	movs	r3, #1
 8015580:	73fb      	strb	r3, [r7, #15]
    break;
 8015582:	e00f      	b.n	80155a4 <USBPD_PWR_IF_GetVBUSStatus+0x64>
    if (_vbus >= USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015584:	68bb      	ldr	r3, [r7, #8]
 8015586:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 801558a:	d30d      	bcc.n	80155a8 <USBPD_PWR_IF_GetVBUSStatus+0x68>
 801558c:	2301      	movs	r3, #1
 801558e:	73fb      	strb	r3, [r7, #15]
    break;
 8015590:	e00a      	b.n	80155a8 <USBPD_PWR_IF_GetVBUSStatus+0x68>
    if (_vbus < USBPD_PWR_HIGH_VBUS_THRESHOLD) _status = USBPD_TRUE;
 8015592:	68bb      	ldr	r3, [r7, #8]
 8015594:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8015598:	d208      	bcs.n	80155ac <USBPD_PWR_IF_GetVBUSStatus+0x6c>
 801559a:	2301      	movs	r3, #1
 801559c:	73fb      	strb	r3, [r7, #15]
    break;
 801559e:	e005      	b.n	80155ac <USBPD_PWR_IF_GetVBUSStatus+0x6c>
    break;
 80155a0:	bf00      	nop
 80155a2:	e004      	b.n	80155ae <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80155a4:	bf00      	nop
 80155a6:	e002      	b.n	80155ae <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80155a8:	bf00      	nop
 80155aa:	e000      	b.n	80155ae <USBPD_PWR_IF_GetVBUSStatus+0x6e>
    break;
 80155ac:	bf00      	nop
  }
  return _status;
 80155ae:	7bfb      	ldrb	r3, [r7, #15]
/* USER CODE END USBPD_PWR_IF_GetVBUSStatus */
}
 80155b0:	4618      	mov	r0, r3
 80155b2:	3710      	adds	r7, #16
 80155b4:	46bd      	mov	sp, r7
 80155b6:	bd80      	pop	{r7, pc}

080155b8 <BSP_GUI_LoadDataFromFlash>:
static GUI_StatusTypeDef        LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);
static GUI_StatusTypeDef        SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO);
static GUI_StatusTypeDef        SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size);

GUI_StatusTypeDef BSP_GUI_LoadDataFromFlash(void)
{
 80155b8:	b580      	push	{r7, lr}
 80155ba:	b086      	sub	sp, #24
 80155bc:	af02      	add	r7, sp, #8
  GUI_StatusTypeDef _status = GUI_ERROR;
 80155be:	2303      	movs	r3, #3
 80155c0:	73fb      	strb	r3, [r7, #15]
#if defined(GUI_FLASH_MAGIC_NUMBER)
  uint32_t _addr = GUI_FLASH_MAGIC_NUMBER;
 80155c2:	4b9d      	ldr	r3, [pc, #628]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80155c4:	881b      	ldrh	r3, [r3, #0]
 80155c6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80155ca:	4293      	cmp	r3, r2
 80155cc:	d007      	beq.n	80155de <BSP_GUI_LoadDataFromFlash+0x26>
 80155ce:	4b9a      	ldr	r3, [pc, #616]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80155d0:	681b      	ldr	r3, [r3, #0]
 80155d2:	029a      	lsls	r2, r3, #10
 80155d4:	4b99      	ldr	r3, [pc, #612]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80155d6:	4013      	ands	r3, r2
 80155d8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80155dc:	d011      	beq.n	8015602 <BSP_GUI_LoadDataFromFlash+0x4a>
 80155de:	4b96      	ldr	r3, [pc, #600]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80155e0:	881b      	ldrh	r3, [r3, #0]
 80155e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80155e6:	4293      	cmp	r3, r2
 80155e8:	d009      	beq.n	80155fe <BSP_GUI_LoadDataFromFlash+0x46>
 80155ea:	4b93      	ldr	r3, [pc, #588]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80155ec:	681b      	ldr	r3, [r3, #0]
 80155ee:	029a      	lsls	r2, r3, #10
 80155f0:	4b92      	ldr	r3, [pc, #584]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80155f2:	4013      	ands	r3, r2
 80155f4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80155f8:	d101      	bne.n	80155fe <BSP_GUI_LoadDataFromFlash+0x46>
 80155fa:	4b91      	ldr	r3, [pc, #580]	@ (8015840 <BSP_GUI_LoadDataFromFlash+0x288>)
 80155fc:	e002      	b.n	8015604 <BSP_GUI_LoadDataFromFlash+0x4c>
 80155fe:	4b91      	ldr	r3, [pc, #580]	@ (8015844 <BSP_GUI_LoadDataFromFlash+0x28c>)
 8015600:	e000      	b.n	8015604 <BSP_GUI_LoadDataFromFlash+0x4c>
 8015602:	4b91      	ldr	r3, [pc, #580]	@ (8015848 <BSP_GUI_LoadDataFromFlash+0x290>)
 8015604:	60bb      	str	r3, [r7, #8]
#else
  uint32_t _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
#endif /* GUI_FLASH_MAGIC_NUMBER */

  /* Check that we did not reach the end of page */
  if (GUI_FLASH_SIZE_RESERVED < 0)
 8015606:	4b8c      	ldr	r3, [pc, #560]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015608:	881b      	ldrh	r3, [r3, #0]
 801560a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801560e:	4293      	cmp	r3, r2
 8015610:	d007      	beq.n	8015622 <BSP_GUI_LoadDataFromFlash+0x6a>
 8015612:	4b89      	ldr	r3, [pc, #548]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	029a      	lsls	r2, r3, #10
 8015618:	4b88      	ldr	r3, [pc, #544]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 801561a:	4013      	ands	r3, r2
 801561c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015620:	d011      	beq.n	8015646 <BSP_GUI_LoadDataFromFlash+0x8e>
 8015622:	4b85      	ldr	r3, [pc, #532]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015624:	881b      	ldrh	r3, [r3, #0]
 8015626:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801562a:	4293      	cmp	r3, r2
 801562c:	d009      	beq.n	8015642 <BSP_GUI_LoadDataFromFlash+0x8a>
 801562e:	4b82      	ldr	r3, [pc, #520]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015630:	681b      	ldr	r3, [r3, #0]
 8015632:	029a      	lsls	r2, r3, #10
 8015634:	4b81      	ldr	r3, [pc, #516]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 8015636:	4013      	ands	r3, r2
 8015638:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801563c:	d101      	bne.n	8015642 <BSP_GUI_LoadDataFromFlash+0x8a>
 801563e:	4a83      	ldr	r2, [pc, #524]	@ (801584c <BSP_GUI_LoadDataFromFlash+0x294>)
 8015640:	e002      	b.n	8015648 <BSP_GUI_LoadDataFromFlash+0x90>
 8015642:	4a83      	ldr	r2, [pc, #524]	@ (8015850 <BSP_GUI_LoadDataFromFlash+0x298>)
 8015644:	e000      	b.n	8015648 <BSP_GUI_LoadDataFromFlash+0x90>
 8015646:	4a83      	ldr	r2, [pc, #524]	@ (8015854 <BSP_GUI_LoadDataFromFlash+0x29c>)
 8015648:	4b7b      	ldr	r3, [pc, #492]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 801564a:	881b      	ldrh	r3, [r3, #0]
 801564c:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8015650:	428b      	cmp	r3, r1
 8015652:	d007      	beq.n	8015664 <BSP_GUI_LoadDataFromFlash+0xac>
 8015654:	4b78      	ldr	r3, [pc, #480]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015656:	681b      	ldr	r3, [r3, #0]
 8015658:	0299      	lsls	r1, r3, #10
 801565a:	4b78      	ldr	r3, [pc, #480]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 801565c:	400b      	ands	r3, r1
 801565e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015662:	d011      	beq.n	8015688 <BSP_GUI_LoadDataFromFlash+0xd0>
 8015664:	4b74      	ldr	r3, [pc, #464]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015666:	881b      	ldrh	r3, [r3, #0]
 8015668:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 801566c:	428b      	cmp	r3, r1
 801566e:	d009      	beq.n	8015684 <BSP_GUI_LoadDataFromFlash+0xcc>
 8015670:	4b71      	ldr	r3, [pc, #452]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015672:	681b      	ldr	r3, [r3, #0]
 8015674:	0299      	lsls	r1, r3, #10
 8015676:	4b71      	ldr	r3, [pc, #452]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 8015678:	400b      	ands	r3, r1
 801567a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801567e:	d101      	bne.n	8015684 <BSP_GUI_LoadDataFromFlash+0xcc>
 8015680:	4b75      	ldr	r3, [pc, #468]	@ (8015858 <BSP_GUI_LoadDataFromFlash+0x2a0>)
 8015682:	e002      	b.n	801568a <BSP_GUI_LoadDataFromFlash+0xd2>
 8015684:	4b75      	ldr	r3, [pc, #468]	@ (801585c <BSP_GUI_LoadDataFromFlash+0x2a4>)
 8015686:	e000      	b.n	801568a <BSP_GUI_LoadDataFromFlash+0xd2>
 8015688:	4b75      	ldr	r3, [pc, #468]	@ (8015860 <BSP_GUI_LoadDataFromFlash+0x2a8>)
 801568a:	1ad3      	subs	r3, r2, r3
 801568c:	2b00      	cmp	r3, #0
 801568e:	f2c0 813e 	blt.w	801590e <BSP_GUI_LoadDataFromFlash+0x356>
  }

#if defined(GUI_FLASH_MAGIC_NUMBER)
  /* check that GUI area has not been corrupted */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  if ((0xFFFFFFFFu != *((uint32_t *)_addr)) && (MagicNumber != *((uint64_t *)_addr)))
 8015692:	68bb      	ldr	r3, [r7, #8]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	f1b3 3fff 	cmp.w	r3, #4294967295
 801569a:	d012      	beq.n	80156c2 <BSP_GUI_LoadDataFromFlash+0x10a>
 801569c:	68bb      	ldr	r3, [r7, #8]
 801569e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80156a2:	a163      	add	r1, pc, #396	@ (adr r1, 8015830 <BSP_GUI_LoadDataFromFlash+0x278>)
 80156a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80156a8:	428b      	cmp	r3, r1
 80156aa:	bf08      	it	eq
 80156ac:	4282      	cmpeq	r2, r0
 80156ae:	d008      	beq.n	80156c2 <BSP_GUI_LoadDataFromFlash+0x10a>
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
  {
    /* Memory has been corrupted */
    USBPD_TRACE_Add(USBPD_TRACE_DEBUG, 0U, 0U, (uint8_t *)"GUI Memory is corrupted", sizeof("GUI Memory is corrupted"));
 80156b0:	2318      	movs	r3, #24
 80156b2:	9300      	str	r3, [sp, #0]
 80156b4:	4b6b      	ldr	r3, [pc, #428]	@ (8015864 <BSP_GUI_LoadDataFromFlash+0x2ac>)
 80156b6:	2200      	movs	r2, #0
 80156b8:	2100      	movs	r1, #0
 80156ba:	2006      	movs	r0, #6
 80156bc:	f7f8 ffa4 	bl	800e608 <USBPD_TRACE_Add>
    goto _exit;
 80156c0:	e128      	b.n	8015914 <BSP_GUI_LoadDataFromFlash+0x35c>
  }
  if (0xFFFFFFFFu == *((uint32_t *)_addr))
 80156c2:	68bb      	ldr	r3, [r7, #8]
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80156ca:	f000 8122 	beq.w	8015912 <BSP_GUI_LoadDataFromFlash+0x35a>
  {
    /* Memory is empty no need to retrieve data from GUI area */
    goto _exit;
  }
  _addr = GUI_FLASH_ADDR_NB_PDO_SNK_P0;
 80156ce:	4b5a      	ldr	r3, [pc, #360]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80156d0:	881b      	ldrh	r3, [r3, #0]
 80156d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d007      	beq.n	80156ea <BSP_GUI_LoadDataFromFlash+0x132>
 80156da:	4b57      	ldr	r3, [pc, #348]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	029a      	lsls	r2, r3, #10
 80156e0:	4b56      	ldr	r3, [pc, #344]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80156e2:	4013      	ands	r3, r2
 80156e4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80156e8:	d011      	beq.n	801570e <BSP_GUI_LoadDataFromFlash+0x156>
 80156ea:	4b53      	ldr	r3, [pc, #332]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80156ec:	881b      	ldrh	r3, [r3, #0]
 80156ee:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80156f2:	4293      	cmp	r3, r2
 80156f4:	d009      	beq.n	801570a <BSP_GUI_LoadDataFromFlash+0x152>
 80156f6:	4b50      	ldr	r3, [pc, #320]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80156f8:	681b      	ldr	r3, [r3, #0]
 80156fa:	029a      	lsls	r2, r3, #10
 80156fc:	4b4f      	ldr	r3, [pc, #316]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80156fe:	4013      	ands	r3, r2
 8015700:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015704:	d101      	bne.n	801570a <BSP_GUI_LoadDataFromFlash+0x152>
 8015706:	4b58      	ldr	r3, [pc, #352]	@ (8015868 <BSP_GUI_LoadDataFromFlash+0x2b0>)
 8015708:	e002      	b.n	8015710 <BSP_GUI_LoadDataFromFlash+0x158>
 801570a:	4b58      	ldr	r3, [pc, #352]	@ (801586c <BSP_GUI_LoadDataFromFlash+0x2b4>)
 801570c:	e000      	b.n	8015710 <BSP_GUI_LoadDataFromFlash+0x158>
 801570e:	4b58      	ldr	r3, [pc, #352]	@ (8015870 <BSP_GUI_LoadDataFromFlash+0x2b8>)
 8015710:	60bb      	str	r3, [r7, #8]
#endif /* GUI_FLASH_MAGIC_NUMBER */

  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t *_ptr = (uint32_t *)USBPD_NbPDO;
 8015712:	4b58      	ldr	r3, [pc, #352]	@ (8015874 <BSP_GUI_LoadDataFromFlash+0x2bc>)
 8015714:	607b      	str	r3, [r7, #4]
    USPBPD_WRITE32(_ptr, *((uint32_t *)_addr));
 8015716:	2300      	movs	r3, #0
 8015718:	73bb      	strb	r3, [r7, #14]
 801571a:	e00d      	b.n	8015738 <BSP_GUI_LoadDataFromFlash+0x180>
 801571c:	68bb      	ldr	r3, [r7, #8]
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	7bbb      	ldrb	r3, [r7, #14]
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	fa22 f103 	lsr.w	r1, r2, r3
 8015728:	7bbb      	ldrb	r3, [r7, #14]
 801572a:	687a      	ldr	r2, [r7, #4]
 801572c:	4413      	add	r3, r2
 801572e:	b2ca      	uxtb	r2, r1
 8015730:	701a      	strb	r2, [r3, #0]
 8015732:	7bbb      	ldrb	r3, [r7, #14]
 8015734:	3301      	adds	r3, #1
 8015736:	73bb      	strb	r3, [r7, #14]
 8015738:	7bbb      	ldrb	r3, [r7, #14]
 801573a:	2b03      	cmp	r3, #3
 801573c:	d9ee      	bls.n	801571c <BSP_GUI_LoadDataFromFlash+0x164>
    _status = GUI_OK;
 801573e:	2300      	movs	r3, #0
 8015740:	73fb      	strb	r3, [r7, #15]
  }

#if defined(_SRC) || defined(_DRP)
  /* Load PORT0_PDO_ListSRC */
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 8015742:	4b3d      	ldr	r3, [pc, #244]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015744:	881b      	ldrh	r3, [r3, #0]
 8015746:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801574a:	4293      	cmp	r3, r2
 801574c:	d007      	beq.n	801575e <BSP_GUI_LoadDataFromFlash+0x1a6>
 801574e:	4b3a      	ldr	r3, [pc, #232]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015750:	681b      	ldr	r3, [r3, #0]
 8015752:	029a      	lsls	r2, r3, #10
 8015754:	4b39      	ldr	r3, [pc, #228]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 8015756:	4013      	ands	r3, r2
 8015758:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801575c:	d011      	beq.n	8015782 <BSP_GUI_LoadDataFromFlash+0x1ca>
 801575e:	4b36      	ldr	r3, [pc, #216]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015760:	881b      	ldrh	r3, [r3, #0]
 8015762:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015766:	4293      	cmp	r3, r2
 8015768:	d009      	beq.n	801577e <BSP_GUI_LoadDataFromFlash+0x1c6>
 801576a:	4b33      	ldr	r3, [pc, #204]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	029a      	lsls	r2, r3, #10
 8015770:	4b32      	ldr	r3, [pc, #200]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 8015772:	4013      	ands	r3, r2
 8015774:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015778:	d101      	bne.n	801577e <BSP_GUI_LoadDataFromFlash+0x1c6>
 801577a:	4b3f      	ldr	r3, [pc, #252]	@ (8015878 <BSP_GUI_LoadDataFromFlash+0x2c0>)
 801577c:	e002      	b.n	8015784 <BSP_GUI_LoadDataFromFlash+0x1cc>
 801577e:	4b3f      	ldr	r3, [pc, #252]	@ (801587c <BSP_GUI_LoadDataFromFlash+0x2c4>)
 8015780:	e000      	b.n	8015784 <BSP_GUI_LoadDataFromFlash+0x1cc>
 8015782:	4b3f      	ldr	r3, [pc, #252]	@ (8015880 <BSP_GUI_LoadDataFromFlash+0x2c8>)
 8015784:	493f      	ldr	r1, [pc, #252]	@ (8015884 <BSP_GUI_LoadDataFromFlash+0x2cc>)
 8015786:	4618      	mov	r0, r3
 8015788:	f000 fb93 	bl	8015eb2 <LoadPDOFromFlash>
 801578c:	4603      	mov	r3, r0
 801578e:	461a      	mov	r2, r3
 8015790:	7bfb      	ldrb	r3, [r7, #15]
 8015792:	4313      	orrs	r3, r2
 8015794:	73fb      	strb	r3, [r7, #15]
  _status |= LoadPDOFromFlash(GUI_FLASH_ADDR_PDO_SNK_P1, PORT1_PDO_ListSNK);
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_SETTINGS, (uint32_t *)DPM_Settings,
 8015796:	4b28      	ldr	r3, [pc, #160]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015798:	881b      	ldrh	r3, [r3, #0]
 801579a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801579e:	4293      	cmp	r3, r2
 80157a0:	d007      	beq.n	80157b2 <BSP_GUI_LoadDataFromFlash+0x1fa>
 80157a2:	4b25      	ldr	r3, [pc, #148]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80157a4:	681b      	ldr	r3, [r3, #0]
 80157a6:	029a      	lsls	r2, r3, #10
 80157a8:	4b24      	ldr	r3, [pc, #144]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80157aa:	4013      	ands	r3, r2
 80157ac:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80157b0:	d011      	beq.n	80157d6 <BSP_GUI_LoadDataFromFlash+0x21e>
 80157b2:	4b21      	ldr	r3, [pc, #132]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80157b4:	881b      	ldrh	r3, [r3, #0]
 80157b6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d009      	beq.n	80157d2 <BSP_GUI_LoadDataFromFlash+0x21a>
 80157be:	4b1e      	ldr	r3, [pc, #120]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80157c0:	681b      	ldr	r3, [r3, #0]
 80157c2:	029a      	lsls	r2, r3, #10
 80157c4:	4b1d      	ldr	r3, [pc, #116]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 80157c6:	4013      	ands	r3, r2
 80157c8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80157cc:	d101      	bne.n	80157d2 <BSP_GUI_LoadDataFromFlash+0x21a>
 80157ce:	4b2e      	ldr	r3, [pc, #184]	@ (8015888 <BSP_GUI_LoadDataFromFlash+0x2d0>)
 80157d0:	e002      	b.n	80157d8 <BSP_GUI_LoadDataFromFlash+0x220>
 80157d2:	4b2e      	ldr	r3, [pc, #184]	@ (801588c <BSP_GUI_LoadDataFromFlash+0x2d4>)
 80157d4:	e000      	b.n	80157d8 <BSP_GUI_LoadDataFromFlash+0x220>
 80157d6:	4b2e      	ldr	r3, [pc, #184]	@ (8015890 <BSP_GUI_LoadDataFromFlash+0x2d8>)
 80157d8:	220c      	movs	r2, #12
 80157da:	492e      	ldr	r1, [pc, #184]	@ (8015894 <BSP_GUI_LoadDataFromFlash+0x2dc>)
 80157dc:	4618      	mov	r0, r3
 80157de:	f000 fb8d 	bl	8015efc <LoadSettingsFromFlash>
 80157e2:	4603      	mov	r3, r0
 80157e4:	461a      	mov	r2, r3
 80157e6:	7bfb      	ldrb	r3, [r7, #15]
 80157e8:	4313      	orrs	r3, r2
 80157ea:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
  /* Load DPM_ID_Settings */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS, (uint32_t *)DPM_ID_Settings,
 80157ec:	4b12      	ldr	r3, [pc, #72]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80157ee:	881b      	ldrh	r3, [r3, #0]
 80157f0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80157f4:	4293      	cmp	r3, r2
 80157f6:	d007      	beq.n	8015808 <BSP_GUI_LoadDataFromFlash+0x250>
 80157f8:	4b0f      	ldr	r3, [pc, #60]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	029a      	lsls	r2, r3, #10
 80157fe:	4b0f      	ldr	r3, [pc, #60]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 8015800:	4013      	ands	r3, r2
 8015802:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015806:	d04b      	beq.n	80158a0 <BSP_GUI_LoadDataFromFlash+0x2e8>
 8015808:	4b0b      	ldr	r3, [pc, #44]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 801580a:	881b      	ldrh	r3, [r3, #0]
 801580c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015810:	4293      	cmp	r3, r2
 8015812:	d009      	beq.n	8015828 <BSP_GUI_LoadDataFromFlash+0x270>
 8015814:	4b08      	ldr	r3, [pc, #32]	@ (8015838 <BSP_GUI_LoadDataFromFlash+0x280>)
 8015816:	681b      	ldr	r3, [r3, #0]
 8015818:	029a      	lsls	r2, r3, #10
 801581a:	4b08      	ldr	r3, [pc, #32]	@ (801583c <BSP_GUI_LoadDataFromFlash+0x284>)
 801581c:	4013      	ands	r3, r2
 801581e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015822:	d101      	bne.n	8015828 <BSP_GUI_LoadDataFromFlash+0x270>
 8015824:	4b1c      	ldr	r3, [pc, #112]	@ (8015898 <BSP_GUI_LoadDataFromFlash+0x2e0>)
 8015826:	e03c      	b.n	80158a2 <BSP_GUI_LoadDataFromFlash+0x2ea>
 8015828:	4b1c      	ldr	r3, [pc, #112]	@ (801589c <BSP_GUI_LoadDataFromFlash+0x2e4>)
 801582a:	e03a      	b.n	80158a2 <BSP_GUI_LoadDataFromFlash+0x2ea>
 801582c:	f3af 8000 	nop.w
 8015830:	deadf00d 	.word	0xdeadf00d
 8015834:	deadbabe 	.word	0xdeadbabe
 8015838:	1fff75e0 	.word	0x1fff75e0
 801583c:	03fffc00 	.word	0x03fffc00
 8015840:	0803f800 	.word	0x0803f800
 8015844:	0801f800 	.word	0x0801f800
 8015848:	0807f800 	.word	0x0807f800
 801584c:	0803ffff 	.word	0x0803ffff
 8015850:	0801ffff 	.word	0x0801ffff
 8015854:	0807ffff 	.word	0x0807ffff
 8015858:	0803f920 	.word	0x0803f920
 801585c:	0801f920 	.word	0x0801f920
 8015860:	0807f920 	.word	0x0807f920
 8015864:	0801b7c0 	.word	0x0801b7c0
 8015868:	0803f808 	.word	0x0803f808
 801586c:	0801f808 	.word	0x0801f808
 8015870:	0807f808 	.word	0x0807f808
 8015874:	20000124 	.word	0x20000124
 8015878:	0803f810 	.word	0x0803f810
 801587c:	0801f810 	.word	0x0801f810
 8015880:	0807f810 	.word	0x0807f810
 8015884:	20000128 	.word	0x20000128
 8015888:	0803f890 	.word	0x0803f890
 801588c:	0801f890 	.word	0x0801f890
 8015890:	0807f890 	.word	0x0807f890
 8015894:	200000a0 	.word	0x200000a0
 8015898:	0803f918 	.word	0x0803f918
 801589c:	0801f918 	.word	0x0801f918
 80158a0:	4b1f      	ldr	r3, [pc, #124]	@ (8015920 <BSP_GUI_LoadDataFromFlash+0x368>)
 80158a2:	2208      	movs	r2, #8
 80158a4:	491f      	ldr	r1, [pc, #124]	@ (8015924 <BSP_GUI_LoadDataFromFlash+0x36c>)
 80158a6:	4618      	mov	r0, r3
 80158a8:	f000 fb28 	bl	8015efc <LoadSettingsFromFlash>
 80158ac:	4603      	mov	r3, r0
 80158ae:	461a      	mov	r2, r3
 80158b0:	7bfb      	ldrb	r3, [r7, #15]
 80158b2:	4313      	orrs	r3, r2
 80158b4:	73fb      	strb	r3, [r7, #15]
                                   sizeof(USBPD_IdSettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

  /* Load DPM_Settings of port 0 */
  _status |= LoadSettingsFromFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS, (uint32_t *)DPM_USER_Settings,
 80158b6:	4b1c      	ldr	r3, [pc, #112]	@ (8015928 <BSP_GUI_LoadDataFromFlash+0x370>)
 80158b8:	881b      	ldrh	r3, [r3, #0]
 80158ba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158be:	4293      	cmp	r3, r2
 80158c0:	d007      	beq.n	80158d2 <BSP_GUI_LoadDataFromFlash+0x31a>
 80158c2:	4b19      	ldr	r3, [pc, #100]	@ (8015928 <BSP_GUI_LoadDataFromFlash+0x370>)
 80158c4:	681b      	ldr	r3, [r3, #0]
 80158c6:	029a      	lsls	r2, r3, #10
 80158c8:	4b18      	ldr	r3, [pc, #96]	@ (801592c <BSP_GUI_LoadDataFromFlash+0x374>)
 80158ca:	4013      	ands	r3, r2
 80158cc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80158d0:	d011      	beq.n	80158f6 <BSP_GUI_LoadDataFromFlash+0x33e>
 80158d2:	4b15      	ldr	r3, [pc, #84]	@ (8015928 <BSP_GUI_LoadDataFromFlash+0x370>)
 80158d4:	881b      	ldrh	r3, [r3, #0]
 80158d6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80158da:	4293      	cmp	r3, r2
 80158dc:	d009      	beq.n	80158f2 <BSP_GUI_LoadDataFromFlash+0x33a>
 80158de:	4b12      	ldr	r3, [pc, #72]	@ (8015928 <BSP_GUI_LoadDataFromFlash+0x370>)
 80158e0:	681b      	ldr	r3, [r3, #0]
 80158e2:	029a      	lsls	r2, r3, #10
 80158e4:	4b11      	ldr	r3, [pc, #68]	@ (801592c <BSP_GUI_LoadDataFromFlash+0x374>)
 80158e6:	4013      	ands	r3, r2
 80158e8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80158ec:	d101      	bne.n	80158f2 <BSP_GUI_LoadDataFromFlash+0x33a>
 80158ee:	4b10      	ldr	r3, [pc, #64]	@ (8015930 <BSP_GUI_LoadDataFromFlash+0x378>)
 80158f0:	e002      	b.n	80158f8 <BSP_GUI_LoadDataFromFlash+0x340>
 80158f2:	4b10      	ldr	r3, [pc, #64]	@ (8015934 <BSP_GUI_LoadDataFromFlash+0x37c>)
 80158f4:	e000      	b.n	80158f8 <BSP_GUI_LoadDataFromFlash+0x340>
 80158f6:	4b10      	ldr	r3, [pc, #64]	@ (8015938 <BSP_GUI_LoadDataFromFlash+0x380>)
 80158f8:	2270      	movs	r2, #112	@ 0x70
 80158fa:	4910      	ldr	r1, [pc, #64]	@ (801593c <BSP_GUI_LoadDataFromFlash+0x384>)
 80158fc:	4618      	mov	r0, r3
 80158fe:	f000 fafd 	bl	8015efc <LoadSettingsFromFlash>
 8015902:	4603      	mov	r3, r0
 8015904:	461a      	mov	r2, r3
 8015906:	7bfb      	ldrb	r3, [r7, #15]
 8015908:	4313      	orrs	r3, r2
 801590a:	73fb      	strb	r3, [r7, #15]
 801590c:	e002      	b.n	8015914 <BSP_GUI_LoadDataFromFlash+0x35c>
    goto _exit;
 801590e:	bf00      	nop
 8015910:	e000      	b.n	8015914 <BSP_GUI_LoadDataFromFlash+0x35c>
    goto _exit;
 8015912:	bf00      	nop
#endif /* USBPD_PORT_COUNT==2 */
#endif /* _VDM */
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

_exit:
  return _status;
 8015914:	7bfb      	ldrb	r3, [r7, #15]
}
 8015916:	4618      	mov	r0, r3
 8015918:	3710      	adds	r7, #16
 801591a:	46bd      	mov	sp, r7
 801591c:	bd80      	pop	{r7, pc}
 801591e:	bf00      	nop
 8015920:	0807f918 	.word	0x0807f918
 8015924:	200000ac 	.word	0x200000ac
 8015928:	1fff75e0 	.word	0x1fff75e0
 801592c:	03fffc00 	.word	0x03fffc00
 8015930:	0803f89c 	.word	0x0803f89c
 8015934:	0801f89c 	.word	0x0801f89c
 8015938:	0807f89c 	.word	0x0807f89c
 801593c:	200000b4 	.word	0x200000b4

08015940 <BSP_GUI_SaveDataInFlash>:

GUI_StatusTypeDef BSP_GUI_SaveDataInFlash(void)
{
 8015940:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015944:	b094      	sub	sp, #80	@ 0x50
 8015946:	af00      	add	r7, sp, #0
  GUI_StatusTypeDef status = GUI_OK;
 8015948:	2300      	movs	r3, #0
 801594a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  __ASM volatile ("cpsid i" : : : "memory");
 801594e:	b672      	cpsid	i
}
 8015950:	bf00      	nop

  /* Disable interrupts */
  __disable_irq();

  /* Init Flash registers for writing */
  (void)HAL_FLASH_Unlock();
 8015952:	f7f4 fa9f 	bl	8009e94 <HAL_FLASH_Unlock>

  /* Erase the page associated to the GUI parameters */
  erase_init.TypeErase  = FLASH_TYPEERASE_PAGES;
 8015956:	2300      	movs	r3, #0
 8015958:	633b      	str	r3, [r7, #48]	@ 0x30

#if defined(STM32F072xB)|| defined(STM32F051x8)
  erase_init.PageAddress  = ADDR_FLASH_LAST_PAGE;
#else
  erase_init.Page       = INDEX_PAGE;
 801595a:	4ba3      	ldr	r3, [pc, #652]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 801595c:	881a      	ldrh	r2, [r3, #0]
 801595e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015962:	429a      	cmp	r2, r3
 8015964:	d007      	beq.n	8015976 <BSP_GUI_SaveDataInFlash+0x36>
 8015966:	4ba0      	ldr	r3, [pc, #640]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015968:	681b      	ldr	r3, [r3, #0]
 801596a:	029a      	lsls	r2, r3, #10
 801596c:	4b9f      	ldr	r3, [pc, #636]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 801596e:	4013      	ands	r3, r2
 8015970:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015974:	d011      	beq.n	801599a <BSP_GUI_SaveDataInFlash+0x5a>
 8015976:	4b9c      	ldr	r3, [pc, #624]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015978:	881a      	ldrh	r2, [r3, #0]
 801597a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801597e:	429a      	cmp	r2, r3
 8015980:	d009      	beq.n	8015996 <BSP_GUI_SaveDataInFlash+0x56>
 8015982:	4b99      	ldr	r3, [pc, #612]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	029a      	lsls	r2, r3, #10
 8015988:	4b98      	ldr	r3, [pc, #608]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 801598a:	4013      	ands	r3, r2
 801598c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015990:	d101      	bne.n	8015996 <BSP_GUI_SaveDataInFlash+0x56>
 8015992:	237f      	movs	r3, #127	@ 0x7f
 8015994:	e002      	b.n	801599c <BSP_GUI_SaveDataInFlash+0x5c>
 8015996:	233f      	movs	r3, #63	@ 0x3f
 8015998:	e000      	b.n	801599c <BSP_GUI_SaveDataInFlash+0x5c>
 801599a:	23ff      	movs	r3, #255	@ 0xff
 801599c:	63bb      	str	r3, [r7, #56]	@ 0x38
#if defined (FLASH_OPTR_DBANK)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_2)
  erase_init.Banks      = FLASH_BANK_2;
#elif defined(FLASH_BANK_1)
  erase_init.Banks      = FLASH_BANK_1;
 801599e:	2301      	movs	r3, #1
 80159a0:	637b      	str	r3, [r7, #52]	@ 0x34
#endif /* FLASH_OPTR_DBANK */
  erase_init.NbPages    = 1;
 80159a2:	2301      	movs	r3, #1
 80159a4:	63fb      	str	r3, [r7, #60]	@ 0x3c

#if defined(FLASH_SR_OPTVERR)
  /* Specific handling of STM32G0 and STM32G4 flash devices for allowing erase operations */
  if (FLASH->SR != 0x00)
 80159a6:	4b92      	ldr	r3, [pc, #584]	@ (8015bf0 <BSP_GUI_SaveDataInFlash+0x2b0>)
 80159a8:	691b      	ldr	r3, [r3, #16]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d003      	beq.n	80159b6 <BSP_GUI_SaveDataInFlash+0x76>
  {
    FLASH->SR = FLASH_SR_OPTVERR;
 80159ae:	4a90      	ldr	r2, [pc, #576]	@ (8015bf0 <BSP_GUI_SaveDataInFlash+0x2b0>)
 80159b0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80159b4:	6113      	str	r3, [r2, #16]
  }
#endif /* FLASH_SR_OPTVERR */

  if (HAL_OK != HAL_FLASHEx_Erase(&erase_init, &page_error))
 80159b6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80159ba:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80159be:	4611      	mov	r1, r2
 80159c0:	4618      	mov	r0, r3
 80159c2:	f7f4 fb51 	bl	800a068 <HAL_FLASHEx_Erase>
 80159c6:	4603      	mov	r3, r0
 80159c8:	2b00      	cmp	r3, #0
 80159ca:	d002      	beq.n	80159d2 <BSP_GUI_SaveDataInFlash+0x92>
  {
    status = GUI_ERASE_ERROR;
 80159cc:	2301      	movs	r3, #1
 80159ce:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  /* If Erase is OK, program the new data */
  if ((0xFFFFFFFFU == page_error) && (GUI_OK == status))
 80159d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80159d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80159d8:	f040 8189 	bne.w	8015cee <BSP_GUI_SaveDataInFlash+0x3ae>
 80159dc:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 80159e0:	2b00      	cmp	r3, #0
 80159e2:	f040 8184 	bne.w	8015cee <BSP_GUI_SaveDataInFlash+0x3ae>
  {
#if defined(GUI_FLASH_MAGIC_NUMBER)
    /* Save magic Number */
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_MAGIC_NUMBER, MagicNumber))
 80159e6:	4b80      	ldr	r3, [pc, #512]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 80159e8:	881a      	ldrh	r2, [r3, #0]
 80159ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80159ee:	429a      	cmp	r2, r3
 80159f0:	d007      	beq.n	8015a02 <BSP_GUI_SaveDataInFlash+0xc2>
 80159f2:	4b7d      	ldr	r3, [pc, #500]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 80159f4:	681b      	ldr	r3, [r3, #0]
 80159f6:	029a      	lsls	r2, r3, #10
 80159f8:	4b7c      	ldr	r3, [pc, #496]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 80159fa:	4013      	ands	r3, r2
 80159fc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015a00:	d011      	beq.n	8015a26 <BSP_GUI_SaveDataInFlash+0xe6>
 8015a02:	4b79      	ldr	r3, [pc, #484]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015a04:	881a      	ldrh	r2, [r3, #0]
 8015a06:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8015a0a:	429a      	cmp	r2, r3
 8015a0c:	d009      	beq.n	8015a22 <BSP_GUI_SaveDataInFlash+0xe2>
 8015a0e:	4b76      	ldr	r3, [pc, #472]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	029a      	lsls	r2, r3, #10
 8015a14:	4b75      	ldr	r3, [pc, #468]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015a16:	4013      	ands	r3, r2
 8015a18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015a1c:	d101      	bne.n	8015a22 <BSP_GUI_SaveDataInFlash+0xe2>
 8015a1e:	4975      	ldr	r1, [pc, #468]	@ (8015bf4 <BSP_GUI_SaveDataInFlash+0x2b4>)
 8015a20:	e002      	b.n	8015a28 <BSP_GUI_SaveDataInFlash+0xe8>
 8015a22:	4975      	ldr	r1, [pc, #468]	@ (8015bf8 <BSP_GUI_SaveDataInFlash+0x2b8>)
 8015a24:	e000      	b.n	8015a28 <BSP_GUI_SaveDataInFlash+0xe8>
 8015a26:	4975      	ldr	r1, [pc, #468]	@ (8015bfc <BSP_GUI_SaveDataInFlash+0x2bc>)
 8015a28:	a36d      	add	r3, pc, #436	@ (adr r3, 8015be0 <BSP_GUI_SaveDataInFlash+0x2a0>)
 8015a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015a2e:	2000      	movs	r0, #0
 8015a30:	f7f4 f9c4 	bl	8009dbc <HAL_FLASH_Program>
 8015a34:	4603      	mov	r3, r0
 8015a36:	2b00      	cmp	r3, #0
 8015a38:	d002      	beq.n	8015a40 <BSP_GUI_SaveDataInFlash+0x100>
    {
      status = GUI_WRITE_ERROR;
 8015a3a:	2302      	movs	r3, #2
 8015a3c:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
#endif /* GUI_FLASH_MAGIC_NUMBER */

#ifdef GUI_FLASH_ADDR_NB_PDO_SNK_P0
    if (GUI_OK == status)
 8015a40:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015a44:	2b00      	cmp	r3, #0
 8015a46:	d17a      	bne.n	8015b3e <BSP_GUI_SaveDataInFlash+0x1fe>
    {
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
      /* Save the nb of sink and src PDO */
      uint64_t value = 0;
 8015a48:	f04f 0200 	mov.w	r2, #0
 8015a4c:	f04f 0300 	mov.w	r3, #0
 8015a50:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
      value |= USBPD_NbPDO[0];
 8015a54:	4b6a      	ldr	r3, [pc, #424]	@ (8015c00 <BSP_GUI_SaveDataInFlash+0x2c0>)
 8015a56:	781b      	ldrb	r3, [r3, #0]
 8015a58:	b2db      	uxtb	r3, r3
 8015a5a:	2200      	movs	r2, #0
 8015a5c:	461c      	mov	r4, r3
 8015a5e:	4615      	mov	r5, r2
 8015a60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015a64:	ea42 0104 	orr.w	r1, r2, r4
 8015a68:	61b9      	str	r1, [r7, #24]
 8015a6a:	432b      	orrs	r3, r5
 8015a6c:	61fb      	str	r3, [r7, #28]
 8015a6e:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8015a72:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
      value |= (USBPD_NbPDO[1] << 8);
 8015a76:	4b62      	ldr	r3, [pc, #392]	@ (8015c00 <BSP_GUI_SaveDataInFlash+0x2c0>)
 8015a78:	785b      	ldrb	r3, [r3, #1]
 8015a7a:	021b      	lsls	r3, r3, #8
 8015a7c:	17da      	asrs	r2, r3, #31
 8015a7e:	623b      	str	r3, [r7, #32]
 8015a80:	627a      	str	r2, [r7, #36]	@ 0x24
 8015a82:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015a86:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8015a8a:	4621      	mov	r1, r4
 8015a8c:	4311      	orrs	r1, r2
 8015a8e:	6139      	str	r1, [r7, #16]
 8015a90:	4629      	mov	r1, r5
 8015a92:	4319      	orrs	r1, r3
 8015a94:	6179      	str	r1, [r7, #20]
 8015a96:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8015a9a:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
      value |= (USBPD_NbPDO[2] << 16);
 8015a9e:	4b58      	ldr	r3, [pc, #352]	@ (8015c00 <BSP_GUI_SaveDataInFlash+0x2c0>)
 8015aa0:	789b      	ldrb	r3, [r3, #2]
 8015aa2:	041b      	lsls	r3, r3, #16
 8015aa4:	17da      	asrs	r2, r3, #31
 8015aa6:	469a      	mov	sl, r3
 8015aa8:	4693      	mov	fp, r2
 8015aaa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015aae:	ea42 010a 	orr.w	r1, r2, sl
 8015ab2:	60b9      	str	r1, [r7, #8]
 8015ab4:	ea43 030b 	orr.w	r3, r3, fp
 8015ab8:	60fb      	str	r3, [r7, #12]
 8015aba:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8015abe:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
      value |= (USBPD_NbPDO[3] << 24);
 8015ac2:	4b4f      	ldr	r3, [pc, #316]	@ (8015c00 <BSP_GUI_SaveDataInFlash+0x2c0>)
 8015ac4:	78db      	ldrb	r3, [r3, #3]
 8015ac6:	061b      	lsls	r3, r3, #24
 8015ac8:	17da      	asrs	r2, r3, #31
 8015aca:	4698      	mov	r8, r3
 8015acc:	4691      	mov	r9, r2
 8015ace:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015ad2:	ea42 0108 	orr.w	r1, r2, r8
 8015ad6:	6039      	str	r1, [r7, #0]
 8015ad8:	ea43 0309 	orr.w	r3, r3, r9
 8015adc:	607b      	str	r3, [r7, #4]
 8015ade:	e9d7 3400 	ldrd	r3, r4, [r7]
 8015ae2:	e9c7 3410 	strd	r3, r4, [r7, #64]	@ 0x40
      if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, GUI_FLASH_ADDR_NB_PDO_SNK_P0, value))
 8015ae6:	4b40      	ldr	r3, [pc, #256]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015ae8:	881b      	ldrh	r3, [r3, #0]
 8015aea:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015aee:	4293      	cmp	r3, r2
 8015af0:	d007      	beq.n	8015b02 <BSP_GUI_SaveDataInFlash+0x1c2>
 8015af2:	4b3d      	ldr	r3, [pc, #244]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	029a      	lsls	r2, r3, #10
 8015af8:	4b3c      	ldr	r3, [pc, #240]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015afa:	4013      	ands	r3, r2
 8015afc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015b00:	d011      	beq.n	8015b26 <BSP_GUI_SaveDataInFlash+0x1e6>
 8015b02:	4b39      	ldr	r3, [pc, #228]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b04:	881b      	ldrh	r3, [r3, #0]
 8015b06:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b0a:	4293      	cmp	r3, r2
 8015b0c:	d009      	beq.n	8015b22 <BSP_GUI_SaveDataInFlash+0x1e2>
 8015b0e:	4b36      	ldr	r3, [pc, #216]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b10:	681b      	ldr	r3, [r3, #0]
 8015b12:	029a      	lsls	r2, r3, #10
 8015b14:	4b35      	ldr	r3, [pc, #212]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015b16:	4013      	ands	r3, r2
 8015b18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015b1c:	d101      	bne.n	8015b22 <BSP_GUI_SaveDataInFlash+0x1e2>
 8015b1e:	4939      	ldr	r1, [pc, #228]	@ (8015c04 <BSP_GUI_SaveDataInFlash+0x2c4>)
 8015b20:	e002      	b.n	8015b28 <BSP_GUI_SaveDataInFlash+0x1e8>
 8015b22:	4939      	ldr	r1, [pc, #228]	@ (8015c08 <BSP_GUI_SaveDataInFlash+0x2c8>)
 8015b24:	e000      	b.n	8015b28 <BSP_GUI_SaveDataInFlash+0x1e8>
 8015b26:	4939      	ldr	r1, [pc, #228]	@ (8015c0c <BSP_GUI_SaveDataInFlash+0x2cc>)
 8015b28:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8015b2c:	2000      	movs	r0, #0
 8015b2e:	f7f4 f945 	bl	8009dbc <HAL_FLASH_Program>
 8015b32:	4603      	mov	r3, r0
 8015b34:	2b00      	cmp	r3, #0
 8015b36:	d002      	beq.n	8015b3e <BSP_GUI_SaveDataInFlash+0x1fe>
      {
        status = GUI_WRITE_ERROR;
 8015b38:	2302      	movs	r3, #2
 8015b3a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
#endif  /* GUI_FLASH_ADDR_NB_PDO_SNK_P0 */

#if defined(_SRC) || defined(_DRP)
    /* Save PORT0_PDO_ListSRC */
    if (GUI_OK == status)
 8015b3e:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d127      	bne.n	8015b96 <BSP_GUI_SaveDataInFlash+0x256>
    {
      status = SavePDOInFlash(GUI_FLASH_ADDR_PDO_SRC_P0, PORT0_PDO_ListSRC);
 8015b46:	4b28      	ldr	r3, [pc, #160]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b48:	881b      	ldrh	r3, [r3, #0]
 8015b4a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b4e:	4293      	cmp	r3, r2
 8015b50:	d007      	beq.n	8015b62 <BSP_GUI_SaveDataInFlash+0x222>
 8015b52:	4b25      	ldr	r3, [pc, #148]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b54:	681b      	ldr	r3, [r3, #0]
 8015b56:	029a      	lsls	r2, r3, #10
 8015b58:	4b24      	ldr	r3, [pc, #144]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015b5a:	4013      	ands	r3, r2
 8015b5c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015b60:	d011      	beq.n	8015b86 <BSP_GUI_SaveDataInFlash+0x246>
 8015b62:	4b21      	ldr	r3, [pc, #132]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b64:	881b      	ldrh	r3, [r3, #0]
 8015b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015b6a:	4293      	cmp	r3, r2
 8015b6c:	d009      	beq.n	8015b82 <BSP_GUI_SaveDataInFlash+0x242>
 8015b6e:	4b1e      	ldr	r3, [pc, #120]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015b70:	681b      	ldr	r3, [r3, #0]
 8015b72:	029a      	lsls	r2, r3, #10
 8015b74:	4b1d      	ldr	r3, [pc, #116]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015b76:	4013      	ands	r3, r2
 8015b78:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015b7c:	d101      	bne.n	8015b82 <BSP_GUI_SaveDataInFlash+0x242>
 8015b7e:	4b24      	ldr	r3, [pc, #144]	@ (8015c10 <BSP_GUI_SaveDataInFlash+0x2d0>)
 8015b80:	e002      	b.n	8015b88 <BSP_GUI_SaveDataInFlash+0x248>
 8015b82:	4b24      	ldr	r3, [pc, #144]	@ (8015c14 <BSP_GUI_SaveDataInFlash+0x2d4>)
 8015b84:	e000      	b.n	8015b88 <BSP_GUI_SaveDataInFlash+0x248>
 8015b86:	4b24      	ldr	r3, [pc, #144]	@ (8015c18 <BSP_GUI_SaveDataInFlash+0x2d8>)
 8015b88:	4924      	ldr	r1, [pc, #144]	@ (8015c1c <BSP_GUI_SaveDataInFlash+0x2dc>)
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f000 f8d2 	bl	8015d34 <SavePDOInFlash>
 8015b90:	4603      	mov	r3, r0
 8015b92:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
#endif /* _SNK || _DRP */
#endif /* USBPD_PORT_COUNT==2 */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8015b96:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d14d      	bne.n	8015c3a <BSP_GUI_SaveDataInFlash+0x2fa>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_SETTINGS,
 8015b9e:	4b12      	ldr	r3, [pc, #72]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015ba0:	881b      	ldrh	r3, [r3, #0]
 8015ba2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ba6:	4293      	cmp	r3, r2
 8015ba8:	d007      	beq.n	8015bba <BSP_GUI_SaveDataInFlash+0x27a>
 8015baa:	4b0f      	ldr	r3, [pc, #60]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	029a      	lsls	r2, r3, #10
 8015bb0:	4b0e      	ldr	r3, [pc, #56]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015bb2:	4013      	ands	r3, r2
 8015bb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015bb8:	d036      	beq.n	8015c28 <BSP_GUI_SaveDataInFlash+0x2e8>
 8015bba:	4b0b      	ldr	r3, [pc, #44]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015bbc:	881b      	ldrh	r3, [r3, #0]
 8015bbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015bc2:	4293      	cmp	r3, r2
 8015bc4:	d009      	beq.n	8015bda <BSP_GUI_SaveDataInFlash+0x29a>
 8015bc6:	4b08      	ldr	r3, [pc, #32]	@ (8015be8 <BSP_GUI_SaveDataInFlash+0x2a8>)
 8015bc8:	681b      	ldr	r3, [r3, #0]
 8015bca:	029a      	lsls	r2, r3, #10
 8015bcc:	4b07      	ldr	r3, [pc, #28]	@ (8015bec <BSP_GUI_SaveDataInFlash+0x2ac>)
 8015bce:	4013      	ands	r3, r2
 8015bd0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015bd4:	d101      	bne.n	8015bda <BSP_GUI_SaveDataInFlash+0x29a>
 8015bd6:	4b12      	ldr	r3, [pc, #72]	@ (8015c20 <BSP_GUI_SaveDataInFlash+0x2e0>)
 8015bd8:	e027      	b.n	8015c2a <BSP_GUI_SaveDataInFlash+0x2ea>
 8015bda:	4b12      	ldr	r3, [pc, #72]	@ (8015c24 <BSP_GUI_SaveDataInFlash+0x2e4>)
 8015bdc:	e025      	b.n	8015c2a <BSP_GUI_SaveDataInFlash+0x2ea>
 8015bde:	bf00      	nop
 8015be0:	deadf00d 	.word	0xdeadf00d
 8015be4:	deadbabe 	.word	0xdeadbabe
 8015be8:	1fff75e0 	.word	0x1fff75e0
 8015bec:	03fffc00 	.word	0x03fffc00
 8015bf0:	40022000 	.word	0x40022000
 8015bf4:	0803f800 	.word	0x0803f800
 8015bf8:	0801f800 	.word	0x0801f800
 8015bfc:	0807f800 	.word	0x0807f800
 8015c00:	20000124 	.word	0x20000124
 8015c04:	0803f808 	.word	0x0803f808
 8015c08:	0801f808 	.word	0x0801f808
 8015c0c:	0807f808 	.word	0x0807f808
 8015c10:	0803f810 	.word	0x0803f810
 8015c14:	0801f810 	.word	0x0801f810
 8015c18:	0807f810 	.word	0x0807f810
 8015c1c:	20000128 	.word	0x20000128
 8015c20:	0803f890 	.word	0x0803f890
 8015c24:	0801f890 	.word	0x0801f890
 8015c28:	4b36      	ldr	r3, [pc, #216]	@ (8015d04 <BSP_GUI_SaveDataInFlash+0x3c4>)
 8015c2a:	220c      	movs	r2, #12
 8015c2c:	4936      	ldr	r1, [pc, #216]	@ (8015d08 <BSP_GUI_SaveDataInFlash+0x3c8>)
 8015c2e:	4618      	mov	r0, r3
 8015c30:	f000 f8d7 	bl	8015de2 <SaveSettingsInFlash>
 8015c34:	4603      	mov	r3, r0
 8015c36:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   sizeof(USBPD_SettingsTypeDef) * (uint32_t)USBPD_PORT_COUNT);
    }

#if defined(GUI_FLASH_ADDR_DPM_ID_SETTINGS)
    /* Save DPM_ID_Settings */
    if (GUI_OK == status)
 8015c3a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015c3e:	2b00      	cmp	r3, #0
 8015c40:	d128      	bne.n	8015c94 <BSP_GUI_SaveDataInFlash+0x354>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_ID_SETTINGS,
 8015c42:	4b32      	ldr	r3, [pc, #200]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015c44:	881b      	ldrh	r3, [r3, #0]
 8015c46:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c4a:	4293      	cmp	r3, r2
 8015c4c:	d007      	beq.n	8015c5e <BSP_GUI_SaveDataInFlash+0x31e>
 8015c4e:	4b2f      	ldr	r3, [pc, #188]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	029a      	lsls	r2, r3, #10
 8015c54:	4b2e      	ldr	r3, [pc, #184]	@ (8015d10 <BSP_GUI_SaveDataInFlash+0x3d0>)
 8015c56:	4013      	ands	r3, r2
 8015c58:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015c5c:	d011      	beq.n	8015c82 <BSP_GUI_SaveDataInFlash+0x342>
 8015c5e:	4b2b      	ldr	r3, [pc, #172]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015c60:	881b      	ldrh	r3, [r3, #0]
 8015c62:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c66:	4293      	cmp	r3, r2
 8015c68:	d009      	beq.n	8015c7e <BSP_GUI_SaveDataInFlash+0x33e>
 8015c6a:	4b28      	ldr	r3, [pc, #160]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015c6c:	681b      	ldr	r3, [r3, #0]
 8015c6e:	029a      	lsls	r2, r3, #10
 8015c70:	4b27      	ldr	r3, [pc, #156]	@ (8015d10 <BSP_GUI_SaveDataInFlash+0x3d0>)
 8015c72:	4013      	ands	r3, r2
 8015c74:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015c78:	d101      	bne.n	8015c7e <BSP_GUI_SaveDataInFlash+0x33e>
 8015c7a:	4b26      	ldr	r3, [pc, #152]	@ (8015d14 <BSP_GUI_SaveDataInFlash+0x3d4>)
 8015c7c:	e002      	b.n	8015c84 <BSP_GUI_SaveDataInFlash+0x344>
 8015c7e:	4b26      	ldr	r3, [pc, #152]	@ (8015d18 <BSP_GUI_SaveDataInFlash+0x3d8>)
 8015c80:	e000      	b.n	8015c84 <BSP_GUI_SaveDataInFlash+0x344>
 8015c82:	4b26      	ldr	r3, [pc, #152]	@ (8015d1c <BSP_GUI_SaveDataInFlash+0x3dc>)
 8015c84:	2208      	movs	r2, #8
 8015c86:	4926      	ldr	r1, [pc, #152]	@ (8015d20 <BSP_GUI_SaveDataInFlash+0x3e0>)
 8015c88:	4618      	mov	r0, r3
 8015c8a:	f000 f8aa 	bl	8015de2 <SaveSettingsInFlash>
 8015c8e:	4603      	mov	r3, r0
 8015c90:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
                                   sizeof(USBPD_IdSettingsTypeDef));
    }
#endif /* GUI_FLASH_ADDR_DPM_ID_SETTINGS */

    /* Save DPM_Settings of port 0 */
    if (GUI_OK == status)
 8015c94:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d128      	bne.n	8015cee <BSP_GUI_SaveDataInFlash+0x3ae>
    {
      status = SaveSettingsInFlash(GUI_FLASH_ADDR_DPM_USER_SETTINGS,
 8015c9c:	4b1b      	ldr	r3, [pc, #108]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015c9e:	881b      	ldrh	r3, [r3, #0]
 8015ca0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ca4:	4293      	cmp	r3, r2
 8015ca6:	d007      	beq.n	8015cb8 <BSP_GUI_SaveDataInFlash+0x378>
 8015ca8:	4b18      	ldr	r3, [pc, #96]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015caa:	681b      	ldr	r3, [r3, #0]
 8015cac:	029a      	lsls	r2, r3, #10
 8015cae:	4b18      	ldr	r3, [pc, #96]	@ (8015d10 <BSP_GUI_SaveDataInFlash+0x3d0>)
 8015cb0:	4013      	ands	r3, r2
 8015cb2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015cb6:	d011      	beq.n	8015cdc <BSP_GUI_SaveDataInFlash+0x39c>
 8015cb8:	4b14      	ldr	r3, [pc, #80]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015cba:	881b      	ldrh	r3, [r3, #0]
 8015cbc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015cc0:	4293      	cmp	r3, r2
 8015cc2:	d009      	beq.n	8015cd8 <BSP_GUI_SaveDataInFlash+0x398>
 8015cc4:	4b11      	ldr	r3, [pc, #68]	@ (8015d0c <BSP_GUI_SaveDataInFlash+0x3cc>)
 8015cc6:	681b      	ldr	r3, [r3, #0]
 8015cc8:	029a      	lsls	r2, r3, #10
 8015cca:	4b11      	ldr	r3, [pc, #68]	@ (8015d10 <BSP_GUI_SaveDataInFlash+0x3d0>)
 8015ccc:	4013      	ands	r3, r2
 8015cce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015cd2:	d101      	bne.n	8015cd8 <BSP_GUI_SaveDataInFlash+0x398>
 8015cd4:	4b13      	ldr	r3, [pc, #76]	@ (8015d24 <BSP_GUI_SaveDataInFlash+0x3e4>)
 8015cd6:	e002      	b.n	8015cde <BSP_GUI_SaveDataInFlash+0x39e>
 8015cd8:	4b13      	ldr	r3, [pc, #76]	@ (8015d28 <BSP_GUI_SaveDataInFlash+0x3e8>)
 8015cda:	e000      	b.n	8015cde <BSP_GUI_SaveDataInFlash+0x39e>
 8015cdc:	4b13      	ldr	r3, [pc, #76]	@ (8015d2c <BSP_GUI_SaveDataInFlash+0x3ec>)
 8015cde:	2270      	movs	r2, #112	@ 0x70
 8015ce0:	4913      	ldr	r1, [pc, #76]	@ (8015d30 <BSP_GUI_SaveDataInFlash+0x3f0>)
 8015ce2:	4618      	mov	r0, r3
 8015ce4:	f000 f87d 	bl	8015de2 <SaveSettingsInFlash>
 8015ce8:	4603      	mov	r3, r0
 8015cea:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
    }
#endif /* _VDM */
  }

  /* Lock the flash after end of operations */
  (void) HAL_FLASH_Lock();
 8015cee:	f7f4 f8f3 	bl	8009ed8 <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 8015cf2:	b662      	cpsie	i
}
 8015cf4:	bf00      	nop

  /* Enable interrupts */
  __enable_irq();

  return status;
 8015cf6:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	3750      	adds	r7, #80	@ 0x50
 8015cfe:	46bd      	mov	sp, r7
 8015d00:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8015d04:	0807f890 	.word	0x0807f890
 8015d08:	200000a0 	.word	0x200000a0
 8015d0c:	1fff75e0 	.word	0x1fff75e0
 8015d10:	03fffc00 	.word	0x03fffc00
 8015d14:	0803f918 	.word	0x0803f918
 8015d18:	0801f918 	.word	0x0801f918
 8015d1c:	0807f918 	.word	0x0807f918
 8015d20:	200000ac 	.word	0x200000ac
 8015d24:	0803f89c 	.word	0x0803f89c
 8015d28:	0801f89c 	.word	0x0801f89c
 8015d2c:	0807f89c 	.word	0x0807f89c
 8015d30:	200000b4 	.word	0x200000b4

08015d34 <SavePDOInFlash>:

static GUI_StatusTypeDef SavePDOInFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8015d34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015d38:	b08a      	sub	sp, #40	@ 0x28
 8015d3a:	af00      	add	r7, sp, #0
 8015d3c:	6078      	str	r0, [r7, #4]
 8015d3e:	6039      	str	r1, [r7, #0]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  GUI_StatusTypeDef status = GUI_OK;
 8015d40:	2300      	movs	r3, #0
 8015d42:	77fb      	strb	r3, [r7, #31]

  index_flash = 0U;
 8015d44:	2300      	movs	r3, #0
 8015d46:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8015d48:	2300      	movs	r3, #0
 8015d4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8015d4c:	e03d      	b.n	8015dca <SavePDOInFlash+0x96>
  {
    value[0] = pListOfPDO[index];
 8015d4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d50:	009b      	lsls	r3, r3, #2
 8015d52:	683a      	ldr	r2, [r7, #0]
 8015d54:	4413      	add	r3, r2
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	60bb      	str	r3, [r7, #8]
    index++;
 8015d5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d5c:	3301      	adds	r3, #1
 8015d5e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (index < USBPD_MAX_NB_PDO)
 8015d60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d62:	2b06      	cmp	r3, #6
 8015d64:	d806      	bhi.n	8015d74 <SavePDOInFlash+0x40>
    {
      value[1] = pListOfPDO[index];
 8015d66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d68:	009b      	lsls	r3, r3, #2
 8015d6a:	683a      	ldr	r2, [r7, #0]
 8015d6c:	4413      	add	r3, r2
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	60fb      	str	r3, [r7, #12]
 8015d72:	e002      	b.n	8015d7a <SavePDOInFlash+0x46>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8015d74:	f04f 33ff 	mov.w	r3, #4294967295
 8015d78:	60fb      	str	r3, [r7, #12]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8015d7a:	68bb      	ldr	r3, [r7, #8]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	461c      	mov	r4, r3
 8015d80:	4615      	mov	r5, r2
 8015d82:	68fb      	ldr	r3, [r7, #12]
 8015d84:	2200      	movs	r2, #0
 8015d86:	469a      	mov	sl, r3
 8015d88:	4693      	mov	fp, r2
 8015d8a:	f04f 0200 	mov.w	r2, #0
 8015d8e:	f04f 0300 	mov.w	r3, #0
 8015d92:	4653      	mov	r3, sl
 8015d94:	2200      	movs	r2, #0
 8015d96:	ea44 0802 	orr.w	r8, r4, r2
 8015d9a:	ea45 0903 	orr.w	r9, r5, r3
 8015d9e:	e9c7 8904 	strd	r8, r9, [r7, #16]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8015da2:	6a3b      	ldr	r3, [r7, #32]
 8015da4:	00da      	lsls	r2, r3, #3
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	18d1      	adds	r1, r2, r3
 8015daa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8015dae:	2000      	movs	r0, #0
 8015db0:	f7f4 f804 	bl	8009dbc <HAL_FLASH_Program>
 8015db4:	4603      	mov	r3, r0
 8015db6:	2b00      	cmp	r3, #0
 8015db8:	d001      	beq.n	8015dbe <SavePDOInFlash+0x8a>
    {
      status = GUI_WRITE_ERROR;
 8015dba:	2302      	movs	r3, #2
 8015dbc:	77fb      	strb	r3, [r7, #31]
    }
    index_flash += 1;
 8015dbe:	6a3b      	ldr	r3, [r7, #32]
 8015dc0:	3301      	adds	r3, #1
 8015dc2:	623b      	str	r3, [r7, #32]
  for (index = 0U; ((index < USBPD_MAX_NB_PDO) && (GUI_OK == status)); index += 1U)
 8015dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dc6:	3301      	adds	r3, #1
 8015dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8015dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015dcc:	2b06      	cmp	r3, #6
 8015dce:	d802      	bhi.n	8015dd6 <SavePDOInFlash+0xa2>
 8015dd0:	7ffb      	ldrb	r3, [r7, #31]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d0bb      	beq.n	8015d4e <SavePDOInFlash+0x1a>
  }
  return status;
 8015dd6:	7ffb      	ldrb	r3, [r7, #31]
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8015dd8:	4618      	mov	r0, r3
 8015dda:	3728      	adds	r7, #40	@ 0x28
 8015ddc:	46bd      	mov	sp, r7
 8015dde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015de2 <SaveSettingsInFlash>:

static GUI_StatusTypeDef SaveSettingsInFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8015de2:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8015de6:	b08c      	sub	sp, #48	@ 0x30
 8015de8:	af00      	add	r7, sp, #0
 8015dea:	60f8      	str	r0, [r7, #12]
 8015dec:	60b9      	str	r1, [r7, #8]
 8015dee:	607a      	str	r2, [r7, #4]
#if defined(FLASH_TYPEPROGRAM_DOUBLEWORD)
  uint64_t data_in_64;
  uint32_t index;
  uint32_t index_flash;
  uint32_t value[2];
  uint32_t nb_u32   = ((Size) / 4U);
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	089b      	lsrs	r3, r3, #2
 8015df4:	623b      	str	r3, [r7, #32]
  GUI_StatusTypeDef status = GUI_OK;
 8015df6:	2300      	movs	r3, #0
 8015df8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Ensure nb of bytes to be writeent is 4-multiple */
  if (((Size) % 4U) != 0U)
 8015dfc:	687b      	ldr	r3, [r7, #4]
 8015dfe:	f003 0303 	and.w	r3, r3, #3
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d001      	beq.n	8015e0a <SaveSettingsInFlash+0x28>
  {
    return (GUI_ERROR);
 8015e06:	2303      	movs	r3, #3
 8015e08:	e04e      	b.n	8015ea8 <SaveSettingsInFlash+0xc6>
  }

  /* Save Settings in the FLASH */
  index_flash = 0U;
 8015e0a:	2300      	movs	r3, #0
 8015e0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8015e0e:	2300      	movs	r3, #0
 8015e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e12:	e03f      	b.n	8015e94 <SaveSettingsInFlash+0xb2>
  {
    value[0] = pSettings[index];
 8015e14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	68ba      	ldr	r2, [r7, #8]
 8015e1a:	4413      	add	r3, r2
 8015e1c:	681b      	ldr	r3, [r3, #0]
 8015e1e:	613b      	str	r3, [r7, #16]
    index++;
 8015e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e22:	3301      	adds	r3, #1
 8015e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (index < nb_u32)
 8015e26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e28:	6a3b      	ldr	r3, [r7, #32]
 8015e2a:	429a      	cmp	r2, r3
 8015e2c:	d206      	bcs.n	8015e3c <SaveSettingsInFlash+0x5a>
    {
      value[1] = pSettings[index];
 8015e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e30:	009b      	lsls	r3, r3, #2
 8015e32:	68ba      	ldr	r2, [r7, #8]
 8015e34:	4413      	add	r3, r2
 8015e36:	681b      	ldr	r3, [r3, #0]
 8015e38:	617b      	str	r3, [r7, #20]
 8015e3a:	e002      	b.n	8015e42 <SaveSettingsInFlash+0x60>
    }
    else
    {
      value[1] = (0xFFFFFFFFU);
 8015e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8015e40:	617b      	str	r3, [r7, #20]
    }

    data_in_64 = value[0] | ((uint64_t)value[1] << 32U);
 8015e42:	693b      	ldr	r3, [r7, #16]
 8015e44:	2200      	movs	r2, #0
 8015e46:	461c      	mov	r4, r3
 8015e48:	4615      	mov	r5, r2
 8015e4a:	697b      	ldr	r3, [r7, #20]
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	469a      	mov	sl, r3
 8015e50:	4693      	mov	fp, r2
 8015e52:	f04f 0200 	mov.w	r2, #0
 8015e56:	f04f 0300 	mov.w	r3, #0
 8015e5a:	4653      	mov	r3, sl
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	ea44 0802 	orr.w	r8, r4, r2
 8015e62:	ea45 0903 	orr.w	r9, r5, r3
 8015e66:	e9c7 8906 	strd	r8, r9, [r7, #24]

    /* Save in the FLASH */
    if (HAL_OK != HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (Address + (8U * index_flash)), data_in_64))
 8015e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e6c:	00da      	lsls	r2, r3, #3
 8015e6e:	68fb      	ldr	r3, [r7, #12]
 8015e70:	18d1      	adds	r1, r2, r3
 8015e72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8015e76:	2000      	movs	r0, #0
 8015e78:	f7f3 ffa0 	bl	8009dbc <HAL_FLASH_Program>
 8015e7c:	4603      	mov	r3, r0
 8015e7e:	2b00      	cmp	r3, #0
 8015e80:	d002      	beq.n	8015e88 <SaveSettingsInFlash+0xa6>
    {
      status = GUI_WRITE_ERROR;
 8015e82:	2302      	movs	r3, #2
 8015e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
    index_flash += 1U;
 8015e88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015e8a:	3301      	adds	r3, #1
 8015e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
  for (index = 0U; ((index < nb_u32) && (GUI_OK == status)); index += 1U)
 8015e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e90:	3301      	adds	r3, #1
 8015e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e94:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015e96:	6a3b      	ldr	r3, [r7, #32]
 8015e98:	429a      	cmp	r2, r3
 8015e9a:	d203      	bcs.n	8015ea4 <SaveSettingsInFlash+0xc2>
 8015e9c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8015ea0:	2b00      	cmp	r3, #0
 8015ea2:	d0b7      	beq.n	8015e14 <SaveSettingsInFlash+0x32>
  }
  return status;
 8015ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
  }
  return status;
#else
#warning "Flash program option undefined"
#endif  /* FLASH_TYPEPROGRAM_DOUBLEWORD */
}
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	3730      	adds	r7, #48	@ 0x30
 8015eac:	46bd      	mov	sp, r7
 8015eae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08015eb2 <LoadPDOFromFlash>:

static GUI_StatusTypeDef LoadPDOFromFlash(uint32_t Address, uint32_t *pListOfPDO)
{
 8015eb2:	b480      	push	{r7}
 8015eb4:	b087      	sub	sp, #28
 8015eb6:	af00      	add	r7, sp, #0
 8015eb8:	6078      	str	r0, [r7, #4]
 8015eba:	6039      	str	r1, [r7, #0]
  uint32_t _addr = Address;
 8015ebc:	687b      	ldr	r3, [r7, #4]
 8015ebe:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8015ec0:	2303      	movs	r3, #3
 8015ec2:	73fb      	strb	r3, [r7, #15]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    uint32_t _index;
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8015ec4:	2300      	movs	r3, #0
 8015ec6:	613b      	str	r3, [r7, #16]
 8015ec8:	e00c      	b.n	8015ee4 <LoadPDOFromFlash+0x32>
    {
      pListOfPDO[_index] = *((uint32_t *)_addr);
 8015eca:	697a      	ldr	r2, [r7, #20]
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	009b      	lsls	r3, r3, #2
 8015ed0:	6839      	ldr	r1, [r7, #0]
 8015ed2:	440b      	add	r3, r1
 8015ed4:	6812      	ldr	r2, [r2, #0]
 8015ed6:	601a      	str	r2, [r3, #0]
      _addr = _addr + 4U;
 8015ed8:	697b      	ldr	r3, [r7, #20]
 8015eda:	3304      	adds	r3, #4
 8015edc:	617b      	str	r3, [r7, #20]
    for (_index = 0U; _index < USBPD_MAX_NB_PDO; _index++)
 8015ede:	693b      	ldr	r3, [r7, #16]
 8015ee0:	3301      	adds	r3, #1
 8015ee2:	613b      	str	r3, [r7, #16]
 8015ee4:	693b      	ldr	r3, [r7, #16]
 8015ee6:	2b06      	cmp	r3, #6
 8015ee8:	d9ef      	bls.n	8015eca <LoadPDOFromFlash+0x18>
    }
    _status = GUI_OK;
 8015eea:	2300      	movs	r3, #0
 8015eec:	73fb      	strb	r3, [r7, #15]
  }
  return _status;
 8015eee:	7bfb      	ldrb	r3, [r7, #15]
}
 8015ef0:	4618      	mov	r0, r3
 8015ef2:	371c      	adds	r7, #28
 8015ef4:	46bd      	mov	sp, r7
 8015ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015efa:	4770      	bx	lr

08015efc <LoadSettingsFromFlash>:

static GUI_StatusTypeDef LoadSettingsFromFlash(uint32_t Address, uint32_t *pSettings, uint32_t Size)
{
 8015efc:	b580      	push	{r7, lr}
 8015efe:	b086      	sub	sp, #24
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	60f8      	str	r0, [r7, #12]
 8015f04:	60b9      	str	r1, [r7, #8]
 8015f06:	607a      	str	r2, [r7, #4]
  uint32_t _addr = Address;
 8015f08:	68fb      	ldr	r3, [r7, #12]
 8015f0a:	617b      	str	r3, [r7, #20]
  GUI_StatusTypeDef _status = GUI_ERROR;
 8015f0c:	2303      	movs	r3, #3
 8015f0e:	74fb      	strb	r3, [r7, #19]

  /* Check if FLASH is not empty to retrieve the data. Nethertheless keep data in the RAM */
  GUI_CHECK_IF_MEMORY_IS_CORRUPTED(_addr)
  {
    (void) memcpy(pSettings, ((uint32_t *)_addr), Size);
 8015f10:	697b      	ldr	r3, [r7, #20]
 8015f12:	687a      	ldr	r2, [r7, #4]
 8015f14:	4619      	mov	r1, r3
 8015f16:	68b8      	ldr	r0, [r7, #8]
 8015f18:	f004 fbbf 	bl	801a69a <memcpy>
    _status = GUI_OK;
 8015f1c:	2300      	movs	r3, #0
 8015f1e:	74fb      	strb	r3, [r7, #19]
  }
  return _status;
 8015f20:	7cfb      	ldrb	r3, [r7, #19]
}
 8015f22:	4618      	mov	r0, r3
 8015f24:	3718      	adds	r7, #24
 8015f26:	46bd      	mov	sp, r7
 8015f28:	bd80      	pop	{r7, pc}

08015f2a <TLV_init_encode>:
  * @param    Ptr          A pointer to the value. This function does not allocate memory,
  *                        it is the user's responsibility to allocate this.
  * @return   0 if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_encode(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t SizeMax, uint8_t *Ptr)
{
 8015f2a:	b480      	push	{r7}
 8015f2c:	b085      	sub	sp, #20
 8015f2e:	af00      	add	r7, sp, #0
 8015f30:	60f8      	str	r0, [r7, #12]
 8015f32:	607b      	str	r3, [r7, #4]
 8015f34:	460b      	mov	r3, r1
 8015f36:	72fb      	strb	r3, [r7, #11]
 8015f38:	4613      	mov	r3, r2
 8015f3a:	813b      	strh	r3, [r7, #8]
  if (Ptr == NULL)
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d101      	bne.n	8015f46 <TLV_init_encode+0x1c>
  {
    return 0xFF;  /* Buffer is NULL*/
 8015f42:	23ff      	movs	r3, #255	@ 0xff
 8015f44:	e044      	b.n	8015fd0 <TLV_init_encode+0xa6>
  }
  if (SizeMax < 11U)
 8015f46:	893b      	ldrh	r3, [r7, #8]
 8015f48:	2b0a      	cmp	r3, #10
 8015f4a:	d801      	bhi.n	8015f50 <TLV_init_encode+0x26>
  {
    return 0xFF;  /* Because of his small max size, the buffer can't even receive one empty TLV*/
 8015f4c:	23ff      	movs	r3, #255	@ 0xff
 8015f4e:	e03f      	b.n	8015fd0 <TLV_init_encode+0xa6>
  }

  ToSendTLV->data = Ptr;
 8015f50:	68fb      	ldr	r3, [r7, #12]
 8015f52:	687a      	ldr	r2, [r7, #4]
 8015f54:	601a      	str	r2, [r3, #0]
  ToSendTLV->maxSize = SizeMax;
 8015f56:	68fb      	ldr	r3, [r7, #12]
 8015f58:	893a      	ldrh	r2, [r7, #8]
 8015f5a:	809a      	strh	r2, [r3, #4]

  ToSendTLV->data[0] = TLV_SOF;
 8015f5c:	68fb      	ldr	r3, [r7, #12]
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	22fd      	movs	r2, #253	@ 0xfd
 8015f62:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[1] = TLV_SOF;
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	681b      	ldr	r3, [r3, #0]
 8015f68:	3301      	adds	r3, #1
 8015f6a:	22fd      	movs	r2, #253	@ 0xfd
 8015f6c:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[2] = TLV_SOF;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	681b      	ldr	r3, [r3, #0]
 8015f72:	3302      	adds	r3, #2
 8015f74:	22fd      	movs	r2, #253	@ 0xfd
 8015f76:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[3] = TLV_SOF;          /* SOF*/
 8015f78:	68fb      	ldr	r3, [r7, #12]
 8015f7a:	681b      	ldr	r3, [r3, #0]
 8015f7c:	3303      	adds	r3, #3
 8015f7e:	22fd      	movs	r2, #253	@ 0xfd
 8015f80:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[4] = Tag;              /* Tag*/
 8015f82:	68fb      	ldr	r3, [r7, #12]
 8015f84:	681b      	ldr	r3, [r3, #0]
 8015f86:	3304      	adds	r3, #4
 8015f88:	7afa      	ldrb	r2, [r7, #11]
 8015f8a:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[5] = 0;
 8015f8c:	68fb      	ldr	r3, [r7, #12]
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	3305      	adds	r3, #5
 8015f92:	2200      	movs	r2, #0
 8015f94:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = 0;                /* Size*/
 8015f96:	68fb      	ldr	r3, [r7, #12]
 8015f98:	681b      	ldr	r3, [r3, #0]
 8015f9a:	3306      	adds	r3, #6
 8015f9c:	2200      	movs	r2, #0
 8015f9e:	701a      	strb	r2, [r3, #0]

  ToSendTLV->data[7] = TLV_EOF;
 8015fa0:	68fb      	ldr	r3, [r7, #12]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	3307      	adds	r3, #7
 8015fa6:	22a5      	movs	r2, #165	@ 0xa5
 8015fa8:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[8] = TLV_EOF;
 8015faa:	68fb      	ldr	r3, [r7, #12]
 8015fac:	681b      	ldr	r3, [r3, #0]
 8015fae:	3308      	adds	r3, #8
 8015fb0:	22a5      	movs	r2, #165	@ 0xa5
 8015fb2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[9] = TLV_EOF;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	681b      	ldr	r3, [r3, #0]
 8015fb8:	3309      	adds	r3, #9
 8015fba:	22a5      	movs	r2, #165	@ 0xa5
 8015fbc:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[10] = TLV_EOF;         /* EOF*/
 8015fbe:	68fb      	ldr	r3, [r7, #12]
 8015fc0:	681b      	ldr	r3, [r3, #0]
 8015fc2:	330a      	adds	r3, #10
 8015fc4:	22a5      	movs	r2, #165	@ 0xa5
 8015fc6:	701a      	strb	r2, [r3, #0]

  ToSendTLV->EOFposition = 7;
 8015fc8:	68fb      	ldr	r3, [r7, #12]
 8015fca:	2207      	movs	r2, #7
 8015fcc:	80da      	strh	r2, [r3, #6]

  return 0;
 8015fce:	2300      	movs	r3, #0
}
 8015fd0:	4618      	mov	r0, r3
 8015fd2:	3714      	adds	r7, #20
 8015fd4:	46bd      	mov	sp, r7
 8015fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fda:	4770      	bx	lr

08015fdc <TLV_add>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_add(TLV_ToSend_Data_t *ToSendTLV, uint8_t Tag, uint16_t Size, const uint8_t *Value)
{
 8015fdc:	b480      	push	{r7}
 8015fde:	b087      	sub	sp, #28
 8015fe0:	af00      	add	r7, sp, #0
 8015fe2:	60f8      	str	r0, [r7, #12]
 8015fe4:	607b      	str	r3, [r7, #4]
 8015fe6:	460b      	mov	r3, r1
 8015fe8:	72fb      	strb	r3, [r7, #11]
 8015fea:	4613      	mov	r3, r2
 8015fec:	813b      	strh	r3, [r7, #8]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8015fee:	68fb      	ldr	r3, [r7, #12]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	68fa      	ldr	r2, [r7, #12]
 8015ff4:	88d2      	ldrh	r2, [r2, #6]
 8015ff6:	4413      	add	r3, r2
 8015ff8:	781b      	ldrb	r3, [r3, #0]
 8015ffa:	2ba5      	cmp	r3, #165	@ 0xa5
 8015ffc:	d002      	beq.n	8016004 <TLV_add+0x28>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8015ffe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016002:	e0a1      	b.n	8016148 <TLV_add+0x16c>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8016004:	68fb      	ldr	r3, [r7, #12]
 8016006:	88db      	ldrh	r3, [r3, #6]
 8016008:	461a      	mov	r2, r3
 801600a:	893b      	ldrh	r3, [r7, #8]
 801600c:	4413      	add	r3, r2
 801600e:	3307      	adds	r3, #7
 8016010:	68fa      	ldr	r2, [r7, #12]
 8016012:	8892      	ldrh	r2, [r2, #4]
 8016014:	4293      	cmp	r3, r2
 8016016:	d902      	bls.n	801601e <TLV_add+0x42>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 8016018:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801601c:	e094      	b.n	8016148 <TLV_add+0x16c>
  }
  if (ToSendTLV->data == NULL)
 801601e:	68fb      	ldr	r3, [r7, #12]
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	2b00      	cmp	r3, #0
 8016024:	d102      	bne.n	801602c <TLV_add+0x50>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 8016026:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801602a:	e08d      	b.n	8016148 <TLV_add+0x16c>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	88db      	ldrh	r3, [r3, #6]
 8016030:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016034:	4293      	cmp	r3, r2
 8016036:	d102      	bne.n	801603e <TLV_add+0x62>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 8016038:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801603c:	e084      	b.n	8016148 <TLV_add+0x16c>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = Tag;                           /* Tag*/
 801603e:	68fb      	ldr	r3, [r7, #12]
 8016040:	681b      	ldr	r3, [r3, #0]
 8016042:	68fa      	ldr	r2, [r7, #12]
 8016044:	88d2      	ldrh	r2, [r2, #6]
 8016046:	4413      	add	r3, r2
 8016048:	7afa      	ldrb	r2, [r7, #11]
 801604a:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition++;
 801604c:	68fb      	ldr	r3, [r7, #12]
 801604e:	88db      	ldrh	r3, [r3, #6]
 8016050:	3301      	adds	r3, #1
 8016052:	b29a      	uxth	r2, r3
 8016054:	68fb      	ldr	r3, [r7, #12]
 8016056:	80da      	strh	r2, [r3, #6]
  ToSendTLV->SizePosition = ToSendTLV->EOFposition;
 8016058:	68fb      	ldr	r3, [r7, #12]
 801605a:	88da      	ldrh	r2, [r3, #6]
 801605c:	68fb      	ldr	r3, [r7, #12]
 801605e:	811a      	strh	r2, [r3, #8]

  ToSendTLV->data[ToSendTLV->EOFposition] = (uint8_t)((Size >> 8) & 0x00FFU);  /* Size*/
 8016060:	893b      	ldrh	r3, [r7, #8]
 8016062:	0a1b      	lsrs	r3, r3, #8
 8016064:	b299      	uxth	r1, r3
 8016066:	68fb      	ldr	r3, [r7, #12]
 8016068:	681b      	ldr	r3, [r3, #0]
 801606a:	68fa      	ldr	r2, [r7, #12]
 801606c:	88d2      	ldrh	r2, [r2, #6]
 801606e:	4413      	add	r3, r2
 8016070:	b2ca      	uxtb	r2, r1
 8016072:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = (uint8_t)((Size) & 0x00FFU);
 8016074:	68fb      	ldr	r3, [r7, #12]
 8016076:	681a      	ldr	r2, [r3, #0]
 8016078:	68fb      	ldr	r3, [r7, #12]
 801607a:	88db      	ldrh	r3, [r3, #6]
 801607c:	3301      	adds	r3, #1
 801607e:	4413      	add	r3, r2
 8016080:	893a      	ldrh	r2, [r7, #8]
 8016082:	b2d2      	uxtb	r2, r2
 8016084:	701a      	strb	r2, [r3, #0]
  ToSendTLV->EOFposition += 2U;
 8016086:	68fb      	ldr	r3, [r7, #12]
 8016088:	88db      	ldrh	r3, [r3, #6]
 801608a:	3302      	adds	r3, #2
 801608c:	b29a      	uxth	r2, r3
 801608e:	68fb      	ldr	r3, [r7, #12]
 8016090:	80da      	strh	r2, [r3, #6]

  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 8016092:	2300      	movs	r3, #0
 8016094:	617b      	str	r3, [r7, #20]
 8016096:	e012      	b.n	80160be <TLV_add+0xe2>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 8016098:	687a      	ldr	r2, [r7, #4]
 801609a:	697b      	ldr	r3, [r7, #20]
 801609c:	441a      	add	r2, r3
 801609e:	68fb      	ldr	r3, [r7, #12]
 80160a0:	681b      	ldr	r3, [r3, #0]
 80160a2:	68f9      	ldr	r1, [r7, #12]
 80160a4:	88c9      	ldrh	r1, [r1, #6]
 80160a6:	440b      	add	r3, r1
 80160a8:	7812      	ldrb	r2, [r2, #0]
 80160aa:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	88db      	ldrh	r3, [r3, #6]
 80160b0:	3301      	adds	r3, #1
 80160b2:	b29a      	uxth	r2, r3
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0U; index < Size; index++)                          /* Value*/
 80160b8:	697b      	ldr	r3, [r7, #20]
 80160ba:	3301      	adds	r3, #1
 80160bc:	617b      	str	r3, [r7, #20]
 80160be:	893b      	ldrh	r3, [r7, #8]
 80160c0:	697a      	ldr	r2, [r7, #20]
 80160c2:	429a      	cmp	r2, r3
 80160c4:	d3e8      	bcc.n	8016098 <TLV_add+0xbc>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 80160c6:	68fb      	ldr	r3, [r7, #12]
 80160c8:	681b      	ldr	r3, [r3, #0]
 80160ca:	68fa      	ldr	r2, [r7, #12]
 80160cc:	88d2      	ldrh	r2, [r2, #6]
 80160ce:	4413      	add	r3, r2
 80160d0:	22a5      	movs	r2, #165	@ 0xa5
 80160d2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	681a      	ldr	r2, [r3, #0]
 80160d8:	68fb      	ldr	r3, [r7, #12]
 80160da:	88db      	ldrh	r3, [r3, #6]
 80160dc:	3301      	adds	r3, #1
 80160de:	4413      	add	r3, r2
 80160e0:	22a5      	movs	r2, #165	@ 0xa5
 80160e2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 80160e4:	68fb      	ldr	r3, [r7, #12]
 80160e6:	681a      	ldr	r2, [r3, #0]
 80160e8:	68fb      	ldr	r3, [r7, #12]
 80160ea:	88db      	ldrh	r3, [r3, #6]
 80160ec:	3302      	adds	r3, #2
 80160ee:	4413      	add	r3, r2
 80160f0:	22a5      	movs	r2, #165	@ 0xa5
 80160f2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                  /* EOF*/
 80160f4:	68fb      	ldr	r3, [r7, #12]
 80160f6:	681a      	ldr	r2, [r3, #0]
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	88db      	ldrh	r3, [r3, #6]
 80160fc:	3303      	adds	r3, #3
 80160fe:	4413      	add	r3, r2
 8016100:	22a5      	movs	r2, #165	@ 0xa5
 8016102:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + 3U + Size;
 8016104:	68fb      	ldr	r3, [r7, #12]
 8016106:	681b      	ldr	r3, [r3, #0]
 8016108:	3305      	adds	r3, #5
 801610a:	781b      	ldrb	r3, [r3, #0]
 801610c:	021b      	lsls	r3, r3, #8
 801610e:	b29b      	uxth	r3, r3
 8016110:	68fa      	ldr	r2, [r7, #12]
 8016112:	6812      	ldr	r2, [r2, #0]
 8016114:	3206      	adds	r2, #6
 8016116:	7812      	ldrb	r2, [r2, #0]
 8016118:	4413      	add	r3, r2
 801611a:	b29a      	uxth	r2, r3
 801611c:	893b      	ldrh	r3, [r7, #8]
 801611e:	4413      	add	r3, r2
 8016120:	b29b      	uxth	r3, r3
 8016122:	3303      	adds	r3, #3
 8016124:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8016126:	8a7b      	ldrh	r3, [r7, #18]
 8016128:	0a1b      	lsrs	r3, r3, #8
 801612a:	b29a      	uxth	r2, r3
 801612c:	68fb      	ldr	r3, [r7, #12]
 801612e:	681b      	ldr	r3, [r3, #0]
 8016130:	3305      	adds	r3, #5
 8016132:	b2d2      	uxtb	r2, r2
 8016134:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)total_lgth;
 8016136:	68fb      	ldr	r3, [r7, #12]
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	3306      	adds	r3, #6
 801613c:	8a7a      	ldrh	r2, [r7, #18]
 801613e:	b2d2      	uxtb	r2, r2
 8016140:	701a      	strb	r2, [r3, #0]

  return (3U + Size);
 8016142:	893b      	ldrh	r3, [r7, #8]
 8016144:	3303      	adds	r3, #3
 8016146:	b29b      	uxth	r3, r3
}
 8016148:	4618      	mov	r0, r3
 801614a:	371c      	adds	r7, #28
 801614c:	46bd      	mov	sp, r7
 801614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016152:	4770      	bx	lr

08016154 <TLV_addValue>:
  * @param    Value        A pointer to the Value to add.
  * @return   The number of bytes written if everything went fine, 0xFFFF otherwise.
  *
  */
uint16_t TLV_addValue(TLV_ToSend_Data_t *ToSendTLV, const uint8_t *Value, uint16_t Size)
{
 8016154:	b480      	push	{r7}
 8016156:	b087      	sub	sp, #28
 8016158:	af00      	add	r7, sp, #0
 801615a:	60f8      	str	r0, [r7, #12]
 801615c:	60b9      	str	r1, [r7, #8]
 801615e:	4613      	mov	r3, r2
 8016160:	80fb      	strh	r3, [r7, #6]
  if (ToSendTLV->data[ToSendTLV->EOFposition] != TLV_EOF)
 8016162:	68fb      	ldr	r3, [r7, #12]
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	68fa      	ldr	r2, [r7, #12]
 8016168:	88d2      	ldrh	r2, [r2, #6]
 801616a:	4413      	add	r3, r2
 801616c:	781b      	ldrb	r3, [r3, #0]
 801616e:	2ba5      	cmp	r3, #165	@ 0xa5
 8016170:	d002      	beq.n	8016178 <TLV_addValue+0x24>
  {
    return 0xFFFF;  /* EOF has been lost. Has any TLV operation failed, or went interrupted ?*/
 8016172:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016176:	e075      	b.n	8016264 <TLV_addValue+0x110>
  }
  if ((ToSendTLV->EOFposition + 4U + 3U + Size) > ToSendTLV->maxSize)
 8016178:	68fb      	ldr	r3, [r7, #12]
 801617a:	88db      	ldrh	r3, [r3, #6]
 801617c:	461a      	mov	r2, r3
 801617e:	88fb      	ldrh	r3, [r7, #6]
 8016180:	4413      	add	r3, r2
 8016182:	3307      	adds	r3, #7
 8016184:	68fa      	ldr	r2, [r7, #12]
 8016186:	8892      	ldrh	r2, [r2, #4]
 8016188:	4293      	cmp	r3, r2
 801618a:	d902      	bls.n	8016192 <TLV_addValue+0x3e>
  {
    return 0xFFFF;  /* Can't add this TLV, because it will overflow the provided buffer.*/
 801618c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016190:	e068      	b.n	8016264 <TLV_addValue+0x110>
  }
  if (ToSendTLV->data == NULL)
 8016192:	68fb      	ldr	r3, [r7, #12]
 8016194:	681b      	ldr	r3, [r3, #0]
 8016196:	2b00      	cmp	r3, #0
 8016198:	d102      	bne.n	80161a0 <TLV_addValue+0x4c>
  {
    return 0xFFFF;  /* Data points to NULL. Has the encoding been initialized with TLV_init_encode ?*/
 801619a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801619e:	e061      	b.n	8016264 <TLV_addValue+0x110>
  }
  if (ToSendTLV->EOFposition == 0xFFFFU)
 80161a0:	68fb      	ldr	r3, [r7, #12]
 80161a2:	88db      	ldrh	r3, [r3, #6]
 80161a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80161a8:	4293      	cmp	r3, r2
 80161aa:	d102      	bne.n	80161b2 <TLV_addValue+0x5e>
  {
    return 0xFFFF;  /* EOF at -1.  Has the decoding been initialized with TLV_init_decode ?*/
 80161ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80161b0:	e058      	b.n	8016264 <TLV_addValue+0x110>
  }

  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 80161b2:	2300      	movs	r3, #0
 80161b4:	617b      	str	r3, [r7, #20]
 80161b6:	e012      	b.n	80161de <TLV_addValue+0x8a>
  {
    ToSendTLV->data[ToSendTLV->EOFposition] = Value[index];
 80161b8:	68ba      	ldr	r2, [r7, #8]
 80161ba:	697b      	ldr	r3, [r7, #20]
 80161bc:	441a      	add	r2, r3
 80161be:	68fb      	ldr	r3, [r7, #12]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	68f9      	ldr	r1, [r7, #12]
 80161c4:	88c9      	ldrh	r1, [r1, #6]
 80161c6:	440b      	add	r3, r1
 80161c8:	7812      	ldrb	r2, [r2, #0]
 80161ca:	701a      	strb	r2, [r3, #0]
    ToSendTLV->EOFposition++;
 80161cc:	68fb      	ldr	r3, [r7, #12]
 80161ce:	88db      	ldrh	r3, [r3, #6]
 80161d0:	3301      	adds	r3, #1
 80161d2:	b29a      	uxth	r2, r3
 80161d4:	68fb      	ldr	r3, [r7, #12]
 80161d6:	80da      	strh	r2, [r3, #6]
  for (uint32_t index = 0; index < Size; index++)                          /* Value*/
 80161d8:	697b      	ldr	r3, [r7, #20]
 80161da:	3301      	adds	r3, #1
 80161dc:	617b      	str	r3, [r7, #20]
 80161de:	88fb      	ldrh	r3, [r7, #6]
 80161e0:	697a      	ldr	r2, [r7, #20]
 80161e2:	429a      	cmp	r2, r3
 80161e4:	d3e8      	bcc.n	80161b8 <TLV_addValue+0x64>
  }

  ToSendTLV->data[ToSendTLV->EOFposition] = TLV_EOF;
 80161e6:	68fb      	ldr	r3, [r7, #12]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	68fa      	ldr	r2, [r7, #12]
 80161ec:	88d2      	ldrh	r2, [r2, #6]
 80161ee:	4413      	add	r3, r2
 80161f0:	22a5      	movs	r2, #165	@ 0xa5
 80161f2:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 1U] = TLV_EOF;
 80161f4:	68fb      	ldr	r3, [r7, #12]
 80161f6:	681a      	ldr	r2, [r3, #0]
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	88db      	ldrh	r3, [r3, #6]
 80161fc:	3301      	adds	r3, #1
 80161fe:	4413      	add	r3, r2
 8016200:	22a5      	movs	r2, #165	@ 0xa5
 8016202:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 2U] = TLV_EOF;
 8016204:	68fb      	ldr	r3, [r7, #12]
 8016206:	681a      	ldr	r2, [r3, #0]
 8016208:	68fb      	ldr	r3, [r7, #12]
 801620a:	88db      	ldrh	r3, [r3, #6]
 801620c:	3302      	adds	r3, #2
 801620e:	4413      	add	r3, r2
 8016210:	22a5      	movs	r2, #165	@ 0xa5
 8016212:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[ToSendTLV->EOFposition + 3U] = TLV_EOF;                   /* EOF*/
 8016214:	68fb      	ldr	r3, [r7, #12]
 8016216:	681a      	ldr	r2, [r3, #0]
 8016218:	68fb      	ldr	r3, [r7, #12]
 801621a:	88db      	ldrh	r3, [r3, #6]
 801621c:	3303      	adds	r3, #3
 801621e:	4413      	add	r3, r2
 8016220:	22a5      	movs	r2, #165	@ 0xa5
 8016222:	701a      	strb	r2, [r3, #0]

  /* Update of the top level Size marker*/
  uint16_t total_lgth = ((uint16_t)(ToSendTLV->data[5]) << 8) + (uint16_t)(ToSendTLV->data[6]) + Size;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	3305      	adds	r3, #5
 801622a:	781b      	ldrb	r3, [r3, #0]
 801622c:	021b      	lsls	r3, r3, #8
 801622e:	b29b      	uxth	r3, r3
 8016230:	68fa      	ldr	r2, [r7, #12]
 8016232:	6812      	ldr	r2, [r2, #0]
 8016234:	3206      	adds	r2, #6
 8016236:	7812      	ldrb	r2, [r2, #0]
 8016238:	4413      	add	r3, r2
 801623a:	b29a      	uxth	r2, r3
 801623c:	88fb      	ldrh	r3, [r7, #6]
 801623e:	4413      	add	r3, r2
 8016240:	827b      	strh	r3, [r7, #18]
  ToSendTLV->data[5] = (uint8_t)(total_lgth >> 8);
 8016242:	8a7b      	ldrh	r3, [r7, #18]
 8016244:	0a1b      	lsrs	r3, r3, #8
 8016246:	b29a      	uxth	r2, r3
 8016248:	68fb      	ldr	r3, [r7, #12]
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	3305      	adds	r3, #5
 801624e:	b2d2      	uxtb	r2, r2
 8016250:	701a      	strb	r2, [r3, #0]
  ToSendTLV->data[6] = (uint8_t)(total_lgth);
 8016252:	68fb      	ldr	r3, [r7, #12]
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	3306      	adds	r3, #6
 8016258:	8a7a      	ldrh	r2, [r7, #18]
 801625a:	b2d2      	uxtb	r2, r2
 801625c:	701a      	strb	r2, [r3, #0]

  return 3U + Size;
 801625e:	88fb      	ldrh	r3, [r7, #6]
 8016260:	3303      	adds	r3, #3
 8016262:	b29b      	uxth	r3, r3
}
 8016264:	4618      	mov	r0, r3
 8016266:	371c      	adds	r7, #28
 8016268:	46bd      	mov	sp, r7
 801626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626e:	4770      	bx	lr

08016270 <TLV_deinit_encode>:
  *           Once deinitialization is done, the string used can directly be send.
  * @param    ToSendTLV    The TLV_ToSend_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_encode(TLV_ToSend_Data_t *ToSendTLV)
{
 8016270:	b480      	push	{r7}
 8016272:	b083      	sub	sp, #12
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  ToSendTLV->data        = NULL;
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2200      	movs	r2, #0
 801627c:	601a      	str	r2, [r3, #0]
  ToSendTLV->EOFposition = 0xFFFF;
 801627e:	687b      	ldr	r3, [r7, #4]
 8016280:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016284:	80da      	strh	r2, [r3, #6]
  ToSendTLV->maxSize     = 0;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2200      	movs	r2, #0
 801628a:	809a      	strh	r2, [r3, #4]
}
 801628c:	bf00      	nop
 801628e:	370c      	adds	r7, #12
 8016290:	46bd      	mov	sp, r7
 8016292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016296:	4770      	bx	lr

08016298 <TLV_init_decode>:
  * @param    ToProcessTLV    The TLV_Received_Data_t that will be used.
  * @param    pReceivedString The string which will be decoded.
  * @return   The position of the cursor if everything went fine, 0xFF otherwise.
  */
uint8_t TLV_init_decode(TLV_Received_Data_t *ToProcessTLV, uint8_t *pReceivedString)
{
 8016298:	b480      	push	{r7}
 801629a:	b083      	sub	sp, #12
 801629c:	af00      	add	r7, sp, #0
 801629e:	6078      	str	r0, [r7, #4]
 80162a0:	6039      	str	r1, [r7, #0]
  if (pReceivedString == NULL)
 80162a2:	683b      	ldr	r3, [r7, #0]
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d101      	bne.n	80162ac <TLV_init_decode+0x14>
  {
    return 0xFF;  /* Received string is NULL*/
 80162a8:	23ff      	movs	r3, #255	@ 0xff
 80162aa:	e01d      	b.n	80162e8 <TLV_init_decode+0x50>
  }
  if ((pReceivedString[0] != TLV_SOF)
 80162ac:	683b      	ldr	r3, [r7, #0]
 80162ae:	781b      	ldrb	r3, [r3, #0]
 80162b0:	2bfd      	cmp	r3, #253	@ 0xfd
 80162b2:	d10e      	bne.n	80162d2 <TLV_init_decode+0x3a>
      || (pReceivedString[1] != TLV_SOF)
 80162b4:	683b      	ldr	r3, [r7, #0]
 80162b6:	3301      	adds	r3, #1
 80162b8:	781b      	ldrb	r3, [r3, #0]
 80162ba:	2bfd      	cmp	r3, #253	@ 0xfd
 80162bc:	d109      	bne.n	80162d2 <TLV_init_decode+0x3a>
      || (pReceivedString[2] != TLV_SOF)
 80162be:	683b      	ldr	r3, [r7, #0]
 80162c0:	3302      	adds	r3, #2
 80162c2:	781b      	ldrb	r3, [r3, #0]
 80162c4:	2bfd      	cmp	r3, #253	@ 0xfd
 80162c6:	d104      	bne.n	80162d2 <TLV_init_decode+0x3a>
      || (pReceivedString[3] != TLV_SOF))
 80162c8:	683b      	ldr	r3, [r7, #0]
 80162ca:	3303      	adds	r3, #3
 80162cc:	781b      	ldrb	r3, [r3, #0]
 80162ce:	2bfd      	cmp	r3, #253	@ 0xfd
 80162d0:	d001      	beq.n	80162d6 <TLV_init_decode+0x3e>
  {
    return 0xFF;  /* Incorrect SOF*/
 80162d2:	23ff      	movs	r3, #255	@ 0xff
 80162d4:	e008      	b.n	80162e8 <TLV_init_decode+0x50>
  }

  ToProcessTLV->data = pReceivedString;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	683a      	ldr	r2, [r7, #0]
 80162da:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 7; /* Cursor at start of value*/
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	2207      	movs	r2, #7
 80162e0:	809a      	strh	r2, [r3, #4]

  return ((uint8_t)(ToProcessTLV->cursor));
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	889b      	ldrh	r3, [r3, #4]
 80162e6:	b2db      	uxtb	r3, r3
}
 80162e8:	4618      	mov	r0, r3
 80162ea:	370c      	adds	r7, #12
 80162ec:	46bd      	mov	sp, r7
 80162ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80162f2:	4770      	bx	lr

080162f4 <TLV_get>:
  * @param    Value        A double pointer, which will contain a pointer directly to the data in the reception buffer.
  * @return   0 if the reading was fine and there is another parameter after,
  *           1 if the reading was fine and it was the last parameter, 0xFF otherwise.
  */
uint8_t TLV_get(TLV_Received_Data_t *ToProcessTLV, uint8_t *Tag, uint16_t *Length, uint8_t **Value)
{
 80162f4:	b480      	push	{r7}
 80162f6:	b085      	sub	sp, #20
 80162f8:	af00      	add	r7, sp, #0
 80162fa:	60f8      	str	r0, [r7, #12]
 80162fc:	60b9      	str	r1, [r7, #8]
 80162fe:	607a      	str	r2, [r7, #4]
 8016300:	603b      	str	r3, [r7, #0]
  if (ToProcessTLV->data == NULL)
 8016302:	68fb      	ldr	r3, [r7, #12]
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	2b00      	cmp	r3, #0
 8016308:	d101      	bne.n	801630e <TLV_get+0x1a>
  {
    return 0xFF;  /* Data points to NULL. Has the decoding been initialized with TLV_init_decode ?*/
 801630a:	23ff      	movs	r3, #255	@ 0xff
 801630c:	e046      	b.n	801639c <TLV_get+0xa8>
  }
  if (ToProcessTLV->cursor == 0U)
 801630e:	68fb      	ldr	r3, [r7, #12]
 8016310:	889b      	ldrh	r3, [r3, #4]
 8016312:	2b00      	cmp	r3, #0
 8016314:	d101      	bne.n	801631a <TLV_get+0x26>
  {
    return 0xFF;  /* The cursor is not positioned. Has the decoding been initialized with TLV_init_decode ?*/
 8016316:	23ff      	movs	r3, #255	@ 0xff
 8016318:	e040      	b.n	801639c <TLV_get+0xa8>
  }
  if (ToProcessTLV->data[ToProcessTLV->cursor] == TLV_EOF)
 801631a:	68fb      	ldr	r3, [r7, #12]
 801631c:	681b      	ldr	r3, [r3, #0]
 801631e:	68fa      	ldr	r2, [r7, #12]
 8016320:	8892      	ldrh	r2, [r2, #4]
 8016322:	4413      	add	r3, r2
 8016324:	781b      	ldrb	r3, [r3, #0]
 8016326:	2ba5      	cmp	r3, #165	@ 0xa5
 8016328:	d101      	bne.n	801632e <TLV_get+0x3a>
  {
    return 0xFF;  /* EOF reached. There is not any parameter left to read.*/
 801632a:	23ff      	movs	r3, #255	@ 0xff
 801632c:	e036      	b.n	801639c <TLV_get+0xa8>
  }

  /* Tag*/
  *Tag = ToProcessTLV->data[ToProcessTLV->cursor];
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	68fa      	ldr	r2, [r7, #12]
 8016334:	8892      	ldrh	r2, [r2, #4]
 8016336:	4413      	add	r3, r2
 8016338:	781a      	ldrb	r2, [r3, #0]
 801633a:	68bb      	ldr	r3, [r7, #8]
 801633c:	701a      	strb	r2, [r3, #0]
  ToProcessTLV->cursor++;
 801633e:	68fb      	ldr	r3, [r7, #12]
 8016340:	889b      	ldrh	r3, [r3, #4]
 8016342:	3301      	adds	r3, #1
 8016344:	b29a      	uxth	r2, r3
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	809a      	strh	r2, [r3, #4]
  /* Length*/
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801634a:	68fb      	ldr	r3, [r7, #12]
 801634c:	681b      	ldr	r3, [r3, #0]
 801634e:	68fa      	ldr	r2, [r7, #12]
 8016350:	8892      	ldrh	r2, [r2, #4]
 8016352:	4413      	add	r3, r2
 8016354:	781b      	ldrb	r3, [r3, #0]
 8016356:	021b      	lsls	r3, r3, #8
 8016358:	b29b      	uxth	r3, r3
            + (uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor + 1U]);
 801635a:	68fa      	ldr	r2, [r7, #12]
 801635c:	6811      	ldr	r1, [r2, #0]
 801635e:	68fa      	ldr	r2, [r7, #12]
 8016360:	8892      	ldrh	r2, [r2, #4]
 8016362:	3201      	adds	r2, #1
 8016364:	440a      	add	r2, r1
 8016366:	7812      	ldrb	r2, [r2, #0]
 8016368:	4413      	add	r3, r2
 801636a:	b29a      	uxth	r2, r3
  *Length = ((uint16_t)(ToProcessTLV->data[ToProcessTLV->cursor]) << 8)
 801636c:	687b      	ldr	r3, [r7, #4]
 801636e:	801a      	strh	r2, [r3, #0]
  ToProcessTLV->cursor += 2U;
 8016370:	68fb      	ldr	r3, [r7, #12]
 8016372:	889b      	ldrh	r3, [r3, #4]
 8016374:	3302      	adds	r3, #2
 8016376:	b29a      	uxth	r2, r3
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	809a      	strh	r2, [r3, #4]
  /* Value*/
  *Value = &ToProcessTLV->data[ToProcessTLV->cursor];
 801637c:	68fb      	ldr	r3, [r7, #12]
 801637e:	681b      	ldr	r3, [r3, #0]
 8016380:	68fa      	ldr	r2, [r7, #12]
 8016382:	8892      	ldrh	r2, [r2, #4]
 8016384:	441a      	add	r2, r3
 8016386:	683b      	ldr	r3, [r7, #0]
 8016388:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor += *Length;
 801638a:	68fb      	ldr	r3, [r7, #12]
 801638c:	889a      	ldrh	r2, [r3, #4]
 801638e:	687b      	ldr	r3, [r7, #4]
 8016390:	881b      	ldrh	r3, [r3, #0]
 8016392:	4413      	add	r3, r2
 8016394:	b29a      	uxth	r2, r3
 8016396:	68fb      	ldr	r3, [r7, #12]
 8016398:	809a      	strh	r2, [r3, #4]

  return 0;
 801639a:	2300      	movs	r3, #0
}
 801639c:	4618      	mov	r0, r3
 801639e:	3714      	adds	r7, #20
 80163a0:	46bd      	mov	sp, r7
 80163a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163a6:	4770      	bx	lr

080163a8 <TLV_deinit_decode>:
  *           to restart decoding from the beginning). This function do not handle any deallocation.
  * @param    ToProcessTLV    The TLV_Received_Data_t structure to deinitialize.
  * @return   None
  */
void TLV_deinit_decode(TLV_Received_Data_t *ToProcessTLV)
{
 80163a8:	b480      	push	{r7}
 80163aa:	b083      	sub	sp, #12
 80163ac:	af00      	add	r7, sp, #0
 80163ae:	6078      	str	r0, [r7, #4]
  ToProcessTLV->data = NULL;
 80163b0:	687b      	ldr	r3, [r7, #4]
 80163b2:	2200      	movs	r2, #0
 80163b4:	601a      	str	r2, [r3, #0]
  ToProcessTLV->cursor = 0;
 80163b6:	687b      	ldr	r3, [r7, #4]
 80163b8:	2200      	movs	r2, #0
 80163ba:	809a      	strh	r2, [r3, #4]
}
 80163bc:	bf00      	nop
 80163be:	370c      	adds	r7, #12
 80163c0:	46bd      	mov	sp, r7
 80163c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80163c6:	4770      	bx	lr

080163c8 <TLV_get_string_length>:
  *           it will return the size of the string without them.
  * @param    pString      A uint8_t pString, under TLV format, with or without SOF or EOF.
  * @return   The size of the pString in bytes; including tag, length, and value; excluding SOF and EOF, if applicable.
  */
uint16_t TLV_get_string_length(const uint8_t *pString)
{
 80163c8:	b480      	push	{r7}
 80163ca:	b085      	sub	sp, #20
 80163cc:	af00      	add	r7, sp, #0
 80163ce:	6078      	str	r0, [r7, #4]
  uint16_t  length;      /* Variable to be return.*/
  uint8_t   start = 0;    /* To indicate the start of the real pString, in case there is a EOF. */
 80163d0:	2300      	movs	r3, #0
 80163d2:	73fb      	strb	r3, [r7, #15]

  while (pString[start] == TLV_SOF)
 80163d4:	e002      	b.n	80163dc <TLV_get_string_length+0x14>
  {
    start++;
 80163d6:	7bfb      	ldrb	r3, [r7, #15]
 80163d8:	3301      	adds	r3, #1
 80163da:	73fb      	strb	r3, [r7, #15]
  while (pString[start] == TLV_SOF)
 80163dc:	7bfb      	ldrb	r3, [r7, #15]
 80163de:	687a      	ldr	r2, [r7, #4]
 80163e0:	4413      	add	r3, r2
 80163e2:	781b      	ldrb	r3, [r3, #0]
 80163e4:	2bfd      	cmp	r3, #253	@ 0xfd
 80163e6:	d0f6      	beq.n	80163d6 <TLV_get_string_length+0xe>
  } /* start variable is now after the SOF if there is one.*/

  length = ((uint16_t)pString[start + 1U] << 8) | (uint16_t)pString[start + 2U];
 80163e8:	7bfb      	ldrb	r3, [r7, #15]
 80163ea:	3301      	adds	r3, #1
 80163ec:	687a      	ldr	r2, [r7, #4]
 80163ee:	4413      	add	r3, r2
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	021b      	lsls	r3, r3, #8
 80163f4:	b21a      	sxth	r2, r3
 80163f6:	7bfb      	ldrb	r3, [r7, #15]
 80163f8:	3302      	adds	r3, #2
 80163fa:	6879      	ldr	r1, [r7, #4]
 80163fc:	440b      	add	r3, r1
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	b21b      	sxth	r3, r3
 8016402:	4313      	orrs	r3, r2
 8016404:	b21b      	sxth	r3, r3
 8016406:	81bb      	strh	r3, [r7, #12]
  length += 3U;
 8016408:	89bb      	ldrh	r3, [r7, #12]
 801640a:	3303      	adds	r3, #3
 801640c:	81bb      	strh	r3, [r7, #12]

  return length;
 801640e:	89bb      	ldrh	r3, [r7, #12]
}
 8016410:	4618      	mov	r0, r3
 8016412:	3714      	adds	r7, #20
 8016414:	46bd      	mov	sp, r7
 8016416:	f85d 7b04 	ldr.w	r7, [sp], #4
 801641a:	4770      	bx	lr

0801641c <GUI_Init>:
  * @param  CB_GetCurrent     BSP callback to retrieve IBUS current
  * @retval Functional state
  */
USBPD_FunctionalState GUI_Init(const uint8_t *(*CB_HWBoardVersion)(void), const uint8_t *(*CB_HWPDType)(void),
                               uint16_t (*CB_GetVoltage)(uint8_t), int16_t (*CB_GetCurrent)(uint8_t))
{
 801641c:	b5b0      	push	{r4, r5, r7, lr}
 801641e:	b08c      	sub	sp, #48	@ 0x30
 8016420:	af00      	add	r7, sp, #0
 8016422:	60f8      	str	r0, [r7, #12]
 8016424:	60b9      	str	r1, [r7, #8]
 8016426:	607a      	str	r2, [r7, #4]
 8016428:	603b      	str	r3, [r7, #0]
  USBPD_FunctionalState _status = USBPD_ENABLE;
 801642a:	2301      	movs	r3, #1
 801642c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  /* Retrieve data from FLASH if needed */
  GUI_OriginalSettings = ((GUI_OK == BSP_GUI_LoadDataFromFlash()) ? USBPD_FALSE : USBPD_TRUE);
 8016430:	f7ff f8c2 	bl	80155b8 <BSP_GUI_LoadDataFromFlash>
 8016434:	4603      	mov	r3, r0
 8016436:	2b00      	cmp	r3, #0
 8016438:	bf14      	ite	ne
 801643a:	2301      	movne	r3, #1
 801643c:	2300      	moveq	r3, #0
 801643e:	b2db      	uxtb	r3, r3
 8016440:	461a      	mov	r2, r3
 8016442:	4b44      	ldr	r3, [pc, #272]	@ (8016554 <GUI_Init+0x138>)
 8016444:	701a      	strb	r2, [r3, #0]

  /* Need to update CAD_tDRP & CAD_dcSRC_DRP if CAD_SNKToggleTime not initialized */
  if ((0U == DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime) || (0U == DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime))
 8016446:	4b44      	ldr	r3, [pc, #272]	@ (8016558 <GUI_Init+0x13c>)
 8016448:	799b      	ldrb	r3, [r3, #6]
 801644a:	2b00      	cmp	r3, #0
 801644c:	d003      	beq.n	8016456 <GUI_Init+0x3a>
 801644e:	4b42      	ldr	r3, [pc, #264]	@ (8016558 <GUI_Init+0x13c>)
 8016450:	79db      	ldrb	r3, [r3, #7]
 8016452:	2b00      	cmp	r3, #0
 8016454:	d110      	bne.n	8016478 <GUI_Init+0x5c>
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP      = 80U;
 8016456:	4a41      	ldr	r2, [pc, #260]	@ (801655c <GUI_Init+0x140>)
 8016458:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801645c:	2150      	movs	r1, #80	@ 0x50
 801645e:	f361 0347 	bfi	r3, r1, #1, #7
 8016462:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = 50U;
 8016466:	4a3d      	ldr	r2, [pc, #244]	@ (801655c <GUI_Init+0x140>)
 8016468:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 801646c:	2132      	movs	r1, #50	@ 0x32
 801646e:	f361 0306 	bfi	r3, r1, #0, #7
 8016472:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 8016476:	e02f      	b.n	80164d8 <GUI_Init+0xbc>
  }
  else
  {
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8016478:	4b37      	ldr	r3, [pc, #220]	@ (8016558 <GUI_Init+0x13c>)
 801647a:	79db      	ldrb	r3, [r3, #7]
 801647c:	461a      	mov	r2, r3
 801647e:	2364      	movs	r3, #100	@ 0x64
 8016480:	fb02 f303 	mul.w	r3, r2, r3
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 8016484:	4a34      	ldr	r2, [pc, #208]	@ (8016558 <GUI_Init+0x13c>)
 8016486:	79d2      	ldrb	r2, [r2, #7]
 8016488:	4611      	mov	r1, r2
                                                     DPM_Settings[USBPD_PORT_0].CAD_SNKToggleTime);
 801648a:	4a33      	ldr	r2, [pc, #204]	@ (8016558 <GUI_Init+0x13c>)
 801648c:	7992      	ldrb	r2, [r2, #6]
                                                    (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime +
 801648e:	440a      	add	r2, r1
    DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 8016490:	fbb3 f3f2 	udiv	r3, r3, r2
 8016494:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8016498:	b2d9      	uxtb	r1, r3
 801649a:	4a30      	ldr	r2, [pc, #192]	@ (801655c <GUI_Init+0x140>)
 801649c:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80164a0:	f361 0306 	bfi	r3, r1, #0, #7
 80164a4:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80164a8:	4b2b      	ldr	r3, [pc, #172]	@ (8016558 <GUI_Init+0x13c>)
 80164aa:	79db      	ldrb	r3, [r3, #7]
 80164ac:	461a      	mov	r2, r3
 80164ae:	2364      	movs	r3, #100	@ 0x64
 80164b0:	fb02 f303 	mul.w	r3, r2, r3
                                               DPM_USER_Settings[USBPD_PORT_0].CAD_dcSRC_DRP;
 80164b4:	4a29      	ldr	r2, [pc, #164]	@ (801655c <GUI_Init+0x140>)
 80164b6:	f892 206a 	ldrb.w	r2, [r2, #106]	@ 0x6a
 80164ba:	f3c2 0206 	ubfx	r2, r2, #0, #7
 80164be:	b2d2      	uxtb	r2, r2
    DPM_USER_Settings[USBPD_PORT_0].CAD_tDRP = (DPM_Settings[USBPD_PORT_0].CAD_SRCToggleTime * 100U) /
 80164c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80164c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80164c8:	b2d9      	uxtb	r1, r3
 80164ca:	4a24      	ldr	r2, [pc, #144]	@ (801655c <GUI_Init+0x140>)
 80164cc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80164d0:	f361 0347 	bfi	r3, r1, #1, #7
 80164d4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                                               DPM_USER_Settings[USBPD_PORT_1].CAD_dcSRC_DRP;
  }
#endif /* USBPD_PORT_COUNT==2 */


  pCB_HWBoardVersion  = CB_HWBoardVersion;
 80164d8:	4a21      	ldr	r2, [pc, #132]	@ (8016560 <GUI_Init+0x144>)
 80164da:	68fb      	ldr	r3, [r7, #12]
 80164dc:	6013      	str	r3, [r2, #0]
  pCB_HWPDType        = CB_HWPDType;
 80164de:	4a21      	ldr	r2, [pc, #132]	@ (8016564 <GUI_Init+0x148>)
 80164e0:	68bb      	ldr	r3, [r7, #8]
 80164e2:	6013      	str	r3, [r2, #0]
  pCB_GetVoltage      = CB_GetVoltage;
 80164e4:	4a20      	ldr	r2, [pc, #128]	@ (8016568 <GUI_Init+0x14c>)
 80164e6:	687b      	ldr	r3, [r7, #4]
 80164e8:	6013      	str	r3, [r2, #0]
  pCB_GetCurrent      = CB_GetCurrent;
 80164ea:	4a20      	ldr	r2, [pc, #128]	@ (801656c <GUI_Init+0x150>)
 80164ec:	683b      	ldr	r3, [r7, #0]
 80164ee:	6013      	str	r3, [r2, #0]

  /* Register 2 callbacks for notification in DPM */
  USBPD_DPM_SetNotification_GUI(GUI_FormatAndSendNotification, GUI_PostNotificationMessage, GUI_SaveInfo);
 80164f0:	4a1f      	ldr	r2, [pc, #124]	@ (8016570 <GUI_Init+0x154>)
 80164f2:	4920      	ldr	r1, [pc, #128]	@ (8016574 <GUI_Init+0x158>)
 80164f4:	4820      	ldr	r0, [pc, #128]	@ (8016578 <GUI_Init+0x15c>)
 80164f6:	f7fd fd07 	bl	8013f08 <USBPD_DPM_SetNotification_GUI>

#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
  osMessageQDef(MsgBox, GUI_BOX_MESSAGES_MAX, uint32_t);
 80164fa:	4a20      	ldr	r2, [pc, #128]	@ (801657c <GUI_Init+0x160>)
 80164fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8016500:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016504:	e883 0003 	stmia.w	r3, {r0, r1}
  osThreadDef(GUI, TaskGUI, FREERTOS_GUI_PRIORITY, 0, FREERTOS_GUI_STACK_SIZE);
 8016508:	4b1d      	ldr	r3, [pc, #116]	@ (8016580 <GUI_Init+0x164>)
 801650a:	f107 0410 	add.w	r4, r7, #16
 801650e:	461d      	mov	r5, r3
 8016510:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016512:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016514:	682b      	ldr	r3, [r5, #0]
 8016516:	6023      	str	r3, [r4, #0]
  GUIMsgBox = osMessageCreate(osMessageQ(MsgBox), NULL);
 8016518:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801651c:	2100      	movs	r1, #0
 801651e:	4618      	mov	r0, r3
 8016520:	f7fb f8a8 	bl	8011674 <osMessageCreate>
 8016524:	4603      	mov	r3, r0
 8016526:	4a17      	ldr	r2, [pc, #92]	@ (8016584 <GUI_Init+0x168>)
 8016528:	6013      	str	r3, [r2, #0]
  if (NULL == osThreadCreate(osThread(GUI), &GUIMsgBox))
 801652a:	f107 0310 	add.w	r3, r7, #16
 801652e:	4915      	ldr	r1, [pc, #84]	@ (8016584 <GUI_Init+0x168>)
 8016530:	4618      	mov	r0, r3
 8016532:	f7fb f858 	bl	80115e6 <osThreadCreate>
 8016536:	4603      	mov	r3, r0
 8016538:	2b00      	cmp	r3, #0
 801653a:	d102      	bne.n	8016542 <GUI_Init+0x126>
#else
  GUIMsgBox = osMessageQueueNew(GUI_BOX_MESSAGES_MAX, sizeof(uint32_t), NULL);
  if (NULL == osThreadNew(TaskGUI, &GUIMsgBox, &GUI_Thread_Atrr))
#endif /* osCMSIS < 0x20000U */
  {
    _status = USBPD_DISABLE;
 801653c:	2300      	movs	r3, #0
 801653e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  __ASM volatile ("cpsie i" : : : "memory");
 8016542:	b662      	cpsie	i
}
 8016544:	bf00      	nop
  UTIL_SEQ_RegTask(TASK_GUI, 0, GUI_Execute);
  UTIL_SEQ_SetTask(TASK_GUI, 0);
#endif /*USE_STM32_UTILITY_OS */
#endif /* _RTOS */

  return _status;
 8016546:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 801654a:	4618      	mov	r0, r3
 801654c:	3730      	adds	r7, #48	@ 0x30
 801654e:	46bd      	mov	sp, r7
 8016550:	bdb0      	pop	{r4, r5, r7, pc}
 8016552:	bf00      	nop
 8016554:	20002ac1 	.word	0x20002ac1
 8016558:	200000a0 	.word	0x200000a0
 801655c:	200000b4 	.word	0x200000b4
 8016560:	20002ac8 	.word	0x20002ac8
 8016564:	20002acc 	.word	0x20002acc
 8016568:	20002ad0 	.word	0x20002ad0
 801656c:	20002ad4 	.word	0x20002ad4
 8016570:	08017525 	.word	0x08017525
 8016574:	080174dd 	.word	0x080174dd
 8016578:	08016875 	.word	0x08016875
 801657c:	0801b7d8 	.word	0x0801b7d8
 8016580:	0801b7e4 	.word	0x0801b7e4
 8016584:	20002ac4 	.word	0x20002ac4

08016588 <GUI_Start>:

void GUI_Start(void)
{
 8016588:	b580      	push	{r7, lr}
 801658a:	af00      	add	r7, sp, #0
  /* register the GUI callback to manage UART reception */
  TRACER_EMB_StartRX(GUI_CALLBACK_RX);
 801658c:	4802      	ldr	r0, [pc, #8]	@ (8016598 <GUI_Start+0x10>)
 801658e:	f002 ff3d 	bl	801940c <TRACER_EMB_StartRX>
}
 8016592:	bf00      	nop
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	08016795 	.word	0x08016795

0801659c <TaskGUI>:
static void TaskGUI(void *pEvent)
#endif /* osCMSIS < 0x20000U */
#else
void GUI_Execute(void)
#endif /* _RTOS */
{
 801659c:	b580      	push	{r7, lr}
 801659e:	b08a      	sub	sp, #40	@ 0x28
 80165a0:	af00      	add	r7, sp, #0
 80165a2:	6078      	str	r0, [r7, #4]
#ifdef _RTOS
  uint32_t _timing = osWaitForever;
 80165a4:	f04f 33ff 	mov.w	r3, #4294967295
 80165a8:	627b      	str	r3, [r7, #36]	@ 0x24
  osMessageQId  queue = *(osMessageQId *)pEvent;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	681b      	ldr	r3, [r3, #0]
 80165ae:	61fb      	str	r3, [r7, #28]

  GUI_Start();
 80165b0:	f7ff ffea 	bl	8016588 <GUI_Start>
  do
  {
#if (osCMSIS < 0x20000U)
    osEvent event = osMessageGet(queue, _timing);
 80165b4:	f107 030c 	add.w	r3, r7, #12
 80165b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80165ba:	69f9      	ldr	r1, [r7, #28]
 80165bc:	4618      	mov	r0, r3
 80165be:	f7fb f8ab 	bl	8011718 <osMessageGet>
    switch (((GUI_USER_EVENT)event.value.v & 0xFU))
 80165c2:	693b      	ldr	r3, [r7, #16]
 80165c4:	b2db      	uxtb	r3, r3
 80165c6:	f003 030f 	and.w	r3, r3, #15
 80165ca:	2b00      	cmp	r3, #0
 80165cc:	d00e      	beq.n	80165ec <TaskGUI+0x50>
 80165ce:	2b01      	cmp	r3, #1
 80165d0:	f040 8088 	bne.w	80166e4 <TaskGUI+0x148>
#endif /* osCMSIS < 0x20000U */
    {
      case GUI_USER_EVENT_GUI:
      {
#if (osCMSIS < 0x20000U)
        (void)GUI_RXProcess((uint32_t)event.value.v);
 80165d4:	693b      	ldr	r3, [r7, #16]
 80165d6:	4618      	mov	r0, r3
 80165d8:	f000 f900 	bl	80167dc <GUI_RXProcess>
#else
        (void)GUI_RXProcess((uint32_t)event);
#endif /* osCMSIS < 0x20000U */
        /* Sent an event to check if measurement report has been requested */
#if (osCMSIS < 0x20000U)
        (void)osMessagePut(GUIMsgBox, GUI_USER_EVENT_TIMER, 0U);
 80165dc:	4b44      	ldr	r3, [pc, #272]	@ (80166f0 <TaskGUI+0x154>)
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2200      	movs	r2, #0
 80165e2:	2100      	movs	r1, #0
 80165e4:	4618      	mov	r0, r3
 80165e6:	f7fb f857 	bl	8011698 <osMessagePut>
#else
        uint32_t eventtim = (uint32_t)GUI_USER_EVENT_TIMER;
        (void)osMessageQueuePut(GUIMsgBox, &eventtim, 0U, 0U);
#endif /* osCMSIS < 0x20000U */
        break;
 80165ea:	e07c      	b.n	80166e6 <TaskGUI+0x14a>
          default:
            break;
        }
        GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* !_RTOS */
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 80165ec:	2300      	movs	r3, #0
 80165ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80165f2:	e072      	b.n	80166da <TaskGUI+0x13e>
          /* -------------------------------------------------  */
          /* Check if timeout related to Measurement reporting  */
          /* -------------------------------------------------  */
          /* - Send a GUI Event only if PE is connected
             and Measurement report has been enabled          */
          if ((USBPD_TRUE == DPM_Params[_instance].PE_IsConnected)
 80165f4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80165f8:	4a3e      	ldr	r2, [pc, #248]	@ (80166f4 <TaskGUI+0x158>)
 80165fa:	009b      	lsls	r3, r3, #2
 80165fc:	4413      	add	r3, r2
 80165fe:	785b      	ldrb	r3, [r3, #1]
 8016600:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016604:	b2db      	uxtb	r3, r3
 8016606:	2b01      	cmp	r3, #1
 8016608:	d15c      	bne.n	80166c4 <TaskGUI+0x128>
              && (1U == GUI_USER_Params[_instance].u.d.MeasReportActivation)
 801660a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801660e:	493a      	ldr	r1, [pc, #232]	@ (80166f8 <TaskGUI+0x15c>)
 8016610:	4613      	mov	r3, r2
 8016612:	005b      	lsls	r3, r3, #1
 8016614:	4413      	add	r3, r2
 8016616:	005b      	lsls	r3, r3, #1
 8016618:	440b      	add	r3, r1
 801661a:	791b      	ldrb	r3, [r3, #4]
 801661c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016620:	b2db      	uxtb	r3, r3
 8016622:	2b01      	cmp	r3, #1
 8016624:	d14e      	bne.n	80166c4 <TaskGUI+0x128>
              && (0U != GUI_USER_Params[_instance].u.d.MeasReportValue))
 8016626:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 801662a:	4933      	ldr	r1, [pc, #204]	@ (80166f8 <TaskGUI+0x15c>)
 801662c:	4613      	mov	r3, r2
 801662e:	005b      	lsls	r3, r3, #1
 8016630:	4413      	add	r3, r2
 8016632:	005b      	lsls	r3, r3, #1
 8016634:	440b      	add	r3, r1
 8016636:	791b      	ldrb	r3, [r3, #4]
 8016638:	f3c3 0306 	ubfx	r3, r3, #0, #7
 801663c:	b2db      	uxtb	r3, r3
 801663e:	2b00      	cmp	r3, #0
 8016640:	d040      	beq.n	80166c4 <TaskGUI+0x128>
          {
            /* Check if timer has expired */
            if (IS_GUI_TIMER_EXPIRED(_instance, GUI_TimerMeasReport))
 8016642:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016646:	4a2d      	ldr	r2, [pc, #180]	@ (80166fc <TaskGUI+0x160>)
 8016648:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801664c:	b29b      	uxth	r3, r3
 801664e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016652:	d10a      	bne.n	801666a <TaskGUI+0xce>
            {
              uint32_t event_mr = GUI_USER_EVENT_GUI
                                  | (_instance << GUI_PE_PORT_NUM_Pos)
 8016654:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8016658:	061b      	lsls	r3, r3, #24
                                  | (GUI_NOTIF_MEASUREMENT << GUI_PE_NOTIF_Pos);
 801665a:	f443 63e2 	orr.w	r3, r3, #1808	@ 0x710
 801665e:	f043 0301 	orr.w	r3, r3, #1
              uint32_t event_mr = GUI_USER_EVENT_GUI
 8016662:	61bb      	str	r3, [r7, #24]
              (void)GUI_RXProcess(event_mr);
 8016664:	69b8      	ldr	r0, [r7, #24]
 8016666:	f000 f8b9 	bl	80167dc <GUI_RXProcess>
            }
            /* Start or Restart Measurement report timer */
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 801666a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 801666e:	4a23      	ldr	r2, [pc, #140]	@ (80166fc <TaskGUI+0x160>)
 8016670:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016674:	b29b      	uxth	r3, r3
 8016676:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801667a:	2b00      	cmp	r3, #0
 801667c:	dc28      	bgt.n	80166d0 <TaskGUI+0x134>
            {
              GUI_START_TIMER(_instance, GUI_TimerMeasReport,
 801667e:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8016682:	491d      	ldr	r1, [pc, #116]	@ (80166f8 <TaskGUI+0x15c>)
 8016684:	4613      	mov	r3, r2
 8016686:	005b      	lsls	r3, r3, #1
 8016688:	4413      	add	r3, r2
 801668a:	005b      	lsls	r3, r3, #1
 801668c:	440b      	add	r3, r1
 801668e:	791b      	ldrb	r3, [r3, #4]
 8016690:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8016694:	b2db      	uxtb	r3, r3
 8016696:	461a      	mov	r2, r3
 8016698:	0092      	lsls	r2, r2, #2
 801669a:	4413      	add	r3, r2
 801669c:	00db      	lsls	r3, r3, #3
 801669e:	b29b      	uxth	r3, r3
 80166a0:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 80166a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80166a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80166ac:	b299      	uxth	r1, r3
 80166ae:	4b13      	ldr	r3, [pc, #76]	@ (80166fc <TaskGUI+0x160>)
 80166b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80166b4:	4b0e      	ldr	r3, [pc, #56]	@ (80166f0 <TaskGUI+0x154>)
 80166b6:	681b      	ldr	r3, [r3, #0]
 80166b8:	2200      	movs	r2, #0
 80166ba:	2100      	movs	r1, #0
 80166bc:	4618      	mov	r0, r3
 80166be:	f7fa ffeb 	bl	8011698 <osMessagePut>
            if (!(IS_GUI_TIMER_RUNNING(_instance, GUI_TimerMeasReport)))
 80166c2:	e005      	b.n	80166d0 <TaskGUI+0x134>
            }
          }
          else
          {
            /* Stop measurement report timer */
            GUI_TimerMeasReport[_instance] = 0;
 80166c4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80166c8:	4a0c      	ldr	r2, [pc, #48]	@ (80166fc <TaskGUI+0x160>)
 80166ca:	2100      	movs	r1, #0
 80166cc:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        for (uint8_t _instance = 0; _instance < (uint8_t)USBPD_PORT_COUNT; _instance++)
 80166d0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80166d4:	3301      	adds	r3, #1
 80166d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80166da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80166de:	2b00      	cmp	r3, #0
 80166e0:	d088      	beq.n	80165f4 <TaskGUI+0x58>
          }
        }
#ifdef _RTOS
        break;
 80166e2:	e000      	b.n	80166e6 <TaskGUI+0x14a>
      }

      default:
        break;
 80166e4:	bf00      	nop
    }
    _timing = CheckGUITimers();
 80166e6:	f000 f80b 	bl	8016700 <CheckGUITimers>
 80166ea:	6278      	str	r0, [r7, #36]	@ 0x24
  {
 80166ec:	e762      	b.n	80165b4 <TaskGUI+0x18>
 80166ee:	bf00      	nop
 80166f0:	20002ac4 	.word	0x20002ac4
 80166f4:	20002800 	.word	0x20002800
 80166f8:	200028b8 	.word	0x200028b8
 80166fc:	200028b4 	.word	0x200028b4

08016700 <CheckGUITimers>:
#endif /* !_RTOS */
}

#ifdef _RTOS
static uint32_t CheckGUITimers(void)
{
 8016700:	b480      	push	{r7}
 8016702:	b085      	sub	sp, #20
 8016704:	af00      	add	r7, sp, #0
  uint32_t _timing = osWaitForever;
 8016706:	f04f 33ff 	mov.w	r3, #4294967295
 801670a:	60fb      	str	r3, [r7, #12]
  uint32_t _current_timing;

  /* Calculate the minimum timers to wake-up GUI task */
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 801670c:	2300      	movs	r3, #0
 801670e:	72fb      	strb	r3, [r7, #11]
 8016710:	e013      	b.n	801673a <CheckGUITimers+0x3a>
  {
    /* Check if Measurement reporting has been enabled by the GUI */
    _current_timing = (uint32_t)(GUI_TimerMeasReport[instance]) & GUI_TIMER_READ_MSK;
 8016712:	7afb      	ldrb	r3, [r7, #11]
 8016714:	4a0e      	ldr	r2, [pc, #56]	@ (8016750 <CheckGUITimers+0x50>)
 8016716:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801671a:	b29b      	uxth	r3, r3
 801671c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016720:	607b      	str	r3, [r7, #4]
    if (_current_timing > 0U)
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	2b00      	cmp	r3, #0
 8016726:	d005      	beq.n	8016734 <CheckGUITimers+0x34>
    {
      if (_current_timing < _timing)
 8016728:	687a      	ldr	r2, [r7, #4]
 801672a:	68fb      	ldr	r3, [r7, #12]
 801672c:	429a      	cmp	r2, r3
 801672e:	d201      	bcs.n	8016734 <CheckGUITimers+0x34>
      {
        _timing = _current_timing;
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	60fb      	str	r3, [r7, #12]
  for (uint8_t instance = 0; instance < (uint8_t)USBPD_PORT_COUNT; instance++)
 8016734:	7afb      	ldrb	r3, [r7, #11]
 8016736:	3301      	adds	r3, #1
 8016738:	72fb      	strb	r3, [r7, #11]
 801673a:	7afb      	ldrb	r3, [r7, #11]
 801673c:	2b00      	cmp	r3, #0
 801673e:	d0e8      	beq.n	8016712 <CheckGUITimers+0x12>
      }
    }
  }
  return _timing;
 8016740:	68fb      	ldr	r3, [r7, #12]
}
 8016742:	4618      	mov	r0, r3
 8016744:	3714      	adds	r7, #20
 8016746:	46bd      	mov	sp, r7
 8016748:	f85d 7b04 	ldr.w	r7, [sp], #4
 801674c:	4770      	bx	lr
 801674e:	bf00      	nop
 8016750:	200028b4 	.word	0x200028b4

08016754 <GUI_TimerCounter>:
#endif /* !_RTOS */

void GUI_TimerCounter(void)
{
 8016754:	b480      	push	{r7}
 8016756:	af00      	add	r7, sp, #0
  /* Increment GUI timer only if Measurement report has been activated */
  if (1U == GUI_USER_Params[USBPD_PORT_0].u.d.MeasReportActivation)
 8016758:	4b0c      	ldr	r3, [pc, #48]	@ (801678c <GUI_TimerCounter+0x38>)
 801675a:	791b      	ldrb	r3, [r3, #4]
 801675c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8016760:	b2db      	uxtb	r3, r3
 8016762:	2b00      	cmp	r3, #0
 8016764:	d00d      	beq.n	8016782 <GUI_TimerCounter+0x2e>
  {
    if ((GUI_TimerMeasReport[USBPD_PORT_0] & GUI_TIMER_READ_MSK) > 0U)
 8016766:	4b0a      	ldr	r3, [pc, #40]	@ (8016790 <GUI_TimerCounter+0x3c>)
 8016768:	881b      	ldrh	r3, [r3, #0]
 801676a:	b29b      	uxth	r3, r3
 801676c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8016770:	2b00      	cmp	r3, #0
 8016772:	d006      	beq.n	8016782 <GUI_TimerCounter+0x2e>
    {
      GUI_TimerMeasReport[USBPD_PORT_0]--;
 8016774:	4b06      	ldr	r3, [pc, #24]	@ (8016790 <GUI_TimerCounter+0x3c>)
 8016776:	881b      	ldrh	r3, [r3, #0]
 8016778:	b29b      	uxth	r3, r3
 801677a:	3b01      	subs	r3, #1
 801677c:	b29a      	uxth	r2, r3
 801677e:	4b04      	ldr	r3, [pc, #16]	@ (8016790 <GUI_TimerCounter+0x3c>)
 8016780:	801a      	strh	r2, [r3, #0]
      UTIL_SEQ_SetTask(TASK_GUI, 0);
    }
#endif /* !_RTOS && USE_STM32_UTILITY_OS */
  }
#endif /* USBPD_PORT_COUNT == 2 */
}
 8016782:	bf00      	nop
 8016784:	46bd      	mov	sp, r7
 8016786:	f85d 7b04 	ldr.w	r7, [sp], #4
 801678a:	4770      	bx	lr
 801678c:	200028b8 	.word	0x200028b8
 8016790:	200028b4 	.word	0x200028b4

08016794 <GUI_CALLBACK_RX>:
  * @param  Character Byte received by the device
  * @param  Error     Error detected in the reception
  * @retval 1 if message to send to DPM application
  */
void GUI_CALLBACK_RX(uint8_t Character, uint8_t Error)
{
 8016794:	b580      	push	{r7, lr}
 8016796:	b084      	sub	sp, #16
 8016798:	af00      	add	r7, sp, #0
 801679a:	4603      	mov	r3, r0
 801679c:	460a      	mov	r2, r1
 801679e:	71fb      	strb	r3, [r7, #7]
 80167a0:	4613      	mov	r3, r2
 80167a2:	71bb      	strb	r3, [r7, #6]
  __ASM volatile ("cpsid i" : : : "memory");
 80167a4:	b672      	cpsid	i
}
 80167a6:	bf00      	nop
  uint32_t event;
  __disable_irq();
  event = GUI_GetMessage(Character, Error);
 80167a8:	79ba      	ldrb	r2, [r7, #6]
 80167aa:	79fb      	ldrb	r3, [r7, #7]
 80167ac:	4611      	mov	r1, r2
 80167ae:	4618      	mov	r0, r3
 80167b0:	f000 f880 	bl	80168b4 <GUI_GetMessage>
 80167b4:	60f8      	str	r0, [r7, #12]
  __ASM volatile ("cpsie i" : : : "memory");
 80167b6:	b662      	cpsie	i
}
 80167b8:	bf00      	nop
  __enable_irq();
  if (event == 1U)
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	2b01      	cmp	r3, #1
 80167be:	d106      	bne.n	80167ce <GUI_CALLBACK_RX+0x3a>
  {
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, GUI_USER_EVENT_GUI, 1);
 80167c0:	4b05      	ldr	r3, [pc, #20]	@ (80167d8 <GUI_CALLBACK_RX+0x44>)
 80167c2:	681b      	ldr	r3, [r3, #0]
 80167c4:	2201      	movs	r2, #1
 80167c6:	2101      	movs	r1, #1
 80167c8:	4618      	mov	r0, r3
 80167ca:	f7fa ff65 	bl	8011698 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 80167ce:	bf00      	nop
 80167d0:	3710      	adds	r7, #16
 80167d2:	46bd      	mov	sp, r7
 80167d4:	bd80      	pop	{r7, pc}
 80167d6:	bf00      	nop
 80167d8:	20002ac4 	.word	0x20002ac4

080167dc <GUI_RXProcess>:
  * @brief  Main Trace RX process to push data on the media.
  * @param  Event     GUI trace event
  * @retval Timing
  */
uint32_t GUI_RXProcess(uint32_t Event)
{
 80167dc:	b590      	push	{r4, r7, lr}
 80167de:	b087      	sub	sp, #28
 80167e0:	af00      	add	r7, sp, #0
 80167e2:	6078      	str	r0, [r7, #4]
  uint8_t *msg;
  USBPD_GUI_State state;
  uint8_t size;

  if (0U == (Event & GUI_PE_NOTIF_Msk))
 80167e4:	687b      	ldr	r3, [r7, #4]
 80167e6:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80167ea:	2b00      	cmp	r3, #0
 80167ec:	d11a      	bne.n	8016824 <GUI_RXProcess+0x48>
  {
    /* Message have been received by GUI */
    state = GUI_SendAnswer(&msg, &size);
 80167ee:	f107 020f 	add.w	r2, r7, #15
 80167f2:	f107 0310 	add.w	r3, r7, #16
 80167f6:	4611      	mov	r1, r2
 80167f8:	4618      	mov	r0, r3
 80167fa:	f000 f961 	bl	8016ac0 <GUI_SendAnswer>
 80167fe:	4603      	mov	r3, r0
 8016800:	757b      	strb	r3, [r7, #21]

    switch (state)
 8016802:	7d7b      	ldrb	r3, [r7, #21]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d02f      	beq.n	8016868 <GUI_RXProcess+0x8c>
 8016808:	2b02      	cmp	r3, #2
 801680a:	d104      	bne.n	8016816 <GUI_RXProcess+0x3a>
    {
      case GUI_STATE_RESET:
        /* DPM_RESET_REQ received by the device */
        /* Save parameters in FLASH */
        (void)BSP_GUI_SaveDataInFlash();
 801680c:	f7ff f898 	bl	8015940 <BSP_GUI_SaveDataInFlash>
        HAL_NVIC_SystemReset();
 8016810:	f7f3 fac3 	bl	8009d9a <HAL_NVIC_SystemReset>
        break;
 8016814:	e029      	b.n	801686a <GUI_RXProcess+0x8e>
      case GUI_STATE_INIT:
        /* DPM_INIT_REQ received by the device */
        break;
      default:
        /* Another GUI messages received by the device */
        TRACER_EMB_Add(msg, size);
 8016816:	693b      	ldr	r3, [r7, #16]
 8016818:	7bfa      	ldrb	r2, [r7, #15]
 801681a:	4611      	mov	r1, r2
 801681c:	4618      	mov	r0, r3
 801681e:	f002 fd91 	bl	8019344 <TRACER_EMB_Add>
        break;
 8016822:	e022      	b.n	801686a <GUI_RXProcess+0x8e>
    }
  }
  else
  {
    uint16_t type_event = ((uint16_t)Event & GUI_PE_NOTIF_Msk) >> GUI_PE_NOTIF_Pos;
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	b29b      	uxth	r3, r3
 8016828:	091b      	lsrs	r3, r3, #4
 801682a:	b29b      	uxth	r3, r3
 801682c:	b2db      	uxtb	r3, r3
 801682e:	82fb      	strh	r3, [r7, #22]
    if (GUI_NOTIF_MEASUREMENT == type_event)
 8016830:	8afb      	ldrh	r3, [r7, #22]
 8016832:	2b71      	cmp	r3, #113	@ 0x71
 8016834:	d10d      	bne.n	8016852 <GUI_RXProcess+0x76>
    {
      /* Notification related to timeout for measure reporting */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	0e1b      	lsrs	r3, r3, #24
 801683a:	f003 0403 	and.w	r4, r3, #3
 801683e:	f7f3 f991 	bl	8009b64 <HAL_GetTick>
 8016842:	4603      	mov	r3, r0
 8016844:	461a      	mov	r2, r3
 8016846:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 801684a:	4620      	mov	r0, r4
 801684c:	f000 f812 	bl	8016874 <GUI_FormatAndSendNotification>
 8016850:	e00b      	b.n	801686a <GUI_RXProcess+0x8e>
    }
    else
    {
      /* Message have been received by PE */
      /* Send a notification to associated port */
      (void)GUI_FormatAndSendNotification(((Event & GUI_PE_PORT_NUM_Msk) >> GUI_PE_PORT_NUM_Pos),
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	0e1b      	lsrs	r3, r3, #24
 8016856:	f003 0303 	and.w	r3, r3, #3
 801685a:	8afa      	ldrh	r2, [r7, #22]
 801685c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8016860:	4618      	mov	r0, r3
 8016862:	f000 f807 	bl	8016874 <GUI_FormatAndSendNotification>
 8016866:	e000      	b.n	801686a <GUI_RXProcess+0x8e>
        break;
 8016868:	bf00      	nop
                                          GUI_NOTIF_PE_EVENT,
                                          type_event);
    }
  }
  return 0;
 801686a:	2300      	movs	r3, #0
}
 801686c:	4618      	mov	r0, r3
 801686e:	371c      	adds	r7, #28
 8016870:	46bd      	mov	sp, r7
 8016872:	bd90      	pop	{r4, r7, pc}

08016874 <GUI_FormatAndSendNotification>:
  * @param  Value             Value depending of TypeNotification
  * @note   If TypeNotification == GUI_NOTIF_ISCONNECTED, Value should be equal to 0 (Not connected) or 1 (connected)
  * @retval USBPD Status
  */
uint32_t GUI_FormatAndSendNotification(uint32_t PortNum, uint32_t TypeNotification, uint32_t Value)
{
 8016874:	b580      	push	{r7, lr}
 8016876:	b088      	sub	sp, #32
 8016878:	af02      	add	r7, sp, #8
 801687a:	60f8      	str	r0, [r7, #12]
 801687c:	60b9      	str	r1, [r7, #8]
 801687e:	607a      	str	r2, [r7, #4]
  uint8_t *msg;
  uint8_t size;
  /* Only send notification if GUI is connected */
  if (GUI_STATE_INIT != GUI_SendNotification((uint8_t)PortNum, &msg, &size, TypeNotification, Value))
 8016880:	68fb      	ldr	r3, [r7, #12]
 8016882:	b2d8      	uxtb	r0, r3
 8016884:	f107 0213 	add.w	r2, r7, #19
 8016888:	f107 0114 	add.w	r1, r7, #20
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	9300      	str	r3, [sp, #0]
 8016890:	68bb      	ldr	r3, [r7, #8]
 8016892:	f000 f9fd 	bl	8016c90 <GUI_SendNotification>
 8016896:	4603      	mov	r3, r0
 8016898:	2b00      	cmp	r3, #0
 801689a:	d005      	beq.n	80168a8 <GUI_FormatAndSendNotification+0x34>
  {
    TRACER_EMB_Add(msg, size);
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	7cfa      	ldrb	r2, [r7, #19]
 80168a0:	4611      	mov	r1, r2
 80168a2:	4618      	mov	r0, r3
 80168a4:	f002 fd4e 	bl	8019344 <TRACER_EMB_Add>
  }
  return 0;
 80168a8:	2300      	movs	r3, #0
}
 80168aa:	4618      	mov	r0, r3
 80168ac:	3718      	adds	r7, #24
 80168ae:	46bd      	mov	sp, r7
 80168b0:	bd80      	pop	{r7, pc}
	...

080168b4 <GUI_GetMessage>:
  * @param  Character Received byte
  * @param  Error     Error if issue during reception
  * @retval 1 indicates that a complete GUI message have been received
  */
uint32_t GUI_GetMessage(uint8_t Character, uint8_t Error)
{
 80168b4:	b480      	push	{r7}
 80168b6:	b085      	sub	sp, #20
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	4603      	mov	r3, r0
 80168bc:	460a      	mov	r2, r1
 80168be:	71fb      	strb	r3, [r7, #7]
 80168c0:	4613      	mov	r3, r2
 80168c2:	71bb      	strb	r3, [r7, #6]
  uint32_t status = 0;
 80168c4:	2300      	movs	r3, #0
 80168c6:	60fb      	str	r3, [r7, #12]
    Rsize,
    Rend,
    Rerror
  } Rstate = Rstart;

  if (cursor < TLV_SIZE_MAX)
 80168c8:	4b78      	ldr	r3, [pc, #480]	@ (8016aac <GUI_GetMessage+0x1f8>)
 80168ca:	881b      	ldrh	r3, [r3, #0]
 80168cc:	2bff      	cmp	r3, #255	@ 0xff
 80168ce:	d809      	bhi.n	80168e4 <GUI_GetMessage+0x30>
  {
    PtrDataRx[cursor] = Character;
 80168d0:	4b76      	ldr	r3, [pc, #472]	@ (8016aac <GUI_GetMessage+0x1f8>)
 80168d2:	881b      	ldrh	r3, [r3, #0]
 80168d4:	4619      	mov	r1, r3
 80168d6:	4a76      	ldr	r2, [pc, #472]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 80168d8:	79fb      	ldrb	r3, [r7, #7]
 80168da:	5453      	strb	r3, [r2, r1]
    counter = 0U;
    Rstate = Rstart;
    return 0;
  }

  if (Error != 0U)
 80168dc:	79bb      	ldrb	r3, [r7, #6]
 80168de:	2b00      	cmp	r3, #0
 80168e0:	d00e      	beq.n	8016900 <GUI_GetMessage+0x4c>
 80168e2:	e00a      	b.n	80168fa <GUI_GetMessage+0x46>
    cursor = 0U;
 80168e4:	4b71      	ldr	r3, [pc, #452]	@ (8016aac <GUI_GetMessage+0x1f8>)
 80168e6:	2200      	movs	r2, #0
 80168e8:	801a      	strh	r2, [r3, #0]
    counter = 0U;
 80168ea:	4b72      	ldr	r3, [pc, #456]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80168ec:	2200      	movs	r2, #0
 80168ee:	801a      	strh	r2, [r3, #0]
    Rstate = Rstart;
 80168f0:	4b71      	ldr	r3, [pc, #452]	@ (8016ab8 <GUI_GetMessage+0x204>)
 80168f2:	2200      	movs	r2, #0
 80168f4:	701a      	strb	r2, [r3, #0]
    return 0;
 80168f6:	2300      	movs	r3, #0
 80168f8:	e0d2      	b.n	8016aa0 <GUI_GetMessage+0x1ec>
  {
    Rstate = Rerror;
 80168fa:	4b6f      	ldr	r3, [pc, #444]	@ (8016ab8 <GUI_GetMessage+0x204>)
 80168fc:	2204      	movs	r2, #4
 80168fe:	701a      	strb	r2, [r3, #0]
  }

  switch (Rstate)
 8016900:	4b6d      	ldr	r3, [pc, #436]	@ (8016ab8 <GUI_GetMessage+0x204>)
 8016902:	781b      	ldrb	r3, [r3, #0]
 8016904:	2b04      	cmp	r3, #4
 8016906:	f200 80bb 	bhi.w	8016a80 <GUI_GetMessage+0x1cc>
 801690a:	a201      	add	r2, pc, #4	@ (adr r2, 8016910 <GUI_GetMessage+0x5c>)
 801690c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016910:	08016925 	.word	0x08016925
 8016914:	080169bb 	.word	0x080169bb
 8016918:	08016967 	.word	0x08016967
 801691c:	080169e1 	.word	0x080169e1
 8016920:	08016a6b 	.word	0x08016a6b
  {
    case Rstart :
      if (PtrDataRx[cursor] == TLV_SOF)
 8016924:	4b61      	ldr	r3, [pc, #388]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016926:	881b      	ldrh	r3, [r3, #0]
 8016928:	461a      	mov	r2, r3
 801692a:	4b61      	ldr	r3, [pc, #388]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 801692c:	5c9b      	ldrb	r3, [r3, r2]
 801692e:	2bfd      	cmp	r3, #253	@ 0xfd
 8016930:	d106      	bne.n	8016940 <GUI_GetMessage+0x8c>
      {
        counter++;
 8016932:	4b60      	ldr	r3, [pc, #384]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016934:	881b      	ldrh	r3, [r3, #0]
 8016936:	3301      	adds	r3, #1
 8016938:	b29a      	uxth	r2, r3
 801693a:	4b5e      	ldr	r3, [pc, #376]	@ (8016ab4 <GUI_GetMessage+0x200>)
 801693c:	801a      	strh	r2, [r3, #0]
 801693e:	e006      	b.n	801694e <GUI_GetMessage+0x9a>
      }
      else
      {
        counter = 0U;
 8016940:	4b5c      	ldr	r3, [pc, #368]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016942:	2200      	movs	r2, #0
 8016944:	801a      	strh	r2, [r3, #0]
        /* cursor is unsigned, but it will inevitably increments at the end of function,
           and we need a 0 at the next pass here */
        cursor = 0xFFFFU;
 8016946:	4b59      	ldr	r3, [pc, #356]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016948:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801694c:	801a      	strh	r2, [r3, #0]
      }

      if (counter == 4U) /* The whole SOF is received */
 801694e:	4b59      	ldr	r3, [pc, #356]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016950:	881b      	ldrh	r3, [r3, #0]
 8016952:	2b04      	cmp	r3, #4
 8016954:	f040 8096 	bne.w	8016a84 <GUI_GetMessage+0x1d0>
      {
        counter = 0U;
 8016958:	4b56      	ldr	r3, [pc, #344]	@ (8016ab4 <GUI_GetMessage+0x200>)
 801695a:	2200      	movs	r2, #0
 801695c:	801a      	strh	r2, [r3, #0]
        Rstate = Rsize;
 801695e:	4b56      	ldr	r3, [pc, #344]	@ (8016ab8 <GUI_GetMessage+0x204>)
 8016960:	2202      	movs	r2, #2
 8016962:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016964:	e08e      	b.n	8016a84 <GUI_GetMessage+0x1d0>
    case Rsize :
      counter++;
 8016966:	4b53      	ldr	r3, [pc, #332]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016968:	881b      	ldrh	r3, [r3, #0]
 801696a:	3301      	adds	r3, #1
 801696c:	b29a      	uxth	r2, r3
 801696e:	4b51      	ldr	r3, [pc, #324]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016970:	801a      	strh	r2, [r3, #0]

      if (counter == 3U) /* We have received the size */
 8016972:	4b50      	ldr	r3, [pc, #320]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016974:	881b      	ldrh	r3, [r3, #0]
 8016976:	2b03      	cmp	r3, #3
 8016978:	f040 8086 	bne.w	8016a88 <GUI_GetMessage+0x1d4>
      {
        currentSize = (uint16_t)((PtrDataRx[cursor - 1U]) << 8) + (uint16_t)(PtrDataRx[cursor]);
 801697c:	4b4b      	ldr	r3, [pc, #300]	@ (8016aac <GUI_GetMessage+0x1f8>)
 801697e:	881b      	ldrh	r3, [r3, #0]
 8016980:	3b01      	subs	r3, #1
 8016982:	4a4b      	ldr	r2, [pc, #300]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 8016984:	5cd3      	ldrb	r3, [r2, r3]
 8016986:	021b      	lsls	r3, r3, #8
 8016988:	b29b      	uxth	r3, r3
 801698a:	4a48      	ldr	r2, [pc, #288]	@ (8016aac <GUI_GetMessage+0x1f8>)
 801698c:	8812      	ldrh	r2, [r2, #0]
 801698e:	4611      	mov	r1, r2
 8016990:	4a47      	ldr	r2, [pc, #284]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 8016992:	5c52      	ldrb	r2, [r2, r1]
 8016994:	4413      	add	r3, r2
 8016996:	b29a      	uxth	r2, r3
 8016998:	4b48      	ldr	r3, [pc, #288]	@ (8016abc <GUI_GetMessage+0x208>)
 801699a:	801a      	strh	r2, [r3, #0]
        if (0U == currentSize)
 801699c:	4b47      	ldr	r3, [pc, #284]	@ (8016abc <GUI_GetMessage+0x208>)
 801699e:	881b      	ldrh	r3, [r3, #0]
 80169a0:	2b00      	cmp	r3, #0
 80169a2:	d103      	bne.n	80169ac <GUI_GetMessage+0xf8>
        {
          Rstate = Rend;
 80169a4:	4b44      	ldr	r3, [pc, #272]	@ (8016ab8 <GUI_GetMessage+0x204>)
 80169a6:	2203      	movs	r2, #3
 80169a8:	701a      	strb	r2, [r3, #0]
 80169aa:	e002      	b.n	80169b2 <GUI_GetMessage+0xfe>
        }
        else
        {
          Rstate = RonGoing;
 80169ac:	4b42      	ldr	r3, [pc, #264]	@ (8016ab8 <GUI_GetMessage+0x204>)
 80169ae:	2201      	movs	r2, #1
 80169b0:	701a      	strb	r2, [r3, #0]
        }
        counter = 0U;
 80169b2:	4b40      	ldr	r3, [pc, #256]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169b4:	2200      	movs	r2, #0
 80169b6:	801a      	strh	r2, [r3, #0]
      }
      break;
 80169b8:	e066      	b.n	8016a88 <GUI_GetMessage+0x1d4>
    case RonGoing :
      counter++;
 80169ba:	4b3e      	ldr	r3, [pc, #248]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169bc:	881b      	ldrh	r3, [r3, #0]
 80169be:	3301      	adds	r3, #1
 80169c0:	b29a      	uxth	r2, r3
 80169c2:	4b3c      	ldr	r3, [pc, #240]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169c4:	801a      	strh	r2, [r3, #0]

      if (counter == currentSize)
 80169c6:	4b3b      	ldr	r3, [pc, #236]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169c8:	881a      	ldrh	r2, [r3, #0]
 80169ca:	4b3c      	ldr	r3, [pc, #240]	@ (8016abc <GUI_GetMessage+0x208>)
 80169cc:	881b      	ldrh	r3, [r3, #0]
 80169ce:	429a      	cmp	r2, r3
 80169d0:	d15c      	bne.n	8016a8c <GUI_GetMessage+0x1d8>
      {
        /* When there is no value, the first EOF is handled by Rongoing, before Rend takes control */
        counter = 0U;
 80169d2:	4b38      	ldr	r3, [pc, #224]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169d4:	2200      	movs	r2, #0
 80169d6:	801a      	strh	r2, [r3, #0]
        Rstate = Rend;
 80169d8:	4b37      	ldr	r3, [pc, #220]	@ (8016ab8 <GUI_GetMessage+0x204>)
 80169da:	2203      	movs	r2, #3
 80169dc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80169de:	e055      	b.n	8016a8c <GUI_GetMessage+0x1d8>
    case Rend :
      counter++;
 80169e0:	4b34      	ldr	r3, [pc, #208]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169e2:	881b      	ldrh	r3, [r3, #0]
 80169e4:	3301      	adds	r3, #1
 80169e6:	b29a      	uxth	r2, r3
 80169e8:	4b32      	ldr	r3, [pc, #200]	@ (8016ab4 <GUI_GetMessage+0x200>)
 80169ea:	801a      	strh	r2, [r3, #0]
      if ((PtrDataRx[cursor] == TLV_EOF)
 80169ec:	4b2f      	ldr	r3, [pc, #188]	@ (8016aac <GUI_GetMessage+0x1f8>)
 80169ee:	881b      	ldrh	r3, [r3, #0]
 80169f0:	461a      	mov	r2, r3
 80169f2:	4b2f      	ldr	r3, [pc, #188]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 80169f4:	5c9b      	ldrb	r3, [r3, r2]
 80169f6:	2ba5      	cmp	r3, #165	@ 0xa5
 80169f8:	d124      	bne.n	8016a44 <GUI_GetMessage+0x190>
          && (PtrDataRx[cursor - 1U] == TLV_EOF)
 80169fa:	4b2c      	ldr	r3, [pc, #176]	@ (8016aac <GUI_GetMessage+0x1f8>)
 80169fc:	881b      	ldrh	r3, [r3, #0]
 80169fe:	3b01      	subs	r3, #1
 8016a00:	4a2b      	ldr	r2, [pc, #172]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 8016a02:	5cd3      	ldrb	r3, [r2, r3]
 8016a04:	2ba5      	cmp	r3, #165	@ 0xa5
 8016a06:	d11d      	bne.n	8016a44 <GUI_GetMessage+0x190>
          && (PtrDataRx[cursor - 2U] == TLV_EOF)
 8016a08:	4b28      	ldr	r3, [pc, #160]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a0a:	881b      	ldrh	r3, [r3, #0]
 8016a0c:	3b02      	subs	r3, #2
 8016a0e:	4a28      	ldr	r2, [pc, #160]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 8016a10:	5cd3      	ldrb	r3, [r2, r3]
 8016a12:	2ba5      	cmp	r3, #165	@ 0xa5
 8016a14:	d116      	bne.n	8016a44 <GUI_GetMessage+0x190>
          && (PtrDataRx[cursor - 3U] == TLV_EOF))
 8016a16:	4b25      	ldr	r3, [pc, #148]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a18:	881b      	ldrh	r3, [r3, #0]
 8016a1a:	3b03      	subs	r3, #3
 8016a1c:	4a24      	ldr	r2, [pc, #144]	@ (8016ab0 <GUI_GetMessage+0x1fc>)
 8016a1e:	5cd3      	ldrb	r3, [r2, r3]
 8016a20:	2ba5      	cmp	r3, #165	@ 0xa5
 8016a22:	d10f      	bne.n	8016a44 <GUI_GetMessage+0x190>
      {
        /* The semaphore must be given only in this case, because otherwise
           it means we didn't receive the correct size of bytes */
        if (counter == 4U)
 8016a24:	4b23      	ldr	r3, [pc, #140]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016a26:	881b      	ldrh	r3, [r3, #0]
 8016a28:	2b04      	cmp	r3, #4
 8016a2a:	d101      	bne.n	8016a30 <GUI_GetMessage+0x17c>
        {
          status = 1U;
 8016a2c:	2301      	movs	r3, #1
 8016a2e:	60fb      	str	r3, [r7, #12]
        }
        counter = 0U;
 8016a30:	4b20      	ldr	r3, [pc, #128]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016a32:	2200      	movs	r2, #0
 8016a34:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016a36:	4b1d      	ldr	r3, [pc, #116]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a38:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a3c:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8016a3e:	4b1e      	ldr	r3, [pc, #120]	@ (8016ab8 <GUI_GetMessage+0x204>)
 8016a40:	2200      	movs	r2, #0
 8016a42:	701a      	strb	r2, [r3, #0]
      }

      if (cursor == (currentSize + 11U))
 8016a44:	4b19      	ldr	r3, [pc, #100]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a46:	881b      	ldrh	r3, [r3, #0]
 8016a48:	461a      	mov	r2, r3
 8016a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8016abc <GUI_GetMessage+0x208>)
 8016a4c:	881b      	ldrh	r3, [r3, #0]
 8016a4e:	330b      	adds	r3, #11
 8016a50:	429a      	cmp	r2, r3
 8016a52:	d11d      	bne.n	8016a90 <GUI_GetMessage+0x1dc>
      {
        /* No complete EOF arrived. We reset the buffer for safety even if the instruction might be complete. */
        counter = 0U;
 8016a54:	4b17      	ldr	r3, [pc, #92]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016a56:	2200      	movs	r2, #0
 8016a58:	801a      	strh	r2, [r3, #0]
        cursor = 0xFFFFU;
 8016a5a:	4b14      	ldr	r3, [pc, #80]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a60:	801a      	strh	r2, [r3, #0]
        Rstate = Rstart;
 8016a62:	4b15      	ldr	r3, [pc, #84]	@ (8016ab8 <GUI_GetMessage+0x204>)
 8016a64:	2200      	movs	r2, #0
 8016a66:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016a68:	e012      	b.n	8016a90 <GUI_GetMessage+0x1dc>
    case Rerror :
      counter = 0U;
 8016a6a:	4b12      	ldr	r3, [pc, #72]	@ (8016ab4 <GUI_GetMessage+0x200>)
 8016a6c:	2200      	movs	r2, #0
 8016a6e:	801a      	strh	r2, [r3, #0]
      cursor = 0xFFFFU;
 8016a70:	4b0e      	ldr	r3, [pc, #56]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016a76:	801a      	strh	r2, [r3, #0]
      Rstate = Rstart;
 8016a78:	4b0f      	ldr	r3, [pc, #60]	@ (8016ab8 <GUI_GetMessage+0x204>)
 8016a7a:	2200      	movs	r2, #0
 8016a7c:	701a      	strb	r2, [r3, #0]
      break;
 8016a7e:	e008      	b.n	8016a92 <GUI_GetMessage+0x1de>
    default:
      break;
 8016a80:	bf00      	nop
 8016a82:	e006      	b.n	8016a92 <GUI_GetMessage+0x1de>
      break;
 8016a84:	bf00      	nop
 8016a86:	e004      	b.n	8016a92 <GUI_GetMessage+0x1de>
      break;
 8016a88:	bf00      	nop
 8016a8a:	e002      	b.n	8016a92 <GUI_GetMessage+0x1de>
      break;
 8016a8c:	bf00      	nop
 8016a8e:	e000      	b.n	8016a92 <GUI_GetMessage+0x1de>
      break;
 8016a90:	bf00      	nop
  }

  cursor++;
 8016a92:	4b06      	ldr	r3, [pc, #24]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a94:	881b      	ldrh	r3, [r3, #0]
 8016a96:	3301      	adds	r3, #1
 8016a98:	b29a      	uxth	r2, r3
 8016a9a:	4b04      	ldr	r3, [pc, #16]	@ (8016aac <GUI_GetMessage+0x1f8>)
 8016a9c:	801a      	strh	r2, [r3, #0]
  return status;
 8016a9e:	68fb      	ldr	r3, [r7, #12]
}
 8016aa0:	4618      	mov	r0, r3
 8016aa2:	3714      	adds	r7, #20
 8016aa4:	46bd      	mov	sp, r7
 8016aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aaa:	4770      	bx	lr
 8016aac:	20002b4c 	.word	0x20002b4c
 8016ab0:	200028c0 	.word	0x200028c0
 8016ab4:	20002b4e 	.word	0x20002b4e
 8016ab8:	20002b50 	.word	0x20002b50
 8016abc:	20002b52 	.word	0x20002b52

08016ac0 <GUI_SendAnswer>:
  * @param  pMsgToSend Pointer on the message to send
  * @param  pSizeMsg   Pointer on the size of the message to send
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendAnswer(uint8_t **pMsgToSend, uint8_t *pSizeMsg)
{
 8016ac0:	b580      	push	{r7, lr}
 8016ac2:	b084      	sub	sp, #16
 8016ac4:	af00      	add	r7, sp, #0
 8016ac6:	6078      	str	r0, [r7, #4]
 8016ac8:	6039      	str	r1, [r7, #0]
  /* Extract the port from the tag*/
  uint8_t port = PtrDataRx[TLV_TAG_POSITION] >> GUI_PORT_BIT_POSITION;
 8016aca:	4b6e      	ldr	r3, [pc, #440]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016acc:	791b      	ldrb	r3, [r3, #4]
 8016ace:	095b      	lsrs	r3, r3, #5
 8016ad0:	73fb      	strb	r3, [r7, #15]

  /* Do the appropriate treatment in response to what we have received */
  switch (PtrDataRx[TLV_TAG_POSITION] & 0x1FU)
 8016ad2:	4b6c      	ldr	r3, [pc, #432]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016ad4:	791b      	ldrb	r3, [r3, #4]
 8016ad6:	f003 031f 	and.w	r3, r3, #31
 8016ada:	3b01      	subs	r3, #1
 8016adc:	2b0f      	cmp	r3, #15
 8016ade:	f200 80bd 	bhi.w	8016c5c <GUI_SendAnswer+0x19c>
 8016ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8016ae8 <GUI_SendAnswer+0x28>)
 8016ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016ae8:	08016b29 	.word	0x08016b29
 8016aec:	08016b2d 	.word	0x08016b2d
 8016af0:	08016c5d 	.word	0x08016c5d
 8016af4:	08016b7b 	.word	0x08016b7b
 8016af8:	08016c5d 	.word	0x08016c5d
 8016afc:	08016ba1 	.word	0x08016ba1
 8016b00:	08016c5d 	.word	0x08016c5d
 8016b04:	08016c5d 	.word	0x08016c5d
 8016b08:	08016bc7 	.word	0x08016bc7
 8016b0c:	08016c5d 	.word	0x08016c5d
 8016b10:	08016c5d 	.word	0x08016c5d
 8016b14:	08016c5d 	.word	0x08016c5d
 8016b18:	08016c5d 	.word	0x08016c5d
 8016b1c:	08016bed 	.word	0x08016bed
 8016b20:	08016c5d 	.word	0x08016c5d
 8016b24:	08016c37 	.word	0x08016c37
  {
    case DPM_RESET_REQ:
      /* Reset*/
      return GUI_STATE_RESET;
 8016b28:	2302      	movs	r3, #2
 8016b2a:	e0a6      	b.n	8016c7a <GUI_SendAnswer+0x1ba>

    case DPM_INIT_REQ:
    {
      Send_DpmInitCnf(port, Processed);
 8016b2c:	7bfb      	ldrb	r3, [r7, #15]
 8016b2e:	4956      	ldr	r1, [pc, #344]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016b30:	4618      	mov	r0, r3
 8016b32:	f000 fde7 	bl	8017704 <Send_DpmInitCnf>
      *pMsgToSend = Processed;
 8016b36:	687b      	ldr	r3, [r7, #4]
 8016b38:	4a53      	ldr	r2, [pc, #332]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016b3a:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8016b3c:	4852      	ldr	r0, [pc, #328]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016b3e:	f7ff fc43 	bl	80163c8 <TLV_get_string_length>
 8016b42:	4603      	mov	r3, r0
 8016b44:	b2db      	uxtb	r3, r3
 8016b46:	3308      	adds	r3, #8
 8016b48:	b2da      	uxtb	r2, r3
 8016b4a:	683b      	ldr	r3, [r7, #0]
 8016b4c:	701a      	strb	r2, [r3, #0]
      TRACER_EMB_Add(*pMsgToSend, *pSizeMsg);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	681a      	ldr	r2, [r3, #0]
 8016b52:	683b      	ldr	r3, [r7, #0]
 8016b54:	781b      	ldrb	r3, [r3, #0]
 8016b56:	4619      	mov	r1, r3
 8016b58:	4610      	mov	r0, r2
 8016b5a:	f002 fbf3 	bl	8019344 <TRACER_EMB_Add>
      GUI_State = GUI_STATE_RUNNING;
 8016b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8016c8c <GUI_SendAnswer+0x1cc>)
 8016b60:	2201      	movs	r2, #1
 8016b62:	701a      	strb	r2, [r3, #0]
      if (0U == port)
 8016b64:	7bfb      	ldrb	r3, [r7, #15]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d105      	bne.n	8016b76 <GUI_SendAnswer+0xb6>
      {
        /* Send a notification all the port */
        (void)GUI_FormatAndSendNotification(USBPD_PORT_0,
 8016b6a:	2270      	movs	r2, #112	@ 0x70
 8016b6c:	f246 0120 	movw	r1, #24608	@ 0x6020
 8016b70:	2000      	movs	r0, #0
 8016b72:	f7ff fe7f 	bl	8016874 <GUI_FormatAndSendNotification>
        (void)GUI_FormatAndSendNotification(USBPD_PORT_1,
                                            GUI_NOTIF_ISCONNECTED | GUI_NOTIF_PE_EVENT | GUI_NOTIF_TIMESTAMP,
                                            USBPD_NOTIFY_ALL);
#endif /* USBPD_PORT_COUNT == 2 */
      }
      return GUI_STATE_INIT;
 8016b76:	2300      	movs	r3, #0
 8016b78:	e07f      	b.n	8016c7a <GUI_SendAnswer+0x1ba>
    }

    case DPM_CONFIG_GET_REQ:
      if (0U != port)
 8016b7a:	7bfb      	ldrb	r3, [r7, #15]
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d008      	beq.n	8016b92 <GUI_SendAnswer+0xd2>
      {
        Send_DpmConfigGetCnf((port - 1U), PtrDataRx, Processed);
 8016b80:	7bfb      	ldrb	r3, [r7, #15]
 8016b82:	3b01      	subs	r3, #1
 8016b84:	b2db      	uxtb	r3, r3
 8016b86:	4a40      	ldr	r2, [pc, #256]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016b88:	493e      	ldr	r1, [pc, #248]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f001 fe16 	bl	80187bc <Send_DpmConfigGetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016b90:	e065      	b.n	8016c5e <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016b92:	7bfb      	ldrb	r3, [r7, #15]
 8016b94:	2205      	movs	r2, #5
 8016b96:	493c      	ldr	r1, [pc, #240]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f002 f8cd 	bl	8018d38 <Send_DpmConfigGetRej>
      break;
 8016b9e:	e05e      	b.n	8016c5e <GUI_SendAnswer+0x19e>
    case DPM_CONFIG_SET_REQ:
      if (0U != port)
 8016ba0:	7bfb      	ldrb	r3, [r7, #15]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d008      	beq.n	8016bb8 <GUI_SendAnswer+0xf8>
      {
        Send_DpmConfigSetCnf((port - 1U), PtrDataRx, Processed);
 8016ba6:	7bfb      	ldrb	r3, [r7, #15]
 8016ba8:	3b01      	subs	r3, #1
 8016baa:	b2db      	uxtb	r3, r3
 8016bac:	4a36      	ldr	r2, [pc, #216]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016bae:	4935      	ldr	r1, [pc, #212]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	f001 fa45 	bl	8018040 <Send_DpmConfigSetCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016bb6:	e052      	b.n	8016c5e <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016bb8:	7bfb      	ldrb	r3, [r7, #15]
 8016bba:	2205      	movs	r2, #5
 8016bbc:	4932      	ldr	r1, [pc, #200]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016bbe:	4618      	mov	r0, r3
 8016bc0:	f002 f8ba 	bl	8018d38 <Send_DpmConfigGetRej>
      break;
 8016bc4:	e04b      	b.n	8016c5e <GUI_SendAnswer+0x19e>
    case DPM_MESSAGE_REQ:
      if (0U != port)
 8016bc6:	7bfb      	ldrb	r3, [r7, #15]
 8016bc8:	2b00      	cmp	r3, #0
 8016bca:	d008      	beq.n	8016bde <GUI_SendAnswer+0x11e>
      {
        Request_MessageReq((port - 1U), PtrDataRx, Processed);
 8016bcc:	7bfb      	ldrb	r3, [r7, #15]
 8016bce:	3b01      	subs	r3, #1
 8016bd0:	b2db      	uxtb	r3, r3
 8016bd2:	4a2d      	ldr	r2, [pc, #180]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016bd4:	492b      	ldr	r1, [pc, #172]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	f000 ff42 	bl	8017a60 <Request_MessageReq>
      }
      else
      {
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016bdc:	e03f      	b.n	8016c5e <GUI_SendAnswer+0x19e>
        Send_DpmMessageRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016bde:	7bfb      	ldrb	r3, [r7, #15]
 8016be0:	2205      	movs	r2, #5
 8016be2:	4929      	ldr	r1, [pc, #164]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016be4:	4618      	mov	r0, r3
 8016be6:	f002 f8c7 	bl	8018d78 <Send_DpmMessageRej>
      break;
 8016bea:	e038      	b.n	8016c5e <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_READ_REQ:
      if (0U != port)
 8016bec:	7bfb      	ldrb	r3, [r7, #15]
 8016bee:	2b00      	cmp	r3, #0
 8016bf0:	d01a      	beq.n	8016c28 <GUI_SendAnswer+0x168>
      {
        /* If size is 0*/
        if ((PtrDataRx[TLV_LENGTH_HIGH_POSITION] == 0U) && (PtrDataRx[TLV_LENGTH_LOW_POSITION] == 0U))
 8016bf2:	4b24      	ldr	r3, [pc, #144]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016bf4:	795b      	ldrb	r3, [r3, #5]
 8016bf6:	2b00      	cmp	r3, #0
 8016bf8:	d10c      	bne.n	8016c14 <GUI_SendAnswer+0x154>
 8016bfa:	4b22      	ldr	r3, [pc, #136]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016bfc:	799b      	ldrb	r3, [r3, #6]
 8016bfe:	2b00      	cmp	r3, #0
 8016c00:	d108      	bne.n	8016c14 <GUI_SendAnswer+0x154>
        {
          Send_DpmRegisterReadCnf((port - 1U), Processed, 0xFF);
 8016c02:	7bfb      	ldrb	r3, [r7, #15]
 8016c04:	3b01      	subs	r3, #1
 8016c06:	b2db      	uxtb	r3, r3
 8016c08:	22ff      	movs	r2, #255	@ 0xff
 8016c0a:	491f      	ldr	r1, [pc, #124]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c0c:	4618      	mov	r0, r3
 8016c0e:	f002 f8d3 	bl	8018db8 <Send_DpmRegisterReadCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016c12:	e024      	b.n	8016c5e <GUI_SendAnswer+0x19e>
          Send_DpmRegisterReadCnf((port - 1U), Processed, PtrDataRx[TLV_VALUE_POSITION]);
 8016c14:	7bfb      	ldrb	r3, [r7, #15]
 8016c16:	3b01      	subs	r3, #1
 8016c18:	b2db      	uxtb	r3, r3
 8016c1a:	4a1a      	ldr	r2, [pc, #104]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016c1c:	79d2      	ldrb	r2, [r2, #7]
 8016c1e:	491a      	ldr	r1, [pc, #104]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c20:	4618      	mov	r0, r3
 8016c22:	f002 f8c9 	bl	8018db8 <Send_DpmRegisterReadCnf>
      break;
 8016c26:	e01a      	b.n	8016c5e <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016c28:	7bfb      	ldrb	r3, [r7, #15]
 8016c2a:	2205      	movs	r2, #5
 8016c2c:	4916      	ldr	r1, [pc, #88]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c2e:	4618      	mov	r0, r3
 8016c30:	f002 f882 	bl	8018d38 <Send_DpmConfigGetRej>
      break;
 8016c34:	e013      	b.n	8016c5e <GUI_SendAnswer+0x19e>
    case DPM_REGISTER_WRITE_REQ:
      if (0U != port)
 8016c36:	7bfb      	ldrb	r3, [r7, #15]
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d008      	beq.n	8016c4e <GUI_SendAnswer+0x18e>
      {
        Send_DpmRegisterWriteCnf((port - 1U), Processed, PtrDataRx);
 8016c3c:	7bfb      	ldrb	r3, [r7, #15]
 8016c3e:	3b01      	subs	r3, #1
 8016c40:	b2db      	uxtb	r3, r3
 8016c42:	4a10      	ldr	r2, [pc, #64]	@ (8016c84 <GUI_SendAnswer+0x1c4>)
 8016c44:	4910      	ldr	r1, [pc, #64]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c46:	4618      	mov	r0, r3
 8016c48:	f002 fa0e 	bl	8019068 <Send_DpmRegisterWriteCnf>
      }
      else
      {
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
      }
      break;
 8016c4c:	e007      	b.n	8016c5e <GUI_SendAnswer+0x19e>
        Send_DpmConfigGetRej(port, Processed, GUI_REJ_DPM_INVALID_PORT_NUMBER);
 8016c4e:	7bfb      	ldrb	r3, [r7, #15]
 8016c50:	2205      	movs	r2, #5
 8016c52:	490d      	ldr	r1, [pc, #52]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c54:	4618      	mov	r0, r3
 8016c56:	f002 f86f 	bl	8018d38 <Send_DpmConfigGetRej>
      break;
 8016c5a:	e000      	b.n	8016c5e <GUI_SendAnswer+0x19e>
    default :
      break;
 8016c5c:	bf00      	nop
  }

  *pMsgToSend = Processed;
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	4a09      	ldr	r2, [pc, #36]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c62:	601a      	str	r2, [r3, #0]
  *pSizeMsg = (uint8_t)(TLV_get_string_length(Processed) + 8U);
 8016c64:	4808      	ldr	r0, [pc, #32]	@ (8016c88 <GUI_SendAnswer+0x1c8>)
 8016c66:	f7ff fbaf 	bl	80163c8 <TLV_get_string_length>
 8016c6a:	4603      	mov	r3, r0
 8016c6c:	b2db      	uxtb	r3, r3
 8016c6e:	3308      	adds	r3, #8
 8016c70:	b2da      	uxtb	r2, r3
 8016c72:	683b      	ldr	r3, [r7, #0]
 8016c74:	701a      	strb	r2, [r3, #0]
  return GUI_State;
 8016c76:	4b05      	ldr	r3, [pc, #20]	@ (8016c8c <GUI_SendAnswer+0x1cc>)
 8016c78:	781b      	ldrb	r3, [r3, #0]
}
 8016c7a:	4618      	mov	r0, r3
 8016c7c:	3710      	adds	r7, #16
 8016c7e:	46bd      	mov	sp, r7
 8016c80:	bd80      	pop	{r7, pc}
 8016c82:	bf00      	nop
 8016c84:	200028c0 	.word	0x200028c0
 8016c88:	200029c0 	.word	0x200029c0
 8016c8c:	20002ac0 	.word	0x20002ac0

08016c90 <GUI_SendNotification>:
  * @param  Value             Value of the notification
  * @retval GUI state
  */
USBPD_GUI_State GUI_SendNotification(uint8_t PortNum, uint8_t **pMsgToSend, uint8_t *pSizeMsg,
                                     uint32_t TypeNotification, uint32_t Value)
{
 8016c90:	b580      	push	{r7, lr}
 8016c92:	b0a6      	sub	sp, #152	@ 0x98
 8016c94:	af00      	add	r7, sp, #0
 8016c96:	60b9      	str	r1, [r7, #8]
 8016c98:	607a      	str	r2, [r7, #4]
 8016c9a:	603b      	str	r3, [r7, #0]
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  USBPD_GUI_State gui_state = GUI_STATE_INIT;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 8016ca6:	4bd6      	ldr	r3, [pc, #856]	@ (8017000 <GUI_SendNotification+0x370>)
 8016ca8:	781b      	ldrb	r3, [r3, #0]
 8016caa:	2b01      	cmp	r3, #1
 8016cac:	f040 8406 	bne.w	80174bc <GUI_SendNotification+0x82c>
  {
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1U), DPM_MESSAGE_IND), TLV_SIZE_MAX, Processed);
 8016cb0:	7bfb      	ldrb	r3, [r7, #15]
 8016cb2:	3301      	adds	r3, #1
 8016cb4:	b2db      	uxtb	r3, r3
 8016cb6:	015b      	lsls	r3, r3, #5
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	f043 030c 	orr.w	r3, r3, #12
 8016cbe:	b2d9      	uxtb	r1, r3
 8016cc0:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016cc4:	4bcf      	ldr	r3, [pc, #828]	@ (8017004 <GUI_SendNotification+0x374>)
 8016cc6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016cca:	f7ff f92e 	bl	8015f2a <TLV_init_encode>

    /* Check PD connection */
    if ((TypeNotification & GUI_NOTIF_ISCONNECTED) == GUI_NOTIF_ISCONNECTED)
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	f003 0320 	and.w	r3, r3, #32
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	f000 8087 	beq.w	8016de8 <GUI_SendNotification+0x158>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                    (uint8_t[]){ DPM_Params[PortNum].PE_Power });
 8016cda:	7bfb      	ldrb	r3, [r7, #15]
 8016cdc:	4aca      	ldr	r2, [pc, #808]	@ (8017008 <GUI_SendNotification+0x378>)
 8016cde:	009b      	lsls	r3, r3, #2
 8016ce0:	4413      	add	r3, r2
 8016ce2:	785b      	ldrb	r3, [r3, #1]
 8016ce4:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016ce8:	b2db      	uxtb	r3, r3
 8016cea:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8016cee:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8016cf2:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016cf6:	2201      	movs	r2, #1
 8016cf8:	2105      	movs	r1, #5
 8016cfa:	f7ff f96f 	bl	8015fdc <TLV_add>
      if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8016cfe:	7bfb      	ldrb	r3, [r7, #15]
 8016d00:	4ac1      	ldr	r2, [pc, #772]	@ (8017008 <GUI_SendNotification+0x378>)
 8016d02:	009b      	lsls	r3, r3, #2
 8016d04:	4413      	add	r3, r2
 8016d06:	785b      	ldrb	r3, [r3, #1]
 8016d08:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8016d0c:	b2db      	uxtb	r3, r3
 8016d0e:	2b01      	cmp	r3, #1
 8016d10:	d16a      	bne.n	8016de8 <GUI_SendNotification+0x158>
      {
        uint8_t rp_value;
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                      (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8016d12:	7bfb      	ldrb	r3, [r7, #15]
 8016d14:	4abc      	ldr	r2, [pc, #752]	@ (8017008 <GUI_SendNotification+0x378>)
 8016d16:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d1a:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8016d1e:	b2db      	uxtb	r3, r3
 8016d20:	f887 307c 	strb.w	r3, [r7, #124]	@ 0x7c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8016d24:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8016d28:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016d2c:	2201      	movs	r2, #1
 8016d2e:	2106      	movs	r1, #6
 8016d30:	f7ff f954 	bl	8015fdc <TLV_add>
        /* Power Role*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                      (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016d34:	7bfb      	ldrb	r3, [r7, #15]
 8016d36:	4ab4      	ldr	r2, [pc, #720]	@ (8017008 <GUI_SendNotification+0x378>)
 8016d38:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d3c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016d40:	b2db      	uxtb	r3, r3
 8016d42:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016d46:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 8016d4a:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016d4e:	2201      	movs	r2, #1
 8016d50:	2108      	movs	r1, #8
 8016d52:	f7ff f943 	bl	8015fdc <TLV_add>
        /* CC Default Current Advertised */
        rp_value = 3; /* (uint8_t)CAD_GetRPValue(PortNum); */
 8016d56:	2303      	movs	r3, #3
 8016d58:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CCDEFAULTCURRENTADVERTISED, 1, &rp_value);
 8016d5c:	f107 037f 	add.w	r3, r7, #127	@ 0x7f
 8016d60:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016d64:	2201      	movs	r2, #1
 8016d66:	2109      	movs	r1, #9
 8016d68:	f7ff f938 	bl	8015fdc <TLV_add>
        if (USBPD_POWER_EXPLICITCONTRACT == DPM_Params[PortNum].PE_Power)
 8016d6c:	7bfb      	ldrb	r3, [r7, #15]
 8016d6e:	4aa6      	ldr	r2, [pc, #664]	@ (8017008 <GUI_SendNotification+0x378>)
 8016d70:	009b      	lsls	r3, r3, #2
 8016d72:	4413      	add	r3, r2
 8016d74:	785b      	ldrb	r3, [r3, #1]
 8016d76:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016d7a:	b2db      	uxtb	r3, r3
 8016d7c:	2b03      	cmp	r3, #3
 8016d7e:	d133      	bne.n	8016de8 <GUI_SendNotification+0x158>
        {
          /* Data Role*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8016d80:	7bfb      	ldrb	r3, [r7, #15]
 8016d82:	4aa1      	ldr	r2, [pc, #644]	@ (8017008 <GUI_SendNotification+0x378>)
 8016d84:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016d88:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8016d8c:	b2db      	uxtb	r3, r3
 8016d8e:	f887 3074 	strb.w	r3, [r7, #116]	@ 0x74
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8016d92:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8016d96:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016d9a:	2201      	movs	r2, #1
 8016d9c:	2107      	movs	r1, #7
 8016d9e:	f7ff f91d 	bl	8015fdc <TLV_add>
          /* Vconn ON*/
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                        (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8016da2:	7bfb      	ldrb	r3, [r7, #15]
 8016da4:	4a98      	ldr	r2, [pc, #608]	@ (8017008 <GUI_SendNotification+0x378>)
 8016da6:	009b      	lsls	r3, r3, #2
 8016da8:	4413      	add	r3, r2
 8016daa:	785b      	ldrb	r3, [r3, #1]
 8016dac:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8016db0:	b2db      	uxtb	r3, r3
 8016db2:	f887 3070 	strb.w	r3, [r7, #112]	@ 0x70
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8016db6:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8016dba:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016dbe:	2201      	movs	r2, #1
 8016dc0:	210a      	movs	r1, #10
 8016dc2:	f7ff f90b 	bl	8015fdc <TLV_add>
          /* PD_Spec Revision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8016dc6:	7bfb      	ldrb	r3, [r7, #15]
 8016dc8:	4a8f      	ldr	r2, [pc, #572]	@ (8017008 <GUI_SendNotification+0x378>)
 8016dca:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016dce:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8016dd2:	b2db      	uxtb	r3, r3
 8016dd4:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8016dd8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8016ddc:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016de0:	2201      	movs	r2, #1
 8016de2:	210d      	movs	r1, #13
 8016de4:	f7ff f8fa 	bl	8015fdc <TLV_add>
        }
      }
    }

    /* Check PD message event */
    if ((TypeNotification & GUI_NOTIF_PE_EVENT) == GUI_NOTIF_PE_EVENT)
 8016de8:	683b      	ldr	r3, [r7, #0]
 8016dea:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8016dee:	2b00      	cmp	r3, #0
 8016df0:	f000 82bd 	beq.w	801736e <GUI_SendNotification+0x6de>
    {
      if ((uint32_t)USBPD_NOTIFY_ALL != Value)
 8016df4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016df8:	2b70      	cmp	r3, #112	@ 0x70
 8016dfa:	f000 8215 	beq.w	8017228 <GUI_SendNotification+0x598>
      {
        /* PD_MessageNotif */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_MESSAGENOTIF, 1, (uint8_t *)&Value);
 8016dfe:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016e02:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8016e06:	2201      	movs	r2, #1
 8016e08:	210e      	movs	r1, #14
 8016e0a:	f7ff f8e7 	bl	8015fdc <TLV_add>

        switch (Value)
 8016e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8016e12:	2b42      	cmp	r3, #66	@ 0x42
 8016e14:	f200 8082 	bhi.w	8016f1c <GUI_SendNotification+0x28c>
 8016e18:	2b07      	cmp	r3, #7
 8016e1a:	f0c0 82a5 	bcc.w	8017368 <GUI_SendNotification+0x6d8>
 8016e1e:	3b07      	subs	r3, #7
 8016e20:	2b3b      	cmp	r3, #59	@ 0x3b
 8016e22:	f200 82a1 	bhi.w	8017368 <GUI_SendNotification+0x6d8>
 8016e26:	a201      	add	r2, pc, #4	@ (adr r2, 8016e2c <GUI_SendNotification+0x19c>)
 8016e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016e2c:	08016fa3 	.word	0x08016fa3
 8016e30:	08017369 	.word	0x08017369
 8016e34:	08017369 	.word	0x08017369
 8016e38:	08017369 	.word	0x08017369
 8016e3c:	08017369 	.word	0x08017369
 8016e40:	08017369 	.word	0x08017369
 8016e44:	08017011 	.word	0x08017011
 8016e48:	08017369 	.word	0x08017369
 8016e4c:	08017369 	.word	0x08017369
 8016e50:	0801706d 	.word	0x0801706d
 8016e54:	08017369 	.word	0x08017369
 8016e58:	08017369 	.word	0x08017369
 8016e5c:	08017369 	.word	0x08017369
 8016e60:	0801718d 	.word	0x0801718d
 8016e64:	0801718d 	.word	0x0801718d
 8016e68:	08017369 	.word	0x08017369
 8016e6c:	08017369 	.word	0x08017369
 8016e70:	08017369 	.word	0x08017369
 8016e74:	08017369 	.word	0x08017369
 8016e78:	08017369 	.word	0x08017369
 8016e7c:	08017369 	.word	0x08017369
 8016e80:	08017369 	.word	0x08017369
 8016e84:	08017369 	.word	0x08017369
 8016e88:	08017369 	.word	0x08017369
 8016e8c:	08017369 	.word	0x08017369
 8016e90:	08017369 	.word	0x08017369
 8016e94:	08017369 	.word	0x08017369
 8016e98:	08017369 	.word	0x08017369
 8016e9c:	08017369 	.word	0x08017369
 8016ea0:	080171b1 	.word	0x080171b1
 8016ea4:	080171b1 	.word	0x080171b1
 8016ea8:	08017369 	.word	0x08017369
 8016eac:	08017369 	.word	0x08017369
 8016eb0:	08017369 	.word	0x08017369
 8016eb4:	08017369 	.word	0x08017369
 8016eb8:	08017369 	.word	0x08017369
 8016ebc:	08017369 	.word	0x08017369
 8016ec0:	08017369 	.word	0x08017369
 8016ec4:	08017369 	.word	0x08017369
 8016ec8:	08017369 	.word	0x08017369
 8016ecc:	08017369 	.word	0x08017369
 8016ed0:	08017369 	.word	0x08017369
 8016ed4:	08017369 	.word	0x08017369
 8016ed8:	08017369 	.word	0x08017369
 8016edc:	08017369 	.word	0x08017369
 8016ee0:	08017369 	.word	0x08017369
 8016ee4:	08017369 	.word	0x08017369
 8016ee8:	08017369 	.word	0x08017369
 8016eec:	08017369 	.word	0x08017369
 8016ef0:	080171d5 	.word	0x080171d5
 8016ef4:	08017369 	.word	0x08017369
 8016ef8:	08017369 	.word	0x08017369
 8016efc:	08017369 	.word	0x08017369
 8016f00:	08017369 	.word	0x08017369
 8016f04:	08017369 	.word	0x08017369
 8016f08:	08017369 	.word	0x08017369
 8016f0c:	08017369 	.word	0x08017369
 8016f10:	08017369 	.word	0x08017369
 8016f14:	08017369 	.word	0x08017369
 8016f18:	080171f9 	.word	0x080171f9
 8016f1c:	2b5a      	cmp	r3, #90	@ 0x5a
 8016f1e:	f040 8223 	bne.w	8017368 <GUI_SendNotification+0x6d8>
        {
          case USBPD_NOTIFY_POWER_STATE_CHANGE :
            /* Is Connected*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8016f22:	7bfb      	ldrb	r3, [r7, #15]
 8016f24:	4a38      	ldr	r2, [pc, #224]	@ (8017008 <GUI_SendNotification+0x378>)
 8016f26:	009b      	lsls	r3, r3, #2
 8016f28:	4413      	add	r3, r2
 8016f2a:	785b      	ldrb	r3, [r3, #1]
 8016f2c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016f30:	b2db      	uxtb	r3, r3
 8016f32:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1,
 8016f36:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8016f3a:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016f3e:	2201      	movs	r2, #1
 8016f40:	2105      	movs	r1, #5
 8016f42:	f7ff f84b 	bl	8015fdc <TLV_add>
            if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8016f46:	7bfb      	ldrb	r3, [r7, #15]
 8016f48:	4a2f      	ldr	r2, [pc, #188]	@ (8017008 <GUI_SendNotification+0x378>)
 8016f4a:	009b      	lsls	r3, r3, #2
 8016f4c:	4413      	add	r3, r2
 8016f4e:	785b      	ldrb	r3, [r3, #1]
 8016f50:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	f040 8208 	bne.w	801736c <GUI_SendNotification+0x6dc>
            {
              /* CC line */
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
                            (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8016f5c:	7bfb      	ldrb	r3, [r7, #15]
 8016f5e:	4a2a      	ldr	r2, [pc, #168]	@ (8017008 <GUI_SendNotification+0x378>)
 8016f60:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016f64:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8016f68:	b2db      	uxtb	r3, r3
 8016f6a:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1,
 8016f6e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8016f72:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016f76:	2201      	movs	r2, #1
 8016f78:	2106      	movs	r1, #6
 8016f7a:	f7ff f82f 	bl	8015fdc <TLV_add>
              /* PowerRole*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                            (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8016f7e:	7bfb      	ldrb	r3, [r7, #15]
 8016f80:	4a21      	ldr	r2, [pc, #132]	@ (8017008 <GUI_SendNotification+0x378>)
 8016f82:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8016f86:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8016f8a:	b2db      	uxtb	r3, r3
 8016f8c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8016f90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8016f94:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016f98:	2201      	movs	r2, #1
 8016f9a:	2108      	movs	r1, #8
 8016f9c:	f7ff f81e 	bl	8015fdc <TLV_add>
            }
            break;
 8016fa0:	e1e4      	b.n	801736c <GUI_SendNotification+0x6dc>
          case USBPD_NOTIFY_GETSNKCAP_ACCEPTED :
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO
 8016fa2:	7bfa      	ldrb	r2, [r7, #15]
 8016fa4:	4919      	ldr	r1, [pc, #100]	@ (801700c <GUI_SendNotification+0x37c>)
 8016fa6:	4613      	mov	r3, r2
 8016fa8:	00db      	lsls	r3, r3, #3
 8016faa:	1a9b      	subs	r3, r3, r2
 8016fac:	011b      	lsls	r3, r3, #4
 8016fae:	440b      	add	r3, r1
 8016fb0:	333c      	adds	r3, #60	@ 0x3c
 8016fb2:	681b      	ldr	r3, [r3, #0]
 8016fb4:	b2db      	uxtb	r3, r3
 8016fb6:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 8016fba:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8016fbe:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016fc2:	2201      	movs	r2, #1
 8016fc4:	2100      	movs	r1, #0
 8016fc6:	f7ff f809 	bl	8015fdc <TLV_add>
            });
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 8016fca:	7bfa      	ldrb	r2, [r7, #15]
 8016fcc:	490f      	ldr	r1, [pc, #60]	@ (801700c <GUI_SendNotification+0x37c>)
 8016fce:	4613      	mov	r3, r2
 8016fd0:	00db      	lsls	r3, r3, #3
 8016fd2:	1a9b      	subs	r3, r3, r2
 8016fd4:	011b      	lsls	r3, r3, #4
 8016fd6:	440b      	add	r3, r1
 8016fd8:	333c      	adds	r3, #60	@ 0x3c
 8016fda:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016fdc:	b29b      	uxth	r3, r3
 8016fde:	009b      	lsls	r3, r3, #2
 8016fe0:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8016fe2:	7bfa      	ldrb	r2, [r7, #15]
 8016fe4:	4613      	mov	r3, r2
 8016fe6:	00db      	lsls	r3, r3, #3
 8016fe8:	1a9b      	subs	r3, r3, r2
 8016fea:	011b      	lsls	r3, r3, #4
 8016fec:	3320      	adds	r3, #32
 8016fee:	4a07      	ldr	r2, [pc, #28]	@ (801700c <GUI_SendNotification+0x37c>)
 8016ff0:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 8016ff2:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8016ff6:	460a      	mov	r2, r1
 8016ff8:	2104      	movs	r1, #4
 8016ffa:	f7fe ffef 	bl	8015fdc <TLV_add>
            break;
 8016ffe:	e1b6      	b.n	801736e <GUI_SendNotification+0x6de>
 8017000:	20002ac0 	.word	0x20002ac0
 8017004:	200029c0 	.word	0x200029c0
 8017008:	20002800 	.word	0x20002800
 801700c:	20002adc 	.word	0x20002adc
          case USBPD_NOTIFY_GETSRCCAP_ACCEPTED :
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 8017010:	7bfa      	ldrb	r2, [r7, #15]
 8017012:	4983      	ldr	r1, [pc, #524]	@ (8017220 <GUI_SendNotification+0x590>)
 8017014:	4613      	mov	r3, r2
 8017016:	00db      	lsls	r3, r3, #3
 8017018:	1a9b      	subs	r3, r3, r2
 801701a:	011b      	lsls	r3, r3, #4
 801701c:	440b      	add	r3, r1
 801701e:	331c      	adds	r3, #28
 8017020:	681b      	ldr	r3, [r3, #0]
 8017022:	b2db      	uxtb	r3, r3
 8017024:	f887 3060 	strb.w	r3, [r7, #96]	@ 0x60
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8017028:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 801702c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017030:	2201      	movs	r2, #1
 8017032:	2103      	movs	r1, #3
 8017034:	f7fe ffd2 	bl	8015fdc <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 8017038:	7bfa      	ldrb	r2, [r7, #15]
 801703a:	4979      	ldr	r1, [pc, #484]	@ (8017220 <GUI_SendNotification+0x590>)
 801703c:	4613      	mov	r3, r2
 801703e:	00db      	lsls	r3, r3, #3
 8017040:	1a9b      	subs	r3, r3, r2
 8017042:	011b      	lsls	r3, r3, #4
 8017044:	440b      	add	r3, r1
 8017046:	331c      	adds	r3, #28
 8017048:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801704a:	b29b      	uxth	r3, r3
 801704c:	009b      	lsls	r3, r3, #2
 801704e:	b299      	uxth	r1, r3
                          (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 8017050:	7bfa      	ldrb	r2, [r7, #15]
 8017052:	4613      	mov	r3, r2
 8017054:	00db      	lsls	r3, r3, #3
 8017056:	1a9b      	subs	r3, r3, r2
 8017058:	011b      	lsls	r3, r3, #4
 801705a:	4a71      	ldr	r2, [pc, #452]	@ (8017220 <GUI_SendNotification+0x590>)
 801705c:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 801705e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017062:	460a      	mov	r2, r1
 8017064:	2102      	movs	r1, #2
 8017066:	f7fe ffb9 	bl	8015fdc <TLV_add>
            break;
 801706a:	e180      	b.n	801736e <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_EXPLICIT_CONTRACT :
            if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 801706c:	7bfb      	ldrb	r3, [r7, #15]
 801706e:	4a6d      	ldr	r2, [pc, #436]	@ (8017224 <GUI_SendNotification+0x594>)
 8017070:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017074:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017078:	b2db      	uxtb	r3, r3
 801707a:	2b00      	cmp	r3, #0
 801707c:	d12c      	bne.n	80170d8 <GUI_SendNotification+0x448>
            {
              /* NumberOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                            (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 801707e:	7bfa      	ldrb	r2, [r7, #15]
 8017080:	4967      	ldr	r1, [pc, #412]	@ (8017220 <GUI_SendNotification+0x590>)
 8017082:	4613      	mov	r3, r2
 8017084:	00db      	lsls	r3, r3, #3
 8017086:	1a9b      	subs	r3, r3, r2
 8017088:	011b      	lsls	r3, r3, #4
 801708a:	440b      	add	r3, r1
 801708c:	331c      	adds	r3, #28
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	b2db      	uxtb	r3, r3
 8017092:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8017096:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 801709a:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801709e:	2201      	movs	r2, #1
 80170a0:	2103      	movs	r1, #3
 80170a2:	f7fe ff9b 	bl	8015fdc <TLV_add>
              /* ListOfRcvSRCPDO*/
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                            (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U),
 80170a6:	7bfa      	ldrb	r2, [r7, #15]
 80170a8:	495d      	ldr	r1, [pc, #372]	@ (8017220 <GUI_SendNotification+0x590>)
 80170aa:	4613      	mov	r3, r2
 80170ac:	00db      	lsls	r3, r3, #3
 80170ae:	1a9b      	subs	r3, r3, r2
 80170b0:	011b      	lsls	r3, r3, #4
 80170b2:	440b      	add	r3, r1
 80170b4:	331c      	adds	r3, #28
 80170b6:	681b      	ldr	r3, [r3, #0]
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80170b8:	b29b      	uxth	r3, r3
 80170ba:	009b      	lsls	r3, r3, #2
 80170bc:	b299      	uxth	r1, r3
                            (uint8_t *) GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 80170be:	7bfa      	ldrb	r2, [r7, #15]
 80170c0:	4613      	mov	r3, r2
 80170c2:	00db      	lsls	r3, r3, #3
 80170c4:	1a9b      	subs	r3, r3, r2
 80170c6:	011b      	lsls	r3, r3, #4
 80170c8:	4a55      	ldr	r2, [pc, #340]	@ (8017220 <GUI_SendNotification+0x590>)
 80170ca:	4413      	add	r3, r2
              (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 80170cc:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80170d0:	460a      	mov	r2, r1
 80170d2:	2102      	movs	r1, #2
 80170d4:	f7fe ff82 	bl	8015fdc <TLV_add>
            }
            /* RDOPosition */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80170d8:	7bfa      	ldrb	r2, [r7, #15]
 80170da:	4951      	ldr	r1, [pc, #324]	@ (8017220 <GUI_SendNotification+0x590>)
 80170dc:	4613      	mov	r3, r2
 80170de:	00db      	lsls	r3, r3, #3
 80170e0:	1a9b      	subs	r3, r3, r2
 80170e2:	011b      	lsls	r3, r3, #4
 80170e4:	440b      	add	r3, r1
 80170e6:	3340      	adds	r3, #64	@ 0x40
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80170f0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80170f4:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80170f8:	2201      	movs	r2, #1
 80170fa:	2101      	movs	r1, #1
 80170fc:	f7fe ff6e 	bl	8015fdc <TLV_add>
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 8017100:	7bfb      	ldrb	r3, [r7, #15]
 8017102:	4a48      	ldr	r2, [pc, #288]	@ (8017224 <GUI_SendNotification+0x594>)
 8017104:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017108:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801710c:	b2db      	uxtb	r3, r3
 801710e:	f887 3058 	strb.w	r3, [r7, #88]	@ 0x58
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 8017112:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8017116:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801711a:	2201      	movs	r2, #1
 801711c:	2107      	movs	r1, #7
 801711e:	f7fe ff5d 	bl	8015fdc <TLV_add>
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017122:	7bfb      	ldrb	r3, [r7, #15]
 8017124:	4a3f      	ldr	r2, [pc, #252]	@ (8017224 <GUI_SendNotification+0x594>)
 8017126:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801712a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801712e:	b2db      	uxtb	r3, r3
 8017130:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 8017134:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8017138:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801713c:	2201      	movs	r2, #1
 801713e:	2108      	movs	r1, #8
 8017140:	f7fe ff4c 	bl	8015fdc <TLV_add>
            /* VconnON*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 8017144:	7bfb      	ldrb	r3, [r7, #15]
 8017146:	4a37      	ldr	r2, [pc, #220]	@ (8017224 <GUI_SendNotification+0x594>)
 8017148:	009b      	lsls	r3, r3, #2
 801714a:	4413      	add	r3, r2
 801714c:	785b      	ldrb	r3, [r3, #1]
 801714e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017152:	b2db      	uxtb	r3, r3
 8017154:	f887 3050 	strb.w	r3, [r7, #80]	@ 0x50
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 8017158:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 801715c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017160:	2201      	movs	r2, #1
 8017162:	210a      	movs	r1, #10
 8017164:	f7fe ff3a 	bl	8015fdc <TLV_add>
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8017168:	7bfb      	ldrb	r3, [r7, #15]
 801716a:	4a2e      	ldr	r2, [pc, #184]	@ (8017224 <GUI_SendNotification+0x594>)
 801716c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017170:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017174:	b2db      	uxtb	r3, r3
 8017176:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 801717a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 801717e:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017182:	2201      	movs	r2, #1
 8017184:	210d      	movs	r1, #13
 8017186:	f7fe ff29 	bl	8015fdc <TLV_add>
            break;
 801718a:	e0f0      	b.n	801736e <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_POWER_SWAP_TO_SNK_DONE :
          case USBPD_NOTIFY_POWER_SWAP_TO_SRC_DONE :
            /* PowerRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 801718c:	7bfb      	ldrb	r3, [r7, #15]
 801718e:	4a25      	ldr	r2, [pc, #148]	@ (8017224 <GUI_SendNotification+0x594>)
 8017190:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017194:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017198:	b2db      	uxtb	r3, r3
 801719a:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1,
 801719e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80171a2:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80171a6:	2201      	movs	r2, #1
 80171a8:	2108      	movs	r1, #8
 80171aa:	f7fe ff17 	bl	8015fdc <TLV_add>
            break;
 80171ae:	e0de      	b.n	801736e <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_DATAROLESWAP_UFP :
          case USBPD_NOTIFY_DATAROLESWAP_DFP :
            /* DataRole*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_DataRole });
 80171b0:	7bfb      	ldrb	r3, [r7, #15]
 80171b2:	4a1c      	ldr	r2, [pc, #112]	@ (8017224 <GUI_SendNotification+0x594>)
 80171b4:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80171b8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80171bc:	b2db      	uxtb	r3, r3
 80171be:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_DATAROLE, 1,
 80171c2:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 80171c6:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80171ca:	2201      	movs	r2, #1
 80171cc:	2107      	movs	r1, #7
 80171ce:	f7fe ff05 	bl	8015fdc <TLV_add>
            break;
 80171d2:	e0cc      	b.n	801736e <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_PD_SPECIFICATION_CHANGE :
            /* PD_SpecRevision */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                          (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 80171d4:	7bfb      	ldrb	r3, [r7, #15]
 80171d6:	4a13      	ldr	r2, [pc, #76]	@ (8017224 <GUI_SendNotification+0x594>)
 80171d8:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80171dc:	f3c3 0301 	ubfx	r3, r3, #0, #2
 80171e0:	b2db      	uxtb	r3, r3
 80171e2:	f887 3040 	strb.w	r3, [r7, #64]	@ 0x40
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 80171e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80171ea:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80171ee:	2201      	movs	r2, #1
 80171f0:	210d      	movs	r1, #13
 80171f2:	f7fe fef3 	bl	8015fdc <TLV_add>
            break;
 80171f6:	e0ba      	b.n	801736e <GUI_SendNotification+0x6de>
          case USBPD_NOTIFY_VCONN_SWAP_COMPLETE :
            /* VconnON */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
                          (uint8_t[]) { DPM_Params[PortNum].VconnStatus });
 80171f8:	7bfb      	ldrb	r3, [r7, #15]
 80171fa:	4a0a      	ldr	r2, [pc, #40]	@ (8017224 <GUI_SendNotification+0x594>)
 80171fc:	009b      	lsls	r3, r3, #2
 80171fe:	4413      	add	r3, r2
 8017200:	785b      	ldrb	r3, [r3, #1]
 8017202:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8017206:	b2db      	uxtb	r3, r3
 8017208:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VCONNON, 1,
 801720c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8017210:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017214:	2201      	movs	r2, #1
 8017216:	210a      	movs	r1, #10
 8017218:	f7fe fee0 	bl	8015fdc <TLV_add>
            break;
 801721c:	e0a7      	b.n	801736e <GUI_SendNotification+0x6de>
 801721e:	bf00      	nop
 8017220:	20002adc 	.word	0x20002adc
 8017224:	20002800 	.word	0x20002800
        }
      }
      else
      {
        /* Send all the indication parameters if connected */
        if (USBPD_TRUE == DPM_Params[PortNum].PE_IsConnected)
 8017228:	7bfb      	ldrb	r3, [r7, #15]
 801722a:	4aa7      	ldr	r2, [pc, #668]	@ (80174c8 <GUI_SendNotification+0x838>)
 801722c:	009b      	lsls	r3, r3, #2
 801722e:	4413      	add	r3, r2
 8017230:	785b      	ldrb	r3, [r3, #1]
 8017232:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8017236:	b2db      	uxtb	r3, r3
 8017238:	2b01      	cmp	r3, #1
 801723a:	f040 8098 	bne.w	801736e <GUI_SendNotification+0x6de>
        {
#if defined(_VDM)
          uint32_t index;
#endif /* _VDM */

          if (0U != GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO)
 801723e:	7bfa      	ldrb	r2, [r7, #15]
 8017240:	49a2      	ldr	r1, [pc, #648]	@ (80174cc <GUI_SendNotification+0x83c>)
 8017242:	4613      	mov	r3, r2
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	1a9b      	subs	r3, r3, r2
 8017248:	011b      	lsls	r3, r3, #4
 801724a:	440b      	add	r3, r1
 801724c:	333c      	adds	r3, #60	@ 0x3c
 801724e:	681b      	ldr	r3, [r3, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d02d      	beq.n	80172b0 <GUI_SendNotification+0x620>
          {
            /* NumberOfRcvSNKPDO */
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO });
 8017254:	7bfa      	ldrb	r2, [r7, #15]
 8017256:	499d      	ldr	r1, [pc, #628]	@ (80174cc <GUI_SendNotification+0x83c>)
 8017258:	4613      	mov	r3, r2
 801725a:	00db      	lsls	r3, r3, #3
 801725c:	1a9b      	subs	r3, r3, r2
 801725e:	011b      	lsls	r3, r3, #4
 8017260:	440b      	add	r3, r1
 8017262:	333c      	adds	r3, #60	@ 0x3c
 8017264:	681b      	ldr	r3, [r3, #0]
 8017266:	b2db      	uxtb	r3, r3
 8017268:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSNKPDO, 1,
 801726c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017270:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017274:	2201      	movs	r2, #1
 8017276:	2100      	movs	r1, #0
 8017278:	f7fe feb0 	bl	8015fdc <TLV_add>
            /* ListOfRcvSNKPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
                          (uint16_t)(GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO * 4U),
 801727c:	7bfa      	ldrb	r2, [r7, #15]
 801727e:	4993      	ldr	r1, [pc, #588]	@ (80174cc <GUI_SendNotification+0x83c>)
 8017280:	4613      	mov	r3, r2
 8017282:	00db      	lsls	r3, r3, #3
 8017284:	1a9b      	subs	r3, r3, r2
 8017286:	011b      	lsls	r3, r3, #4
 8017288:	440b      	add	r3, r1
 801728a:	333c      	adds	r3, #60	@ 0x3c
 801728c:	681b      	ldr	r3, [r3, #0]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 801728e:	b29b      	uxth	r3, r3
 8017290:	009b      	lsls	r3, r3, #2
 8017292:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSNKPDO);
 8017294:	7bfa      	ldrb	r2, [r7, #15]
 8017296:	4613      	mov	r3, r2
 8017298:	00db      	lsls	r3, r3, #3
 801729a:	1a9b      	subs	r3, r3, r2
 801729c:	011b      	lsls	r3, r3, #4
 801729e:	3320      	adds	r3, #32
 80172a0:	4a8a      	ldr	r2, [pc, #552]	@ (80174cc <GUI_SendNotification+0x83c>)
 80172a2:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSNKPDO,
 80172a4:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80172a8:	460a      	mov	r2, r1
 80172aa:	2104      	movs	r1, #4
 80172ac:	f7fe fe96 	bl	8015fdc <TLV_add>
          }
          /* RDOPosition */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
                        (uint8_t[]) { GUI_SaveInformation[PortNum].RDOPosition });
 80172b0:	7bfa      	ldrb	r2, [r7, #15]
 80172b2:	4986      	ldr	r1, [pc, #536]	@ (80174cc <GUI_SendNotification+0x83c>)
 80172b4:	4613      	mov	r3, r2
 80172b6:	00db      	lsls	r3, r3, #3
 80172b8:	1a9b      	subs	r3, r3, r2
 80172ba:	011b      	lsls	r3, r3, #4
 80172bc:	440b      	add	r3, r1
 80172be:	3340      	adds	r3, #64	@ 0x40
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	b2db      	uxtb	r3, r3
 80172c4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_RDOPOSITION, 1,
 80172c8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80172cc:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80172d0:	2201      	movs	r2, #1
 80172d2:	2101      	movs	r1, #1
 80172d4:	f7fe fe82 	bl	8015fdc <TLV_add>
          if (USBPD_PORTPOWERROLE_SNK == DPM_Params[PortNum].PE_PowerRole)
 80172d8:	7bfb      	ldrb	r3, [r7, #15]
 80172da:	4a7b      	ldr	r2, [pc, #492]	@ (80174c8 <GUI_SendNotification+0x838>)
 80172dc:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80172e0:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80172e4:	b2db      	uxtb	r3, r3
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d12c      	bne.n	8017344 <GUI_SendNotification+0x6b4>
          {
            /* NumberOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
                          (uint8_t[]) { GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO });
 80172ea:	7bfa      	ldrb	r2, [r7, #15]
 80172ec:	4977      	ldr	r1, [pc, #476]	@ (80174cc <GUI_SendNotification+0x83c>)
 80172ee:	4613      	mov	r3, r2
 80172f0:	00db      	lsls	r3, r3, #3
 80172f2:	1a9b      	subs	r3, r3, r2
 80172f4:	011b      	lsls	r3, r3, #4
 80172f6:	440b      	add	r3, r1
 80172f8:	331c      	adds	r3, #28
 80172fa:	681b      	ldr	r3, [r3, #0]
 80172fc:	b2db      	uxtb	r3, r3
 80172fe:	f887 3020 	strb.w	r3, [r7, #32]
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_NUMBEROFRCVSRCPDO, 1,
 8017302:	f107 0320 	add.w	r3, r7, #32
 8017306:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801730a:	2201      	movs	r2, #1
 801730c:	2103      	movs	r1, #3
 801730e:	f7fe fe65 	bl	8015fdc <TLV_add>
            /* ListOfRcvSRCPDO*/
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
                          (uint16_t)GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO * 4U,
 8017312:	7bfa      	ldrb	r2, [r7, #15]
 8017314:	496d      	ldr	r1, [pc, #436]	@ (80174cc <GUI_SendNotification+0x83c>)
 8017316:	4613      	mov	r3, r2
 8017318:	00db      	lsls	r3, r3, #3
 801731a:	1a9b      	subs	r3, r3, r2
 801731c:	011b      	lsls	r3, r3, #4
 801731e:	440b      	add	r3, r1
 8017320:	331c      	adds	r3, #28
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	b29b      	uxth	r3, r3
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8017326:	009b      	lsls	r3, r3, #2
 8017328:	b299      	uxth	r1, r3
                          (uint8_t *)GUI_SaveInformation[PortNum].ListOfRcvSRCPDO);
 801732a:	7bfa      	ldrb	r2, [r7, #15]
 801732c:	4613      	mov	r3, r2
 801732e:	00db      	lsls	r3, r3, #3
 8017330:	1a9b      	subs	r3, r3, r2
 8017332:	011b      	lsls	r3, r3, #4
 8017334:	4a65      	ldr	r2, [pc, #404]	@ (80174cc <GUI_SendNotification+0x83c>)
 8017336:	4413      	add	r3, r2
            (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_LISTOFRCVSRCPDO,
 8017338:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801733c:	460a      	mov	r2, r1
 801733e:	2102      	movs	r1, #2
 8017340:	f7fe fe4c 	bl	8015fdc <TLV_add>
          }
          /* PD_SpecRevision */
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
                        (uint8_t[]) { DPM_Params[PortNum].PE_SpecRevision });
 8017344:	7bfb      	ldrb	r3, [r7, #15]
 8017346:	4a60      	ldr	r2, [pc, #384]	@ (80174c8 <GUI_SendNotification+0x838>)
 8017348:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 801734c:	f3c3 0301 	ubfx	r3, r3, #0, #2
 8017350:	b2db      	uxtb	r3, r3
 8017352:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
          (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_PD_SPECREVISION, 1,
 8017356:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801735a:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801735e:	2201      	movs	r2, #1
 8017360:	210d      	movs	r1, #13
 8017362:	f7fe fe3b 	bl	8015fdc <TLV_add>
 8017366:	e002      	b.n	801736e <GUI_SendNotification+0x6de>
            break;
 8017368:	bf00      	nop
 801736a:	e000      	b.n	801736e <GUI_SendNotification+0x6de>
            break;
 801736c:	bf00      	nop
        }
      }
    }

    /* Check if notification linked to a measure report */
    if ((TypeNotification & GUI_NOTIF_MEASUREREPORTING) == GUI_NOTIF_MEASUREREPORTING)
 801736e:	683b      	ldr	r3, [r7, #0]
 8017370:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017374:	2b00      	cmp	r3, #0
 8017376:	d03a      	beq.n	80173ee <GUI_SendNotification+0x75e>
    {
      uint32_t vsense = 0;
 8017378:	2300      	movs	r3, #0
 801737a:	61fb      	str	r3, [r7, #28]
      int32_t isense = 0;
 801737c:	2300      	movs	r3, #0
 801737e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 8017382:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017386:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 801738a:	2204      	movs	r2, #4
 801738c:	2113      	movs	r1, #19
 801738e:	f7fe fe25 	bl	8015fdc <TLV_add>

      if (NULL != pCB_GetVoltage)
 8017392:	4b4f      	ldr	r3, [pc, #316]	@ (80174d0 <GUI_SendNotification+0x840>)
 8017394:	681b      	ldr	r3, [r3, #0]
 8017396:	2b00      	cmp	r3, #0
 8017398:	d006      	beq.n	80173a8 <GUI_SendNotification+0x718>
      {
        vsense = pCB_GetVoltage(PortNum);
 801739a:	4b4d      	ldr	r3, [pc, #308]	@ (80174d0 <GUI_SendNotification+0x840>)
 801739c:	681b      	ldr	r3, [r3, #0]
 801739e:	7bfa      	ldrb	r2, [r7, #15]
 80173a0:	4610      	mov	r0, r2
 80173a2:	4798      	blx	r3
 80173a4:	4603      	mov	r3, r0
 80173a6:	61fb      	str	r3, [r7, #28]
      }
      if (NULL != pCB_GetVoltage)
 80173a8:	4b49      	ldr	r3, [pc, #292]	@ (80174d0 <GUI_SendNotification+0x840>)
 80173aa:	681b      	ldr	r3, [r3, #0]
 80173ac:	2b00      	cmp	r3, #0
 80173ae:	d010      	beq.n	80173d2 <GUI_SendNotification+0x742>
      {
        isense = pCB_GetCurrent(PortNum);
 80173b0:	4b48      	ldr	r3, [pc, #288]	@ (80174d4 <GUI_SendNotification+0x844>)
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	7bfa      	ldrb	r2, [r7, #15]
 80173b6:	4610      	mov	r0, r2
 80173b8:	4798      	blx	r3
 80173ba:	4603      	mov	r3, r0
 80173bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        if (isense < 0)
 80173c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80173c4:	2b00      	cmp	r3, #0
 80173c6:	da04      	bge.n	80173d2 <GUI_SendNotification+0x742>
        {
          isense = -isense;
 80173c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80173cc:	425b      	negs	r3, r3
 80173ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
        }
      }

      /* VBUS & IBUS level */
      vsense = ((uint32_t)(isense) << 16) | vsense;
 80173d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80173d6:	041a      	lsls	r2, r3, #16
 80173d8:	69fb      	ldr	r3, [r7, #28]
 80173da:	4313      	orrs	r3, r2
 80173dc:	61fb      	str	r3, [r7, #28]
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_VBUS_LEVEL, 4, (uint8_t *)&vsense);
 80173de:	f107 031c 	add.w	r3, r7, #28
 80173e2:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80173e6:	2204      	movs	r2, #4
 80173e8:	210c      	movs	r1, #12
 80173ea:	f7fe fdf7 	bl	8015fdc <TLV_add>
    }

    /* Check if timestamp */
    if ((TypeNotification & GUI_NOTIF_TIMESTAMP) == GUI_NOTIF_TIMESTAMP)
 80173ee:	683b      	ldr	r3, [r7, #0]
 80173f0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80173f4:	2b00      	cmp	r3, #0
 80173f6:	d007      	beq.n	8017408 <GUI_SendNotification+0x778>
    {
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_TIMESTAMP, 4, (uint8_t *)&Value);
 80173f8:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 80173fc:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8017400:	2204      	movs	r2, #4
 8017402:	2113      	movs	r1, #19
 8017404:	f7fe fdea 	bl	8015fdc <TLV_add>
    }

    /* Check if power change */
    if ((TypeNotification & GUI_NOTIF_POWER_EVENT) == GUI_NOTIF_POWER_EVENT)
 8017408:	683b      	ldr	r3, [r7, #0]
 801740a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801740e:	2b00      	cmp	r3, #0
 8017410:	d03a      	beq.n	8017488 <GUI_SendNotification+0x7f8>
    {
      /* Is Connected*/
      (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_ISCONNECTED, 1, (uint8_t[]) { DPM_Params[PortNum].PE_Power });
 8017412:	7bfb      	ldrb	r3, [r7, #15]
 8017414:	4a2c      	ldr	r2, [pc, #176]	@ (80174c8 <GUI_SendNotification+0x838>)
 8017416:	009b      	lsls	r3, r3, #2
 8017418:	4413      	add	r3, r2
 801741a:	785b      	ldrb	r3, [r3, #1]
 801741c:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017420:	b2db      	uxtb	r3, r3
 8017422:	763b      	strb	r3, [r7, #24]
 8017424:	f107 0318 	add.w	r3, r7, #24
 8017428:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 801742c:	2201      	movs	r2, #1
 801742e:	2105      	movs	r1, #5
 8017430:	f7fe fdd4 	bl	8015fdc <TLV_add>
      if (USBPD_POWER_NO == DPM_Params[PortNum].PE_Power)
 8017434:	7bfb      	ldrb	r3, [r7, #15]
 8017436:	4a24      	ldr	r2, [pc, #144]	@ (80174c8 <GUI_SendNotification+0x838>)
 8017438:	009b      	lsls	r3, r3, #2
 801743a:	4413      	add	r3, r2
 801743c:	785b      	ldrb	r3, [r3, #1]
 801743e:	f3c3 0302 	ubfx	r3, r3, #0, #3
 8017442:	b2db      	uxtb	r3, r3
 8017444:	2b00      	cmp	r3, #0
 8017446:	d11f      	bne.n	8017488 <GUI_SendNotification+0x7f8>
      {
        /* CC line */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_CC, 1, (uint8_t[]) { DPM_Params[PortNum].ActiveCCIs });
 8017448:	7bfb      	ldrb	r3, [r7, #15]
 801744a:	4a1f      	ldr	r2, [pc, #124]	@ (80174c8 <GUI_SendNotification+0x838>)
 801744c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017450:	f3c3 1381 	ubfx	r3, r3, #6, #2
 8017454:	b2db      	uxtb	r3, r3
 8017456:	753b      	strb	r3, [r7, #20]
 8017458:	f107 0314 	add.w	r3, r7, #20
 801745c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017460:	2201      	movs	r2, #1
 8017462:	2106      	movs	r1, #6
 8017464:	f7fe fdba 	bl	8015fdc <TLV_add>
        /* PowerRole*/
        (void)TLV_add(&send_tlv, (uint8_t)GUI_IND_POWERROLE, 1, (uint8_t[]) { DPM_Params[PortNum].PE_PowerRole });
 8017468:	7bfb      	ldrb	r3, [r7, #15]
 801746a:	4a17      	ldr	r2, [pc, #92]	@ (80174c8 <GUI_SendNotification+0x838>)
 801746c:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 8017470:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8017474:	b2db      	uxtb	r3, r3
 8017476:	743b      	strb	r3, [r7, #16]
 8017478:	f107 0310 	add.w	r3, r7, #16
 801747c:	f107 0084 	add.w	r0, r7, #132	@ 0x84
 8017480:	2201      	movs	r2, #1
 8017482:	2108      	movs	r1, #8
 8017484:	f7fe fdaa 	bl	8015fdc <TLV_add>
      }
    }

    TLV_deinit_encode(&send_tlv);
 8017488:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 801748c:	4618      	mov	r0, r3
 801748e:	f7fe feef 	bl	8016270 <TLV_deinit_encode>

    if (0U != TLV_get_string_length(Processed))
 8017492:	4811      	ldr	r0, [pc, #68]	@ (80174d8 <GUI_SendNotification+0x848>)
 8017494:	f7fe ff98 	bl	80163c8 <TLV_get_string_length>
 8017498:	4603      	mov	r3, r0
 801749a:	2b00      	cmp	r3, #0
 801749c:	d00e      	beq.n	80174bc <GUI_SendNotification+0x82c>
    {
      *pMsgToSend = Processed;
 801749e:	68bb      	ldr	r3, [r7, #8]
 80174a0:	4a0d      	ldr	r2, [pc, #52]	@ (80174d8 <GUI_SendNotification+0x848>)
 80174a2:	601a      	str	r2, [r3, #0]
      *pSizeMsg = (uint8_t)TLV_get_string_length(Processed) + 8U;
 80174a4:	480c      	ldr	r0, [pc, #48]	@ (80174d8 <GUI_SendNotification+0x848>)
 80174a6:	f7fe ff8f 	bl	80163c8 <TLV_get_string_length>
 80174aa:	4603      	mov	r3, r0
 80174ac:	b2db      	uxtb	r3, r3
 80174ae:	3308      	adds	r3, #8
 80174b0:	b2da      	uxtb	r2, r3
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	701a      	strb	r2, [r3, #0]
      gui_state = GUI_STATE_RUNNING;
 80174b6:	2301      	movs	r3, #1
 80174b8:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97

    }

  }

  return gui_state;
 80174bc:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
}
 80174c0:	4618      	mov	r0, r3
 80174c2:	3798      	adds	r7, #152	@ 0x98
 80174c4:	46bd      	mov	sp, r7
 80174c6:	bd80      	pop	{r7, pc}
 80174c8:	20002800 	.word	0x20002800
 80174cc:	20002adc 	.word	0x20002adc
 80174d0:	20002ad0 	.word	0x20002ad0
 80174d4:	20002ad4 	.word	0x20002ad4
 80174d8:	200029c0 	.word	0x200029c0

080174dc <GUI_PostNotificationMessage>:
  * @param  PortNum   Port number
  * @param  EventVal Event vale @ref USBPD_NotifyEventValue_TypeDef
  * @retval None
  */
void GUI_PostNotificationMessage(uint8_t PortNum, uint16_t EventVal)
{
 80174dc:	b580      	push	{r7, lr}
 80174de:	b084      	sub	sp, #16
 80174e0:	af00      	add	r7, sp, #0
 80174e2:	4603      	mov	r3, r0
 80174e4:	460a      	mov	r2, r1
 80174e6:	71fb      	strb	r3, [r7, #7]
 80174e8:	4613      	mov	r3, r2
 80174ea:	80bb      	strh	r3, [r7, #4]
      = (GUI_SaveInformation[PortNum].RequestedVoltage * GUI_SaveInformation[PortNum].RequestedCurrent) / 1000U;
  }
#endif /* _SNK || _DRP */

  /* Send a notitification only if GUI is running */
  if (GUI_State == GUI_STATE_RUNNING)
 80174ec:	4b0b      	ldr	r3, [pc, #44]	@ (801751c <GUI_PostNotificationMessage+0x40>)
 80174ee:	781b      	ldrb	r3, [r3, #0]
 80174f0:	2b01      	cmp	r3, #1
 80174f2:	d10e      	bne.n	8017512 <GUI_PostNotificationMessage+0x36>
  {
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
                     | ((uint32_t)PortNum << GUI_PE_PORT_NUM_Pos)
 80174f4:	79fb      	ldrb	r3, [r7, #7]
 80174f6:	061a      	lsls	r2, r3, #24
                     | ((uint32_t)EventVal << GUI_PE_NOTIF_Pos);
 80174f8:	88bb      	ldrh	r3, [r7, #4]
 80174fa:	011b      	lsls	r3, r3, #4
 80174fc:	4313      	orrs	r3, r2
    uint32_t event = (uint32_t)GUI_USER_EVENT_GUI
 80174fe:	f043 0301 	orr.w	r3, r3, #1
 8017502:	60fb      	str	r3, [r7, #12]
#if defined(_RTOS)
#if (osCMSIS < 0x20000U)
    (void)osMessagePut(GUIMsgBox, event, 0);
 8017504:	4b06      	ldr	r3, [pc, #24]	@ (8017520 <GUI_PostNotificationMessage+0x44>)
 8017506:	681b      	ldr	r3, [r3, #0]
 8017508:	2200      	movs	r2, #0
 801750a:	68f9      	ldr	r1, [r7, #12]
 801750c:	4618      	mov	r0, r3
 801750e:	f7fa f8c3 	bl	8011698 <osMessagePut>
    GUI_RXProcess(GUI_Flag);
    GUI_Flag = GUI_USER_EVENT_NONE;
#endif /* USE_STM32_UTILITY_OS */
#endif /* _RTOS */
  }
}
 8017512:	bf00      	nop
 8017514:	3710      	adds	r7, #16
 8017516:	46bd      	mov	sp, r7
 8017518:	bd80      	pop	{r7, pc}
 801751a:	bf00      	nop
 801751c:	20002ac0 	.word	0x20002ac0
 8017520:	20002ac4 	.word	0x20002ac4

08017524 <GUI_SaveInfo>:
  * @param  Ptr     Pointer on the data
  * @param  Size    Nb of bytes to be updated in GUI
  * @retval None
  */
void GUI_SaveInfo(uint8_t PortNum, uint8_t DataId, uint8_t *Ptr, uint32_t Size)
{
 8017524:	b580      	push	{r7, lr}
 8017526:	b08a      	sub	sp, #40	@ 0x28
 8017528:	af00      	add	r7, sp, #0
 801752a:	60ba      	str	r2, [r7, #8]
 801752c:	607b      	str	r3, [r7, #4]
 801752e:	4603      	mov	r3, r0
 8017530:	73fb      	strb	r3, [r7, #15]
 8017532:	460b      	mov	r3, r1
 8017534:	73bb      	strb	r3, [r7, #14]
  uint32_t index;

  /* Check type of information targeted by request */
  switch (DataId)
 8017536:	7bbb      	ldrb	r3, [r7, #14]
 8017538:	3b02      	subs	r3, #2
 801753a:	2b11      	cmp	r3, #17
 801753c:	f200 80d3 	bhi.w	80176e6 <GUI_SaveInfo+0x1c2>
 8017540:	a201      	add	r2, pc, #4	@ (adr r2, 8017548 <GUI_SaveInfo+0x24>)
 8017542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017546:	bf00      	nop
 8017548:	08017591 	.word	0x08017591
 801754c:	080176e7 	.word	0x080176e7
 8017550:	080175ed 	.word	0x080175ed
 8017554:	08017647 	.word	0x08017647
 8017558:	080176a3 	.word	0x080176a3
 801755c:	080176e7 	.word	0x080176e7
 8017560:	080176e7 	.word	0x080176e7
 8017564:	080176e7 	.word	0x080176e7
 8017568:	080176e7 	.word	0x080176e7
 801756c:	080176e7 	.word	0x080176e7
 8017570:	080176e7 	.word	0x080176e7
 8017574:	080176e7 	.word	0x080176e7
 8017578:	080176e7 	.word	0x080176e7
 801757c:	080176e7 	.word	0x080176e7
 8017580:	080176e7 	.word	0x080176e7
 8017584:	080176e7 	.word	0x080176e7
 8017588:	080176e7 	.word	0x080176e7
 801758c:	080176c7 	.word	0x080176c7
  {
    /* Case requested DO position Data information :
    */
    case USBPD_CORE_DATATYPE_RDO_POSITION :
      if (Size == 4U)
 8017590:	687b      	ldr	r3, [r7, #4]
 8017592:	2b04      	cmp	r3, #4
 8017594:	f040 80a9 	bne.w	80176ea <GUI_SaveInfo+0x1c6>
      {
        uint8_t *temp;
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPosition;
 8017598:	7bfa      	ldrb	r2, [r7, #15]
 801759a:	4613      	mov	r3, r2
 801759c:	00db      	lsls	r3, r3, #3
 801759e:	1a9b      	subs	r3, r3, r2
 80175a0:	011b      	lsls	r3, r3, #4
 80175a2:	3340      	adds	r3, #64	@ 0x40
 80175a4:	4a56      	ldr	r2, [pc, #344]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80175a6:	4413      	add	r3, r2
 80175a8:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 80175aa:	687a      	ldr	r2, [r7, #4]
 80175ac:	68b9      	ldr	r1, [r7, #8]
 80175ae:	6938      	ldr	r0, [r7, #16]
 80175b0:	f003 f873 	bl	801a69a <memcpy>
        GUI_SaveInformation[PortNum].RDOPositionPrevious = *Ptr;
 80175b4:	68bb      	ldr	r3, [r7, #8]
 80175b6:	781b      	ldrb	r3, [r3, #0]
 80175b8:	7bfa      	ldrb	r2, [r7, #15]
 80175ba:	4618      	mov	r0, r3
 80175bc:	4950      	ldr	r1, [pc, #320]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80175be:	4613      	mov	r3, r2
 80175c0:	00db      	lsls	r3, r3, #3
 80175c2:	1a9b      	subs	r3, r3, r2
 80175c4:	011b      	lsls	r3, r3, #4
 80175c6:	440b      	add	r3, r1
 80175c8:	334c      	adds	r3, #76	@ 0x4c
 80175ca:	6018      	str	r0, [r3, #0]
        temp = (uint8_t *)&GUI_SaveInformation[PortNum].RDOPositionPrevious;
 80175cc:	7bfa      	ldrb	r2, [r7, #15]
 80175ce:	4613      	mov	r3, r2
 80175d0:	00db      	lsls	r3, r3, #3
 80175d2:	1a9b      	subs	r3, r3, r2
 80175d4:	011b      	lsls	r3, r3, #4
 80175d6:	3348      	adds	r3, #72	@ 0x48
 80175d8:	4a49      	ldr	r2, [pc, #292]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80175da:	4413      	add	r3, r2
 80175dc:	3304      	adds	r3, #4
 80175de:	613b      	str	r3, [r7, #16]
        (void)memcpy(temp, Ptr, Size);
 80175e0:	687a      	ldr	r2, [r7, #4]
 80175e2:	68b9      	ldr	r1, [r7, #8]
 80175e4:	6938      	ldr	r0, [r7, #16]
 80175e6:	f003 f858 	bl	801a69a <memcpy>
      }
      break;
 80175ea:	e07e      	b.n	80176ea <GUI_SaveInfo+0x1c6>

    /* Case Received Source PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SRC_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 80175ec:	687b      	ldr	r3, [r7, #4]
 80175ee:	2b1c      	cmp	r3, #28
 80175f0:	d87d      	bhi.n	80176ee <GUI_SaveInfo+0x1ca>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSRCPDO = (Size / 4U);
 80175f2:	7bfa      	ldrb	r2, [r7, #15]
 80175f4:	687b      	ldr	r3, [r7, #4]
 80175f6:	0899      	lsrs	r1, r3, #2
 80175f8:	4841      	ldr	r0, [pc, #260]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80175fa:	4613      	mov	r3, r2
 80175fc:	00db      	lsls	r3, r3, #3
 80175fe:	1a9b      	subs	r3, r3, r2
 8017600:	011b      	lsls	r3, r3, #4
 8017602:	4403      	add	r3, r0
 8017604:	331c      	adds	r3, #28
 8017606:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8017608:	2300      	movs	r3, #0
 801760a:	627b      	str	r3, [r7, #36]	@ 0x24
 801760c:	e015      	b.n	801763a <GUI_SaveInfo+0x116>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSRCPDO[index];
 801760e:	7bfa      	ldrb	r2, [r7, #15]
 8017610:	4613      	mov	r3, r2
 8017612:	00db      	lsls	r3, r3, #3
 8017614:	1a9b      	subs	r3, r3, r2
 8017616:	009b      	lsls	r3, r3, #2
 8017618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801761a:	4413      	add	r3, r2
 801761c:	009b      	lsls	r3, r3, #2
 801761e:	4a38      	ldr	r2, [pc, #224]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 8017620:	4413      	add	r3, r2
 8017622:	617b      	str	r3, [r7, #20]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8017624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017626:	009b      	lsls	r3, r3, #2
 8017628:	68ba      	ldr	r2, [r7, #8]
 801762a:	4413      	add	r3, r2
 801762c:	681b      	ldr	r3, [r3, #0]
 801762e:	461a      	mov	r2, r3
 8017630:	697b      	ldr	r3, [r7, #20]
 8017632:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 8017634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017636:	3301      	adds	r3, #1
 8017638:	627b      	str	r3, [r7, #36]	@ 0x24
 801763a:	687b      	ldr	r3, [r7, #4]
 801763c:	089b      	lsrs	r3, r3, #2
 801763e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017640:	429a      	cmp	r2, r3
 8017642:	d3e4      	bcc.n	801760e <GUI_SaveInfo+0xea>
        }
      }
      break;
 8017644:	e053      	b.n	80176ee <GUI_SaveInfo+0x1ca>

    /* Case Received Sink PDO values Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_SNK_PDO :
      if (Size <= (USBPD_MAX_NB_PDO * 4U))
 8017646:	687b      	ldr	r3, [r7, #4]
 8017648:	2b1c      	cmp	r3, #28
 801764a:	d852      	bhi.n	80176f2 <GUI_SaveInfo+0x1ce>
      {
        uint8_t *rdo;
        GUI_SaveInformation[PortNum].NumberOfRcvSNKPDO = (Size / 4U);
 801764c:	7bfa      	ldrb	r2, [r7, #15]
 801764e:	687b      	ldr	r3, [r7, #4]
 8017650:	0899      	lsrs	r1, r3, #2
 8017652:	482b      	ldr	r0, [pc, #172]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 8017654:	4613      	mov	r3, r2
 8017656:	00db      	lsls	r3, r3, #3
 8017658:	1a9b      	subs	r3, r3, r2
 801765a:	011b      	lsls	r3, r3, #4
 801765c:	4403      	add	r3, r0
 801765e:	333c      	adds	r3, #60	@ 0x3c
 8017660:	6019      	str	r1, [r3, #0]
        /* Copy PDO data in DPM Handle field */
        for (index = 0U; index < (Size / 4U); index++)
 8017662:	2300      	movs	r3, #0
 8017664:	627b      	str	r3, [r7, #36]	@ 0x24
 8017666:	e016      	b.n	8017696 <GUI_SaveInfo+0x172>
        {
          rdo = (uint8_t *)&GUI_SaveInformation[PortNum].ListOfRcvSNKPDO[index];
 8017668:	7bfa      	ldrb	r2, [r7, #15]
 801766a:	4613      	mov	r3, r2
 801766c:	00db      	lsls	r3, r3, #3
 801766e:	1a9b      	subs	r3, r3, r2
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017674:	4413      	add	r3, r2
 8017676:	3308      	adds	r3, #8
 8017678:	009b      	lsls	r3, r3, #2
 801767a:	4a21      	ldr	r2, [pc, #132]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 801767c:	4413      	add	r3, r2
 801767e:	61bb      	str	r3, [r7, #24]
          (void)memcpy(rdo, (Ptr + (index * 4U)), (4U * sizeof(uint8_t)));
 8017680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017682:	009b      	lsls	r3, r3, #2
 8017684:	68ba      	ldr	r2, [r7, #8]
 8017686:	4413      	add	r3, r2
 8017688:	681b      	ldr	r3, [r3, #0]
 801768a:	461a      	mov	r2, r3
 801768c:	69bb      	ldr	r3, [r7, #24]
 801768e:	601a      	str	r2, [r3, #0]
        for (index = 0U; index < (Size / 4U); index++)
 8017690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017692:	3301      	adds	r3, #1
 8017694:	627b      	str	r3, [r7, #36]	@ 0x24
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	089b      	lsrs	r3, r3, #2
 801769a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801769c:	429a      	cmp	r2, r3
 801769e:	d3e3      	bcc.n	8017668 <GUI_SaveInfo+0x144>
        }
      }
      break;
 80176a0:	e027      	b.n	80176f2 <GUI_SaveInfo+0x1ce>

    /* Case Received Request PDO Data information :
    */
    case USBPD_CORE_DATATYPE_RCV_REQ_PDO :
      if (Size == 4U)
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	2b04      	cmp	r3, #4
 80176a6:	d126      	bne.n	80176f6 <GUI_SaveInfo+0x1d2>
      {
        uint8_t *rdo;
        rdo = (uint8_t *)&GUI_SaveInformation[PortNum].RcvRequestDOMsg;
 80176a8:	7bfa      	ldrb	r2, [r7, #15]
 80176aa:	4613      	mov	r3, r2
 80176ac:	00db      	lsls	r3, r3, #3
 80176ae:	1a9b      	subs	r3, r3, r2
 80176b0:	011b      	lsls	r3, r3, #4
 80176b2:	3350      	adds	r3, #80	@ 0x50
 80176b4:	4a12      	ldr	r2, [pc, #72]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80176b6:	4413      	add	r3, r2
 80176b8:	61fb      	str	r3, [r7, #28]
        (void)memcpy(rdo, Ptr, Size);
 80176ba:	687a      	ldr	r2, [r7, #4]
 80176bc:	68b9      	ldr	r1, [r7, #8]
 80176be:	69f8      	ldr	r0, [r7, #28]
 80176c0:	f002 ffeb 	bl	801a69a <memcpy>
      }
      break;
 80176c4:	e017      	b.n	80176f6 <GUI_SaveInfo+0x1d2>
#endif /* _SRC_CAPA_EXT */
#if defined(USBPDCORE_SNK_CAPA_EXT)
    case USBPD_CORE_SNK_EXTENDED_CAPA :
    {
      uint8_t  *_snk_ext_capa;
      _snk_ext_capa = (uint8_t *)&GUI_SaveInformation[PortNum].RcvSNKExtendedCapa;
 80176c6:	7bfa      	ldrb	r2, [r7, #15]
 80176c8:	4613      	mov	r3, r2
 80176ca:	00db      	lsls	r3, r3, #3
 80176cc:	1a9b      	subs	r3, r3, r2
 80176ce:	011b      	lsls	r3, r3, #4
 80176d0:	3350      	adds	r3, #80	@ 0x50
 80176d2:	4a0b      	ldr	r2, [pc, #44]	@ (8017700 <GUI_SaveInfo+0x1dc>)
 80176d4:	4413      	add	r3, r2
 80176d6:	3304      	adds	r3, #4
 80176d8:	623b      	str	r3, [r7, #32]
      (void)memcpy(_snk_ext_capa, Ptr, Size);
 80176da:	687a      	ldr	r2, [r7, #4]
 80176dc:	68b9      	ldr	r1, [r7, #8]
 80176de:	6a38      	ldr	r0, [r7, #32]
 80176e0:	f002 ffdb 	bl	801a69a <memcpy>
      break;
 80176e4:	e008      	b.n	80176f8 <GUI_SaveInfo+0x1d4>
#endif /* _VCONN_SUPPORT */

    /* In case of unexpected data type (Set request could not be fulfilled) :
     */
    default :
      break;
 80176e6:	bf00      	nop
 80176e8:	e006      	b.n	80176f8 <GUI_SaveInfo+0x1d4>
      break;
 80176ea:	bf00      	nop
 80176ec:	e004      	b.n	80176f8 <GUI_SaveInfo+0x1d4>
      break;
 80176ee:	bf00      	nop
 80176f0:	e002      	b.n	80176f8 <GUI_SaveInfo+0x1d4>
      break;
 80176f2:	bf00      	nop
 80176f4:	e000      	b.n	80176f8 <GUI_SaveInfo+0x1d4>
      break;
 80176f6:	bf00      	nop
  }
}
 80176f8:	bf00      	nop
 80176fa:	3728      	adds	r7, #40	@ 0x28
 80176fc:	46bd      	mov	sp, r7
 80176fe:	bd80      	pop	{r7, pc}
 8017700:	20002adc 	.word	0x20002adc

08017704 <Send_DpmInitCnf>:
  * @param  PortNum   Port number
  * @param  pEncodedMsg Pointer on the message to be encoded
  * @retval None
  */
static void Send_DpmInitCnf(uint8_t PortNum, uint8_t *pEncodedMsg)
{
 8017704:	b580      	push	{r7, lr}
 8017706:	b090      	sub	sp, #64	@ 0x40
 8017708:	af00      	add	r7, sp, #0
 801770a:	4603      	mov	r3, r0
 801770c:	6039      	str	r1, [r7, #0]
 801770e:	71fb      	strb	r3, [r7, #7]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID(PortNum, DPM_INIT_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017710:	79fb      	ldrb	r3, [r7, #7]
 8017712:	015b      	lsls	r3, r3, #5
 8017714:	b25b      	sxtb	r3, r3
 8017716:	f043 0303 	orr.w	r3, r3, #3
 801771a:	b25b      	sxtb	r3, r3
 801771c:	b2d9      	uxtb	r1, r3
 801771e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017722:	683b      	ldr	r3, [r7, #0]
 8017724:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017728:	f7fe fbff 	bl	8015f2a <TLV_init_encode>

  /* Information by board */
  if (0U == PortNum)
 801772c:	79fb      	ldrb	r3, [r7, #7]
 801772e:	2b00      	cmp	r3, #0
 8017730:	d166      	bne.n	8017800 <Send_DpmInitCnf+0xfc>
  {
    /* HWBoardVersion */
    const uint8_t *hwversion;
    if (NULL != pCB_HWBoardVersion)
 8017732:	4bc4      	ldr	r3, [pc, #784]	@ (8017a44 <Send_DpmInitCnf+0x340>)
 8017734:	681b      	ldr	r3, [r3, #0]
 8017736:	2b00      	cmp	r3, #0
 8017738:	d004      	beq.n	8017744 <Send_DpmInitCnf+0x40>
    {
      hwversion = pCB_HWBoardVersion();
 801773a:	4bc2      	ldr	r3, [pc, #776]	@ (8017a44 <Send_DpmInitCnf+0x340>)
 801773c:	681b      	ldr	r3, [r3, #0]
 801773e:	4798      	blx	r3
 8017740:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8017742:	e001      	b.n	8017748 <Send_DpmInitCnf+0x44>
    }
    else
    {
      hwversion = (uint8_t *) "UNKNOWN";
 8017744:	4bc0      	ldr	r3, [pc, #768]	@ (8017a48 <Send_DpmInitCnf+0x344>)
 8017746:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWBOARDVERSION, (uint16_t)(strlen((const char *)hwversion)), hwversion);
 8017748:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 801774a:	f7ee f9c9 	bl	8005ae0 <strlen>
 801774e:	4603      	mov	r3, r0
 8017750:	b29a      	uxth	r2, r3
 8017752:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017758:	2100      	movs	r1, #0
 801775a:	f7fe fc3f 	bl	8015fdc <TLV_add>

    /* HWPDType */
    const uint8_t *hwpdtype;
    if (NULL != pCB_HWBoardVersion)
 801775e:	4bb9      	ldr	r3, [pc, #740]	@ (8017a44 <Send_DpmInitCnf+0x340>)
 8017760:	681b      	ldr	r3, [r3, #0]
 8017762:	2b00      	cmp	r3, #0
 8017764:	d004      	beq.n	8017770 <Send_DpmInitCnf+0x6c>
    {
      hwpdtype  = pCB_HWPDType();
 8017766:	4bb9      	ldr	r3, [pc, #740]	@ (8017a4c <Send_DpmInitCnf+0x348>)
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	4798      	blx	r3
 801776c:	63b8      	str	r0, [r7, #56]	@ 0x38
 801776e:	e001      	b.n	8017774 <Send_DpmInitCnf+0x70>
    }
    else
    {
      hwpdtype = (uint8_t *) "UNKNOWN";
 8017770:	4bb5      	ldr	r3, [pc, #724]	@ (8017a48 <Send_DpmInitCnf+0x344>)
 8017772:	63bb      	str	r3, [r7, #56]	@ 0x38
    }
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_HWPDTYPE, (uint16_t)(strlen((const char *)hwpdtype)), hwpdtype);
 8017774:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017776:	f7ee f9b3 	bl	8005ae0 <strlen>
 801777a:	4603      	mov	r3, r0
 801777c:	b29a      	uxth	r2, r3
 801777e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017784:	2101      	movs	r1, #1
 8017786:	f7fe fc29 	bl	8015fdc <TLV_add>

    /* NbPortMax */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NBPORTMAX, 1, (uint8_t[]) { USBPD_PORT_COUNT });
 801778a:	2301      	movs	r3, #1
 801778c:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
 8017790:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8017794:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017798:	2201      	movs	r2, #1
 801779a:	2102      	movs	r1, #2
 801779c:	f7fe fc1e 	bl	8015fdc <TLV_add>
    /* FW Version */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
    {
 80177a0:	4aab      	ldr	r2, [pc, #684]	@ (8017a50 <Send_DpmInitCnf+0x34c>)
 80177a2:	f107 031c 	add.w	r3, r7, #28
 80177a6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177aa:	e883 0003 	stmia.w	r3, {r0, r1}
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_FWVERSION, 8, (uint8_t[])
 80177ae:	f107 031c 	add.w	r3, r7, #28
 80177b2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80177b6:	2208      	movs	r2, #8
 80177b8:	2103      	movs	r1, #3
 80177ba:	f7fe fc0f 	bl	8015fdc <TLV_add>
      (_LIB_ID & 0x00FF0000U) >> 16,
      (_LIB_ID & 0xFF000000U) >> 24
    }
                 );
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 80177be:	2300      	movs	r3, #0
 80177c0:	763b      	strb	r3, [r7, #24]
 80177c2:	f107 0318 	add.w	r3, r7, #24
 80177c6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80177ca:	2201      	movs	r2, #1
 80177cc:	211e      	movs	r1, #30
 80177ce:	f7fe fc05 	bl	8015fdc <TLV_add>
    /* Start Port number */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_NB_PORT_START, 1, (uint8_t[]) { USBPD_START_PORT_NUMBER });
 80177d2:	2300      	movs	r3, #0
 80177d4:	753b      	strb	r3, [r7, #20]
 80177d6:	f107 0314 	add.w	r3, r7, #20
 80177da:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80177de:	2201      	movs	r2, #1
 80177e0:	211e      	movs	r1, #30
 80177e2:	f7fe fbfb 	bl	8015fdc <TLV_add>

    /* Original settings */
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ORIGINAL_SETTINGS, 1, (uint8_t *)&GUI_OriginalSettings);
 80177e6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80177ea:	4b9a      	ldr	r3, [pc, #616]	@ (8017a54 <Send_DpmInitCnf+0x350>)
 80177ec:	2201      	movs	r2, #1
 80177ee:	211f      	movs	r1, #31
 80177f0:	f7fe fbf4 	bl	8015fdc <TLV_add>

    TLV_deinit_encode(&ToSendTLV);
 80177f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80177f8:	4618      	mov	r0, r3
 80177fa:	f7fe fd39 	bl	8016270 <TLV_deinit_encode>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_VCONNSUPPLY, 2, (uint8_t *)&fake);
#endif /*MB1303*/

    TLV_deinit_encode(&ToSendTLV);
  }
}
 80177fe:	e11c      	b.n	8017a3a <Send_DpmInitCnf+0x336>
    uint8_t port = PortNum - 1U;
 8017800:	79fb      	ldrb	r3, [r7, #7]
 8017802:	3b01      	subs	r3, #1
 8017804:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    settings = (uint16_t)DPM_Settings[port].PE_SpecRevision;
 8017808:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801780c:	4992      	ldr	r1, [pc, #584]	@ (8017a58 <Send_DpmInitCnf+0x354>)
 801780e:	4613      	mov	r3, r2
 8017810:	005b      	lsls	r3, r3, #1
 8017812:	4413      	add	r3, r2
 8017814:	009b      	lsls	r3, r3, #2
 8017816:	440b      	add	r3, r1
 8017818:	791b      	ldrb	r3, [r3, #4]
 801781a:	f3c3 0301 	ubfx	r3, r3, #0, #2
 801781e:	b2db      	uxtb	r3, r3
 8017820:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TYPECSPECREVISION, 2, (uint8_t[]) { 0x12, settings });
 8017822:	2312      	movs	r3, #18
 8017824:	743b      	strb	r3, [r7, #16]
 8017826:	8a7b      	ldrh	r3, [r7, #18]
 8017828:	b2db      	uxtb	r3, r3
 801782a:	747b      	strb	r3, [r7, #17]
 801782c:	f107 0310 	add.w	r3, r7, #16
 8017830:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017834:	2202      	movs	r2, #2
 8017836:	2104      	movs	r1, #4
 8017838:	f7fe fbd0 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_Settings[port].PE_PD3_Support.d.PE_UnchunkSupport;
 801783c:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017840:	4985      	ldr	r1, [pc, #532]	@ (8017a58 <Send_DpmInitCnf+0x354>)
 8017842:	4613      	mov	r3, r2
 8017844:	005b      	lsls	r3, r3, #1
 8017846:	4413      	add	r3, r2
 8017848:	009b      	lsls	r3, r3, #2
 801784a:	440b      	add	r3, r1
 801784c:	3308      	adds	r3, #8
 801784e:	781b      	ldrb	r3, [r3, #0]
 8017850:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017854:	b2db      	uxtb	r3, r3
 8017856:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_EXTENDEDMESSAGESUNCKUNKED, 1, (uint8_t *)&settings);
 8017858:	f107 0312 	add.w	r3, r7, #18
 801785c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017860:	2201      	movs	r2, #1
 8017862:	2106      	movs	r1, #6
 8017864:	f7fe fbba 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_AccesorySupport;
 8017868:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801786c:	497a      	ldr	r1, [pc, #488]	@ (8017a58 <Send_DpmInitCnf+0x354>)
 801786e:	4613      	mov	r3, r2
 8017870:	005b      	lsls	r3, r3, #1
 8017872:	4413      	add	r3, r2
 8017874:	009b      	lsls	r3, r3, #2
 8017876:	440b      	add	r3, r1
 8017878:	795b      	ldrb	r3, [r3, #5]
 801787a:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801787e:	b2db      	uxtb	r3, r3
 8017880:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ACCESSORYSUPP, 1, (uint8_t *)&settings);
 8017882:	f107 0312 	add.w	r3, r7, #18
 8017886:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801788a:	2201      	movs	r2, #1
 801788c:	2107      	movs	r1, #7
 801788e:	f7fe fba5 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryDetection;
 8017892:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017896:	4971      	ldr	r1, [pc, #452]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 8017898:	4613      	mov	r3, r2
 801789a:	00db      	lsls	r3, r3, #3
 801789c:	1a9b      	subs	r3, r3, r2
 801789e:	011b      	lsls	r3, r3, #4
 80178a0:	440b      	add	r3, r1
 80178a2:	3368      	adds	r3, #104	@ 0x68
 80178a4:	781b      	ldrb	r3, [r3, #0]
 80178a6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80178aa:	b2db      	uxtb	r3, r3
 80178ac:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYDETECTION, 1, (uint8_t *)&settings);
 80178ae:	f107 0312 	add.w	r3, r7, #18
 80178b2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80178b6:	2201      	movs	r2, #1
 80178b8:	2108      	movs	r1, #8
 80178ba:	f7fe fb8f 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_AccessoryTransition;
 80178be:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80178c2:	4966      	ldr	r1, [pc, #408]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 80178c4:	4613      	mov	r3, r2
 80178c6:	00db      	lsls	r3, r3, #3
 80178c8:	1a9b      	subs	r3, r3, r2
 80178ca:	011b      	lsls	r3, r3, #4
 80178cc:	440b      	add	r3, r1
 80178ce:	3368      	adds	r3, #104	@ 0x68
 80178d0:	781b      	ldrb	r3, [r3, #0]
 80178d2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_POWERACCESSORYTRANSITION, 1, (uint8_t *)&settings);
 80178da:	f107 0312 	add.w	r3, r7, #18
 80178de:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80178e2:	2201      	movs	r2, #1
 80178e4:	2109      	movs	r1, #9
 80178e6:	f7fe fb79 	bl	8015fdc <TLV_add>
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_ISCABLE, 1, (uint8_t[]) { 0x00 });
 80178ea:	2300      	movs	r3, #0
 80178ec:	733b      	strb	r3, [r7, #12]
 80178ee:	f107 030c 	add.w	r3, r7, #12
 80178f2:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80178f6:	2201      	movs	r2, #1
 80178f8:	210b      	movs	r1, #11
 80178fa:	f7fe fb6f 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_Settings[port].CAD_TryFeature;
 80178fe:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017902:	4955      	ldr	r1, [pc, #340]	@ (8017a58 <Send_DpmInitCnf+0x354>)
 8017904:	4613      	mov	r3, r2
 8017906:	005b      	lsls	r3, r3, #1
 8017908:	4413      	add	r3, r2
 801790a:	009b      	lsls	r3, r3, #2
 801790c:	440b      	add	r3, r1
 801790e:	795b      	ldrb	r3, [r3, #5]
 8017910:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8017914:	b2db      	uxtb	r3, r3
 8017916:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_TRYFEATURE, 1, (uint8_t *)&settings);
 8017918:	f107 0312 	add.w	r3, r7, #18
 801791c:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017920:	2201      	movs	r2, #1
 8017922:	2110      	movs	r1, #16
 8017924:	f7fe fb5a 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_RpResistorValue;
 8017928:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 801792c:	494b      	ldr	r1, [pc, #300]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 801792e:	4613      	mov	r3, r2
 8017930:	00db      	lsls	r3, r3, #3
 8017932:	1a9b      	subs	r3, r3, r2
 8017934:	011b      	lsls	r3, r3, #4
 8017936:	440b      	add	r3, r1
 8017938:	3368      	adds	r3, #104	@ 0x68
 801793a:	781b      	ldrb	r3, [r3, #0]
 801793c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 8017940:	b2db      	uxtb	r3, r3
 8017942:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_RPRESISTORVALUE, 1, (uint8_t *)&settings);
 8017944:	f107 0312 	add.w	r3, r7, #18
 8017948:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 801794c:	2201      	movs	r2, #1
 801794e:	2112      	movs	r1, #18
 8017950:	f7fe fb44 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Support;
 8017954:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017958:	4940      	ldr	r1, [pc, #256]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 801795a:	4613      	mov	r3, r2
 801795c:	00db      	lsls	r3, r3, #3
 801795e:	1a9b      	subs	r3, r3, r2
 8017960:	011b      	lsls	r3, r3, #4
 8017962:	440b      	add	r3, r1
 8017964:	3368      	adds	r3, #104	@ 0x68
 8017966:	781b      	ldrb	r3, [r3, #0]
 8017968:	f3c3 1340 	ubfx	r3, r3, #5, #1
 801796c:	b2db      	uxtb	r3, r3
 801796e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUPPORT, 1, (uint8_t *)&settings);
 8017970:	f107 0312 	add.w	r3, r7, #18
 8017974:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017978:	2201      	movs	r2, #1
 801797a:	2113      	movs	r1, #19
 801797c:	f7fe fb2e 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Device;
 8017980:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017984:	4935      	ldr	r1, [pc, #212]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 8017986:	4613      	mov	r3, r2
 8017988:	00db      	lsls	r3, r3, #3
 801798a:	1a9b      	subs	r3, r3, r2
 801798c:	011b      	lsls	r3, r3, #4
 801798e:	440b      	add	r3, r1
 8017990:	3368      	adds	r3, #104	@ 0x68
 8017992:	781b      	ldrb	r3, [r3, #0]
 8017994:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8017998:	b2db      	uxtb	r3, r3
 801799a:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBDEVICE, 1, (uint8_t *)&settings);
 801799c:	f107 0312 	add.w	r3, r7, #18
 80179a0:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80179a4:	2201      	movs	r2, #1
 80179a6:	2114      	movs	r1, #20
 80179a8:	f7fe fb18 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_Host;
 80179ac:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80179b0:	492a      	ldr	r1, [pc, #168]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 80179b2:	4613      	mov	r3, r2
 80179b4:	00db      	lsls	r3, r3, #3
 80179b6:	1a9b      	subs	r3, r3, r2
 80179b8:	011b      	lsls	r3, r3, #4
 80179ba:	440b      	add	r3, r1
 80179bc:	3368      	adds	r3, #104	@ 0x68
 80179be:	781b      	ldrb	r3, [r3, #0]
 80179c0:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 80179c4:	b2db      	uxtb	r3, r3
 80179c6:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBHOST, 1, (uint8_t *)&settings);
 80179c8:	f107 0312 	add.w	r3, r7, #18
 80179cc:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80179d0:	2201      	movs	r2, #1
 80179d2:	2115      	movs	r1, #21
 80179d4:	f7fe fb02 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].PWR_UnconstrainedPower;
 80179d8:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 80179dc:	491f      	ldr	r1, [pc, #124]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 80179de:	4613      	mov	r3, r2
 80179e0:	00db      	lsls	r3, r3, #3
 80179e2:	1a9b      	subs	r3, r3, r2
 80179e4:	011b      	lsls	r3, r3, #4
 80179e6:	440b      	add	r3, r1
 80179e8:	3368      	adds	r3, #104	@ 0x68
 80179ea:	781b      	ldrb	r3, [r3, #0]
 80179ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_UNCONSTRAINED_POWERED, 1, (uint8_t *)&settings);
 80179f4:	f107 0312 	add.w	r3, r7, #18
 80179f8:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80179fc:	2201      	movs	r2, #1
 80179fe:	2116      	movs	r1, #22
 8017a00:	f7fe faec 	bl	8015fdc <TLV_add>
    settings = (uint16_t)DPM_USER_Settings[port].USB_SuspendSupport;
 8017a04:	f897 2037 	ldrb.w	r2, [r7, #55]	@ 0x37
 8017a08:	4914      	ldr	r1, [pc, #80]	@ (8017a5c <Send_DpmInitCnf+0x358>)
 8017a0a:	4613      	mov	r3, r2
 8017a0c:	00db      	lsls	r3, r3, #3
 8017a0e:	1a9b      	subs	r3, r3, r2
 8017a10:	011b      	lsls	r3, r3, #4
 8017a12:	440b      	add	r3, r1
 8017a14:	3368      	adds	r3, #104	@ 0x68
 8017a16:	785b      	ldrb	r3, [r3, #1]
 8017a18:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8017a1c:	b2db      	uxtb	r3, r3
 8017a1e:	827b      	strh	r3, [r7, #18]
    (void)TLV_add(&ToSendTLV, (uint8_t)GUI_INIT_USBSUSPENDSUPPORT, 1, (uint8_t *)&settings);
 8017a20:	f107 0312 	add.w	r3, r7, #18
 8017a24:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8017a28:	2201      	movs	r2, #1
 8017a2a:	2117      	movs	r1, #23
 8017a2c:	f7fe fad6 	bl	8015fdc <TLV_add>
    TLV_deinit_encode(&ToSendTLV);
 8017a30:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8017a34:	4618      	mov	r0, r3
 8017a36:	f7fe fc1b 	bl	8016270 <TLV_deinit_encode>
}
 8017a3a:	bf00      	nop
 8017a3c:	3740      	adds	r7, #64	@ 0x40
 8017a3e:	46bd      	mov	sp, r7
 8017a40:	bd80      	pop	{r7, pc}
 8017a42:	bf00      	nop
 8017a44:	20002ac8 	.word	0x20002ac8
 8017a48:	0801b7f8 	.word	0x0801b7f8
 8017a4c:	20002acc 	.word	0x20002acc
 8017a50:	0801b800 	.word	0x0801b800
 8017a54:	20002ac1 	.word	0x20002ac1
 8017a58:	200000a0 	.word	0x200000a0
 8017a5c:	200000b4 	.word	0x200000b4

08017a60 <Request_MessageReq>:
/**
  * @brief      Execution of the message received
  * @note       Generation of a TLV instruction to send in the context of DPM_MESSAGE
  */
static void Request_MessageReq(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8017a60:	b580      	push	{r7, lr}
 8017a62:	b090      	sub	sp, #64	@ 0x40
 8017a64:	af00      	add	r7, sp, #0
 8017a66:	4603      	mov	r3, r0
 8017a68:	60b9      	str	r1, [r7, #8]
 8017a6a:	607a      	str	r2, [r7, #4]
 8017a6c:	73fb      	strb	r3, [r7, #15]
  USBPD_StatusTypeDef status = USBPD_ERROR;
 8017a6e:	2302      	movs	r3, #2
 8017a70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  TLV_Received_Data_t process_tlv;
  TLV_ToSend_Data_t send_tlv;

  (void)TLV_init_decode(&process_tlv, instruction);
 8017a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8017a78:	68b9      	ldr	r1, [r7, #8]
 8017a7a:	4618      	mov	r0, r3
 8017a7c:	f7fe fc0c 	bl	8016298 <TLV_init_decode>
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8017a80:	7bfb      	ldrb	r3, [r7, #15]
 8017a82:	3301      	adds	r3, #1
 8017a84:	015b      	lsls	r3, r3, #5
 8017a86:	b25b      	sxtb	r3, r3
 8017a88:	f043 030a 	orr.w	r3, r3, #10
 8017a8c:	b25b      	sxtb	r3, r3
 8017a8e:	b2d9      	uxtb	r1, r3
 8017a90:	f107 0020 	add.w	r0, r7, #32
 8017a94:	687b      	ldr	r3, [r7, #4]
 8017a96:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8017a9a:	f7fe fa46 	bl	8015f2a <TLV_init_encode>
  USBPD_GUI_Reject_Reason error;

  uint8_t tag;
  uint16_t length;
  uint8_t *value;
  (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017a9e:	f107 0318 	add.w	r3, r7, #24
 8017aa2:	f107 021c 	add.w	r2, r7, #28
 8017aa6:	f107 011e 	add.w	r1, r7, #30
 8017aaa:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017aae:	f7fe fc21 	bl	80162f4 <TLV_get>
  switch (tag)
 8017ab2:	7fbb      	ldrb	r3, [r7, #30]
 8017ab4:	2b2b      	cmp	r3, #43	@ 0x2b
 8017ab6:	f200 8266 	bhi.w	8017f86 <Request_MessageReq+0x526>
 8017aba:	a201      	add	r2, pc, #4	@ (adr r2, 8017ac0 <Request_MessageReq+0x60>)
 8017abc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8017ac0:	08017b71 	.word	0x08017b71
 8017ac4:	08017b81 	.word	0x08017b81
 8017ac8:	08017f87 	.word	0x08017f87
 8017acc:	08017b91 	.word	0x08017b91
 8017ad0:	08017ba1 	.word	0x08017ba1
 8017ad4:	08017bb1 	.word	0x08017bb1
 8017ad8:	08017bc1 	.word	0x08017bc1
 8017adc:	08017bd1 	.word	0x08017bd1
 8017ae0:	08017c9d 	.word	0x08017c9d
 8017ae4:	08017d91 	.word	0x08017d91
 8017ae8:	08017d81 	.word	0x08017d81
 8017aec:	08017d51 	.word	0x08017d51
 8017af0:	08017d61 	.word	0x08017d61
 8017af4:	08017d71 	.word	0x08017d71
 8017af8:	08017be1 	.word	0x08017be1
 8017afc:	08017bf1 	.word	0x08017bf1
 8017b00:	08017f87 	.word	0x08017f87
 8017b04:	08017db1 	.word	0x08017db1
 8017b08:	08017e0f 	.word	0x08017e0f
 8017b0c:	08017f87 	.word	0x08017f87
 8017b10:	08017f87 	.word	0x08017f87
 8017b14:	08017f87 	.word	0x08017f87
 8017b18:	08017f87 	.word	0x08017f87
 8017b1c:	08017f87 	.word	0x08017f87
 8017b20:	08017f87 	.word	0x08017f87
 8017b24:	08017f87 	.word	0x08017f87
 8017b28:	08017cef 	.word	0x08017cef
 8017b2c:	08017f87 	.word	0x08017f87
 8017b30:	08017f87 	.word	0x08017f87
 8017b34:	08017f87 	.word	0x08017f87
 8017b38:	08017f87 	.word	0x08017f87
 8017b3c:	08017f87 	.word	0x08017f87
 8017b40:	08017f87 	.word	0x08017f87
 8017b44:	08017f87 	.word	0x08017f87
 8017b48:	08017f87 	.word	0x08017f87
 8017b4c:	08017f87 	.word	0x08017f87
 8017b50:	08017ccf 	.word	0x08017ccf
 8017b54:	08017cdf 	.word	0x08017cdf
 8017b58:	08017e5d 	.word	0x08017e5d
 8017b5c:	08017e97 	.word	0x08017e97
 8017b60:	08017ecf 	.word	0x08017ecf
 8017b64:	08017f77 	.word	0x08017f77
 8017b68:	08017f87 	.word	0x08017f87
 8017b6c:	08017da1 	.word	0x08017da1
      - If there is an error, set the error variable according to it (cf USBPD_GUI_Specification)
      - Otherwise in case of success, do nothing else
    */
  {
    case GUI_MSG_GOTOMIN :
      status = USBPD_DPM_RequestGotoMin(PortNum);
 8017b70:	7bfb      	ldrb	r3, [r7, #15]
 8017b72:	4618      	mov	r0, r3
 8017b74:	f7fc fd9c 	bl	80146b0 <USBPD_DPM_RequestGotoMin>
 8017b78:	4603      	mov	r3, r0
 8017b7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017b7e:	e221      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_PING :
      status = USBPD_DPM_RequestPing(PortNum);
 8017b80:	7bfb      	ldrb	r3, [r7, #15]
 8017b82:	4618      	mov	r0, r3
 8017b84:	f7fc fdd4 	bl	8014730 <USBPD_DPM_RequestPing>
 8017b88:	4603      	mov	r3, r0
 8017b8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017b8e:	e219      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_SRC_CAPA :
      status = USBPD_DPM_RequestGetSourceCapability(PortNum);
 8017b90:	7bfb      	ldrb	r3, [r7, #15]
 8017b92:	4618      	mov	r0, r3
 8017b94:	f7fc fe72 	bl	801487c <USBPD_DPM_RequestGetSourceCapability>
 8017b98:	4603      	mov	r3, r0
 8017b9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017b9e:	e211      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_SNK_CAPA :
      status = USBPD_DPM_RequestGetSinkCapability(PortNum);
 8017ba0:	7bfb      	ldrb	r3, [r7, #15]
 8017ba2:	4618      	mov	r0, r3
 8017ba4:	f7fc feaa 	bl	80148fc <USBPD_DPM_RequestGetSinkCapability>
 8017ba8:	4603      	mov	r3, r0
 8017baa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017bae:	e209      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_DR_SWAP :
      status = USBPD_DPM_RequestDataRoleSwap(PortNum);
 8017bb0:	7bfb      	ldrb	r3, [r7, #15]
 8017bb2:	4618      	mov	r0, r3
 8017bb4:	f7fc fee2 	bl	801497c <USBPD_DPM_RequestDataRoleSwap>
 8017bb8:	4603      	mov	r3, r0
 8017bba:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017bbe:	e201      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_PR_SWAP :
      status = USBPD_DPM_RequestPowerRoleSwap(PortNum);
 8017bc0:	7bfb      	ldrb	r3, [r7, #15]
 8017bc2:	4618      	mov	r0, r3
 8017bc4:	f7fc ff1a 	bl	80149fc <USBPD_DPM_RequestPowerRoleSwap>
 8017bc8:	4603      	mov	r3, r0
 8017bca:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017bce:	e1f9      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_VCONN_SWAP :
      status = USBPD_DPM_RequestVconnSwap(PortNum);
 8017bd0:	7bfb      	ldrb	r3, [r7, #15]
 8017bd2:	4618      	mov	r0, r3
 8017bd4:	f7fc ff44 	bl	8014a60 <USBPD_DPM_RequestVconnSwap>
 8017bd8:	4603      	mov	r3, r0
 8017bda:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017bde:	e1f1      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_SOURCE_CAPA :
      status = USBPD_DPM_RequestSourceCapability(PortNum);
 8017be0:	7bfb      	ldrb	r3, [r7, #15]
 8017be2:	4618      	mov	r0, r3
 8017be4:	f7fc ffc0 	bl	8014b68 <USBPD_DPM_RequestSourceCapability>
 8017be8:	4603      	mov	r3, r0
 8017bea:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017bee:	e1e9      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_REQUEST :
    {
      uint16_t voltage = 0;
 8017bf0:	2300      	movs	r3, #0
 8017bf2:	87bb      	strh	r3, [r7, #60]	@ 0x3c
      uint8_t nb_expected_tag = 0U;
 8017bf4:	2300      	movs	r3, #0
 8017bf6:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      uint8_t index_pdo = 0;
 8017bfa:	2300      	movs	r3, #0
 8017bfc:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
      if (length > TLV_SIZE_MAX)
 8017c00:	8bbb      	ldrh	r3, [r7, #28]
 8017c02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017c06:	f200 81c0 	bhi.w	8017f8a <Request_MessageReq+0x52a>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017c0a:	f107 0318 	add.w	r3, r7, #24
 8017c0e:	f107 021c 	add.w	r2, r7, #28
 8017c12:	f107 011e 	add.w	r1, r7, #30
 8017c16:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017c1a:	f7fe fb6b 	bl	80162f4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8017c1e:	e023      	b.n	8017c68 <Request_MessageReq+0x208>
      {
        nb_expected_tag++;
 8017c20:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017c24:	3301      	adds	r3, #1
 8017c26:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        if (GUI_PARAM_MSG_RDOPOSITION == (USBPD_GUI_Tag_ParamMsg)tag)
 8017c2a:	7fbb      	ldrb	r3, [r7, #30]
 8017c2c:	2b01      	cmp	r3, #1
 8017c2e:	d104      	bne.n	8017c3a <Request_MessageReq+0x1da>
        {
          index_pdo = value[0];
 8017c30:	69bb      	ldr	r3, [r7, #24]
 8017c32:	781b      	ldrb	r3, [r3, #0]
 8017c34:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
 8017c38:	e00c      	b.n	8017c54 <Request_MessageReq+0x1f4>
        }
        else if (GUI_PARAM_MSG_REQUESTEDVOLTAGE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017c3a:	7fbb      	ldrb	r3, [r7, #30]
 8017c3c:	2b02      	cmp	r3, #2
 8017c3e:	d109      	bne.n	8017c54 <Request_MessageReq+0x1f4>
        {
          voltage = USBPD_LE16(&value[0]);
 8017c40:	69bb      	ldr	r3, [r7, #24]
 8017c42:	781b      	ldrb	r3, [r3, #0]
 8017c44:	461a      	mov	r2, r3
 8017c46:	69bb      	ldr	r3, [r7, #24]
 8017c48:	3301      	adds	r3, #1
 8017c4a:	781b      	ldrb	r3, [r3, #0]
 8017c4c:	021b      	lsls	r3, r3, #8
 8017c4e:	b29b      	uxth	r3, r3
 8017c50:	4413      	add	r3, r2
 8017c52:	87bb      	strh	r3, [r7, #60]	@ 0x3c
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017c54:	f107 0318 	add.w	r3, r7, #24
 8017c58:	f107 021c 	add.w	r2, r7, #28
 8017c5c:	f107 011e 	add.w	r1, r7, #30
 8017c60:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017c64:	f7fe fb46 	bl	80162f4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8017c68:	8bbb      	ldrh	r3, [r7, #28]
 8017c6a:	2b00      	cmp	r3, #0
 8017c6c:	d006      	beq.n	8017c7c <Request_MessageReq+0x21c>
 8017c6e:	8bbb      	ldrh	r3, [r7, #28]
 8017c70:	2bff      	cmp	r3, #255	@ 0xff
 8017c72:	d803      	bhi.n	8017c7c <Request_MessageReq+0x21c>
 8017c74:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017c78:	2b01      	cmp	r3, #1
 8017c7a:	d9d1      	bls.n	8017c20 <Request_MessageReq+0x1c0>
      }
      if (2U == nb_expected_tag)
 8017c7c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8017c80:	2b02      	cmp	r3, #2
 8017c82:	f040 8184 	bne.w	8017f8e <Request_MessageReq+0x52e>
      {
        status = USBPD_DPM_RequestMessageRequest(PortNum, index_pdo, voltage);
 8017c86:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8017c88:	f897 103a 	ldrb.w	r1, [r7, #58]	@ 0x3a
 8017c8c:	7bfb      	ldrb	r3, [r7, #15]
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fc fd8e 	bl	80147b0 <USBPD_DPM_RequestMessageRequest>
 8017c94:	4603      	mov	r3, r0
 8017c96:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017c9a:	e178      	b.n	8017f8e <Request_MessageReq+0x52e>
    }
    case GUI_MSG_SOFT_RESET :
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017c9c:	f107 0318 	add.w	r3, r7, #24
 8017ca0:	f107 021c 	add.w	r2, r7, #28
 8017ca4:	f107 011e 	add.w	r1, r7, #30
 8017ca8:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017cac:	f7fe fb22 	bl	80162f4 <TLV_get>
      if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017cb0:	7fbb      	ldrb	r3, [r7, #30]
 8017cb2:	2b00      	cmp	r3, #0
 8017cb4:	f040 816d 	bne.w	8017f92 <Request_MessageReq+0x532>
      {
        status = USBPD_DPM_RequestSoftReset(PortNum, (USBPD_SOPType_TypeDef)value[0]);
 8017cb8:	69bb      	ldr	r3, [r7, #24]
 8017cba:	781a      	ldrb	r2, [r3, #0]
 8017cbc:	7bfb      	ldrb	r3, [r7, #15]
 8017cbe:	4611      	mov	r1, r2
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	f7fc ff0d 	bl	8014ae0 <USBPD_DPM_RequestSoftReset>
 8017cc6:	4603      	mov	r3, r0
 8017cc8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017ccc:	e161      	b.n	8017f92 <Request_MessageReq+0x532>
    case GUI_MSG_HARD_RESET :
      status = USBPD_DPM_RequestHardReset(PortNum);
 8017cce:	7bfb      	ldrb	r3, [r7, #15]
 8017cd0:	4618      	mov	r0, r3
 8017cd2:	f7fc fc71 	bl	80145b8 <USBPD_DPM_RequestHardReset>
 8017cd6:	4603      	mov	r3, r0
 8017cd8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017cdc:	e172      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_CABLE_RESET :
      status = USBPD_DPM_RequestCableReset(PortNum);
 8017cde:	7bfb      	ldrb	r3, [r7, #15]
 8017ce0:	4618      	mov	r0, r3
 8017ce2:	f7fc fca7 	bl	8014634 <USBPD_DPM_RequestCableReset>
 8017ce6:	4603      	mov	r3, r0
 8017ce8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017cec:	e16a      	b.n	8017fc4 <Request_MessageReq+0x564>
    }
    break;
#endif /* _VDM */
    case GUI_MSG_FREE_TEXT :
    {
      uint8_t nb_expected_tag = 0U;
 8017cee:	2300      	movs	r3, #0
 8017cf0:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      if (length > TLV_SIZE_MAX)
 8017cf4:	8bbb      	ldrh	r3, [r7, #28]
 8017cf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017cfa:	f200 814c 	bhi.w	8017f96 <Request_MessageReq+0x536>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017cfe:	f107 0318 	add.w	r3, r7, #24
 8017d02:	f107 021c 	add.w	r2, r7, #28
 8017d06:	f107 011e 	add.w	r1, r7, #30
 8017d0a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017d0e:	f7fe faf1 	bl	80162f4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8017d12:	e004      	b.n	8017d1e <Request_MessageReq+0x2be>
      {
        nb_expected_tag++;
 8017d14:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017d18:	3301      	adds	r3, #1
 8017d1a:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 1U))
 8017d1e:	8bbb      	ldrh	r3, [r7, #28]
 8017d20:	2b00      	cmp	r3, #0
 8017d22:	d006      	beq.n	8017d32 <Request_MessageReq+0x2d2>
 8017d24:	8bbb      	ldrh	r3, [r7, #28]
 8017d26:	2bff      	cmp	r3, #255	@ 0xff
 8017d28:	d803      	bhi.n	8017d32 <Request_MessageReq+0x2d2>
 8017d2a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d0f0      	beq.n	8017d14 <Request_MessageReq+0x2b4>
      }
      if (1U == nb_expected_tag)
 8017d32:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8017d36:	2b01      	cmp	r3, #1
 8017d38:	f040 812f 	bne.w	8017f9a <Request_MessageReq+0x53a>
      {
        status = Manage_FreeText(PortNum, value, length);
 8017d3c:	69b9      	ldr	r1, [r7, #24]
 8017d3e:	8bba      	ldrh	r2, [r7, #28]
 8017d40:	7bfb      	ldrb	r3, [r7, #15]
 8017d42:	4618      	mov	r0, r3
 8017d44:	f001 fad0 	bl	80192e8 <Manage_FreeText>
 8017d48:	4603      	mov	r3, r0
 8017d4a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017d4e:	e124      	b.n	8017f9a <Request_MessageReq+0x53a>
    }
#ifdef USBPD_REV30_SUPPORT
    case GUI_MSG_FR_SWAP :
      status = USBPD_DPM_RequestFastRoleSwap(PortNum);
 8017d50:	7bfb      	ldrb	r3, [r7, #15]
 8017d52:	4618      	mov	r0, r3
 8017d54:	f7fd f8c8 	bl	8014ee8 <USBPD_DPM_RequestFastRoleSwap>
 8017d58:	4603      	mov	r3, r0
 8017d5a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017d5e:	e131      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_PPS_STATUS :
      status = USBPD_DPM_RequestGetPPS_Status(PortNum);
 8017d60:	7bfb      	ldrb	r3, [r7, #15]
 8017d62:	4618      	mov	r0, r3
 8017d64:	f7fd f840 	bl	8014de8 <USBPD_DPM_RequestGetPPS_Status>
 8017d68:	4603      	mov	r3, r0
 8017d6a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017d6e:	e129      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_COUNTRY_CODES :
      status = USBPD_DPM_RequestGetCountryCodes(PortNum);
 8017d70:	7bfb      	ldrb	r3, [r7, #15]
 8017d72:	4618      	mov	r0, r3
 8017d74:	f7fd f8f8 	bl	8014f68 <USBPD_DPM_RequestGetCountryCodes>
 8017d78:	4603      	mov	r3, r0
 8017d7a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017d7e:	e121      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_STATUS :
      status = USBPD_DPM_RequestGetStatus(PortNum);
 8017d80:	7bfb      	ldrb	r3, [r7, #15]
 8017d82:	4618      	mov	r0, r3
 8017d84:	f7fd f870 	bl	8014e68 <USBPD_DPM_RequestGetStatus>
 8017d88:	4603      	mov	r3, r0
 8017d8a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017d8e:	e119      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_SOURCE_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSourceCapabilityExt(PortNum);
 8017d90:	7bfb      	ldrb	r3, [r7, #15]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7fc ff6a 	bl	8014c6c <USBPD_DPM_RequestGetSourceCapabilityExt>
 8017d98:	4603      	mov	r3, r0
 8017d9a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017d9e:	e111      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_GET_SINK_CAPA_EXTENDED :
      status = USBPD_DPM_RequestGetSinkCapabilityExt(PortNum);
 8017da0:	7bfb      	ldrb	r3, [r7, #15]
 8017da2:	4618      	mov	r0, r3
 8017da4:	f7fc ffa2 	bl	8014cec <USBPD_DPM_RequestGetSinkCapabilityExt>
 8017da8:	4603      	mov	r3, r0
 8017daa:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017dae:	e109      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_ALERT :
      if (length > TLV_SIZE_MAX)
 8017db0:	8bbb      	ldrh	r3, [r7, #28]
 8017db2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017db6:	f200 80f2 	bhi.w	8017f9e <Request_MessageReq+0x53e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017dba:	f107 0318 	add.w	r3, r7, #24
 8017dbe:	f107 021c 	add.w	r2, r7, #28
 8017dc2:	f107 011e 	add.w	r1, r7, #30
 8017dc6:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017dca:	f7fe fa93 	bl	80162f4 <TLV_get>
      if (GUI_PARAM_MSG_ALERTMSG == (USBPD_GUI_Tag_ParamMsg)tag)
 8017dce:	7fbb      	ldrb	r3, [r7, #30]
 8017dd0:	2b04      	cmp	r3, #4
 8017dd2:	f040 80e6 	bne.w	8017fa2 <Request_MessageReq+0x542>
      {
        USBPD_ADO_TypeDef alert;
        alert.d32 = USBPD_LE32(&value[0]);
 8017dd6:	69bb      	ldr	r3, [r7, #24]
 8017dd8:	781b      	ldrb	r3, [r3, #0]
 8017dda:	461a      	mov	r2, r3
 8017ddc:	69bb      	ldr	r3, [r7, #24]
 8017dde:	3301      	adds	r3, #1
 8017de0:	781b      	ldrb	r3, [r3, #0]
 8017de2:	021b      	lsls	r3, r3, #8
 8017de4:	441a      	add	r2, r3
 8017de6:	69bb      	ldr	r3, [r7, #24]
 8017de8:	3302      	adds	r3, #2
 8017dea:	781b      	ldrb	r3, [r3, #0]
 8017dec:	041b      	lsls	r3, r3, #16
 8017dee:	441a      	add	r2, r3
 8017df0:	69bb      	ldr	r3, [r7, #24]
 8017df2:	3303      	adds	r3, #3
 8017df4:	781b      	ldrb	r3, [r3, #0]
 8017df6:	061b      	lsls	r3, r3, #24
 8017df8:	4413      	add	r3, r2
 8017dfa:	617b      	str	r3, [r7, #20]
        status = USBPD_DPM_RequestAlert(PortNum, alert);
 8017dfc:	7bfb      	ldrb	r3, [r7, #15]
 8017dfe:	6979      	ldr	r1, [r7, #20]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fc fef1 	bl	8014be8 <USBPD_DPM_RequestAlert>
 8017e06:	4603      	mov	r3, r0
 8017e08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017e0c:	e0c9      	b.n	8017fa2 <Request_MessageReq+0x542>
    case GUI_MSG_GET_COUNTRY_INFO :
      if (length > TLV_SIZE_MAX)
 8017e0e:	8bbb      	ldrh	r3, [r7, #28]
 8017e10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e14:	f200 80c7 	bhi.w	8017fa6 <Request_MessageReq+0x546>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017e18:	f107 0318 	add.w	r3, r7, #24
 8017e1c:	f107 021c 	add.w	r2, r7, #28
 8017e20:	f107 011e 	add.w	r1, r7, #30
 8017e24:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017e28:	f7fe fa64 	bl	80162f4 <TLV_get>
      if (GUI_PARAM_MSG_COUNTRYCODE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017e2c:	7fbb      	ldrb	r3, [r7, #30]
 8017e2e:	2b05      	cmp	r3, #5
 8017e30:	f040 80bb 	bne.w	8017faa <Request_MessageReq+0x54a>
      {
        uint16_t country_code;
        country_code = USBPD_LE16(&value[0]);
 8017e34:	69bb      	ldr	r3, [r7, #24]
 8017e36:	781b      	ldrb	r3, [r3, #0]
 8017e38:	461a      	mov	r2, r3
 8017e3a:	69bb      	ldr	r3, [r7, #24]
 8017e3c:	3301      	adds	r3, #1
 8017e3e:	781b      	ldrb	r3, [r3, #0]
 8017e40:	021b      	lsls	r3, r3, #8
 8017e42:	b29b      	uxth	r3, r3
 8017e44:	4413      	add	r3, r2
 8017e46:	86bb      	strh	r3, [r7, #52]	@ 0x34
        status = USBPD_DPM_RequestGetCountryInfo(PortNum, country_code);
 8017e48:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8017e4a:	7bfb      	ldrb	r3, [r7, #15]
 8017e4c:	4611      	mov	r1, r2
 8017e4e:	4618      	mov	r0, r3
 8017e50:	f7fd f8ca 	bl	8014fe8 <USBPD_DPM_RequestGetCountryInfo>
 8017e54:	4603      	mov	r3, r0
 8017e56:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017e5a:	e0a6      	b.n	8017faa <Request_MessageReq+0x54a>
    case GUI_MSG_GET_BAT_CAPA :
      if (length > TLV_SIZE_MAX)
 8017e5c:	8bbb      	ldrh	r3, [r7, #28]
 8017e5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e62:	f200 80a4 	bhi.w	8017fae <Request_MessageReq+0x54e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017e66:	f107 0318 	add.w	r3, r7, #24
 8017e6a:	f107 021c 	add.w	r2, r7, #28
 8017e6e:	f107 011e 	add.w	r1, r7, #30
 8017e72:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017e76:	f7fe fa3d 	bl	80162f4 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8017e7a:	7fbb      	ldrb	r3, [r7, #30]
 8017e7c:	2b0c      	cmp	r3, #12
 8017e7e:	f040 8098 	bne.w	8017fb2 <Request_MessageReq+0x552>
      {
        status = USBPD_DPM_RequestGetBatteryCapability(PortNum, (uint8_t *)&value[0]);
 8017e82:	69ba      	ldr	r2, [r7, #24]
 8017e84:	7bfb      	ldrb	r3, [r7, #15]
 8017e86:	4611      	mov	r1, r2
 8017e88:	4618      	mov	r0, r3
 8017e8a:	f7fd f8f1 	bl	8015070 <USBPD_DPM_RequestGetBatteryCapability>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017e94:	e08d      	b.n	8017fb2 <Request_MessageReq+0x552>
    case GUI_MSG_GET_BAT_STATUS :
      if (length > TLV_SIZE_MAX)
 8017e96:	8bbb      	ldrh	r3, [r7, #28]
 8017e98:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017e9c:	f200 808b 	bhi.w	8017fb6 <Request_MessageReq+0x556>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017ea0:	f107 0318 	add.w	r3, r7, #24
 8017ea4:	f107 021c 	add.w	r2, r7, #28
 8017ea8:	f107 011e 	add.w	r1, r7, #30
 8017eac:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017eb0:	f7fe fa20 	bl	80162f4 <TLV_get>
      if (GUI_PARAM_MSG_BATTERYREF == (USBPD_GUI_Tag_ParamMsg)tag)
 8017eb4:	7fbb      	ldrb	r3, [r7, #30]
 8017eb6:	2b0c      	cmp	r3, #12
 8017eb8:	d17f      	bne.n	8017fba <Request_MessageReq+0x55a>
      {
        status = USBPD_DPM_RequestGetBatteryStatus(PortNum, (uint8_t *)&value[0]);
 8017eba:	69ba      	ldr	r2, [r7, #24]
 8017ebc:	7bfb      	ldrb	r3, [r7, #15]
 8017ebe:	4611      	mov	r1, r2
 8017ec0:	4618      	mov	r0, r3
 8017ec2:	f7fd f919 	bl	80150f8 <USBPD_DPM_RequestGetBatteryStatus>
 8017ec6:	4603      	mov	r3, r0
 8017ec8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017ecc:	e075      	b.n	8017fba <Request_MessageReq+0x55a>
    case GUI_MSG_GET_MANU_INFO :
    {
      uint16_t manu_info;
      uint8_t nb_expected_tag = 0U;
 8017ece:	2300      	movs	r3, #0
 8017ed0:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
      uint8_t sop = (uint8_t)USBPD_SOPTYPE_SOP;
 8017ed4:	2300      	movs	r3, #0
 8017ed6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (length > TLV_SIZE_MAX)
 8017eda:	8bbb      	ldrh	r3, [r7, #28]
 8017edc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017ee0:	d86d      	bhi.n	8017fbe <Request_MessageReq+0x55e>
      {
        break;
      }
      (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017ee2:	f107 0318 	add.w	r3, r7, #24
 8017ee6:	f107 021c 	add.w	r2, r7, #28
 8017eea:	f107 011e 	add.w	r1, r7, #30
 8017eee:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017ef2:	f7fe f9ff 	bl	80162f4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8017ef6:	e024      	b.n	8017f42 <Request_MessageReq+0x4e2>
      {
        nb_expected_tag++;
 8017ef8:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017efc:	3301      	adds	r3, #1
 8017efe:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        if (GUI_PARAM_MSG_SOPTYPE == (USBPD_GUI_Tag_ParamMsg)tag)
 8017f02:	7fbb      	ldrb	r3, [r7, #30]
 8017f04:	2b00      	cmp	r3, #0
 8017f06:	d104      	bne.n	8017f12 <Request_MessageReq+0x4b2>
        {
          sop = value[0];
 8017f08:	69bb      	ldr	r3, [r7, #24]
 8017f0a:	781b      	ldrb	r3, [r3, #0]
 8017f0c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8017f10:	e00d      	b.n	8017f2e <Request_MessageReq+0x4ce>
        }
        else if (GUI_PARAM_MSG_MANUINFODATA == (USBPD_GUI_Tag_ParamMsg)tag)
 8017f12:	7fbb      	ldrb	r3, [r7, #30]
 8017f14:	2b0d      	cmp	r3, #13
 8017f16:	d10a      	bne.n	8017f2e <Request_MessageReq+0x4ce>
        {
          manu_info = USBPD_LE16(&value[0]);
 8017f18:	69bb      	ldr	r3, [r7, #24]
 8017f1a:	781b      	ldrb	r3, [r3, #0]
 8017f1c:	461a      	mov	r2, r3
 8017f1e:	69bb      	ldr	r3, [r7, #24]
 8017f20:	3301      	adds	r3, #1
 8017f22:	781b      	ldrb	r3, [r3, #0]
 8017f24:	021b      	lsls	r3, r3, #8
 8017f26:	b29b      	uxth	r3, r3
 8017f28:	4413      	add	r3, r2
 8017f2a:	b29b      	uxth	r3, r3
 8017f2c:	827b      	strh	r3, [r7, #18]
        else
        {
          /* Nothing to do */
        }

        (void)TLV_get(&process_tlv, &tag, &length, &value);
 8017f2e:	f107 0318 	add.w	r3, r7, #24
 8017f32:	f107 021c 	add.w	r2, r7, #28
 8017f36:	f107 011e 	add.w	r1, r7, #30
 8017f3a:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8017f3e:	f7fe f9d9 	bl	80162f4 <TLV_get>
      while ((0U != length) && (TLV_SIZE_MAX > length) && (nb_expected_tag < 2U))
 8017f42:	8bbb      	ldrh	r3, [r7, #28]
 8017f44:	2b00      	cmp	r3, #0
 8017f46:	d006      	beq.n	8017f56 <Request_MessageReq+0x4f6>
 8017f48:	8bbb      	ldrh	r3, [r7, #28]
 8017f4a:	2bff      	cmp	r3, #255	@ 0xff
 8017f4c:	d803      	bhi.n	8017f56 <Request_MessageReq+0x4f6>
 8017f4e:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017f52:	2b01      	cmp	r3, #1
 8017f54:	d9d0      	bls.n	8017ef8 <Request_MessageReq+0x498>
      }
      if (2U == nb_expected_tag)
 8017f56:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8017f5a:	2b02      	cmp	r3, #2
 8017f5c:	d131      	bne.n	8017fc2 <Request_MessageReq+0x562>
      {
        status = USBPD_DPM_RequestGetManufacturerInfo(PortNum, (USBPD_SOPType_TypeDef)sop, (uint8_t *)&manu_info);
 8017f5e:	f107 0212 	add.w	r2, r7, #18
 8017f62:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8017f66:	7bfb      	ldrb	r3, [r7, #15]
 8017f68:	4618      	mov	r0, r3
 8017f6a:	f7fc fef1 	bl	8014d50 <USBPD_DPM_RequestGetManufacturerInfo>
 8017f6e:	4603      	mov	r3, r0
 8017f70:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      }
      break;
 8017f74:	e025      	b.n	8017fc2 <Request_MessageReq+0x562>
    }
    case GUI_MSG_SECU_REQUEST :
      status = USBPD_DPM_RequestSecurityRequest(PortNum);
 8017f76:	7bfb      	ldrb	r3, [r7, #15]
 8017f78:	4618      	mov	r0, r3
 8017f7a:	f7fd f901 	bl	8015180 <USBPD_DPM_RequestSecurityRequest>
 8017f7e:	4603      	mov	r3, r0
 8017f80:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 8017f84:	e01e      	b.n	8017fc4 <Request_MessageReq+0x564>
    case GUI_MSG_FIRM_UPDATE_REQUEST :
      break;
#endif /* USBPD_REV30_SUPPORT */
    default :
      break;
 8017f86:	bf00      	nop
 8017f88:	e01c      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017f8a:	bf00      	nop
 8017f8c:	e01a      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017f8e:	bf00      	nop
 8017f90:	e018      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017f92:	bf00      	nop
 8017f94:	e016      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017f96:	bf00      	nop
 8017f98:	e014      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017f9a:	bf00      	nop
 8017f9c:	e012      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017f9e:	bf00      	nop
 8017fa0:	e010      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017fa2:	bf00      	nop
 8017fa4:	e00e      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017fa6:	bf00      	nop
 8017fa8:	e00c      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017faa:	bf00      	nop
 8017fac:	e00a      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017fae:	bf00      	nop
 8017fb0:	e008      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017fb2:	bf00      	nop
 8017fb4:	e006      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017fb6:	bf00      	nop
 8017fb8:	e004      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017fba:	bf00      	nop
 8017fbc:	e002      	b.n	8017fc4 <Request_MessageReq+0x564>
        break;
 8017fbe:	bf00      	nop
 8017fc0:	e000      	b.n	8017fc4 <Request_MessageReq+0x564>
      break;
 8017fc2:	bf00      	nop
  }

  /* Only applies if an error was specified (= if the case couldn't success)*/
  if (USBPD_OK != status)
 8017fc4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017fc8:	2b00      	cmp	r3, #0
 8017fca:	d02b      	beq.n	8018024 <Request_MessageReq+0x5c4>
  {
    switch (status)
 8017fcc:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8017fd0:	2b03      	cmp	r3, #3
 8017fd2:	d002      	beq.n	8017fda <Request_MessageReq+0x57a>
 8017fd4:	2b04      	cmp	r3, #4
 8017fd6:	d003      	beq.n	8017fe0 <Request_MessageReq+0x580>
 8017fd8:	e005      	b.n	8017fe6 <Request_MessageReq+0x586>
    {
      case USBPD_BUSY:
        error = GUI_REJ_DPM_NOT_READY;
 8017fda:	2306      	movs	r3, #6
 8017fdc:	77fb      	strb	r3, [r7, #31]
        break;
 8017fde:	e005      	b.n	8017fec <Request_MessageReq+0x58c>
      case USBPD_TIMEOUT:
        error = GUI_REJ_DPM_TIMEOUT;
 8017fe0:	2302      	movs	r3, #2
 8017fe2:	77fb      	strb	r3, [r7, #31]
        break;
 8017fe4:	e002      	b.n	8017fec <Request_MessageReq+0x58c>
      case USBPD_NOTSUPPORTED:
      case USBPD_ERROR:
      default:
        error = GUI_REJ_DPM_REJECT;
 8017fe6:	2300      	movs	r3, #0
 8017fe8:	77fb      	strb	r3, [r7, #31]
        break;
 8017fea:	bf00      	nop
    }
    TLV_deinit_encode(&send_tlv);
 8017fec:	f107 0320 	add.w	r3, r7, #32
 8017ff0:	4618      	mov	r0, r3
 8017ff2:	f7fe f93d 	bl	8016270 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_MESSAGE_REJ), TLV_SIZE_MAX,
 8017ff6:	7bfb      	ldrb	r3, [r7, #15]
 8017ff8:	3301      	adds	r3, #1
 8017ffa:	015b      	lsls	r3, r3, #5
 8017ffc:	b25b      	sxtb	r3, r3
 8017ffe:	f043 030b 	orr.w	r3, r3, #11
 8018002:	b25b      	sxtb	r3, r3
 8018004:	b2d9      	uxtb	r1, r3
 8018006:	f107 0020 	add.w	r0, r7, #32
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018010:	f7fd ff8b 	bl	8015f2a <TLV_init_encode>
                          pEncodedMsg); /* Turn the tag 0x0A into 0x0B to signal an error*/
    (void)TLV_addValue(&send_tlv, (uint8_t *)&error, 1);
 8018014:	f107 011f 	add.w	r1, r7, #31
 8018018:	f107 0320 	add.w	r3, r7, #32
 801801c:	2201      	movs	r2, #1
 801801e:	4618      	mov	r0, r3
 8018020:	f7fe f898 	bl	8016154 <TLV_addValue>
  }

  TLV_deinit_encode(&send_tlv);
 8018024:	f107 0320 	add.w	r3, r7, #32
 8018028:	4618      	mov	r0, r3
 801802a:	f7fe f921 	bl	8016270 <TLV_deinit_encode>
  TLV_deinit_decode(&process_tlv);
 801802e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018032:	4618      	mov	r0, r3
 8018034:	f7fe f9b8 	bl	80163a8 <TLV_deinit_decode>
}
 8018038:	bf00      	nop
 801803a:	3740      	adds	r7, #64	@ 0x40
 801803c:	46bd      	mov	sp, r7
 801803e:	bd80      	pop	{r7, pc}

08018040 <Send_DpmConfigSetCnf>:
/**
  * @brief      Application of the received configuration
  * @note       Generation of a TLV instruction to send in the context of DPM_CONFIG_SET
  */
static void Send_DpmConfigSetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 8018040:	b590      	push	{r4, r7, lr}
 8018042:	b0d5      	sub	sp, #340	@ 0x154
 8018044:	af00      	add	r7, sp, #0
 8018046:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801804a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801804e:	6019      	str	r1, [r3, #0]
 8018050:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018054:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8018058:	601a      	str	r2, [r3, #0]
 801805a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801805e:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018062:	4602      	mov	r2, r0
 8018064:	701a      	strb	r2, [r3, #0]
    In case there is an error, we use this variable to know when to send a DPM_CONFIG_SET instead
    of a DPM_MESSAGE_CNF. This variable contains the cause if there is one.
  */
  uint8_t *value;
  uint16_t size;
  uint16_t dcdrp = 0;
 8018066:	2300      	movs	r3, #0
 8018068:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
  uint8_t error = 0xFF;
 801806c:	23ff      	movs	r3, #255	@ 0xff
 801806e:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
  uint8_t param_not_applicated[GUI_PARAM_ALL]; /* List of parameters who could not be applied. */
  uint8_t counter_param_not_applicated = 0U;  /* Counter of not applicated parameters */
 8018072:	2300      	movs	r3, #0
 8018074:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
  uint8_t tag;
  uint8_t flag_drp = 0;
 8018078:	2300      	movs	r3, #0
 801807a:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
  uint8_t tdrp = 0;
 801807e:	2300      	movs	r3, #0
 8018080:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b

  (void)TLV_init_decode(&process_tlv, instruction);
 8018084:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018088:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 801808c:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 8018090:	6819      	ldr	r1, [r3, #0]
 8018092:	4610      	mov	r0, r2
 8018094:	f7fe f900 	bl	8016298 <TLV_init_decode>
  /* pEncodedMsg can be sent as it is at this point, if there isn't any error during application of settings*/
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_SET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018098:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801809c:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80180a0:	781b      	ldrb	r3, [r3, #0]
 80180a2:	3301      	adds	r3, #1
 80180a4:	015b      	lsls	r3, r3, #5
 80180a6:	b25b      	sxtb	r3, r3
 80180a8:	f043 0307 	orr.w	r3, r3, #7
 80180ac:	b25b      	sxtb	r3, r3
 80180ae:	b2d9      	uxtb	r1, r3
 80180b0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80180b4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80180b8:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80180c2:	f7fd ff32 	bl	8015f2a <TLV_init_encode>

  /* Do while loop, used to parse and apply each parameter */
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80180c6:	e27a      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      As long as we haven't read all the parameters. If error is set, we continue to loop
      to apply the other parameters if it's because of a DPM_REJECT
      While loop, used to parse and apply each parameter
    */
  {
    switch ((USBPD_GUI_Tag_Param)tag)
 80180c8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80180cc:	f2a3 1339 	subw	r3, r3, #313	@ 0x139
 80180d0:	781b      	ldrb	r3, [r3, #0]
 80180d2:	2b1c      	cmp	r3, #28
 80180d4:	f200 825e 	bhi.w	8018594 <Send_DpmConfigSetCnf+0x554>
 80180d8:	a201      	add	r2, pc, #4	@ (adr r2, 80180e0 <Send_DpmConfigSetCnf+0xa0>)
 80180da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80180de:	bf00      	nop
 80180e0:	08018155 	.word	0x08018155
 80180e4:	08018595 	.word	0x08018595
 80180e8:	08018177 	.word	0x08018177
 80180ec:	080181a9 	.word	0x080181a9
 80180f0:	08018205 	.word	0x08018205
 80180f4:	08018233 	.word	0x08018233
 80180f8:	08018261 	.word	0x08018261
 80180fc:	0801828f 	.word	0x0801828f
 8018100:	080182bd 	.word	0x080182bd
 8018104:	08018595 	.word	0x08018595
 8018108:	080182eb 	.word	0x080182eb
 801810c:	08018319 	.word	0x08018319
 8018110:	08018595 	.word	0x08018595
 8018114:	0801834f 	.word	0x0801834f
 8018118:	080183ef 	.word	0x080183ef
 801811c:	0801842d 	.word	0x0801842d
 8018120:	0801846b 	.word	0x0801846b
 8018124:	080184a9 	.word	0x080184a9
 8018128:	080184d7 	.word	0x080184d7
 801812c:	08018595 	.word	0x08018595
 8018130:	08018595 	.word	0x08018595
 8018134:	08018595 	.word	0x08018595
 8018138:	08018595 	.word	0x08018595
 801813c:	08018515 	.word	0x08018515
 8018140:	08018543 	.word	0x08018543
 8018144:	08018595 	.word	0x08018595
 8018148:	08018571 	.word	0x08018571
 801814c:	08018595 	.word	0x08018595
 8018150:	080181d7 	.word	0x080181d7
    {
      case GUI_PARAM_SOP :
#if !defined(USBPDCORE_LIB_NO_PD)
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        DPM_Settings[PortNum].PE_SupportedSOP = value[0];
 8018154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018158:	7819      	ldrb	r1, [r3, #0]
 801815a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801815e:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018162:	781a      	ldrb	r2, [r3, #0]
 8018164:	4608      	mov	r0, r1
 8018166:	49cc      	ldr	r1, [pc, #816]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 8018168:	4613      	mov	r3, r2
 801816a:	005b      	lsls	r3, r3, #1
 801816c:	4413      	add	r3, r2
 801816e:	009b      	lsls	r3, r3, #2
 8018170:	440b      	add	r3, r1
 8018172:	6018      	str	r0, [r3, #0]
#endif /* !USBPDCORE_LIB_NO_PD */
        break;
 8018174:	e223      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
        /*FastRoleSwap*/
        DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport = value[0];
 8018176:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801817a:	7819      	ldrb	r1, [r3, #0]
 801817c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018180:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018184:	781a      	ldrb	r2, [r3, #0]
 8018186:	460b      	mov	r3, r1
 8018188:	f003 0301 	and.w	r3, r3, #1
 801818c:	b2d9      	uxtb	r1, r3
 801818e:	48c2      	ldr	r0, [pc, #776]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 8018190:	4613      	mov	r3, r2
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	4413      	add	r3, r2
 8018196:	009b      	lsls	r3, r3, #2
 8018198:	4403      	add	r3, r0
 801819a:	f103 0208 	add.w	r2, r3, #8
 801819e:	7813      	ldrb	r3, [r2, #0]
 80181a0:	f361 0341 	bfi	r3, r1, #1, #1
 80181a4:	7013      	strb	r3, [r2, #0]
        break;
 80181a6:	e20a      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
#endif /*USBPD_REV30_SUPPORT*/
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
        /*DataRoleSwap to UFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP = value[0];
 80181a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80181ac:	7819      	ldrb	r1, [r3, #0]
 80181ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80181b2:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80181b6:	781a      	ldrb	r2, [r3, #0]
 80181b8:	460b      	mov	r3, r1
 80181ba:	f003 0301 	and.w	r3, r3, #1
 80181be:	b2d9      	uxtb	r1, r3
 80181c0:	48b6      	ldr	r0, [pc, #728]	@ (801849c <Send_DpmConfigSetCnf+0x45c>)
 80181c2:	4613      	mov	r3, r2
 80181c4:	00db      	lsls	r3, r3, #3
 80181c6:	1a9b      	subs	r3, r3, r2
 80181c8:	011b      	lsls	r3, r3, #4
 80181ca:	18c2      	adds	r2, r0, r3
 80181cc:	7813      	ldrb	r3, [r2, #0]
 80181ce:	f361 03c3 	bfi	r3, r1, #3, #1
 80181d2:	7013      	strb	r3, [r2, #0]
        break;
 80181d4:	e1f3      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
        /*DataRoleSwap to DFP */
        DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP = value[0];
 80181d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80181da:	7819      	ldrb	r1, [r3, #0]
 80181dc:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80181e0:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80181e4:	781a      	ldrb	r2, [r3, #0]
 80181e6:	460b      	mov	r3, r1
 80181e8:	f003 0301 	and.w	r3, r3, #1
 80181ec:	b2d9      	uxtb	r1, r3
 80181ee:	48ab      	ldr	r0, [pc, #684]	@ (801849c <Send_DpmConfigSetCnf+0x45c>)
 80181f0:	4613      	mov	r3, r2
 80181f2:	00db      	lsls	r3, r3, #3
 80181f4:	1a9b      	subs	r3, r3, r2
 80181f6:	011b      	lsls	r3, r3, #4
 80181f8:	18c2      	adds	r2, r0, r3
 80181fa:	7813      	ldrb	r3, [r2, #0]
 80181fc:	f361 0382 	bfi	r3, r1, #2, #1
 8018200:	7013      	strb	r3, [r2, #0]
        break;
 8018202:	e1dc      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_DEFAULTPOWERROLE :
        /*DefaultPowerRole*/
        DPM_Settings[PortNum].PE_DefaultRole = (USBPD_PortPowerRole_TypeDef)value[0];
 8018204:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018208:	7819      	ldrb	r1, [r3, #0]
 801820a:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801820e:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018212:	781a      	ldrb	r2, [r3, #0]
 8018214:	460b      	mov	r3, r1
 8018216:	f003 0301 	and.w	r3, r3, #1
 801821a:	b2d9      	uxtb	r1, r3
 801821c:	489e      	ldr	r0, [pc, #632]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 801821e:	4613      	mov	r3, r2
 8018220:	005b      	lsls	r3, r3, #1
 8018222:	4413      	add	r3, r2
 8018224:	009b      	lsls	r3, r3, #2
 8018226:	18c2      	adds	r2, r0, r3
 8018228:	7913      	ldrb	r3, [r2, #4]
 801822a:	f361 0382 	bfi	r3, r1, #2, #1
 801822e:	7113      	strb	r3, [r2, #4]
        break;
 8018230:	e1c5      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
        /*DRP_Support*/
        DPM_Settings[PortNum].PE_RoleSwap = value[0];
 8018232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018236:	7819      	ldrb	r1, [r3, #0]
 8018238:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801823c:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018240:	781a      	ldrb	r2, [r3, #0]
 8018242:	460b      	mov	r3, r1
 8018244:	f003 0301 	and.w	r3, r3, #1
 8018248:	b2d9      	uxtb	r1, r3
 801824a:	4893      	ldr	r0, [pc, #588]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 801824c:	4613      	mov	r3, r2
 801824e:	005b      	lsls	r3, r3, #1
 8018250:	4413      	add	r3, r2
 8018252:	009b      	lsls	r3, r3, #2
 8018254:	18c2      	adds	r2, r0, r3
 8018256:	7913      	ldrb	r3, [r2, #4]
 8018258:	f361 03c3 	bfi	r3, r1, #3, #1
 801825c:	7113      	strb	r3, [r2, #4]
        break;
 801825e:	e1ae      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_CADROLETOGGLE :
        /*CADRoleToggle*/
        DPM_Settings[PortNum].CAD_RoleToggle = value[0];
 8018260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018264:	7819      	ldrb	r1, [r3, #0]
 8018266:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801826a:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 801826e:	781a      	ldrb	r2, [r3, #0]
 8018270:	460b      	mov	r3, r1
 8018272:	f003 0301 	and.w	r3, r3, #1
 8018276:	b2d9      	uxtb	r1, r3
 8018278:	4887      	ldr	r0, [pc, #540]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 801827a:	4613      	mov	r3, r2
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	4413      	add	r3, r2
 8018280:	009b      	lsls	r3, r3, #2
 8018282:	18c2      	adds	r2, r0, r3
 8018284:	7953      	ldrb	r3, [r2, #5]
 8018286:	f361 1345 	bfi	r3, r1, #5, #1
 801828a:	7153      	strb	r3, [r2, #5]
        break;
 801828c:	e197      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_PE_SCAP_HR :
        /*PE_SCAP_HR*/
        DPM_Settings[PortNum].PE_CapscounterSupport = value[0];
 801828e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018292:	7819      	ldrb	r1, [r3, #0]
 8018294:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018298:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 801829c:	781a      	ldrb	r2, [r3, #0]
 801829e:	460b      	mov	r3, r1
 80182a0:	f003 0301 	and.w	r3, r3, #1
 80182a4:	b2d9      	uxtb	r1, r3
 80182a6:	487c      	ldr	r0, [pc, #496]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 80182a8:	4613      	mov	r3, r2
 80182aa:	005b      	lsls	r3, r3, #1
 80182ac:	4413      	add	r3, r2
 80182ae:	009b      	lsls	r3, r3, #2
 80182b0:	18c2      	adds	r2, r0, r3
 80182b2:	7913      	ldrb	r3, [r2, #4]
 80182b4:	f361 13c7 	bfi	r3, r1, #7, #1
 80182b8:	7113      	strb	r3, [r2, #4]
        break;
 80182ba:	e180      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_VCONNSWAP :
        /*VConnSwap*/
        DPM_USER_Settings[PortNum].PE_VconnSwap = value[0];
 80182bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80182c0:	7819      	ldrb	r1, [r3, #0]
 80182c2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80182c6:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80182ca:	781a      	ldrb	r2, [r3, #0]
 80182cc:	460b      	mov	r3, r1
 80182ce:	f003 0301 	and.w	r3, r3, #1
 80182d2:	b2d9      	uxtb	r1, r3
 80182d4:	4871      	ldr	r0, [pc, #452]	@ (801849c <Send_DpmConfigSetCnf+0x45c>)
 80182d6:	4613      	mov	r3, r2
 80182d8:	00db      	lsls	r3, r3, #3
 80182da:	1a9b      	subs	r3, r3, r2
 80182dc:	011b      	lsls	r3, r3, #4
 80182de:	18c2      	adds	r2, r0, r3
 80182e0:	7813      	ldrb	r3, [r2, #0]
 80182e2:	f361 0341 	bfi	r3, r1, #1, #1
 80182e6:	7013      	strb	r3, [r2, #0]
        break;
 80182e8:	e169      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
        DPM_Settings[PortNum].PE_VDMSupport = value[0];
        break;
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
        /* Ping Support */
        DPM_Settings[PortNum].PE_PingSupport = value[0];
 80182ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80182ee:	7819      	ldrb	r1, [r3, #0]
 80182f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80182f4:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80182f8:	781a      	ldrb	r2, [r3, #0]
 80182fa:	460b      	mov	r3, r1
 80182fc:	f003 0301 	and.w	r3, r3, #1
 8018300:	b2d9      	uxtb	r1, r3
 8018302:	4865      	ldr	r0, [pc, #404]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 8018304:	4613      	mov	r3, r2
 8018306:	005b      	lsls	r3, r3, #1
 8018308:	4413      	add	r3, r2
 801830a:	009b      	lsls	r3, r3, #2
 801830c:	18c2      	adds	r2, r0, r3
 801830e:	7913      	ldrb	r3, [r2, #4]
 8018310:	f361 1386 	bfi	r3, r1, #6, #1
 8018314:	7113      	strb	r3, [r2, #4]
        break;
 8018316:	e152      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
        DPM_Settings[PortNum].PE_PD3_Support.PD3_Support = USBPD_LE16(&value[0]);
 8018318:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801831c:	781b      	ldrb	r3, [r3, #0]
 801831e:	4619      	mov	r1, r3
 8018320:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018324:	3301      	adds	r3, #1
 8018326:	781b      	ldrb	r3, [r3, #0]
 8018328:	021b      	lsls	r3, r3, #8
 801832a:	b29b      	uxth	r3, r3
 801832c:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8018330:	f2a2 1241 	subw	r2, r2, #321	@ 0x141
 8018334:	7812      	ldrb	r2, [r2, #0]
 8018336:	440b      	add	r3, r1
 8018338:	b298      	uxth	r0, r3
 801833a:	4957      	ldr	r1, [pc, #348]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 801833c:	4613      	mov	r3, r2
 801833e:	005b      	lsls	r3, r3, #1
 8018340:	4413      	add	r3, r2
 8018342:	009b      	lsls	r3, r3, #2
 8018344:	440b      	add	r3, r1
 8018346:	3308      	adds	r3, #8
 8018348:	4602      	mov	r2, r0
 801834a:	801a      	strh	r2, [r3, #0]
        break;
 801834c:	e137      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
        uint32_t pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          (void)memset(PORT0_PDO_ListSRC, 0, sizeof(PORT0_PDO_ListSRC));
 801834e:	221c      	movs	r2, #28
 8018350:	2100      	movs	r1, #0
 8018352:	4853      	ldr	r0, [pc, #332]	@ (80184a0 <Send_DpmConfigSetCnf+0x460>)
 8018354:	f002 f958 	bl	801a608 <memset>
          index_pdo = 0;
 8018358:	2300      	movs	r3, #0
 801835a:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 801835e:	2300      	movs	r3, #0
 8018360:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8018364:	e034      	b.n	80183d0 <Send_DpmConfigSetCnf+0x390>
          {
            pdo = USBPD_LE32(&value[index_gui]);
 8018366:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 801836a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801836e:	4413      	add	r3, r2
 8018370:	781b      	ldrb	r3, [r3, #0]
 8018372:	4619      	mov	r1, r3
 8018374:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8018378:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801837c:	3301      	adds	r3, #1
 801837e:	4413      	add	r3, r2
 8018380:	781b      	ldrb	r3, [r3, #0]
 8018382:	021b      	lsls	r3, r3, #8
 8018384:	18ca      	adds	r2, r1, r3
 8018386:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801838a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 801838e:	3302      	adds	r3, #2
 8018390:	440b      	add	r3, r1
 8018392:	781b      	ldrb	r3, [r3, #0]
 8018394:	041b      	lsls	r3, r3, #16
 8018396:	441a      	add	r2, r3
 8018398:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 801839c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80183a0:	3303      	adds	r3, #3
 80183a2:	440b      	add	r3, r1
 80183a4:	781b      	ldrb	r3, [r3, #0]
 80183a6:	061b      	lsls	r3, r3, #24
 80183a8:	4413      	add	r3, r2
 80183aa:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
            PORT0_PDO_ListSRC[index_pdo] = pdo;
 80183ae:	493c      	ldr	r1, [pc, #240]	@ (80184a0 <Send_DpmConfigSetCnf+0x460>)
 80183b0:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80183b4:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80183b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            index_pdo++;
 80183bc:	f8d7 3144 	ldr.w	r3, [r7, #324]	@ 0x144
 80183c0:	3301      	adds	r3, #1
 80183c2:	f8c7 3144 	str.w	r3, [r7, #324]	@ 0x144
          for (index_gui = 0; index_gui < size; index_gui = index_gui + 4U)
 80183c6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80183ca:	3304      	adds	r3, #4
 80183cc:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80183d0:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80183d4:	461a      	mov	r2, r3
 80183d6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80183da:	4293      	cmp	r3, r2
 80183dc:	d3c3      	bcc.n	8018366 <Send_DpmConfigSetCnf+0x326>
          }
          USBPD_NbPDO[1] = (uint8_t)(size / 4U);
 80183de:	f8b7 311a 	ldrh.w	r3, [r7, #282]	@ 0x11a
 80183e2:	089b      	lsrs	r3, r3, #2
 80183e4:	b29b      	uxth	r3, r3
 80183e6:	b2da      	uxtb	r2, r3
 80183e8:	4b2e      	ldr	r3, [pc, #184]	@ (80184a4 <Send_DpmConfigSetCnf+0x464>)
 80183ea:	705a      	strb	r2, [r3, #1]
            index_pdo++;
          }
          USBPD_NbPDO[3] = (uint8_t)(size / 4U);
        }
#endif /* USBPD_PORT_COUNT==2 */
        break;
 80183ec:	e0e7      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      }
#endif /* (_SRC) || (_DRP) */
      case GUI_PARAM_TDRP :
        tdrp = value[0];
 80183ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80183f2:	781b      	ldrb	r3, [r3, #0]
 80183f4:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
        DPM_USER_Settings[PortNum].CAD_tDRP = tdrp;
 80183f8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80183fc:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018400:	781a      	ldrb	r2, [r3, #0]
 8018402:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8018406:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801840a:	b2d9      	uxtb	r1, r3
 801840c:	4823      	ldr	r0, [pc, #140]	@ (801849c <Send_DpmConfigSetCnf+0x45c>)
 801840e:	4613      	mov	r3, r2
 8018410:	00db      	lsls	r3, r3, #3
 8018412:	1a9b      	subs	r3, r3, r2
 8018414:	011b      	lsls	r3, r3, #4
 8018416:	4403      	add	r3, r0
 8018418:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801841c:	7853      	ldrb	r3, [r2, #1]
 801841e:	f361 0347 	bfi	r3, r1, #1, #7
 8018422:	7053      	strb	r3, [r2, #1]
        flag_drp = 1;
 8018424:	2301      	movs	r3, #1
 8018426:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
        break;
 801842a:	e0c8      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_DCSRC_DRP :
        dcdrp = value[0];
 801842c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018430:	781b      	ldrb	r3, [r3, #0]
 8018432:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
        DPM_USER_Settings[PortNum].CAD_dcSRC_DRP = dcdrp;
 8018436:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801843a:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 801843e:	781a      	ldrb	r2, [r3, #0]
 8018440:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 8018444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8018448:	b2d9      	uxtb	r1, r3
 801844a:	4814      	ldr	r0, [pc, #80]	@ (801849c <Send_DpmConfigSetCnf+0x45c>)
 801844c:	4613      	mov	r3, r2
 801844e:	00db      	lsls	r3, r3, #3
 8018450:	1a9b      	subs	r3, r3, r2
 8018452:	011b      	lsls	r3, r3, #4
 8018454:	4403      	add	r3, r0
 8018456:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801845a:	7893      	ldrb	r3, [r2, #2]
 801845c:	f361 0306 	bfi	r3, r1, #0, #7
 8018460:	7093      	strb	r3, [r2, #2]
        flag_drp = 1;
 8018462:	2301      	movs	r3, #1
 8018464:	f887 314c 	strb.w	r3, [r7, #332]	@ 0x14c
        break;
 8018468:	e0a9      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
        DPM_Settings[PortNum].PE_RespondsToDiscovSOP = value[0];
 801846a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801846e:	7819      	ldrb	r1, [r3, #0]
 8018470:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018474:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018478:	781a      	ldrb	r2, [r3, #0]
 801847a:	460b      	mov	r3, r1
 801847c:	f003 0301 	and.w	r3, r3, #1
 8018480:	b2d9      	uxtb	r1, r3
 8018482:	4805      	ldr	r0, [pc, #20]	@ (8018498 <Send_DpmConfigSetCnf+0x458>)
 8018484:	4613      	mov	r3, r2
 8018486:	005b      	lsls	r3, r3, #1
 8018488:	4413      	add	r3, r2
 801848a:	009b      	lsls	r3, r3, #2
 801848c:	18c2      	adds	r2, r0, r3
 801848e:	7953      	ldrb	r3, [r2, #5]
 8018490:	f361 0300 	bfi	r3, r1, #0, #1
 8018494:	7153      	strb	r3, [r2, #5]
        break;
 8018496:	e092      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
 8018498:	200000a0 	.word	0x200000a0
 801849c:	200000b4 	.word	0x200000b4
 80184a0:	20000128 	.word	0x20000128
 80184a4:	20000124 	.word	0x20000124
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
        DPM_Settings[PortNum].PE_AttemptsDiscovSOP = value[0];
 80184a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80184ac:	7819      	ldrb	r1, [r3, #0]
 80184ae:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80184b2:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80184b6:	781a      	ldrb	r2, [r3, #0]
 80184b8:	460b      	mov	r3, r1
 80184ba:	f003 0301 	and.w	r3, r3, #1
 80184be:	b2d9      	uxtb	r1, r3
 80184c0:	48ba      	ldr	r0, [pc, #744]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 80184c2:	4613      	mov	r3, r2
 80184c4:	005b      	lsls	r3, r3, #1
 80184c6:	4413      	add	r3, r2
 80184c8:	009b      	lsls	r3, r3, #2
 80184ca:	18c2      	adds	r2, r0, r3
 80184cc:	7953      	ldrb	r3, [r2, #5]
 80184ce:	f361 0341 	bfi	r3, r1, #1, #1
 80184d2:	7153      	strb	r3, [r2, #5]
        break;
 80184d4:	e073      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_XID_SOP :
        DPM_ID_Settings[PortNum].XID       = USBPD_LE32(&value[0]);
 80184d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80184da:	781b      	ldrb	r3, [r3, #0]
 80184dc:	461a      	mov	r2, r3
 80184de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80184e2:	3301      	adds	r3, #1
 80184e4:	781b      	ldrb	r3, [r3, #0]
 80184e6:	021b      	lsls	r3, r3, #8
 80184e8:	441a      	add	r2, r3
 80184ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80184ee:	3302      	adds	r3, #2
 80184f0:	781b      	ldrb	r3, [r3, #0]
 80184f2:	041b      	lsls	r3, r3, #16
 80184f4:	18d1      	adds	r1, r2, r3
 80184f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80184fa:	3303      	adds	r3, #3
 80184fc:	781b      	ldrb	r3, [r3, #0]
 80184fe:	061a      	lsls	r2, r3, #24
 8018500:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018504:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	440a      	add	r2, r1
 801850c:	49a8      	ldr	r1, [pc, #672]	@ (80187b0 <Send_DpmConfigSetCnf+0x770>)
 801850e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        break;
 8018512:	e054      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_USB_VID_SOP :
        DPM_ID_Settings[PortNum].VID       = USBPD_LE16(&value[0]);
 8018514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018518:	781b      	ldrb	r3, [r3, #0]
 801851a:	4619      	mov	r1, r3
 801851c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018520:	3301      	adds	r3, #1
 8018522:	781b      	ldrb	r3, [r3, #0]
 8018524:	021b      	lsls	r3, r3, #8
 8018526:	b29a      	uxth	r2, r3
 8018528:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801852c:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018530:	781b      	ldrb	r3, [r3, #0]
 8018532:	440a      	add	r2, r1
 8018534:	b291      	uxth	r1, r2
 8018536:	4a9e      	ldr	r2, [pc, #632]	@ (80187b0 <Send_DpmConfigSetCnf+0x770>)
 8018538:	00db      	lsls	r3, r3, #3
 801853a:	4413      	add	r3, r2
 801853c:	460a      	mov	r2, r1
 801853e:	809a      	strh	r2, [r3, #4]
        break;
 8018540:	e03d      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
      case GUI_PARAM_PID_SOP :
        DPM_ID_Settings[PortNum].PID       = USBPD_LE16(&value[0]);
 8018542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018546:	781b      	ldrb	r3, [r3, #0]
 8018548:	4619      	mov	r1, r3
 801854a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801854e:	3301      	adds	r3, #1
 8018550:	781b      	ldrb	r3, [r3, #0]
 8018552:	021b      	lsls	r3, r3, #8
 8018554:	b29a      	uxth	r2, r3
 8018556:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801855a:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 801855e:	781b      	ldrb	r3, [r3, #0]
 8018560:	440a      	add	r2, r1
 8018562:	b291      	uxth	r1, r2
 8018564:	4a92      	ldr	r2, [pc, #584]	@ (80187b0 <Send_DpmConfigSetCnf+0x770>)
 8018566:	00db      	lsls	r3, r3, #3
 8018568:	4413      	add	r3, r2
 801856a:	460a      	mov	r2, r1
 801856c:	80da      	strh	r2, [r3, #6]
        break;
 801856e:	e026      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
        DPM_VDM_Settings[PortNum].VDM_bcdDevice_SOP     = USBPD_LE16(&value[0]);
        break;
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
        /* MeasurementReporting */
        GUI_USER_Params[PortNum].u.MeasurementReporting = value[0];
 8018570:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8018574:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8018578:	f2a2 1241 	subw	r2, r2, #321	@ 0x141
 801857c:	7812      	ldrb	r2, [r2, #0]
 801857e:	7818      	ldrb	r0, [r3, #0]
 8018580:	498c      	ldr	r1, [pc, #560]	@ (80187b4 <Send_DpmConfigSetCnf+0x774>)
 8018582:	4613      	mov	r3, r2
 8018584:	005b      	lsls	r3, r3, #1
 8018586:	4413      	add	r3, r2
 8018588:	005b      	lsls	r3, r3, #1
 801858a:	440b      	add	r3, r1
 801858c:	3304      	adds	r3, #4
 801858e:	4602      	mov	r2, r0
 8018590:	701a      	strb	r2, [r3, #0]
        break;
 8018592:	e014      	b.n	80185be <Send_DpmConfigSetCnf+0x57e>
        (void)memcpy(DPM_USER_Settings[PortNum].DPM_ManuInfoPort.ManuString, &value[4], size);
        break;
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default :
        error = (uint8_t)GUI_REJ_DPM_REJECT;
 8018594:	2300      	movs	r3, #0
 8018596:	f887 3119 	strb.w	r3, [r7, #281]	@ 0x119
        param_not_applicated[counter_param_not_applicated] = tag;
 801859a:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 801859e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80185a2:	f2a2 1239 	subw	r2, r2, #313	@ 0x139
 80185a6:	7811      	ldrb	r1, [r2, #0]
 80185a8:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80185ac:	f5a2 729c 	sub.w	r2, r2, #312	@ 0x138
 80185b0:	54d1      	strb	r1, [r2, r3]
        counter_param_not_applicated++;
 80185b2:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 80185b6:	3301      	adds	r3, #1
 80185b8:	f887 314d 	strb.w	r3, [r7, #333]	@ 0x14d
        break;
 80185bc:	bf00      	nop
  while ((uint8_t)(0xFF) != TLV_get(&process_tlv, &tag, &size, &value))
 80185be:	f507 738e 	add.w	r3, r7, #284	@ 0x11c
 80185c2:	f507 728d 	add.w	r2, r7, #282	@ 0x11a
 80185c6:	f107 0117 	add.w	r1, r7, #23
 80185ca:	f507 7090 	add.w	r0, r7, #288	@ 0x120
 80185ce:	f7fd fe91 	bl	80162f4 <TLV_get>
 80185d2:	4603      	mov	r3, r0
 80185d4:	2bff      	cmp	r3, #255	@ 0xff
 80185d6:	f47f ad77 	bne.w	80180c8 <Send_DpmConfigSetCnf+0x88>
    }
  }

#if !defined(USBPDCORE_LIB_NO_PD)
  /* Updtate CAD_SNKToggleTime & CAD_SRCToggleTime only if TDRP and/or DC_SRC_DRP have been received */
  if (1U == flag_drp)
 80185da:	f897 314c 	ldrb.w	r3, [r7, #332]	@ 0x14c
 80185de:	2b01      	cmp	r3, #1
 80185e0:	f040 8093 	bne.w	801870a <Send_DpmConfigSetCnf+0x6ca>
  {
    uint16_t calcul;
    if (0U == tdrp)
 80185e4:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d11c      	bne.n	8018626 <Send_DpmConfigSetCnf+0x5e6>
    {
      tdrp = (uint8_t)(DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime);
 80185ec:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80185f0:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80185f4:	781a      	ldrb	r2, [r3, #0]
 80185f6:	496d      	ldr	r1, [pc, #436]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 80185f8:	4613      	mov	r3, r2
 80185fa:	005b      	lsls	r3, r3, #1
 80185fc:	4413      	add	r3, r2
 80185fe:	009b      	lsls	r3, r3, #2
 8018600:	440b      	add	r3, r1
 8018602:	3306      	adds	r3, #6
 8018604:	7819      	ldrb	r1, [r3, #0]
 8018606:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 801860a:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 801860e:	781a      	ldrb	r2, [r3, #0]
 8018610:	4866      	ldr	r0, [pc, #408]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 8018612:	4613      	mov	r3, r2
 8018614:	005b      	lsls	r3, r3, #1
 8018616:	4413      	add	r3, r2
 8018618:	009b      	lsls	r3, r3, #2
 801861a:	4403      	add	r3, r0
 801861c:	3307      	adds	r3, #7
 801861e:	781b      	ldrb	r3, [r3, #0]
 8018620:	440b      	add	r3, r1
 8018622:	f887 314b 	strb.w	r3, [r7, #331]	@ 0x14b
    }
    if (0U == dcdrp)
 8018626:	f8b7 314e 	ldrh.w	r3, [r7, #334]	@ 0x14e
 801862a:	2b00      	cmp	r3, #0
 801862c:	d130      	bne.n	8018690 <Send_DpmConfigSetCnf+0x650>
    {
      dcdrp = (uint16_t)
              ((DPM_Settings[PortNum].CAD_SRCToggleTime * 100U)
 801862e:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018632:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018636:	781a      	ldrb	r2, [r3, #0]
 8018638:	495c      	ldr	r1, [pc, #368]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 801863a:	4613      	mov	r3, r2
 801863c:	005b      	lsls	r3, r3, #1
 801863e:	4413      	add	r3, r2
 8018640:	009b      	lsls	r3, r3, #2
 8018642:	440b      	add	r3, r1
 8018644:	3307      	adds	r3, #7
 8018646:	781b      	ldrb	r3, [r3, #0]
 8018648:	461a      	mov	r2, r3
 801864a:	2364      	movs	r3, #100	@ 0x64
 801864c:	fb03 f102 	mul.w	r1, r3, r2
               / (DPM_Settings[PortNum].CAD_SNKToggleTime + DPM_Settings[PortNum].CAD_SRCToggleTime));
 8018650:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018654:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018658:	781a      	ldrb	r2, [r3, #0]
 801865a:	4854      	ldr	r0, [pc, #336]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 801865c:	4613      	mov	r3, r2
 801865e:	005b      	lsls	r3, r3, #1
 8018660:	4413      	add	r3, r2
 8018662:	009b      	lsls	r3, r3, #2
 8018664:	4403      	add	r3, r0
 8018666:	3306      	adds	r3, #6
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	461c      	mov	r4, r3
 801866c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018670:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018674:	781a      	ldrb	r2, [r3, #0]
 8018676:	484d      	ldr	r0, [pc, #308]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 8018678:	4613      	mov	r3, r2
 801867a:	005b      	lsls	r3, r3, #1
 801867c:	4413      	add	r3, r2
 801867e:	009b      	lsls	r3, r3, #2
 8018680:	4403      	add	r3, r0
 8018682:	3307      	adds	r3, #7
 8018684:	781b      	ldrb	r3, [r3, #0]
 8018686:	4423      	add	r3, r4
 8018688:	fbb1 f3f3 	udiv	r3, r1, r3
      dcdrp = (uint16_t)
 801868c:	f8a7 314e 	strh.w	r3, [r7, #334]	@ 0x14e
    }
    calcul = (tdrp * dcdrp) / 100U;
 8018690:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 8018694:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 8018698:	fb02 f303 	mul.w	r3, r2, r3
 801869c:	461a      	mov	r2, r3
 801869e:	4b46      	ldr	r3, [pc, #280]	@ (80187b8 <Send_DpmConfigSetCnf+0x778>)
 80186a0:	fba3 2302 	umull	r2, r3, r3, r2
 80186a4:	095b      	lsrs	r3, r3, #5
 80186a6:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    DPM_Settings[PortNum].CAD_SRCToggleTime = (uint8_t)calcul;
 80186aa:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80186ae:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80186b2:	781a      	ldrb	r2, [r3, #0]
 80186b4:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80186b8:	b2d8      	uxtb	r0, r3
 80186ba:	493c      	ldr	r1, [pc, #240]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 80186bc:	4613      	mov	r3, r2
 80186be:	005b      	lsls	r3, r3, #1
 80186c0:	4413      	add	r3, r2
 80186c2:	009b      	lsls	r3, r3, #2
 80186c4:	440b      	add	r3, r1
 80186c6:	3307      	adds	r3, #7
 80186c8:	4602      	mov	r2, r0
 80186ca:	701a      	strb	r2, [r3, #0]
    calcul = tdrp * (100U - dcdrp) / 100U;
 80186cc:	f897 314b 	ldrb.w	r3, [r7, #331]	@ 0x14b
 80186d0:	f8b7 214e 	ldrh.w	r2, [r7, #334]	@ 0x14e
 80186d4:	f1c2 0264 	rsb	r2, r2, #100	@ 0x64
 80186d8:	fb02 f303 	mul.w	r3, r2, r3
 80186dc:	4a36      	ldr	r2, [pc, #216]	@ (80187b8 <Send_DpmConfigSetCnf+0x778>)
 80186de:	fba2 2303 	umull	r2, r3, r2, r3
 80186e2:	095b      	lsrs	r3, r3, #5
 80186e4:	f8a7 313a 	strh.w	r3, [r7, #314]	@ 0x13a
    DPM_Settings[PortNum].CAD_SNKToggleTime = (uint8_t)calcul;
 80186e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80186ec:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 80186f0:	781a      	ldrb	r2, [r3, #0]
 80186f2:	f8b7 313a 	ldrh.w	r3, [r7, #314]	@ 0x13a
 80186f6:	b2d8      	uxtb	r0, r3
 80186f8:	492c      	ldr	r1, [pc, #176]	@ (80187ac <Send_DpmConfigSetCnf+0x76c>)
 80186fa:	4613      	mov	r3, r2
 80186fc:	005b      	lsls	r3, r3, #1
 80186fe:	4413      	add	r3, r2
 8018700:	009b      	lsls	r3, r3, #2
 8018702:	440b      	add	r3, r1
 8018704:	3306      	adds	r3, #6
 8018706:	4602      	mov	r2, r0
 8018708:	701a      	strb	r2, [r3, #0]
  }
#endif /* !USBPDCORE_LIB_NO_PD */

  /* Only applies if an error was specified. Will send a DPM_CONFIG_REJ instead of DPM_CONFIG_SET_CNF*/
  if (error != 0xFFU)
 801870a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 801870e:	2bff      	cmp	r3, #255	@ 0xff
 8018710:	d046      	beq.n	80187a0 <Send_DpmConfigSetCnf+0x760>
  {
    TLV_deinit_encode(&send_tlv);
 8018712:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8018716:	4618      	mov	r0, r3
 8018718:	f7fd fdaa 	bl	8016270 <TLV_deinit_encode>
    (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_REJ), TLV_SIZE_MAX, pEncodedMsg);
 801871c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018720:	f2a3 1341 	subw	r3, r3, #321	@ 0x141
 8018724:	781b      	ldrb	r3, [r3, #0]
 8018726:	3301      	adds	r3, #1
 8018728:	015b      	lsls	r3, r3, #5
 801872a:	b25b      	sxtb	r3, r3
 801872c:	f043 0308 	orr.w	r3, r3, #8
 8018730:	b25b      	sxtb	r3, r3
 8018732:	b2d9      	uxtb	r1, r3
 8018734:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8018738:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 801873c:	f507 7094 	add.w	r0, r7, #296	@ 0x128
 8018740:	681b      	ldr	r3, [r3, #0]
 8018742:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018746:	f7fd fbf0 	bl	8015f2a <TLV_init_encode>
    (void)TLV_addValue(&send_tlv, &error, 1);
 801874a:	f207 1119 	addw	r1, r7, #281	@ 0x119
 801874e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8018752:	2201      	movs	r2, #1
 8018754:	4618      	mov	r0, r3
 8018756:	f7fd fcfd 	bl	8016154 <TLV_addValue>

    /* If the cause of error is DPM_REJECT, we have to list the tag of parameters which didn't pass */
    if (error != 0U)
 801875a:	f897 3119 	ldrb.w	r3, [r7, #281]	@ 0x119
 801875e:	2b00      	cmp	r3, #0
 8018760:	d019      	beq.n	8018796 <Send_DpmConfigSetCnf+0x756>
    {
      uint32_t index;
      for (index = 0; index < counter_param_not_applicated; index++)
 8018762:	2300      	movs	r3, #0
 8018764:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 8018768:	e00f      	b.n	801878a <Send_DpmConfigSetCnf+0x74a>
      {
        (void)TLV_addValue(&send_tlv, &param_not_applicated[index], 1);
 801876a:	f107 0218 	add.w	r2, r7, #24
 801876e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8018772:	18d1      	adds	r1, r2, r3
 8018774:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8018778:	2201      	movs	r2, #1
 801877a:	4618      	mov	r0, r3
 801877c:	f7fd fcea 	bl	8016154 <TLV_addValue>
      for (index = 0; index < counter_param_not_applicated; index++)
 8018780:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8018784:	3301      	adds	r3, #1
 8018786:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 801878a:	f897 314d 	ldrb.w	r3, [r7, #333]	@ 0x14d
 801878e:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8018792:	429a      	cmp	r2, r3
 8018794:	d3e9      	bcc.n	801876a <Send_DpmConfigSetCnf+0x72a>
      }
    }
    TLV_deinit_encode(&send_tlv);
 8018796:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 801879a:	4618      	mov	r0, r3
 801879c:	f7fd fd68 	bl	8016270 <TLV_deinit_encode>
  }
}
 80187a0:	bf00      	nop
 80187a2:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd90      	pop	{r4, r7, pc}
 80187aa:	bf00      	nop
 80187ac:	200000a0 	.word	0x200000a0
 80187b0:	200000ac 	.word	0x200000ac
 80187b4:	200028b8 	.word	0x200028b8
 80187b8:	51eb851f 	.word	0x51eb851f

080187bc <Send_DpmConfigGetCnf>:

static void Send_DpmConfigGetCnf(uint8_t PortNum, uint8_t *instruction, uint8_t *pEncodedMsg)
{
 80187bc:	b580      	push	{r7, lr}
 80187be:	b092      	sub	sp, #72	@ 0x48
 80187c0:	af00      	add	r7, sp, #0
 80187c2:	4603      	mov	r3, r0
 80187c4:	60b9      	str	r1, [r7, #8]
 80187c6:	607a      	str	r2, [r7, #4]
 80187c8:	73fb      	strb	r3, [r7, #15]
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, __GUI_SET_TAG_ID((PortNum + 1), DPM_CONFIG_GET_CNF), TLV_SIZE_MAX, pEncodedMsg);
 80187ca:	7bfb      	ldrb	r3, [r7, #15]
 80187cc:	3301      	adds	r3, #1
 80187ce:	015b      	lsls	r3, r3, #5
 80187d0:	b25b      	sxtb	r3, r3
 80187d2:	f043 0305 	orr.w	r3, r3, #5
 80187d6:	b25b      	sxtb	r3, r3
 80187d8:	b2d9      	uxtb	r1, r3
 80187da:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80187e4:	f7fd fba1 	bl	8015f2a <TLV_init_encode>
  uint16_t length = TLV_get_string_length(instruction) - TLV_HEADER_SIZE;
 80187e8:	68b8      	ldr	r0, [r7, #8]
 80187ea:	f7fd fded 	bl	80163c8 <TLV_get_string_length>
 80187ee:	4603      	mov	r3, r0
 80187f0:	3b03      	subs	r3, #3
 80187f2:	f8a7 3044 	strh.w	r3, [r7, #68]	@ 0x44
  uint8_t index = 0;
 80187f6:	2300      	movs	r3, #0
 80187f8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47

  /* This is a state machine. */
  do
  {
    /* If there is no parameters, we go through each case of the state machine in one pass. (conditionnal breaks) */
    if (0U == length)
 80187fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018800:	2b00      	cmp	r3, #0
 8018802:	d103      	bne.n	801880c <Send_DpmConfigGetCnf+0x50>
    {
      param = (uint8_t)GUI_PARAM_ALL;
 8018804:	23ff      	movs	r3, #255	@ 0xff
 8018806:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
 801880a:	e007      	b.n	801881c <Send_DpmConfigGetCnf+0x60>
    }
    else
    {
      /* If there are, we loop the state machine and go through one case each time. */
      param = instruction[TLV_VALUE_POSITION + index];
 801880c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018810:	3307      	adds	r3, #7
 8018812:	68ba      	ldr	r2, [r7, #8]
 8018814:	4413      	add	r3, r2
 8018816:	781b      	ldrb	r3, [r3, #0]
 8018818:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46

    /*
    Each case should simply use the TLV_add function to insert his corresponding data,
    as suggested in comment. Manual cast to (uint8_t *) may be required.
    */
    switch ((USBPD_GUI_Tag_Param)param)
 801881c:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8018820:	2b1c      	cmp	r3, #28
 8018822:	dc43      	bgt.n	80188ac <Send_DpmConfigGetCnf+0xf0>
 8018824:	2b00      	cmp	r3, #0
 8018826:	f2c0 8233 	blt.w	8018c90 <Send_DpmConfigGetCnf+0x4d4>
 801882a:	2b1c      	cmp	r3, #28
 801882c:	f200 8230 	bhi.w	8018c90 <Send_DpmConfigGetCnf+0x4d4>
 8018830:	a201      	add	r2, pc, #4	@ (adr r2, 8018838 <Send_DpmConfigGetCnf+0x7c>)
 8018832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018836:	bf00      	nop
 8018838:	080188b3 	.word	0x080188b3
 801883c:	08018c91 	.word	0x08018c91
 8018840:	080188e3 	.word	0x080188e3
 8018844:	08018919 	.word	0x08018919
 8018848:	08018981 	.word	0x08018981
 801884c:	080189b5 	.word	0x080189b5
 8018850:	080189e9 	.word	0x080189e9
 8018854:	08018a1d 	.word	0x08018a1d
 8018858:	08018ab3 	.word	0x08018ab3
 801885c:	08018c91 	.word	0x08018c91
 8018860:	08018a51 	.word	0x08018a51
 8018864:	08018a85 	.word	0x08018a85
 8018868:	08018c91 	.word	0x08018c91
 801886c:	08018ae7 	.word	0x08018ae7
 8018870:	08018b13 	.word	0x08018b13
 8018874:	08018b49 	.word	0x08018b49
 8018878:	08018b7f 	.word	0x08018b7f
 801887c:	08018bb3 	.word	0x08018bb3
 8018880:	08018be5 	.word	0x08018be5
 8018884:	08018c91 	.word	0x08018c91
 8018888:	08018c91 	.word	0x08018c91
 801888c:	08018c91 	.word	0x08018c91
 8018890:	08018c91 	.word	0x08018c91
 8018894:	08018c07 	.word	0x08018c07
 8018898:	08018c41 	.word	0x08018c41
 801889c:	08018c91 	.word	0x08018c91
 80188a0:	08018c65 	.word	0x08018c65
 80188a4:	08018c91 	.word	0x08018c91
 80188a8:	0801894d 	.word	0x0801894d
 80188ac:	2bff      	cmp	r3, #255	@ 0xff
 80188ae:	f040 81ef 	bne.w	8018c90 <Send_DpmConfigGetCnf+0x4d4>
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_SOP :
      {
        /* SOP & SOP1 & SOP2 */
        /* SOP1_Debug & SOP2_Debug not implemented */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_SupportedSOP;
 80188b2:	7bfa      	ldrb	r2, [r7, #15]
 80188b4:	49d7      	ldr	r1, [pc, #860]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 80188b6:	4613      	mov	r3, r2
 80188b8:	005b      	lsls	r3, r3, #1
 80188ba:	4413      	add	r3, r2
 80188bc:	009b      	lsls	r3, r3, #2
 80188be:	440b      	add	r3, r1
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	b2db      	uxtb	r3, r3
 80188c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SOP, 1, &settings);
 80188c8:	f107 032f 	add.w	r3, r7, #47	@ 0x2f
 80188cc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80188d0:	2201      	movs	r2, #1
 80188d2:	2100      	movs	r1, #0
 80188d4:	f7fd fb82 	bl	8015fdc <TLV_add>
        if (0U != length)
 80188d8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80188dc:	2b00      	cmp	r3, #0
 80188de:	f040 81e7 	bne.w	8018cb0 <Send_DpmConfigGetCnf+0x4f4>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_FASTROLESWAP :
      {
        /*FastRoleSwap*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PD3_Support.d.PE_FastRoleSwapSupport;
 80188e2:	7bfa      	ldrb	r2, [r7, #15]
 80188e4:	49cb      	ldr	r1, [pc, #812]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 80188e6:	4613      	mov	r3, r2
 80188e8:	005b      	lsls	r3, r3, #1
 80188ea:	4413      	add	r3, r2
 80188ec:	009b      	lsls	r3, r3, #2
 80188ee:	440b      	add	r3, r1
 80188f0:	3308      	adds	r3, #8
 80188f2:	781b      	ldrb	r3, [r3, #0]
 80188f4:	f3c3 0340 	ubfx	r3, r3, #1, #1
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_FASTROLESWAP, 1, &settings);
 80188fe:	f107 032e 	add.w	r3, r7, #46	@ 0x2e
 8018902:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018906:	2201      	movs	r2, #1
 8018908:	2102      	movs	r1, #2
 801890a:	f7fd fb67 	bl	8015fdc <TLV_add>
        if (0U != length)
 801890e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018912:	2b00      	cmp	r3, #0
 8018914:	f040 81ce 	bne.w	8018cb4 <Send_DpmConfigGetCnf+0x4f8>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_DATAROLESWAP_TO_UFP :
      {
        /* DataRoleSwap to UFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_UFP;
 8018918:	7bfa      	ldrb	r2, [r7, #15]
 801891a:	49bf      	ldr	r1, [pc, #764]	@ (8018c18 <Send_DpmConfigGetCnf+0x45c>)
 801891c:	4613      	mov	r3, r2
 801891e:	00db      	lsls	r3, r3, #3
 8018920:	1a9b      	subs	r3, r3, r2
 8018922:	011b      	lsls	r3, r3, #4
 8018924:	440b      	add	r3, r1
 8018926:	781b      	ldrb	r3, [r3, #0]
 8018928:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 801892c:	b2db      	uxtb	r3, r3
 801892e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_UFP, 1, &settings);
 8018932:	f107 032d 	add.w	r3, r7, #45	@ 0x2d
 8018936:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801893a:	2201      	movs	r2, #1
 801893c:	2103      	movs	r1, #3
 801893e:	f7fd fb4d 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018942:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018946:	2b00      	cmp	r3, #0
 8018948:	f040 81b6 	bne.w	8018cb8 <Send_DpmConfigGetCnf+0x4fc>
        }
      }
      case GUI_PARAM_DATAROLESWAP_TO_DFP :
      {
        /* DataRoleSwap to DFP */
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_DR_Swap_To_DFP;
 801894c:	7bfa      	ldrb	r2, [r7, #15]
 801894e:	49b2      	ldr	r1, [pc, #712]	@ (8018c18 <Send_DpmConfigGetCnf+0x45c>)
 8018950:	4613      	mov	r3, r2
 8018952:	00db      	lsls	r3, r3, #3
 8018954:	1a9b      	subs	r3, r3, r2
 8018956:	011b      	lsls	r3, r3, #4
 8018958:	440b      	add	r3, r1
 801895a:	781b      	ldrb	r3, [r3, #0]
 801895c:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018960:	b2db      	uxtb	r3, r3
 8018962:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DATAROLESWAP_TO_DFP, 1, &settings);
 8018966:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801896a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 801896e:	2201      	movs	r2, #1
 8018970:	211c      	movs	r1, #28
 8018972:	f7fd fb33 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018976:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 801897a:	2b00      	cmp	r3, #0
 801897c:	f040 819e 	bne.w	8018cbc <Send_DpmConfigGetCnf+0x500>
        }
      }
      case GUI_PARAM_DEFAULTPOWERROLE :
      {
        /*DefaultPowerRole*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_DefaultRole;
 8018980:	7bfa      	ldrb	r2, [r7, #15]
 8018982:	49a4      	ldr	r1, [pc, #656]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018984:	4613      	mov	r3, r2
 8018986:	005b      	lsls	r3, r3, #1
 8018988:	4413      	add	r3, r2
 801898a:	009b      	lsls	r3, r3, #2
 801898c:	440b      	add	r3, r1
 801898e:	791b      	ldrb	r3, [r3, #4]
 8018990:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8018994:	b2db      	uxtb	r3, r3
 8018996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DEFAULTPOWERROLE, 1, &settings);
 801899a:	f107 032b 	add.w	r3, r7, #43	@ 0x2b
 801899e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80189a2:	2201      	movs	r2, #1
 80189a4:	2104      	movs	r1, #4
 80189a6:	f7fd fb19 	bl	8015fdc <TLV_add>
        if (0U != length)
 80189aa:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	f040 8186 	bne.w	8018cc0 <Send_DpmConfigGetCnf+0x504>
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_DRP_SUPPORT :
      {
        /*DRP_Support*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RoleSwap;
 80189b4:	7bfa      	ldrb	r2, [r7, #15]
 80189b6:	4997      	ldr	r1, [pc, #604]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 80189b8:	4613      	mov	r3, r2
 80189ba:	005b      	lsls	r3, r3, #1
 80189bc:	4413      	add	r3, r2
 80189be:	009b      	lsls	r3, r3, #2
 80189c0:	440b      	add	r3, r1
 80189c2:	791b      	ldrb	r3, [r3, #4]
 80189c4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80189c8:	b2db      	uxtb	r3, r3
 80189ca:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DRP_SUPPORT, 1, &settings);
 80189ce:	f107 032a 	add.w	r3, r7, #42	@ 0x2a
 80189d2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80189d6:	2201      	movs	r2, #1
 80189d8:	2105      	movs	r1, #5
 80189da:	f7fd faff 	bl	8015fdc <TLV_add>
        if (0U != length)
 80189de:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80189e2:	2b00      	cmp	r3, #0
 80189e4:	f040 816e 	bne.w	8018cc4 <Send_DpmConfigGetCnf+0x508>
        }
      }
      case GUI_PARAM_CADROLETOGGLE :
      {
        /*CADRoleToggle*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].CAD_RoleToggle;
 80189e8:	7bfa      	ldrb	r2, [r7, #15]
 80189ea:	498a      	ldr	r1, [pc, #552]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 80189ec:	4613      	mov	r3, r2
 80189ee:	005b      	lsls	r3, r3, #1
 80189f0:	4413      	add	r3, r2
 80189f2:	009b      	lsls	r3, r3, #2
 80189f4:	440b      	add	r3, r1
 80189f6:	795b      	ldrb	r3, [r3, #5]
 80189f8:	f3c3 1340 	ubfx	r3, r3, #5, #1
 80189fc:	b2db      	uxtb	r3, r3
 80189fe:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_CADROLETOGGLE, 1, &settings);
 8018a02:	f107 0329 	add.w	r3, r7, #41	@ 0x29
 8018a06:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018a0a:	2201      	movs	r2, #1
 8018a0c:	2106      	movs	r1, #6
 8018a0e:	f7fd fae5 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018a12:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018a16:	2b00      	cmp	r3, #0
 8018a18:	f040 8156 	bne.w	8018cc8 <Send_DpmConfigGetCnf+0x50c>
        }
      }
      case GUI_PARAM_PE_SCAP_HR :
      {
        /*PE_SCAP_HR*/
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_CapscounterSupport;
 8018a1c:	7bfa      	ldrb	r2, [r7, #15]
 8018a1e:	497d      	ldr	r1, [pc, #500]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018a20:	4613      	mov	r3, r2
 8018a22:	005b      	lsls	r3, r3, #1
 8018a24:	4413      	add	r3, r2
 8018a26:	009b      	lsls	r3, r3, #2
 8018a28:	440b      	add	r3, r1
 8018a2a:	791b      	ldrb	r3, [r3, #4]
 8018a2c:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8018a30:	b2db      	uxtb	r3, r3
 8018a32:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PE_SCAP_HR,  1, &settings);
 8018a36:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8018a3a:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018a3e:	2201      	movs	r2, #1
 8018a40:	2107      	movs	r1, #7
 8018a42:	f7fd facb 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018a46:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018a4a:	2b00      	cmp	r3, #0
 8018a4c:	f040 813e 	bne.w	8018ccc <Send_DpmConfigGetCnf+0x510>
      }
#endif /*_VDM*/
      case GUI_PARAM_PING_SUPPORT :
      {
        /* Ping Support */
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_PingSupport;
 8018a50:	7bfa      	ldrb	r2, [r7, #15]
 8018a52:	4970      	ldr	r1, [pc, #448]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018a54:	4613      	mov	r3, r2
 8018a56:	005b      	lsls	r3, r3, #1
 8018a58:	4413      	add	r3, r2
 8018a5a:	009b      	lsls	r3, r3, #2
 8018a5c:	440b      	add	r3, r1
 8018a5e:	791b      	ldrb	r3, [r3, #4]
 8018a60:	f3c3 1380 	ubfx	r3, r3, #6, #1
 8018a64:	b2db      	uxtb	r3, r3
 8018a66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PING_SUPPORT, 1, &settings);
 8018a6a:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8018a6e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018a72:	2201      	movs	r2, #1
 8018a74:	210a      	movs	r1, #10
 8018a76:	f7fd fab1 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018a7a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018a7e:	2b00      	cmp	r3, #0
 8018a80:	f040 8126 	bne.w	8018cd0 <Send_DpmConfigGetCnf+0x514>
      }
#if defined(USBPD_REV30_SUPPORT)
      case GUI_PARAM_PPS_SUPPORT :
      {
        /* PD3 Support */
        uint16_t settings = (uint16_t)DPM_Settings[PortNum].PE_PD3_Support.PD3_Support;
 8018a84:	7bfa      	ldrb	r2, [r7, #15]
 8018a86:	4963      	ldr	r1, [pc, #396]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018a88:	4613      	mov	r3, r2
 8018a8a:	005b      	lsls	r3, r3, #1
 8018a8c:	4413      	add	r3, r2
 8018a8e:	009b      	lsls	r3, r3, #2
 8018a90:	440b      	add	r3, r1
 8018a92:	3308      	adds	r3, #8
 8018a94:	881b      	ldrh	r3, [r3, #0]
 8018a96:	84bb      	strh	r3, [r7, #36]	@ 0x24
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PPS_SUPPORT, 2, (uint8_t *)&settings);
 8018a98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8018a9c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018aa0:	2202      	movs	r2, #2
 8018aa2:	210b      	movs	r1, #11
 8018aa4:	f7fd fa9a 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018aa8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018aac:	2b00      	cmp	r3, #0
 8018aae:	f040 8111 	bne.w	8018cd4 <Send_DpmConfigGetCnf+0x518>
#endif /*USBPD_REV30_SUPPORT*/
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_VCONNSWAP :
      {
        /*VConnSwap*/
        uint8_t settings = (uint8_t)DPM_USER_Settings[PortNum].PE_VconnSwap;
 8018ab2:	7bfa      	ldrb	r2, [r7, #15]
 8018ab4:	4958      	ldr	r1, [pc, #352]	@ (8018c18 <Send_DpmConfigGetCnf+0x45c>)
 8018ab6:	4613      	mov	r3, r2
 8018ab8:	00db      	lsls	r3, r3, #3
 8018aba:	1a9b      	subs	r3, r3, r2
 8018abc:	011b      	lsls	r3, r3, #4
 8018abe:	440b      	add	r3, r1
 8018ac0:	781b      	ldrb	r3, [r3, #0]
 8018ac2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018ac6:	b2db      	uxtb	r3, r3
 8018ac8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_VCONNSWAP, 1, &settings);
 8018acc:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8018ad0:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018ad4:	2201      	movs	r2, #1
 8018ad6:	2108      	movs	r1, #8
 8018ad8:	f7fd fa80 	bl	8015fdc <TLV_add>
        if (0U != length)
 8018adc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018ae0:	2b00      	cmp	r3, #0
 8018ae2:	f040 80f9 	bne.w	8018cd8 <Send_DpmConfigGetCnf+0x51c>
        uint8_t nb_pdo;
#if USBPD_PORT_COUNT==2
        if (USBPD_PORT_0 == PortNum)
#endif /* USBPD_PORT_COUNT==2 */
        {
          nb_pdo    =  USBPD_NbPDO[1];
 8018ae6:	4b4d      	ldr	r3, [pc, #308]	@ (8018c1c <Send_DpmConfigGetCnf+0x460>)
 8018ae8:	785b      	ldrb	r3, [r3, #1]
 8018aea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
          list_pdo  = (uint8_t *)PORT0_PDO_ListSRC;
 8018aee:	4b4c      	ldr	r3, [pc, #304]	@ (8018c20 <Send_DpmConfigGetCnf+0x464>)
 8018af0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
          nb_pdo    =  USBPD_NbPDO[3];
          list_pdo  = (uint8_t *)PORT1_PDO_ListSRC;
        }
#endif /* USBPD_PORT_COUNT==2 */
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_SRC_PDO, ((uint16_t)(nb_pdo) * 4U), list_pdo);
 8018af2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8018af6:	b29b      	uxth	r3, r3
 8018af8:	009b      	lsls	r3, r3, #2
 8018afa:	b29a      	uxth	r2, r3
 8018afc:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018b00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8018b02:	210d      	movs	r1, #13
 8018b04:	f7fd fa6a 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018b08:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018b0c:	2b00      	cmp	r3, #0
 8018b0e:	f040 80e5 	bne.w	8018cdc <Send_DpmConfigGetCnf+0x520>
      }
#endif /* _SRC || _DRP */
      case GUI_PARAM_TDRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_tDRP;
 8018b12:	7bfa      	ldrb	r2, [r7, #15]
 8018b14:	4940      	ldr	r1, [pc, #256]	@ (8018c18 <Send_DpmConfigGetCnf+0x45c>)
 8018b16:	4613      	mov	r3, r2
 8018b18:	00db      	lsls	r3, r3, #3
 8018b1a:	1a9b      	subs	r3, r3, r2
 8018b1c:	011b      	lsls	r3, r3, #4
 8018b1e:	440b      	add	r3, r1
 8018b20:	3368      	adds	r3, #104	@ 0x68
 8018b22:	785b      	ldrb	r3, [r3, #1]
 8018b24:	f3c3 0346 	ubfx	r3, r3, #1, #7
 8018b28:	b2db      	uxtb	r3, r3
 8018b2a:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_TDRP, 1, &value);
 8018b2e:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8018b32:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018b36:	2201      	movs	r2, #1
 8018b38:	210e      	movs	r1, #14
 8018b3a:	f7fd fa4f 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018b3e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018b42:	2b00      	cmp	r3, #0
 8018b44:	f040 80cc 	bne.w	8018ce0 <Send_DpmConfigGetCnf+0x524>
        break;
      }
      case GUI_PARAM_DCSRC_DRP :
      {
        /* Calculate the current value of tDRP (value between 50ms and 100ms) */
        uint8_t value = (uint8_t)DPM_USER_Settings[PortNum].CAD_dcSRC_DRP;
 8018b48:	7bfa      	ldrb	r2, [r7, #15]
 8018b4a:	4933      	ldr	r1, [pc, #204]	@ (8018c18 <Send_DpmConfigGetCnf+0x45c>)
 8018b4c:	4613      	mov	r3, r2
 8018b4e:	00db      	lsls	r3, r3, #3
 8018b50:	1a9b      	subs	r3, r3, r2
 8018b52:	011b      	lsls	r3, r3, #4
 8018b54:	440b      	add	r3, r1
 8018b56:	3368      	adds	r3, #104	@ 0x68
 8018b58:	789b      	ldrb	r3, [r3, #2]
 8018b5a:	f3c3 0306 	ubfx	r3, r3, #0, #7
 8018b5e:	b2db      	uxtb	r3, r3
 8018b60:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_DCSRC_DRP, 1, &value);
 8018b64:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8018b68:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018b6c:	2201      	movs	r2, #1
 8018b6e:	210f      	movs	r1, #15
 8018b70:	f7fd fa34 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018b74:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018b78:	2b00      	cmp	r3, #0
 8018b7a:	f040 80b3 	bne.w	8018ce4 <Send_DpmConfigGetCnf+0x528>
        break;
      }
#if !defined(USBPDCORE_LIB_NO_PD)
      case GUI_PARAM_RESPONDS_TO_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_RespondsToDiscovSOP;
 8018b7e:	7bfa      	ldrb	r2, [r7, #15]
 8018b80:	4924      	ldr	r1, [pc, #144]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018b82:	4613      	mov	r3, r2
 8018b84:	005b      	lsls	r3, r3, #1
 8018b86:	4413      	add	r3, r2
 8018b88:	009b      	lsls	r3, r3, #2
 8018b8a:	440b      	add	r3, r1
 8018b8c:	795b      	ldrb	r3, [r3, #5]
 8018b8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8018b92:	b2db      	uxtb	r3, r3
 8018b94:	f887 3020 	strb.w	r3, [r7, #32]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_RESPONDS_TO_DISCOV_SOP, 1, &settings);
 8018b98:	f107 0320 	add.w	r3, r7, #32
 8018b9c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018ba0:	2201      	movs	r2, #1
 8018ba2:	2110      	movs	r1, #16
 8018ba4:	f7fd fa1a 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018ba8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	f040 809b 	bne.w	8018ce8 <Send_DpmConfigGetCnf+0x52c>
      {
        break;
      }
      case GUI_PARAM_ATTEMPTS_DISCOV_SOP :
      {
        uint8_t settings = (uint8_t)DPM_Settings[PortNum].PE_AttemptsDiscovSOP;
 8018bb2:	7bfa      	ldrb	r2, [r7, #15]
 8018bb4:	4917      	ldr	r1, [pc, #92]	@ (8018c14 <Send_DpmConfigGetCnf+0x458>)
 8018bb6:	4613      	mov	r3, r2
 8018bb8:	005b      	lsls	r3, r3, #1
 8018bba:	4413      	add	r3, r2
 8018bbc:	009b      	lsls	r3, r3, #2
 8018bbe:	440b      	add	r3, r1
 8018bc0:	795b      	ldrb	r3, [r3, #5]
 8018bc2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 8018bc6:	b2db      	uxtb	r3, r3
 8018bc8:	77fb      	strb	r3, [r7, #31]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_ATTEMPTS_DISCOV_SOP, 1, &settings);
 8018bca:	f107 031f 	add.w	r3, r7, #31
 8018bce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018bd2:	2201      	movs	r2, #1
 8018bd4:	2111      	movs	r1, #17
 8018bd6:	f7fd fa01 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018bda:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018bde:	2b00      	cmp	r3, #0
 8018be0:	f040 8084 	bne.w	8018cec <Send_DpmConfigGetCnf+0x530>
        break;
      }
#endif /* !USBPDCORE_LIB_NO_PD */
      case GUI_PARAM_XID_SOP :
      {
        uint32_t value = DPM_ID_Settings[PortNum].XID;
 8018be4:	7bfb      	ldrb	r3, [r7, #15]
 8018be6:	4a0f      	ldr	r2, [pc, #60]	@ (8018c24 <Send_DpmConfigGetCnf+0x468>)
 8018be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8018bec:	61bb      	str	r3, [r7, #24]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_XID_SOP, 4, (uint8_t *)&value);
 8018bee:	f107 0318 	add.w	r3, r7, #24
 8018bf2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018bf6:	2204      	movs	r2, #4
 8018bf8:	2112      	movs	r1, #18
 8018bfa:	f7fd f9ef 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018bfe:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c02:	2b00      	cmp	r3, #0
 8018c04:	d174      	bne.n	8018cf0 <Send_DpmConfigGetCnf+0x534>
      {
        break;
      }
      case GUI_PARAM_USB_VID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].VID;
 8018c06:	7bfb      	ldrb	r3, [r7, #15]
 8018c08:	4a06      	ldr	r2, [pc, #24]	@ (8018c24 <Send_DpmConfigGetCnf+0x468>)
 8018c0a:	00db      	lsls	r3, r3, #3
 8018c0c:	4413      	add	r3, r2
 8018c0e:	889b      	ldrh	r3, [r3, #4]
 8018c10:	82fb      	strh	r3, [r7, #22]
 8018c12:	e009      	b.n	8018c28 <Send_DpmConfigGetCnf+0x46c>
 8018c14:	200000a0 	.word	0x200000a0
 8018c18:	200000b4 	.word	0x200000b4
 8018c1c:	20000124 	.word	0x20000124
 8018c20:	20000128 	.word	0x20000128
 8018c24:	200000ac 	.word	0x200000ac
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_USB_VID_SOP, 2, (uint8_t *)&value);
 8018c28:	f107 0316 	add.w	r3, r7, #22
 8018c2c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018c30:	2202      	movs	r2, #2
 8018c32:	2117      	movs	r1, #23
 8018c34:	f7fd f9d2 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018c38:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c3c:	2b00      	cmp	r3, #0
 8018c3e:	d159      	bne.n	8018cf4 <Send_DpmConfigGetCnf+0x538>
      {
        break;
      }
      case GUI_PARAM_PID_SOP :
      {
        uint16_t value = (uint16_t)DPM_ID_Settings[PortNum].PID;
 8018c40:	7bfb      	ldrb	r3, [r7, #15]
 8018c42:	4a3b      	ldr	r2, [pc, #236]	@ (8018d30 <Send_DpmConfigGetCnf+0x574>)
 8018c44:	00db      	lsls	r3, r3, #3
 8018c46:	4413      	add	r3, r2
 8018c48:	88db      	ldrh	r3, [r3, #6]
 8018c4a:	82bb      	strh	r3, [r7, #20]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_PID_SOP, 2, (uint8_t *)&value);
 8018c4c:	f107 0314 	add.w	r3, r7, #20
 8018c50:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018c54:	2202      	movs	r2, #2
 8018c56:	2118      	movs	r1, #24
 8018c58:	f7fd f9c0 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018c5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d149      	bne.n	8018cf8 <Send_DpmConfigGetCnf+0x53c>
        break;
      }
#endif /* _VDM */
      case GUI_PARAM_MEASUREREPORTING :
      {
        uint8_t settings = (uint8_t)GUI_USER_Params[PortNum].u.MeasurementReporting;
 8018c64:	7bfa      	ldrb	r2, [r7, #15]
 8018c66:	4933      	ldr	r1, [pc, #204]	@ (8018d34 <Send_DpmConfigGetCnf+0x578>)
 8018c68:	4613      	mov	r3, r2
 8018c6a:	005b      	lsls	r3, r3, #1
 8018c6c:	4413      	add	r3, r2
 8018c6e:	005b      	lsls	r3, r3, #1
 8018c70:	440b      	add	r3, r1
 8018c72:	3304      	adds	r3, #4
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	74fb      	strb	r3, [r7, #19]
        (void)TLV_add(&send_tlv, (uint8_t)GUI_PARAM_MEASUREREPORTING, 1, &settings);
 8018c78:	f107 0313 	add.w	r3, r7, #19
 8018c7c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018c80:	2201      	movs	r2, #1
 8018c82:	211a      	movs	r1, #26
 8018c84:	f7fd f9aa 	bl	8015fdc <TLV_add>
      }
      if (0U != length)
 8018c88:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c8c:	2b00      	cmp	r3, #0
 8018c8e:	d135      	bne.n	8018cfc <Send_DpmConfigGetCnf+0x540>
        break;
      }
#endif /* _MANU_INFO */
#endif /*USBPD_REV30_SUPPORT*/
      default:
        if (0U != length)
 8018c90:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8018c94:	2b00      	cmp	r3, #0
 8018c96:	d033      	beq.n	8018d00 <Send_DpmConfigGetCnf+0x544>
        {
          /* At least 1 parameter does not exist */
          TLV_deinit_encode(&send_tlv);
 8018c98:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018c9c:	4618      	mov	r0, r3
 8018c9e:	f7fd fae7 	bl	8016270 <TLV_deinit_encode>
          Send_DpmConfigGetRej(PortNum, pEncodedMsg, GUI_REJ_DPM_INVALID_MESSAGE);
 8018ca2:	7bfb      	ldrb	r3, [r7, #15]
 8018ca4:	2203      	movs	r2, #3
 8018ca6:	6879      	ldr	r1, [r7, #4]
 8018ca8:	4618      	mov	r0, r3
 8018caa:	f000 f845 	bl	8018d38 <Send_DpmConfigGetRej>
          goto __end;
 8018cae:	e036      	b.n	8018d1e <Send_DpmConfigGetCnf+0x562>
          break;
 8018cb0:	bf00      	nop
 8018cb2:	e026      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cb4:	bf00      	nop
 8018cb6:	e024      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cb8:	bf00      	nop
 8018cba:	e022      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cbc:	bf00      	nop
 8018cbe:	e020      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cc0:	bf00      	nop
 8018cc2:	e01e      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cc4:	bf00      	nop
 8018cc6:	e01c      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cc8:	bf00      	nop
 8018cca:	e01a      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018ccc:	bf00      	nop
 8018cce:	e018      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cd0:	bf00      	nop
 8018cd2:	e016      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cd4:	bf00      	nop
 8018cd6:	e014      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
          break;
 8018cd8:	bf00      	nop
 8018cda:	e012      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cdc:	bf00      	nop
 8018cde:	e010      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018ce0:	bf00      	nop
 8018ce2:	e00e      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018ce4:	bf00      	nop
 8018ce6:	e00c      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018ce8:	bf00      	nop
 8018cea:	e00a      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cec:	bf00      	nop
 8018cee:	e008      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cf0:	bf00      	nop
 8018cf2:	e006      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cf4:	bf00      	nop
 8018cf6:	e004      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cf8:	bf00      	nop
 8018cfa:	e002      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        break;
 8018cfc:	bf00      	nop
 8018cfe:	e000      	b.n	8018d02 <Send_DpmConfigGetCnf+0x546>
        }
        break;
 8018d00:	bf00      	nop
    }
    index++;
 8018d02:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018d06:	3301      	adds	r3, #1
 8018d08:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    /*
    Loop until we haven't processed each specified parameter.
    If there weren't any (length = 0), we exit the loop after one execution.
    */
  } while (index < length);
 8018d0c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8018d10:	b29b      	uxth	r3, r3
 8018d12:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8018d16:	429a      	cmp	r2, r3
 8018d18:	f63f ad70 	bhi.w	80187fc <Send_DpmConfigGetCnf+0x40>

__end:
 8018d1c:	bf00      	nop
  TLV_deinit_encode(&send_tlv);
 8018d1e:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8018d22:	4618      	mov	r0, r3
 8018d24:	f7fd faa4 	bl	8016270 <TLV_deinit_encode>
}
 8018d28:	bf00      	nop
 8018d2a:	3748      	adds	r7, #72	@ 0x48
 8018d2c:	46bd      	mov	sp, r7
 8018d2e:	bd80      	pop	{r7, pc}
 8018d30:	200000ac 	.word	0x200000ac
 8018d34:	200028b8 	.word	0x200028b8

08018d38 <Send_DpmConfigGetRej>:

static void Send_DpmConfigGetRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8018d38:	b580      	push	{r7, lr}
 8018d3a:	b086      	sub	sp, #24
 8018d3c:	af00      	add	r7, sp, #0
 8018d3e:	4603      	mov	r3, r0
 8018d40:	6039      	str	r1, [r7, #0]
 8018d42:	71fb      	strb	r3, [r7, #7]
 8018d44:	4613      	mov	r3, r2
 8018d46:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_CONFIG_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8018d48:	f107 000c 	add.w	r0, r7, #12
 8018d4c:	683b      	ldr	r3, [r7, #0]
 8018d4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018d52:	2108      	movs	r1, #8
 8018d54:	f7fd f8e9 	bl	8015f2a <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8018d58:	79b9      	ldrb	r1, [r7, #6]
 8018d5a:	f107 000c 	add.w	r0, r7, #12
 8018d5e:	2300      	movs	r3, #0
 8018d60:	2200      	movs	r2, #0
 8018d62:	f7fd f93b 	bl	8015fdc <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8018d66:	f107 030c 	add.w	r3, r7, #12
 8018d6a:	4618      	mov	r0, r3
 8018d6c:	f7fd fa80 	bl	8016270 <TLV_deinit_encode>
}
 8018d70:	bf00      	nop
 8018d72:	3718      	adds	r7, #24
 8018d74:	46bd      	mov	sp, r7
 8018d76:	bd80      	pop	{r7, pc}

08018d78 <Send_DpmMessageRej>:

static void Send_DpmMessageRej(uint8_t PortNum, uint8_t *pEncodedMsg, USBPD_GUI_Reject_Reason RejectReason)
{
 8018d78:	b580      	push	{r7, lr}
 8018d7a:	b086      	sub	sp, #24
 8018d7c:	af00      	add	r7, sp, #0
 8018d7e:	4603      	mov	r3, r0
 8018d80:	6039      	str	r1, [r7, #0]
 8018d82:	71fb      	strb	r3, [r7, #7]
 8018d84:	4613      	mov	r3, r2
 8018d86:	71bb      	strb	r3, [r7, #6]
  UNUSED(PortNum);
  TLV_ToSend_Data_t send_tlv;
  (void)TLV_init_encode(&send_tlv, (uint8_t)DPM_MESSAGE_REJ, TLV_SIZE_MAX, pEncodedMsg);
 8018d88:	f107 000c 	add.w	r0, r7, #12
 8018d8c:	683b      	ldr	r3, [r7, #0]
 8018d8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018d92:	210b      	movs	r1, #11
 8018d94:	f7fd f8c9 	bl	8015f2a <TLV_init_encode>
  (void)TLV_add(&send_tlv, (uint8_t)RejectReason, 0, NULL);
 8018d98:	79b9      	ldrb	r1, [r7, #6]
 8018d9a:	f107 000c 	add.w	r0, r7, #12
 8018d9e:	2300      	movs	r3, #0
 8018da0:	2200      	movs	r2, #0
 8018da2:	f7fd f91b 	bl	8015fdc <TLV_add>
  TLV_deinit_encode(&send_tlv);
 8018da6:	f107 030c 	add.w	r3, r7, #12
 8018daa:	4618      	mov	r0, r3
 8018dac:	f7fd fa60 	bl	8016270 <TLV_deinit_encode>
}
 8018db0:	bf00      	nop
 8018db2:	3718      	adds	r7, #24
 8018db4:	46bd      	mov	sp, r7
 8018db6:	bd80      	pop	{r7, pc}

08018db8 <Send_DpmRegisterReadCnf>:

static void Send_DpmRegisterReadCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t param)
{
 8018db8:	b5b0      	push	{r4, r5, r7, lr}
 8018dba:	b090      	sub	sp, #64	@ 0x40
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	4603      	mov	r3, r0
 8018dc0:	6039      	str	r1, [r7, #0]
 8018dc2:	71fb      	strb	r3, [r7, #7]
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	71bb      	strb	r3, [r7, #6]
  TLV_ToSend_Data_t ToSendTLV;
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_READ_CNF), TLV_SIZE_MAX, pEncodedMsg);
 8018dc8:	79fb      	ldrb	r3, [r7, #7]
 8018dca:	3301      	adds	r3, #1
 8018dcc:	015b      	lsls	r3, r3, #5
 8018dce:	b25b      	sxtb	r3, r3
 8018dd0:	f043 030f 	orr.w	r3, r3, #15
 8018dd4:	b25b      	sxtb	r3, r3
 8018dd6:	b2d9      	uxtb	r1, r3
 8018dd8:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8018ddc:	683b      	ldr	r3, [r7, #0]
 8018dde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018de2:	f7fd f8a2 	bl	8015f2a <TLV_init_encode>

  uint8_t stateMachineArray[GUI_REG_NUMBER_OF_REGISTERS] =
 8018de6:	4b9f      	ldr	r3, [pc, #636]	@ (8019064 <Send_DpmRegisterReadCnf+0x2ac>)
 8018de8:	f107 0408 	add.w	r4, r7, #8
 8018dec:	461d      	mov	r5, r3
 8018dee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018df0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018df2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018df4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018df6:	e895 0003 	ldmia.w	r5, {r0, r1}
 8018dfa:	6020      	str	r0, [r4, #0]
 8018dfc:	3404      	adds	r4, #4
 8018dfe:	8021      	strh	r1, [r4, #0]
 8018e00:	3402      	adds	r4, #2
 8018e02:	0c0b      	lsrs	r3, r1, #16
 8018e04:	7023      	strb	r3, [r4, #0]
    (uint8_t)GUI_REG_TX_HEADER, (uint8_t)GUI_REG_TX_DATA, (uint8_t)GUI_REG_VBUS_VOLTAGE,
    (uint8_t)GUI_REG_VBUS_SINK_DISCONNECT_THRESHOLD, (uint8_t)GUI_REG_VBUS_STOP_DISCHARGE_THRESHOLD,
    (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_HI_CFG, (uint8_t)GUI_REG_VBUS_VOLTAGE_ALARM_LO_CFG,
    (uint8_t)GUI_REG_VENDOR_DATA
  };
  uint8_t counter = 0;
 8018e06:	2300      	movs	r3, #0
 8018e08:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

  /*  If param is not at 0xFF, then it means we only want one parameter.
      We then have to get out of the state machine after the first state */
  if (param != 0xFFU)
 8018e0c:	79bb      	ldrb	r3, [r7, #6]
 8018e0e:	2bff      	cmp	r3, #255	@ 0xff
 8018e10:	d001      	beq.n	8018e16 <Send_DpmRegisterReadCnf+0x5e>
  {
    *stateMachineArray = param;
 8018e12:	79bb      	ldrb	r3, [r7, #6]
 8018e14:	723b      	strb	r3, [r7, #8]
  }

  do
  {
    switch (stateMachineArray[counter])
 8018e16:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8018e1a:	3340      	adds	r3, #64	@ 0x40
 8018e1c:	443b      	add	r3, r7
 8018e1e:	f813 3c38 	ldrb.w	r3, [r3, #-56]
 8018e22:	2b80      	cmp	r3, #128	@ 0x80
 8018e24:	f200 8106 	bhi.w	8019034 <Send_DpmRegisterReadCnf+0x27c>
 8018e28:	a201      	add	r2, pc, #4	@ (adr r2, 8018e30 <Send_DpmRegisterReadCnf+0x78>)
 8018e2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8018e2e:	bf00      	nop
 8018e30:	08019035 	.word	0x08019035
 8018e34:	08019035 	.word	0x08019035
 8018e38:	08019035 	.word	0x08019035
 8018e3c:	08019035 	.word	0x08019035
 8018e40:	08019035 	.word	0x08019035
 8018e44:	08019035 	.word	0x08019035
 8018e48:	08019035 	.word	0x08019035
 8018e4c:	08019035 	.word	0x08019035
 8018e50:	08019035 	.word	0x08019035
 8018e54:	08019035 	.word	0x08019035
 8018e58:	08019035 	.word	0x08019035
 8018e5c:	08019035 	.word	0x08019035
 8018e60:	08019035 	.word	0x08019035
 8018e64:	08019035 	.word	0x08019035
 8018e68:	08019035 	.word	0x08019035
 8018e6c:	08019035 	.word	0x08019035
 8018e70:	08019035 	.word	0x08019035
 8018e74:	08019035 	.word	0x08019035
 8018e78:	08019035 	.word	0x08019035
 8018e7c:	08019035 	.word	0x08019035
 8018e80:	08019035 	.word	0x08019035
 8018e84:	08019035 	.word	0x08019035
 8018e88:	08019035 	.word	0x08019035
 8018e8c:	08019035 	.word	0x08019035
 8018e90:	08019035 	.word	0x08019035
 8018e94:	08019035 	.word	0x08019035
 8018e98:	08019035 	.word	0x08019035
 8018e9c:	08019035 	.word	0x08019035
 8018ea0:	08019035 	.word	0x08019035
 8018ea4:	08019035 	.word	0x08019035
 8018ea8:	08019035 	.word	0x08019035
 8018eac:	08019035 	.word	0x08019035
 8018eb0:	08019035 	.word	0x08019035
 8018eb4:	08019035 	.word	0x08019035
 8018eb8:	08019035 	.word	0x08019035
 8018ebc:	08019035 	.word	0x08019035
 8018ec0:	08019035 	.word	0x08019035
 8018ec4:	08019035 	.word	0x08019035
 8018ec8:	08019035 	.word	0x08019035
 8018ecc:	08019035 	.word	0x08019035
 8018ed0:	08019035 	.word	0x08019035
 8018ed4:	08019035 	.word	0x08019035
 8018ed8:	08019035 	.word	0x08019035
 8018edc:	08019035 	.word	0x08019035
 8018ee0:	08019035 	.word	0x08019035
 8018ee4:	08019035 	.word	0x08019035
 8018ee8:	08019035 	.word	0x08019035
 8018eec:	08019035 	.word	0x08019035
 8018ef0:	08019035 	.word	0x08019035
 8018ef4:	08019035 	.word	0x08019035
 8018ef8:	08019035 	.word	0x08019035
 8018efc:	08019035 	.word	0x08019035
 8018f00:	08019035 	.word	0x08019035
 8018f04:	08019035 	.word	0x08019035
 8018f08:	08019035 	.word	0x08019035
 8018f0c:	08019035 	.word	0x08019035
 8018f10:	08019035 	.word	0x08019035
 8018f14:	08019035 	.word	0x08019035
 8018f18:	08019035 	.word	0x08019035
 8018f1c:	08019035 	.word	0x08019035
 8018f20:	08019035 	.word	0x08019035
 8018f24:	08019035 	.word	0x08019035
 8018f28:	08019035 	.word	0x08019035
 8018f2c:	08019035 	.word	0x08019035
 8018f30:	08019035 	.word	0x08019035
 8018f34:	08019035 	.word	0x08019035
 8018f38:	08019035 	.word	0x08019035
 8018f3c:	08019035 	.word	0x08019035
 8018f40:	08019035 	.word	0x08019035
 8018f44:	08019035 	.word	0x08019035
 8018f48:	08019035 	.word	0x08019035
 8018f4c:	08019035 	.word	0x08019035
 8018f50:	08019035 	.word	0x08019035
 8018f54:	08019035 	.word	0x08019035
 8018f58:	08019035 	.word	0x08019035
 8018f5c:	08019035 	.word	0x08019035
 8018f60:	08019035 	.word	0x08019035
 8018f64:	08019035 	.word	0x08019035
 8018f68:	08019035 	.word	0x08019035
 8018f6c:	08019035 	.word	0x08019035
 8018f70:	08019035 	.word	0x08019035
 8018f74:	08019035 	.word	0x08019035
 8018f78:	08019035 	.word	0x08019035
 8018f7c:	08019035 	.word	0x08019035
 8018f80:	08019035 	.word	0x08019035
 8018f84:	08019035 	.word	0x08019035
 8018f88:	08019035 	.word	0x08019035
 8018f8c:	08019035 	.word	0x08019035
 8018f90:	08019035 	.word	0x08019035
 8018f94:	08019035 	.word	0x08019035
 8018f98:	08019035 	.word	0x08019035
 8018f9c:	08019035 	.word	0x08019035
 8018fa0:	08019035 	.word	0x08019035
 8018fa4:	08019035 	.word	0x08019035
 8018fa8:	08019035 	.word	0x08019035
 8018fac:	08019035 	.word	0x08019035
 8018fb0:	08019035 	.word	0x08019035
 8018fb4:	08019035 	.word	0x08019035
 8018fb8:	08019035 	.word	0x08019035
 8018fbc:	08019035 	.word	0x08019035
 8018fc0:	08019035 	.word	0x08019035
 8018fc4:	08019035 	.word	0x08019035
 8018fc8:	08019035 	.word	0x08019035
 8018fcc:	08019035 	.word	0x08019035
 8018fd0:	08019035 	.word	0x08019035
 8018fd4:	08019035 	.word	0x08019035
 8018fd8:	08019035 	.word	0x08019035
 8018fdc:	08019035 	.word	0x08019035
 8018fe0:	08019035 	.word	0x08019035
 8018fe4:	08019035 	.word	0x08019035
 8018fe8:	08019035 	.word	0x08019035
 8018fec:	08019035 	.word	0x08019035
 8018ff0:	08019035 	.word	0x08019035
 8018ff4:	08019035 	.word	0x08019035
 8018ff8:	08019035 	.word	0x08019035
 8018ffc:	08019035 	.word	0x08019035
 8019000:	08019035 	.word	0x08019035
 8019004:	08019035 	.word	0x08019035
 8019008:	08019035 	.word	0x08019035
 801900c:	08019035 	.word	0x08019035
 8019010:	08019035 	.word	0x08019035
 8019014:	08019035 	.word	0x08019035
 8019018:	08019035 	.word	0x08019035
 801901c:	08019035 	.word	0x08019035
 8019020:	08019035 	.word	0x08019035
 8019024:	08019035 	.word	0x08019035
 8019028:	08019035 	.word	0x08019035
 801902c:	08019035 	.word	0x08019035
 8019030:	08019035 	.word	0x08019035
        break;
      case GUI_REG_VENDOR_DATA :

        break;
      default :
        break;
 8019034:	bf00      	nop
    }
    counter++;
 8019036:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 801903a:	3301      	adds	r3, #1
 801903c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  } while ((counter < GUI_REG_NUMBER_OF_REGISTERS) && (param != 0xFFU));
 8019040:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8019044:	2b26      	cmp	r3, #38	@ 0x26
 8019046:	d803      	bhi.n	8019050 <Send_DpmRegisterReadCnf+0x298>
 8019048:	79bb      	ldrb	r3, [r7, #6]
 801904a:	2bff      	cmp	r3, #255	@ 0xff
 801904c:	f47f aee3 	bne.w	8018e16 <Send_DpmRegisterReadCnf+0x5e>

  TLV_deinit_encode(&ToSendTLV);
 8019050:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8019054:	4618      	mov	r0, r3
 8019056:	f7fd f90b 	bl	8016270 <TLV_deinit_encode>
}
 801905a:	bf00      	nop
 801905c:	3740      	adds	r7, #64	@ 0x40
 801905e:	46bd      	mov	sp, r7
 8019060:	bdb0      	pop	{r4, r5, r7, pc}
 8019062:	bf00      	nop
 8019064:	0801b808 	.word	0x0801b808

08019068 <Send_DpmRegisterWriteCnf>:

static void Send_DpmRegisterWriteCnf(uint8_t PortNum, uint8_t *pEncodedMsg, uint8_t *toProcess)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b08c      	sub	sp, #48	@ 0x30
 801906c:	af00      	add	r7, sp, #0
 801906e:	4603      	mov	r3, r0
 8019070:	60b9      	str	r1, [r7, #8]
 8019072:	607a      	str	r2, [r7, #4]
 8019074:	73fb      	strb	r3, [r7, #15]
  TLV_Received_Data_t ToProcessTLV;
  (void)TLV_init_decode(&ToProcessTLV, toProcess);
 8019076:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 801907a:	6879      	ldr	r1, [r7, #4]
 801907c:	4618      	mov	r0, r3
 801907e:	f7fd f90b 	bl	8016298 <TLV_init_decode>

  uint8_t registerName;
  uint16_t registerSize;
  uint8_t *registerValue;

  (void)TLV_get(&ToProcessTLV, &registerName, &registerSize, &registerValue);
 8019082:	f107 0320 	add.w	r3, r7, #32
 8019086:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 801908a:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 801908e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8019092:	f7fd f92f 	bl	80162f4 <TLV_get>

  switch (registerName)
 8019096:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 801909a:	2b80      	cmp	r3, #128	@ 0x80
 801909c:	f200 8106 	bhi.w	80192ac <Send_DpmRegisterWriteCnf+0x244>
 80190a0:	a201      	add	r2, pc, #4	@ (adr r2, 80190a8 <Send_DpmRegisterWriteCnf+0x40>)
 80190a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80190a6:	bf00      	nop
 80190a8:	080192ad 	.word	0x080192ad
 80190ac:	080192ad 	.word	0x080192ad
 80190b0:	080192ad 	.word	0x080192ad
 80190b4:	080192ad 	.word	0x080192ad
 80190b8:	080192ad 	.word	0x080192ad
 80190bc:	080192ad 	.word	0x080192ad
 80190c0:	080192ad 	.word	0x080192ad
 80190c4:	080192ad 	.word	0x080192ad
 80190c8:	080192ad 	.word	0x080192ad
 80190cc:	080192ad 	.word	0x080192ad
 80190d0:	080192ad 	.word	0x080192ad
 80190d4:	080192ad 	.word	0x080192ad
 80190d8:	080192ad 	.word	0x080192ad
 80190dc:	080192ad 	.word	0x080192ad
 80190e0:	080192ad 	.word	0x080192ad
 80190e4:	080192ad 	.word	0x080192ad
 80190e8:	080192ad 	.word	0x080192ad
 80190ec:	080192ad 	.word	0x080192ad
 80190f0:	080192ad 	.word	0x080192ad
 80190f4:	080192ad 	.word	0x080192ad
 80190f8:	080192ad 	.word	0x080192ad
 80190fc:	080192ad 	.word	0x080192ad
 8019100:	080192ad 	.word	0x080192ad
 8019104:	080192ad 	.word	0x080192ad
 8019108:	080192ad 	.word	0x080192ad
 801910c:	080192ad 	.word	0x080192ad
 8019110:	080192ad 	.word	0x080192ad
 8019114:	080192ad 	.word	0x080192ad
 8019118:	080192ad 	.word	0x080192ad
 801911c:	080192ad 	.word	0x080192ad
 8019120:	080192ad 	.word	0x080192ad
 8019124:	080192ad 	.word	0x080192ad
 8019128:	080192ad 	.word	0x080192ad
 801912c:	080192ad 	.word	0x080192ad
 8019130:	080192ad 	.word	0x080192ad
 8019134:	080192ad 	.word	0x080192ad
 8019138:	080192ad 	.word	0x080192ad
 801913c:	080192ad 	.word	0x080192ad
 8019140:	080192ad 	.word	0x080192ad
 8019144:	080192ad 	.word	0x080192ad
 8019148:	080192ad 	.word	0x080192ad
 801914c:	080192ad 	.word	0x080192ad
 8019150:	080192ad 	.word	0x080192ad
 8019154:	080192ad 	.word	0x080192ad
 8019158:	080192ad 	.word	0x080192ad
 801915c:	080192ad 	.word	0x080192ad
 8019160:	080192ad 	.word	0x080192ad
 8019164:	080192ad 	.word	0x080192ad
 8019168:	080192ad 	.word	0x080192ad
 801916c:	080192ad 	.word	0x080192ad
 8019170:	080192ad 	.word	0x080192ad
 8019174:	080192ad 	.word	0x080192ad
 8019178:	080192ad 	.word	0x080192ad
 801917c:	080192ad 	.word	0x080192ad
 8019180:	080192ad 	.word	0x080192ad
 8019184:	080192ad 	.word	0x080192ad
 8019188:	080192ad 	.word	0x080192ad
 801918c:	080192ad 	.word	0x080192ad
 8019190:	080192ad 	.word	0x080192ad
 8019194:	080192ad 	.word	0x080192ad
 8019198:	080192ad 	.word	0x080192ad
 801919c:	080192ad 	.word	0x080192ad
 80191a0:	080192ad 	.word	0x080192ad
 80191a4:	080192ad 	.word	0x080192ad
 80191a8:	080192ad 	.word	0x080192ad
 80191ac:	080192ad 	.word	0x080192ad
 80191b0:	080192ad 	.word	0x080192ad
 80191b4:	080192ad 	.word	0x080192ad
 80191b8:	080192ad 	.word	0x080192ad
 80191bc:	080192ad 	.word	0x080192ad
 80191c0:	080192ad 	.word	0x080192ad
 80191c4:	080192ad 	.word	0x080192ad
 80191c8:	080192ad 	.word	0x080192ad
 80191cc:	080192ad 	.word	0x080192ad
 80191d0:	080192ad 	.word	0x080192ad
 80191d4:	080192ad 	.word	0x080192ad
 80191d8:	080192ad 	.word	0x080192ad
 80191dc:	080192ad 	.word	0x080192ad
 80191e0:	080192ad 	.word	0x080192ad
 80191e4:	080192ad 	.word	0x080192ad
 80191e8:	080192ad 	.word	0x080192ad
 80191ec:	080192ad 	.word	0x080192ad
 80191f0:	080192ad 	.word	0x080192ad
 80191f4:	080192ad 	.word	0x080192ad
 80191f8:	080192ad 	.word	0x080192ad
 80191fc:	080192ad 	.word	0x080192ad
 8019200:	080192ad 	.word	0x080192ad
 8019204:	080192ad 	.word	0x080192ad
 8019208:	080192ad 	.word	0x080192ad
 801920c:	080192ad 	.word	0x080192ad
 8019210:	080192ad 	.word	0x080192ad
 8019214:	080192ad 	.word	0x080192ad
 8019218:	080192ad 	.word	0x080192ad
 801921c:	080192ad 	.word	0x080192ad
 8019220:	080192ad 	.word	0x080192ad
 8019224:	080192ad 	.word	0x080192ad
 8019228:	080192ad 	.word	0x080192ad
 801922c:	080192ad 	.word	0x080192ad
 8019230:	080192ad 	.word	0x080192ad
 8019234:	080192ad 	.word	0x080192ad
 8019238:	080192ad 	.word	0x080192ad
 801923c:	080192ad 	.word	0x080192ad
 8019240:	080192ad 	.word	0x080192ad
 8019244:	080192ad 	.word	0x080192ad
 8019248:	080192ad 	.word	0x080192ad
 801924c:	080192ad 	.word	0x080192ad
 8019250:	080192ad 	.word	0x080192ad
 8019254:	080192ad 	.word	0x080192ad
 8019258:	080192ad 	.word	0x080192ad
 801925c:	080192ad 	.word	0x080192ad
 8019260:	080192ad 	.word	0x080192ad
 8019264:	080192ad 	.word	0x080192ad
 8019268:	080192ad 	.word	0x080192ad
 801926c:	080192ad 	.word	0x080192ad
 8019270:	080192ad 	.word	0x080192ad
 8019274:	080192ad 	.word	0x080192ad
 8019278:	080192ad 	.word	0x080192ad
 801927c:	080192ad 	.word	0x080192ad
 8019280:	080192ad 	.word	0x080192ad
 8019284:	080192ad 	.word	0x080192ad
 8019288:	080192ad 	.word	0x080192ad
 801928c:	080192ad 	.word	0x080192ad
 8019290:	080192ad 	.word	0x080192ad
 8019294:	080192ad 	.word	0x080192ad
 8019298:	080192ad 	.word	0x080192ad
 801929c:	080192ad 	.word	0x080192ad
 80192a0:	080192ad 	.word	0x080192ad
 80192a4:	080192ad 	.word	0x080192ad
 80192a8:	080192ad 	.word	0x080192ad
      break;
    case GUI_REG_VENDOR_DATA :

      break;
    default :
      break;
 80192ac:	bf00      	nop
  }
  TLV_deinit_decode(&ToProcessTLV);
 80192ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80192b2:	4618      	mov	r0, r3
 80192b4:	f7fd f878 	bl	80163a8 <TLV_deinit_decode>

  TLV_ToSend_Data_t ToSendTLV;
  /* Generation of the empty response, as it should be done*/
  (void)TLV_init_encode(&ToSendTLV, __GUI_SET_TAG_ID((PortNum + 1), DPM_REGISTER_WRITE_CNF), 12, pEncodedMsg);
 80192b8:	7bfb      	ldrb	r3, [r7, #15]
 80192ba:	3301      	adds	r3, #1
 80192bc:	015b      	lsls	r3, r3, #5
 80192be:	b25b      	sxtb	r3, r3
 80192c0:	f043 0311 	orr.w	r3, r3, #17
 80192c4:	b25b      	sxtb	r3, r3
 80192c6:	b2d9      	uxtb	r1, r3
 80192c8:	f107 0014 	add.w	r0, r7, #20
 80192cc:	68bb      	ldr	r3, [r7, #8]
 80192ce:	220c      	movs	r2, #12
 80192d0:	f7fc fe2b 	bl	8015f2a <TLV_init_encode>
  TLV_deinit_encode(&ToSendTLV);
 80192d4:	f107 0314 	add.w	r3, r7, #20
 80192d8:	4618      	mov	r0, r3
 80192da:	f7fc ffc9 	bl	8016270 <TLV_deinit_encode>
}
 80192de:	bf00      	nop
 80192e0:	3730      	adds	r7, #48	@ 0x30
 80192e2:	46bd      	mov	sp, r7
 80192e4:	bd80      	pop	{r7, pc}
 80192e6:	bf00      	nop

080192e8 <Manage_FreeText>:
  * @param  pPayload    Pointer of the text to manage
  * @param  Size        Size of the text
  * @retval USBPD Status
  */
static USBPD_StatusTypeDef Manage_FreeText(uint8_t PortNum, uint8_t *pPayload, uint16_t Size)
{
 80192e8:	b580      	push	{r7, lr}
 80192ea:	b084      	sub	sp, #16
 80192ec:	af00      	add	r7, sp, #0
 80192ee:	4603      	mov	r3, r0
 80192f0:	6039      	str	r1, [r7, #0]
 80192f2:	71fb      	strb	r3, [r7, #7]
 80192f4:	4613      	mov	r3, r2
 80192f6:	80bb      	strh	r3, [r7, #4]
  USBPD_StatusTypeDef _status = USBPD_FAIL;
 80192f8:	2310      	movs	r3, #16
 80192fa:	73fb      	strb	r3, [r7, #15]

  if (NULL != pCB_FreeText)
 80192fc:	4b08      	ldr	r3, [pc, #32]	@ (8019320 <Manage_FreeText+0x38>)
 80192fe:	681b      	ldr	r3, [r3, #0]
 8019300:	2b00      	cmp	r3, #0
 8019302:	d007      	beq.n	8019314 <Manage_FreeText+0x2c>
  {
    pCB_FreeText(PortNum, pPayload, Size);
 8019304:	4b06      	ldr	r3, [pc, #24]	@ (8019320 <Manage_FreeText+0x38>)
 8019306:	681b      	ldr	r3, [r3, #0]
 8019308:	88ba      	ldrh	r2, [r7, #4]
 801930a:	79f8      	ldrb	r0, [r7, #7]
 801930c:	6839      	ldr	r1, [r7, #0]
 801930e:	4798      	blx	r3
    _status = USBPD_OK;
 8019310:	2300      	movs	r3, #0
 8019312:	73fb      	strb	r3, [r7, #15]
  }

  return _status;
 8019314:	7bfb      	ldrb	r3, [r7, #15]
}
 8019316:	4618      	mov	r0, r3
 8019318:	3710      	adds	r7, #16
 801931a:	46bd      	mov	sp, r7
 801931c:	bd80      	pop	{r7, pc}
 801931e:	bf00      	nop
 8019320:	20002ad8 	.word	0x20002ad8

08019324 <TRACER_EMB_Init>:

/** @addtogroup TRACER_EMB_Exported_Functions
  * @{
  */
void TRACER_EMB_Init(void)
{
 8019324:	b580      	push	{r7, lr}
 8019326:	af00      	add	r7, sp, #0
  /* initialize the Ptr for Read/Write */
  (void)memset(&TracerContext, 0, sizeof(TRACER_ContextTypedef_t));
 8019328:	f240 421c 	movw	r2, #1052	@ 0x41c
 801932c:	2100      	movs	r1, #0
 801932e:	4804      	ldr	r0, [pc, #16]	@ (8019340 <TRACER_EMB_Init+0x1c>)
 8019330:	f001 f96a 	bl	801a608 <memset>

  /* Initialize trace BUS */
  HW_TRACER_EMB_Init();
 8019334:	f000 fe9e 	bl	801a074 <HW_TRACER_EMB_Init>

  /* Initialize the lowpower aspect */
  TRACER_EMB_LowPowerInit();
 8019338:	f000 f9d0 	bl	80196dc <TRACER_EMB_LowPowerInit>
}
 801933c:	bf00      	nop
 801933e:	bd80      	pop	{r7, pc}
 8019340:	20002b54 	.word	0x20002b54

08019344 <TRACER_EMB_Add>:

void TRACER_EMB_Add(uint8_t *Ptr, uint32_t Size)
{
 8019344:	b580      	push	{r7, lr}
 8019346:	b086      	sub	sp, #24
 8019348:	af00      	add	r7, sp, #0
 801934a:	6078      	str	r0, [r7, #4]
 801934c:	6039      	str	r1, [r7, #0]
  int32_t _writepos;
  uint8_t *data_to_write = Ptr;
 801934e:	687b      	ldr	r3, [r7, #4]
 8019350:	60fb      	str	r3, [r7, #12]
  uint32_t index;

  /* Data processing */
  TRACER_EMB_Lock();
 8019352:	f000 f8cd 	bl	80194f0 <TRACER_EMB_Lock>
  _writepos = TRACER_EMB_AllocateBufer(Size);
 8019356:	6838      	ldr	r0, [r7, #0]
 8019358:	f000 f966 	bl	8019628 <TRACER_EMB_AllocateBufer>
 801935c:	6178      	str	r0, [r7, #20]

  /* if allocation is ok, write data into the buffer */
  if (_writepos != -1)
 801935e:	697b      	ldr	r3, [r7, #20]
 8019360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019364:	d023      	beq.n	80193ae <TRACER_EMB_Add+0x6a>
  {
    /* initialize the Ptr for Read/Write */
    for (index = 0U; index < Size; index++)
 8019366:	2300      	movs	r3, #0
 8019368:	613b      	str	r3, [r7, #16]
 801936a:	e01c      	b.n	80193a6 <TRACER_EMB_Add+0x62>
    {
      TRACER_WRITE_DATA(_writepos, data_to_write[index]);
 801936c:	68fa      	ldr	r2, [r7, #12]
 801936e:	693b      	ldr	r3, [r7, #16]
 8019370:	441a      	add	r2, r3
 8019372:	697b      	ldr	r3, [r7, #20]
 8019374:	4259      	negs	r1, r3
 8019376:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801937a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801937e:	bf58      	it	pl
 8019380:	424b      	negpl	r3, r1
 8019382:	7811      	ldrb	r1, [r2, #0]
 8019384:	4a0e      	ldr	r2, [pc, #56]	@ (80193c0 <TRACER_EMB_Add+0x7c>)
 8019386:	4413      	add	r3, r2
 8019388:	460a      	mov	r2, r1
 801938a:	76da      	strb	r2, [r3, #27]
 801938c:	697b      	ldr	r3, [r7, #20]
 801938e:	3301      	adds	r3, #1
 8019390:	425a      	negs	r2, r3
 8019392:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019396:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801939a:	bf58      	it	pl
 801939c:	4253      	negpl	r3, r2
 801939e:	617b      	str	r3, [r7, #20]
    for (index = 0U; index < Size; index++)
 80193a0:	693b      	ldr	r3, [r7, #16]
 80193a2:	3301      	adds	r3, #1
 80193a4:	613b      	str	r3, [r7, #16]
 80193a6:	693a      	ldr	r2, [r7, #16]
 80193a8:	683b      	ldr	r3, [r7, #0]
 80193aa:	429a      	cmp	r2, r3
 80193ac:	d3de      	bcc.n	801936c <TRACER_EMB_Add+0x28>
    }
  }
  TRACER_EMB_UnLock();
 80193ae:	f000 f8bf 	bl	8019530 <TRACER_EMB_UnLock>

  /* Tx processing */
  TRACER_EMB_SendData();
 80193b2:	f000 f8dd 	bl	8019570 <TRACER_EMB_SendData>
}
 80193b6:	bf00      	nop
 80193b8:	3718      	adds	r7, #24
 80193ba:	46bd      	mov	sp, r7
 80193bc:	bd80      	pop	{r7, pc}
 80193be:	bf00      	nop
 80193c0:	20002b54 	.word	0x20002b54

080193c4 <TRACER_EMB_IRQHandlerDMA>:

#if TRACER_EMB_DMA_MODE == 1UL
void TRACER_EMB_IRQHandlerDMA(void)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerDMA();
 80193c8:	f000 ff1e 	bl	801a208 <HW_TRACER_EMB_IRQHandlerDMA>
}
 80193cc:	bf00      	nop
 80193ce:	bd80      	pop	{r7, pc}

080193d0 <TRACER_EMB_IRQHandlerUSART>:
#endif /* TRACER_EMB_DMA_MODE == 1 */

void TRACER_EMB_IRQHandlerUSART(void)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	af00      	add	r7, sp, #0
  HW_TRACER_EMB_IRQHandlerUSART();
 80193d4:	f000 ff2c 	bl	801a230 <HW_TRACER_EMB_IRQHandlerUSART>
}
 80193d8:	bf00      	nop
 80193da:	bd80      	pop	{r7, pc}

080193dc <TRACER_EMB_WriteData>:

void TRACER_EMB_WriteData(uint16_t pos, uint8_t data)
{
 80193dc:	b480      	push	{r7}
 80193de:	b083      	sub	sp, #12
 80193e0:	af00      	add	r7, sp, #0
 80193e2:	4603      	mov	r3, r0
 80193e4:	460a      	mov	r2, r1
 80193e6:	80fb      	strh	r3, [r7, #6]
 80193e8:	4613      	mov	r3, r2
 80193ea:	717b      	strb	r3, [r7, #5]
  TracerContext.PtrDataTx[pos % TRACER_EMB_BUFFER_SIZE] = data;
 80193ec:	88fb      	ldrh	r3, [r7, #6]
 80193ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80193f2:	4a05      	ldr	r2, [pc, #20]	@ (8019408 <TRACER_EMB_WriteData+0x2c>)
 80193f4:	4413      	add	r3, r2
 80193f6:	797a      	ldrb	r2, [r7, #5]
 80193f8:	76da      	strb	r2, [r3, #27]
}
 80193fa:	bf00      	nop
 80193fc:	370c      	adds	r7, #12
 80193fe:	46bd      	mov	sp, r7
 8019400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019404:	4770      	bx	lr
 8019406:	bf00      	nop
 8019408:	20002b54 	.word	0x20002b54

0801940c <TRACER_EMB_StartRX>:

void TRACER_EMB_StartRX(void (*callbackRX)(uint8_t, uint8_t))
{
 801940c:	b580      	push	{r7, lr}
 801940e:	b082      	sub	sp, #8
 8019410:	af00      	add	r7, sp, #0
 8019412:	6078      	str	r0, [r7, #4]
  HW_TRACER_EMB_RegisterRxCallback(callbackRX);
 8019414:	6878      	ldr	r0, [r7, #4]
 8019416:	f000 fed1 	bl	801a1bc <HW_TRACER_EMB_RegisterRxCallback>
  HW_TRACER_EMB_StartRX();
 801941a:	f000 fedf 	bl	801a1dc <HW_TRACER_EMB_StartRX>
}
 801941e:	bf00      	nop
 8019420:	3708      	adds	r7, #8
 8019422:	46bd      	mov	sp, r7
 8019424:	bd80      	pop	{r7, pc}
	...

08019428 <TRACER_EMB_EnableOverFlow>:

int32_t TRACER_EMB_EnableOverFlow(const uint8_t *Data, uint8_t Size)
{
 8019428:	b480      	push	{r7}
 801942a:	b083      	sub	sp, #12
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
 8019430:	460b      	mov	r3, r1
 8019432:	70fb      	strb	r3, [r7, #3]
  if (Size != 0U)
 8019434:	78fb      	ldrb	r3, [r7, #3]
 8019436:	2b00      	cmp	r3, #0
 8019438:	d007      	beq.n	801944a <TRACER_EMB_EnableOverFlow+0x22>
  {
    TracerContext.OverFlow_Data = Data;
 801943a:	4a08      	ldr	r2, [pc, #32]	@ (801945c <TRACER_EMB_EnableOverFlow+0x34>)
 801943c:	687b      	ldr	r3, [r7, #4]
 801943e:	6153      	str	r3, [r2, #20]
    TracerContext.OverFlow_Size = Size;
 8019440:	4a06      	ldr	r2, [pc, #24]	@ (801945c <TRACER_EMB_EnableOverFlow+0x34>)
 8019442:	78fb      	ldrb	r3, [r7, #3]
 8019444:	7613      	strb	r3, [r2, #24]
    return 0;
 8019446:	2300      	movs	r3, #0
 8019448:	e001      	b.n	801944e <TRACER_EMB_EnableOverFlow+0x26>
  }
  return -1;
 801944a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801944e:	4618      	mov	r0, r3
 8019450:	370c      	adds	r7, #12
 8019452:	46bd      	mov	sp, r7
 8019454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019458:	4770      	bx	lr
 801945a:	bf00      	nop
 801945c:	20002b54 	.word	0x20002b54

08019460 <TRACER_EMB_CALLBACK_TX>:
  * @brief  callback called to end a transfer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_CALLBACK_TX(void)
{
 8019460:	b580      	push	{r7, lr}
 8019462:	b084      	sub	sp, #16
 8019464:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019466:	f3ef 8310 	mrs	r3, PRIMASK
 801946a:	60bb      	str	r3, [r7, #8]
  return(result);
 801946c:	68bb      	ldr	r3, [r7, #8]
  TRACER_ENTER_CRITICAL_SECTION();
 801946e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019470:	b672      	cpsid	i
}
 8019472:	bf00      	nop
  TracerContext.PtrTx_Read = (TracerContext.PtrTx_Read + TracerContext.SizeSent) % TRACER_EMB_BUFFER_SIZE;
 8019474:	4b1d      	ldr	r3, [pc, #116]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019476:	681a      	ldr	r2, [r3, #0]
 8019478:	4b1c      	ldr	r3, [pc, #112]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 801947a:	689b      	ldr	r3, [r3, #8]
 801947c:	4413      	add	r3, r2
 801947e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019482:	4a1a      	ldr	r2, [pc, #104]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019484:	6013      	str	r3, [r2, #0]

  if ((TracerContext.OverFlow_Data != NULL) && (TracerContext.OverFlow_Status == TRACER_OVERFLOW_DETECTED)
 8019486:	4b19      	ldr	r3, [pc, #100]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019488:	695b      	ldr	r3, [r3, #20]
 801948a:	2b00      	cmp	r3, #0
 801948c:	d019      	beq.n	80194c2 <TRACER_EMB_CALLBACK_TX+0x62>
 801948e:	4b17      	ldr	r3, [pc, #92]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019490:	7e9b      	ldrb	r3, [r3, #26]
 8019492:	2b01      	cmp	r3, #1
 8019494:	d115      	bne.n	80194c2 <TRACER_EMB_CALLBACK_TX+0x62>
      && (TracerContext.discontinue == 0U))
 8019496:	4b15      	ldr	r3, [pc, #84]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 8019498:	7e5b      	ldrb	r3, [r3, #25]
 801949a:	2b00      	cmp	r3, #0
 801949c:	d111      	bne.n	80194c2 <TRACER_EMB_CALLBACK_TX+0x62>
  {
    TracerContext.OverFlow_Status = TRACER_OVERFLOW_SENT;
 801949e:	4b13      	ldr	r3, [pc, #76]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 80194a0:	2202      	movs	r2, #2
 80194a2:	769a      	strb	r2, [r3, #26]
    HW_TRACER_EMB_SendData(TracerContext.OverFlow_Data, TracerContext.OverFlow_Size);
 80194a4:	4b11      	ldr	r3, [pc, #68]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 80194a6:	695b      	ldr	r3, [r3, #20]
 80194a8:	4a10      	ldr	r2, [pc, #64]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 80194aa:	7e12      	ldrb	r2, [r2, #24]
 80194ac:	4611      	mov	r1, r2
 80194ae:	4618      	mov	r0, r3
 80194b0:	f000 ff72 	bl	801a398 <HW_TRACER_EMB_SendData>
 80194b4:	68fb      	ldr	r3, [r7, #12]
 80194b6:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	f383 8810 	msr	PRIMASK, r3
}
 80194be:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
 80194c0:	e00f      	b.n	80194e2 <TRACER_EMB_CALLBACK_TX+0x82>
  }
  else
  {
    TracerContext.LowPower_Counter--;
 80194c2:	4b0a      	ldr	r3, [pc, #40]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 80194c4:	68db      	ldr	r3, [r3, #12]
 80194c6:	3b01      	subs	r3, #1
 80194c8:	4a08      	ldr	r2, [pc, #32]	@ (80194ec <TRACER_EMB_CALLBACK_TX+0x8c>)
 80194ca:	60d3      	str	r3, [r2, #12]
 80194cc:	68fb      	ldr	r3, [r7, #12]
 80194ce:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80194d0:	683b      	ldr	r3, [r7, #0]
 80194d2:	f383 8810 	msr	PRIMASK, r3
}
 80194d6:	bf00      	nop
    TRACER_LEAVE_CRITICAL_SECTION();
    TRACER_EMB_UnLock();
 80194d8:	f000 f82a 	bl	8019530 <TRACER_EMB_UnLock>
    TRACER_EMB_SendData();
 80194dc:	f000 f848 	bl	8019570 <TRACER_EMB_SendData>
  }
}
 80194e0:	bf00      	nop
 80194e2:	bf00      	nop
 80194e4:	3710      	adds	r7, #16
 80194e6:	46bd      	mov	sp, r7
 80194e8:	bd80      	pop	{r7, pc}
 80194ea:	bf00      	nop
 80194ec:	20002b54 	.word	0x20002b54

080194f0 <TRACER_EMB_Lock>:
  * @brief  Lock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_Lock(void)
{
 80194f0:	b480      	push	{r7}
 80194f2:	b085      	sub	sp, #20
 80194f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80194f6:	f3ef 8310 	mrs	r3, PRIMASK
 80194fa:	607b      	str	r3, [r7, #4]
  return(result);
 80194fc:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 80194fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019500:	b672      	cpsid	i
}
 8019502:	bf00      	nop
  TracerContext.Counter++;
 8019504:	4b09      	ldr	r3, [pc, #36]	@ (801952c <TRACER_EMB_Lock+0x3c>)
 8019506:	7c1b      	ldrb	r3, [r3, #16]
 8019508:	b2db      	uxtb	r3, r3
 801950a:	3301      	adds	r3, #1
 801950c:	b2da      	uxtb	r2, r3
 801950e:	4b07      	ldr	r3, [pc, #28]	@ (801952c <TRACER_EMB_Lock+0x3c>)
 8019510:	741a      	strb	r2, [r3, #16]
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019516:	68bb      	ldr	r3, [r7, #8]
 8019518:	f383 8810 	msr	PRIMASK, r3
}
 801951c:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 801951e:	bf00      	nop
 8019520:	3714      	adds	r7, #20
 8019522:	46bd      	mov	sp, r7
 8019524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019528:	4770      	bx	lr
 801952a:	bf00      	nop
 801952c:	20002b54 	.word	0x20002b54

08019530 <TRACER_EMB_UnLock>:
  * @brief  UnLock the trace buffer.
  * @param  None.
  * @retval None.
  */
void TRACER_EMB_UnLock(void)
{
 8019530:	b480      	push	{r7}
 8019532:	b085      	sub	sp, #20
 8019534:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019536:	f3ef 8310 	mrs	r3, PRIMASK
 801953a:	607b      	str	r3, [r7, #4]
  return(result);
 801953c:	687b      	ldr	r3, [r7, #4]
  TRACER_ENTER_CRITICAL_SECTION();
 801953e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8019540:	b672      	cpsid	i
}
 8019542:	bf00      	nop
  TracerContext.Counter--;
 8019544:	4b09      	ldr	r3, [pc, #36]	@ (801956c <TRACER_EMB_UnLock+0x3c>)
 8019546:	7c1b      	ldrb	r3, [r3, #16]
 8019548:	b2db      	uxtb	r3, r3
 801954a:	3b01      	subs	r3, #1
 801954c:	b2da      	uxtb	r2, r3
 801954e:	4b07      	ldr	r3, [pc, #28]	@ (801956c <TRACER_EMB_UnLock+0x3c>)
 8019550:	741a      	strb	r2, [r3, #16]
 8019552:	68fb      	ldr	r3, [r7, #12]
 8019554:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019556:	68bb      	ldr	r3, [r7, #8]
 8019558:	f383 8810 	msr	PRIMASK, r3
}
 801955c:	bf00      	nop
  TRACER_LEAVE_CRITICAL_SECTION();
}
 801955e:	bf00      	nop
 8019560:	3714      	adds	r7, #20
 8019562:	46bd      	mov	sp, r7
 8019564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019568:	4770      	bx	lr
 801956a:	bf00      	nop
 801956c:	20002b54 	.word	0x20002b54

08019570 <TRACER_EMB_SendData>:
  * @param  address begin of the data
  * @param  address end of the data
  * @retval None.
  */
void TRACER_EMB_SendData(void)
{
 8019570:	b580      	push	{r7, lr}
 8019572:	b086      	sub	sp, #24
 8019574:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019576:	f3ef 8310 	mrs	r3, PRIMASK
 801957a:	60bb      	str	r3, [r7, #8]
  return(result);
 801957c:	68bb      	ldr	r3, [r7, #8]
  uint32_t _begin;
  uint32_t _end;

  TRACER_ENTER_CRITICAL_SECTION();
 801957e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019580:	b672      	cpsid	i
}
 8019582:	bf00      	nop

  if (0u == TracerContext.Counter)
 8019584:	4b27      	ldr	r3, [pc, #156]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 8019586:	7c1b      	ldrb	r3, [r3, #16]
 8019588:	b2db      	uxtb	r3, r3
 801958a:	2b00      	cmp	r3, #0
 801958c:	d132      	bne.n	80195f4 <TRACER_EMB_SendData+0x84>
  {
    _begin = TracerContext.PtrTx_Read;
 801958e:	4b25      	ldr	r3, [pc, #148]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 8019590:	681b      	ldr	r3, [r3, #0]
 8019592:	613b      	str	r3, [r7, #16]
    _end = TracerContext.PtrTx_Write;
 8019594:	4b23      	ldr	r3, [pc, #140]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 8019596:	685b      	ldr	r3, [r3, #4]
 8019598:	60fb      	str	r3, [r7, #12]

    if (_begin != _end)
 801959a:	693a      	ldr	r2, [r7, #16]
 801959c:	68fb      	ldr	r3, [r7, #12]
 801959e:	429a      	cmp	r2, r3
 80195a0:	d028      	beq.n	80195f4 <TRACER_EMB_SendData+0x84>
    {
      TRACER_EMB_Lock();
 80195a2:	f7ff ffa5 	bl	80194f0 <TRACER_EMB_Lock>
      /*  */
      if (_end > _begin)
 80195a6:	68fa      	ldr	r2, [r7, #12]
 80195a8:	693b      	ldr	r3, [r7, #16]
 80195aa:	429a      	cmp	r2, r3
 80195ac:	d908      	bls.n	80195c0 <TRACER_EMB_SendData+0x50>
      {
        TracerContext.SizeSent = _end - _begin;
 80195ae:	68fa      	ldr	r2, [r7, #12]
 80195b0:	693b      	ldr	r3, [r7, #16]
 80195b2:	1ad3      	subs	r3, r2, r3
 80195b4:	4a1b      	ldr	r2, [pc, #108]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195b6:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 0;
 80195b8:	4b1a      	ldr	r3, [pc, #104]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195ba:	2200      	movs	r2, #0
 80195bc:	765a      	strb	r2, [r3, #25]
 80195be:	e007      	b.n	80195d0 <TRACER_EMB_SendData+0x60>
      }
      else  /* _begin > _end */
      {
        TracerContext.SizeSent = TRACER_EMB_BUFFER_SIZE - _begin;
 80195c0:	693b      	ldr	r3, [r7, #16]
 80195c2:	f5c3 6380 	rsb	r3, r3, #1024	@ 0x400
 80195c6:	4a17      	ldr	r2, [pc, #92]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195c8:	6093      	str	r3, [r2, #8]
        TracerContext.discontinue = 1;
 80195ca:	4b16      	ldr	r3, [pc, #88]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195cc:	2201      	movs	r2, #1
 80195ce:	765a      	strb	r2, [r3, #25]
      }
      TRACER_EMB_LowPowerSendData();
 80195d0:	f000 f88b 	bl	80196ea <TRACER_EMB_LowPowerSendData>
      TracerContext.LowPower_Counter++;
 80195d4:	4b13      	ldr	r3, [pc, #76]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195d6:	68db      	ldr	r3, [r3, #12]
 80195d8:	3301      	adds	r3, #1
 80195da:	4a12      	ldr	r2, [pc, #72]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195dc:	60d3      	str	r3, [r2, #12]
      HW_TRACER_EMB_SendData((const uint8_t *)(&(TracerContext.PtrDataTx[_begin])), TracerContext.SizeSent);
 80195de:	693b      	ldr	r3, [r7, #16]
 80195e0:	3318      	adds	r3, #24
 80195e2:	4a10      	ldr	r2, [pc, #64]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195e4:	4413      	add	r3, r2
 80195e6:	3303      	adds	r3, #3
 80195e8:	4a0e      	ldr	r2, [pc, #56]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195ea:	6892      	ldr	r2, [r2, #8]
 80195ec:	4611      	mov	r1, r2
 80195ee:	4618      	mov	r0, r3
 80195f0:	f000 fed2 	bl	801a398 <HW_TRACER_EMB_SendData>
    }
  }

  /* Low power processing */
  switch (TracerContext.LowPower_Counter)
 80195f4:	4b0b      	ldr	r3, [pc, #44]	@ (8019624 <TRACER_EMB_SendData+0xb4>)
 80195f6:	68db      	ldr	r3, [r3, #12]
 80195f8:	2b00      	cmp	r3, #0
 80195fa:	d004      	beq.n	8019606 <TRACER_EMB_SendData+0x96>
 80195fc:	2b01      	cmp	r3, #1
 80195fe:	d105      	bne.n	801960c <TRACER_EMB_SendData+0x9c>
  {
    case 1:
      TRACER_EMB_LowPowerSendData();
 8019600:	f000 f873 	bl	80196ea <TRACER_EMB_LowPowerSendData>
      break;
 8019604:	e003      	b.n	801960e <TRACER_EMB_SendData+0x9e>
    case 0:
      TRACER_EMB_LowPowerSendDataComplete();
 8019606:	f000 f877 	bl	80196f8 <TRACER_EMB_LowPowerSendDataComplete>
      break;
 801960a:	e000      	b.n	801960e <TRACER_EMB_SendData+0x9e>
    default:
      break;
 801960c:	bf00      	nop
 801960e:	697b      	ldr	r3, [r7, #20]
 8019610:	607b      	str	r3, [r7, #4]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8019612:	687b      	ldr	r3, [r7, #4]
 8019614:	f383 8810 	msr	PRIMASK, r3
}
 8019618:	bf00      	nop
  }

  TRACER_LEAVE_CRITICAL_SECTION();
}
 801961a:	bf00      	nop
 801961c:	3718      	adds	r7, #24
 801961e:	46bd      	mov	sp, r7
 8019620:	bd80      	pop	{r7, pc}
 8019622:	bf00      	nop
 8019624:	20002b54 	.word	0x20002b54

08019628 <TRACER_EMB_AllocateBufer>:
  * @brief  allocate space inside the buffer to push data
  * @param  data size
  * @retval write position inside the buffer is -1 no space available.
  */
int32_t TRACER_EMB_AllocateBufer(uint32_t Size)
{
 8019628:	b480      	push	{r7}
 801962a:	b089      	sub	sp, #36	@ 0x24
 801962c:	af00      	add	r7, sp, #0
 801962e:	6078      	str	r0, [r7, #4]
  uint32_t _freesize;
  int32_t _pos = -1;
 8019630:	f04f 33ff 	mov.w	r3, #4294967295
 8019634:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8019636:	f3ef 8310 	mrs	r3, PRIMASK
 801963a:	613b      	str	r3, [r7, #16]
  return(result);
 801963c:	693b      	ldr	r3, [r7, #16]

  TRACER_ENTER_CRITICAL_SECTION();
 801963e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("cpsid i" : : : "memory");
 8019640:	b672      	cpsid	i
}
 8019642:	bf00      	nop

  if (TracerContext.PtrTx_Write == TracerContext.PtrTx_Read)
 8019644:	4b24      	ldr	r3, [pc, #144]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8019646:	685a      	ldr	r2, [r3, #4]
 8019648:	4b23      	ldr	r3, [pc, #140]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	429a      	cmp	r2, r3
 801964e:	d103      	bne.n	8019658 <TRACER_EMB_AllocateBufer+0x30>
  {
    /* Need to add buffer full management */
    _freesize = TRACER_EMB_BUFFER_SIZE;
 8019650:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8019654:	61fb      	str	r3, [r7, #28]
 8019656:	e014      	b.n	8019682 <TRACER_EMB_AllocateBufer+0x5a>
  }
  else
  {
    if (TracerContext.PtrTx_Write > TracerContext.PtrTx_Read)
 8019658:	4b1f      	ldr	r3, [pc, #124]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801965a:	685a      	ldr	r2, [r3, #4]
 801965c:	4b1e      	ldr	r3, [pc, #120]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801965e:	681b      	ldr	r3, [r3, #0]
 8019660:	429a      	cmp	r2, r3
 8019662:	d908      	bls.n	8019676 <TRACER_EMB_AllocateBufer+0x4e>
    {
      _freesize = TRACER_EMB_BUFFER_SIZE - TracerContext.PtrTx_Write + TracerContext.PtrTx_Read;
 8019664:	4b1c      	ldr	r3, [pc, #112]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8019666:	681a      	ldr	r2, [r3, #0]
 8019668:	4b1b      	ldr	r3, [pc, #108]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801966a:	685b      	ldr	r3, [r3, #4]
 801966c:	1ad3      	subs	r3, r2, r3
 801966e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8019672:	61fb      	str	r3, [r7, #28]
 8019674:	e005      	b.n	8019682 <TRACER_EMB_AllocateBufer+0x5a>
    }
    else
    {
      _freesize = TracerContext.PtrTx_Read - TracerContext.PtrTx_Write;
 8019676:	4b18      	ldr	r3, [pc, #96]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8019678:	681a      	ldr	r2, [r3, #0]
 801967a:	4b17      	ldr	r3, [pc, #92]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801967c:	685b      	ldr	r3, [r3, #4]
 801967e:	1ad3      	subs	r3, r2, r3
 8019680:	61fb      	str	r3, [r7, #28]
    }
  }

  if (_freesize > Size)
 8019682:	69fa      	ldr	r2, [r7, #28]
 8019684:	687b      	ldr	r3, [r7, #4]
 8019686:	429a      	cmp	r2, r3
 8019688:	d912      	bls.n	80196b0 <TRACER_EMB_AllocateBufer+0x88>
  {
    _pos = (int32_t)TracerContext.PtrTx_Write;
 801968a:	4b13      	ldr	r3, [pc, #76]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801968c:	685b      	ldr	r3, [r3, #4]
 801968e:	61bb      	str	r3, [r7, #24]
    TracerContext.PtrTx_Write = (TracerContext.PtrTx_Write + Size) % TRACER_EMB_BUFFER_SIZE;
 8019690:	4b11      	ldr	r3, [pc, #68]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 8019692:	685a      	ldr	r2, [r3, #4]
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	4413      	add	r3, r2
 8019698:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801969c:	4a0e      	ldr	r2, [pc, #56]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 801969e:	6053      	str	r3, [r2, #4]
    if (TRACER_OVERFLOW_SENT == TracerContext.OverFlow_Status)
 80196a0:	4b0d      	ldr	r3, [pc, #52]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80196a2:	7e9b      	ldrb	r3, [r3, #26]
 80196a4:	2b02      	cmp	r3, #2
 80196a6:	d10a      	bne.n	80196be <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_NONE;
 80196a8:	4b0b      	ldr	r3, [pc, #44]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80196aa:	2200      	movs	r2, #0
 80196ac:	769a      	strb	r2, [r3, #26]
 80196ae:	e006      	b.n	80196be <TRACER_EMB_AllocateBufer+0x96>
    }
  }
  else
  {
    if (TRACER_OVERFLOW_NONE == TracerContext.OverFlow_Status)
 80196b0:	4b09      	ldr	r3, [pc, #36]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80196b2:	7e9b      	ldrb	r3, [r3, #26]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	d102      	bne.n	80196be <TRACER_EMB_AllocateBufer+0x96>
    {
      TracerContext.OverFlow_Status = TRACER_OVERFLOW_DETECTED;
 80196b8:	4b07      	ldr	r3, [pc, #28]	@ (80196d8 <TRACER_EMB_AllocateBufer+0xb0>)
 80196ba:	2201      	movs	r2, #1
 80196bc:	769a      	strb	r2, [r3, #26]
 80196be:	697b      	ldr	r3, [r7, #20]
 80196c0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80196c2:	68fb      	ldr	r3, [r7, #12]
 80196c4:	f383 8810 	msr	PRIMASK, r3
}
 80196c8:	bf00      	nop
    }
  }

  TRACER_LEAVE_CRITICAL_SECTION();
  return _pos;
 80196ca:	69bb      	ldr	r3, [r7, #24]
}
 80196cc:	4618      	mov	r0, r3
 80196ce:	3724      	adds	r7, #36	@ 0x24
 80196d0:	46bd      	mov	sp, r7
 80196d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196d6:	4770      	bx	lr
 80196d8:	20002b54 	.word	0x20002b54

080196dc <TRACER_EMB_LowPowerInit>:

__weak void TRACER_EMB_LowPowerInit(void)
{
 80196dc:	b480      	push	{r7}
 80196de:	af00      	add	r7, sp, #0
}
 80196e0:	bf00      	nop
 80196e2:	46bd      	mov	sp, r7
 80196e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196e8:	4770      	bx	lr

080196ea <TRACER_EMB_LowPowerSendData>:

__weak void TRACER_EMB_LowPowerSendData(void)
{
 80196ea:	b480      	push	{r7}
 80196ec:	af00      	add	r7, sp, #0
}
 80196ee:	bf00      	nop
 80196f0:	46bd      	mov	sp, r7
 80196f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f6:	4770      	bx	lr

080196f8 <TRACER_EMB_LowPowerSendDataComplete>:

__weak void TRACER_EMB_LowPowerSendDataComplete(void)
{
 80196f8:	b480      	push	{r7}
 80196fa:	af00      	add	r7, sp, #0
}
 80196fc:	bf00      	nop
 80196fe:	46bd      	mov	sp, r7
 8019700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019704:	4770      	bx	lr
	...

08019708 <__NVIC_EnableIRQ>:
{
 8019708:	b480      	push	{r7}
 801970a:	b083      	sub	sp, #12
 801970c:	af00      	add	r7, sp, #0
 801970e:	4603      	mov	r3, r0
 8019710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019716:	2b00      	cmp	r3, #0
 8019718:	db0b      	blt.n	8019732 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801971a:	79fb      	ldrb	r3, [r7, #7]
 801971c:	f003 021f 	and.w	r2, r3, #31
 8019720:	4907      	ldr	r1, [pc, #28]	@ (8019740 <__NVIC_EnableIRQ+0x38>)
 8019722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019726:	095b      	lsrs	r3, r3, #5
 8019728:	2001      	movs	r0, #1
 801972a:	fa00 f202 	lsl.w	r2, r0, r2
 801972e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019732:	bf00      	nop
 8019734:	370c      	adds	r7, #12
 8019736:	46bd      	mov	sp, r7
 8019738:	f85d 7b04 	ldr.w	r7, [sp], #4
 801973c:	4770      	bx	lr
 801973e:	bf00      	nop
 8019740:	e000e100 	.word	0xe000e100

08019744 <__NVIC_SetPriority>:
{
 8019744:	b480      	push	{r7}
 8019746:	b083      	sub	sp, #12
 8019748:	af00      	add	r7, sp, #0
 801974a:	4603      	mov	r3, r0
 801974c:	6039      	str	r1, [r7, #0]
 801974e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8019750:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019754:	2b00      	cmp	r3, #0
 8019756:	db0a      	blt.n	801976e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019758:	683b      	ldr	r3, [r7, #0]
 801975a:	b2da      	uxtb	r2, r3
 801975c:	490c      	ldr	r1, [pc, #48]	@ (8019790 <__NVIC_SetPriority+0x4c>)
 801975e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8019762:	0112      	lsls	r2, r2, #4
 8019764:	b2d2      	uxtb	r2, r2
 8019766:	440b      	add	r3, r1
 8019768:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 801976c:	e00a      	b.n	8019784 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801976e:	683b      	ldr	r3, [r7, #0]
 8019770:	b2da      	uxtb	r2, r3
 8019772:	4908      	ldr	r1, [pc, #32]	@ (8019794 <__NVIC_SetPriority+0x50>)
 8019774:	79fb      	ldrb	r3, [r7, #7]
 8019776:	f003 030f 	and.w	r3, r3, #15
 801977a:	3b04      	subs	r3, #4
 801977c:	0112      	lsls	r2, r2, #4
 801977e:	b2d2      	uxtb	r2, r2
 8019780:	440b      	add	r3, r1
 8019782:	761a      	strb	r2, [r3, #24]
}
 8019784:	bf00      	nop
 8019786:	370c      	adds	r7, #12
 8019788:	46bd      	mov	sp, r7
 801978a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801978e:	4770      	bx	lr
 8019790:	e000e100 	.word	0xe000e100
 8019794:	e000ed00 	.word	0xe000ed00

08019798 <LL_AHB1_GRP1_EnableClock>:
{
 8019798:	b480      	push	{r7}
 801979a:	b085      	sub	sp, #20
 801979c:	af00      	add	r7, sp, #0
 801979e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80197a0:	4b08      	ldr	r3, [pc, #32]	@ (80197c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80197a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80197a4:	4907      	ldr	r1, [pc, #28]	@ (80197c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	4313      	orrs	r3, r2
 80197aa:	648b      	str	r3, [r1, #72]	@ 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80197ac:	4b05      	ldr	r3, [pc, #20]	@ (80197c4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80197ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80197b0:	687b      	ldr	r3, [r7, #4]
 80197b2:	4013      	ands	r3, r2
 80197b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80197b6:	68fb      	ldr	r3, [r7, #12]
}
 80197b8:	bf00      	nop
 80197ba:	3714      	adds	r7, #20
 80197bc:	46bd      	mov	sp, r7
 80197be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197c2:	4770      	bx	lr
 80197c4:	40021000 	.word	0x40021000

080197c8 <LL_AHB2_GRP1_EnableClock>:
{
 80197c8:	b480      	push	{r7}
 80197ca:	b085      	sub	sp, #20
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80197d0:	4b08      	ldr	r3, [pc, #32]	@ (80197f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80197d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80197d4:	4907      	ldr	r1, [pc, #28]	@ (80197f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80197d6:	687b      	ldr	r3, [r7, #4]
 80197d8:	4313      	orrs	r3, r2
 80197da:	64cb      	str	r3, [r1, #76]	@ 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80197dc:	4b05      	ldr	r3, [pc, #20]	@ (80197f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80197de:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80197e0:	687b      	ldr	r3, [r7, #4]
 80197e2:	4013      	ands	r3, r2
 80197e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80197e6:	68fb      	ldr	r3, [r7, #12]
}
 80197e8:	bf00      	nop
 80197ea:	3714      	adds	r7, #20
 80197ec:	46bd      	mov	sp, r7
 80197ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197f2:	4770      	bx	lr
 80197f4:	40021000 	.word	0x40021000

080197f8 <LL_APB1_GRP2_EnableClock>:
{
 80197f8:	b480      	push	{r7}
 80197fa:	b085      	sub	sp, #20
 80197fc:	af00      	add	r7, sp, #0
 80197fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR2, Periphs);
 8019800:	4b08      	ldr	r3, [pc, #32]	@ (8019824 <LL_APB1_GRP2_EnableClock+0x2c>)
 8019802:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019804:	4907      	ldr	r1, [pc, #28]	@ (8019824 <LL_APB1_GRP2_EnableClock+0x2c>)
 8019806:	687b      	ldr	r3, [r7, #4]
 8019808:	4313      	orrs	r3, r2
 801980a:	65cb      	str	r3, [r1, #92]	@ 0x5c
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 801980c:	4b05      	ldr	r3, [pc, #20]	@ (8019824 <LL_APB1_GRP2_EnableClock+0x2c>)
 801980e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	4013      	ands	r3, r2
 8019814:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8019816:	68fb      	ldr	r3, [r7, #12]
}
 8019818:	bf00      	nop
 801981a:	3714      	adds	r7, #20
 801981c:	46bd      	mov	sp, r7
 801981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019822:	4770      	bx	lr
 8019824:	40021000 	.word	0x40021000

08019828 <LL_APB1_GRP2_DisableClock>:
{
 8019828:	b480      	push	{r7}
 801982a:	b083      	sub	sp, #12
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(RCC->APB1ENR2, Periphs);
 8019830:	4b06      	ldr	r3, [pc, #24]	@ (801984c <LL_APB1_GRP2_DisableClock+0x24>)
 8019832:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	43db      	mvns	r3, r3
 8019838:	4904      	ldr	r1, [pc, #16]	@ (801984c <LL_APB1_GRP2_DisableClock+0x24>)
 801983a:	4013      	ands	r3, r2
 801983c:	65cb      	str	r3, [r1, #92]	@ 0x5c
}
 801983e:	bf00      	nop
 8019840:	370c      	adds	r7, #12
 8019842:	46bd      	mov	sp, r7
 8019844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019848:	4770      	bx	lr
 801984a:	bf00      	nop
 801984c:	40021000 	.word	0x40021000

08019850 <LL_DMA_EnableChannel>:
{
 8019850:	b480      	push	{r7}
 8019852:	b085      	sub	sp, #20
 8019854:	af00      	add	r7, sp, #0
 8019856:	6078      	str	r0, [r7, #4]
 8019858:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 801985e:	4a0c      	ldr	r2, [pc, #48]	@ (8019890 <LL_DMA_EnableChannel+0x40>)
 8019860:	683b      	ldr	r3, [r7, #0]
 8019862:	4413      	add	r3, r2
 8019864:	781b      	ldrb	r3, [r3, #0]
 8019866:	461a      	mov	r2, r3
 8019868:	68fb      	ldr	r3, [r7, #12]
 801986a:	4413      	add	r3, r2
 801986c:	681b      	ldr	r3, [r3, #0]
 801986e:	4908      	ldr	r1, [pc, #32]	@ (8019890 <LL_DMA_EnableChannel+0x40>)
 8019870:	683a      	ldr	r2, [r7, #0]
 8019872:	440a      	add	r2, r1
 8019874:	7812      	ldrb	r2, [r2, #0]
 8019876:	4611      	mov	r1, r2
 8019878:	68fa      	ldr	r2, [r7, #12]
 801987a:	440a      	add	r2, r1
 801987c:	f043 0301 	orr.w	r3, r3, #1
 8019880:	6013      	str	r3, [r2, #0]
}
 8019882:	bf00      	nop
 8019884:	3714      	adds	r7, #20
 8019886:	46bd      	mov	sp, r7
 8019888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801988c:	4770      	bx	lr
 801988e:	bf00      	nop
 8019890:	0801ba24 	.word	0x0801ba24

08019894 <LL_DMA_DisableChannel>:
{
 8019894:	b480      	push	{r7}
 8019896:	b085      	sub	sp, #20
 8019898:	af00      	add	r7, sp, #0
 801989a:	6078      	str	r0, [r7, #4]
 801989c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	60fb      	str	r3, [r7, #12]
  CLEAR_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_EN);
 80198a2:	4a0c      	ldr	r2, [pc, #48]	@ (80198d4 <LL_DMA_DisableChannel+0x40>)
 80198a4:	683b      	ldr	r3, [r7, #0]
 80198a6:	4413      	add	r3, r2
 80198a8:	781b      	ldrb	r3, [r3, #0]
 80198aa:	461a      	mov	r2, r3
 80198ac:	68fb      	ldr	r3, [r7, #12]
 80198ae:	4413      	add	r3, r2
 80198b0:	681b      	ldr	r3, [r3, #0]
 80198b2:	4908      	ldr	r1, [pc, #32]	@ (80198d4 <LL_DMA_DisableChannel+0x40>)
 80198b4:	683a      	ldr	r2, [r7, #0]
 80198b6:	440a      	add	r2, r1
 80198b8:	7812      	ldrb	r2, [r2, #0]
 80198ba:	4611      	mov	r1, r2
 80198bc:	68fa      	ldr	r2, [r7, #12]
 80198be:	440a      	add	r2, r1
 80198c0:	f023 0301 	bic.w	r3, r3, #1
 80198c4:	6013      	str	r3, [r2, #0]
}
 80198c6:	bf00      	nop
 80198c8:	3714      	adds	r7, #20
 80198ca:	46bd      	mov	sp, r7
 80198cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198d0:	4770      	bx	lr
 80198d2:	bf00      	nop
 80198d4:	0801ba24 	.word	0x0801ba24

080198d8 <LL_DMA_ConfigTransfer>:
{
 80198d8:	b480      	push	{r7}
 80198da:	b087      	sub	sp, #28
 80198dc:	af00      	add	r7, sp, #0
 80198de:	60f8      	str	r0, [r7, #12]
 80198e0:	60b9      	str	r1, [r7, #8]
 80198e2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80198e4:	68fb      	ldr	r3, [r7, #12]
 80198e6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 80198e8:	4a0e      	ldr	r2, [pc, #56]	@ (8019924 <LL_DMA_ConfigTransfer+0x4c>)
 80198ea:	68bb      	ldr	r3, [r7, #8]
 80198ec:	4413      	add	r3, r2
 80198ee:	781b      	ldrb	r3, [r3, #0]
 80198f0:	461a      	mov	r2, r3
 80198f2:	697b      	ldr	r3, [r7, #20]
 80198f4:	4413      	add	r3, r2
 80198f6:	681b      	ldr	r3, [r3, #0]
 80198f8:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80198fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8019900:	4908      	ldr	r1, [pc, #32]	@ (8019924 <LL_DMA_ConfigTransfer+0x4c>)
 8019902:	68ba      	ldr	r2, [r7, #8]
 8019904:	440a      	add	r2, r1
 8019906:	7812      	ldrb	r2, [r2, #0]
 8019908:	4611      	mov	r1, r2
 801990a:	697a      	ldr	r2, [r7, #20]
 801990c:	440a      	add	r2, r1
 801990e:	4611      	mov	r1, r2
 8019910:	687a      	ldr	r2, [r7, #4]
 8019912:	4313      	orrs	r3, r2
 8019914:	600b      	str	r3, [r1, #0]
}
 8019916:	bf00      	nop
 8019918:	371c      	adds	r7, #28
 801991a:	46bd      	mov	sp, r7
 801991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019920:	4770      	bx	lr
 8019922:	bf00      	nop
 8019924:	0801ba24 	.word	0x0801ba24

08019928 <LL_DMA_GetDataTransferDirection>:
{
 8019928:	b480      	push	{r7}
 801992a:	b085      	sub	sp, #20
 801992c:	af00      	add	r7, sp, #0
 801992e:	6078      	str	r0, [r7, #4]
 8019930:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019932:	687b      	ldr	r3, [r7, #4]
 8019934:	60fb      	str	r3, [r7, #12]
  return (READ_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR,
 8019936:	4a08      	ldr	r2, [pc, #32]	@ (8019958 <LL_DMA_GetDataTransferDirection+0x30>)
 8019938:	683b      	ldr	r3, [r7, #0]
 801993a:	4413      	add	r3, r2
 801993c:	781b      	ldrb	r3, [r3, #0]
 801993e:	461a      	mov	r2, r3
 8019940:	68fb      	ldr	r3, [r7, #12]
 8019942:	4413      	add	r3, r2
 8019944:	681a      	ldr	r2, [r3, #0]
 8019946:	f244 0310 	movw	r3, #16400	@ 0x4010
 801994a:	4013      	ands	r3, r2
}
 801994c:	4618      	mov	r0, r3
 801994e:	3714      	adds	r7, #20
 8019950:	46bd      	mov	sp, r7
 8019952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019956:	4770      	bx	lr
 8019958:	0801ba24 	.word	0x0801ba24

0801995c <LL_DMA_SetDataLength>:
{
 801995c:	b480      	push	{r7}
 801995e:	b087      	sub	sp, #28
 8019960:	af00      	add	r7, sp, #0
 8019962:	60f8      	str	r0, [r7, #12]
 8019964:	60b9      	str	r1, [r7, #8]
 8019966:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CNDTR,
 801996c:	4a0d      	ldr	r2, [pc, #52]	@ (80199a4 <LL_DMA_SetDataLength+0x48>)
 801996e:	68bb      	ldr	r3, [r7, #8]
 8019970:	4413      	add	r3, r2
 8019972:	781b      	ldrb	r3, [r3, #0]
 8019974:	461a      	mov	r2, r3
 8019976:	697b      	ldr	r3, [r7, #20]
 8019978:	4413      	add	r3, r2
 801997a:	685b      	ldr	r3, [r3, #4]
 801997c:	0c1b      	lsrs	r3, r3, #16
 801997e:	041b      	lsls	r3, r3, #16
 8019980:	4908      	ldr	r1, [pc, #32]	@ (80199a4 <LL_DMA_SetDataLength+0x48>)
 8019982:	68ba      	ldr	r2, [r7, #8]
 8019984:	440a      	add	r2, r1
 8019986:	7812      	ldrb	r2, [r2, #0]
 8019988:	4611      	mov	r1, r2
 801998a:	697a      	ldr	r2, [r7, #20]
 801998c:	440a      	add	r2, r1
 801998e:	4611      	mov	r1, r2
 8019990:	687a      	ldr	r2, [r7, #4]
 8019992:	4313      	orrs	r3, r2
 8019994:	604b      	str	r3, [r1, #4]
}
 8019996:	bf00      	nop
 8019998:	371c      	adds	r7, #28
 801999a:	46bd      	mov	sp, r7
 801999c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop
 80199a4:	0801ba24 	.word	0x0801ba24

080199a8 <LL_DMA_ConfigAddresses>:
{
 80199a8:	b480      	push	{r7}
 80199aa:	b087      	sub	sp, #28
 80199ac:	af00      	add	r7, sp, #0
 80199ae:	60f8      	str	r0, [r7, #12]
 80199b0:	60b9      	str	r1, [r7, #8]
 80199b2:	607a      	str	r2, [r7, #4]
 80199b4:	603b      	str	r3, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	617b      	str	r3, [r7, #20]
  if (Direction == LL_DMA_DIRECTION_MEMORY_TO_PERIPH)
 80199ba:	6a3b      	ldr	r3, [r7, #32]
 80199bc:	2b10      	cmp	r3, #16
 80199be:	d114      	bne.n	80199ea <LL_DMA_ConfigAddresses+0x42>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, SrcAddress);
 80199c0:	4a17      	ldr	r2, [pc, #92]	@ (8019a20 <LL_DMA_ConfigAddresses+0x78>)
 80199c2:	68bb      	ldr	r3, [r7, #8]
 80199c4:	4413      	add	r3, r2
 80199c6:	781b      	ldrb	r3, [r3, #0]
 80199c8:	461a      	mov	r2, r3
 80199ca:	697b      	ldr	r3, [r7, #20]
 80199cc:	4413      	add	r3, r2
 80199ce:	461a      	mov	r2, r3
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	60d3      	str	r3, [r2, #12]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, DstAddress);
 80199d4:	4a12      	ldr	r2, [pc, #72]	@ (8019a20 <LL_DMA_ConfigAddresses+0x78>)
 80199d6:	68bb      	ldr	r3, [r7, #8]
 80199d8:	4413      	add	r3, r2
 80199da:	781b      	ldrb	r3, [r3, #0]
 80199dc:	461a      	mov	r2, r3
 80199de:	697b      	ldr	r3, [r7, #20]
 80199e0:	4413      	add	r3, r2
 80199e2:	461a      	mov	r2, r3
 80199e4:	683b      	ldr	r3, [r7, #0]
 80199e6:	6093      	str	r3, [r2, #8]
}
 80199e8:	e013      	b.n	8019a12 <LL_DMA_ConfigAddresses+0x6a>
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CPAR, SrcAddress);
 80199ea:	4a0d      	ldr	r2, [pc, #52]	@ (8019a20 <LL_DMA_ConfigAddresses+0x78>)
 80199ec:	68bb      	ldr	r3, [r7, #8]
 80199ee:	4413      	add	r3, r2
 80199f0:	781b      	ldrb	r3, [r3, #0]
 80199f2:	461a      	mov	r2, r3
 80199f4:	697b      	ldr	r3, [r7, #20]
 80199f6:	4413      	add	r3, r2
 80199f8:	461a      	mov	r2, r3
 80199fa:	687b      	ldr	r3, [r7, #4]
 80199fc:	6093      	str	r3, [r2, #8]
    WRITE_REG(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CMAR, DstAddress);
 80199fe:	4a08      	ldr	r2, [pc, #32]	@ (8019a20 <LL_DMA_ConfigAddresses+0x78>)
 8019a00:	68bb      	ldr	r3, [r7, #8]
 8019a02:	4413      	add	r3, r2
 8019a04:	781b      	ldrb	r3, [r3, #0]
 8019a06:	461a      	mov	r2, r3
 8019a08:	697b      	ldr	r3, [r7, #20]
 8019a0a:	4413      	add	r3, r2
 8019a0c:	461a      	mov	r2, r3
 8019a0e:	683b      	ldr	r3, [r7, #0]
 8019a10:	60d3      	str	r3, [r2, #12]
}
 8019a12:	bf00      	nop
 8019a14:	371c      	adds	r7, #28
 8019a16:	46bd      	mov	sp, r7
 8019a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a1c:	4770      	bx	lr
 8019a1e:	bf00      	nop
 8019a20:	0801ba24 	.word	0x0801ba24

08019a24 <LL_DMA_SetPeriphRequest>:
{
 8019a24:	b480      	push	{r7}
 8019a26:	b087      	sub	sp, #28
 8019a28:	af00      	add	r7, sp, #0
 8019a2a:	60f8      	str	r0, [r7, #12]
 8019a2c:	60b9      	str	r1, [r7, #8]
 8019a2e:	607a      	str	r2, [r7, #4]
  uint32_t dmamux_ccr_offset = ((((uint32_t)DMAx ^ (uint32_t)DMA1) >> 10U) * 8U);
 8019a30:	68fb      	ldr	r3, [r7, #12]
 8019a32:	0a9b      	lsrs	r3, r3, #10
 8019a34:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8019a38:	f083 0380 	eor.w	r3, r3, #128	@ 0x80
 8019a3c:	00db      	lsls	r3, r3, #3
 8019a3e:	617b      	str	r3, [r7, #20]
  MODIFY_REG((DMAMUX1_Channel0 + Channel + dmamux_ccr_offset)->CCR, DMAMUX_CxCR_DMAREQ_ID, PeriphRequest);
 8019a40:	68ba      	ldr	r2, [r7, #8]
 8019a42:	697b      	ldr	r3, [r7, #20]
 8019a44:	4413      	add	r3, r2
 8019a46:	009b      	lsls	r3, r3, #2
 8019a48:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019a4c:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8019a56:	68ba      	ldr	r2, [r7, #8]
 8019a58:	697b      	ldr	r3, [r7, #20]
 8019a5a:	4413      	add	r3, r2
 8019a5c:	009b      	lsls	r3, r3, #2
 8019a5e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8019a62:	f503 3302 	add.w	r3, r3, #133120	@ 0x20800
 8019a66:	687a      	ldr	r2, [r7, #4]
 8019a68:	430a      	orrs	r2, r1
 8019a6a:	601a      	str	r2, [r3, #0]
}
 8019a6c:	bf00      	nop
 8019a6e:	371c      	adds	r7, #28
 8019a70:	46bd      	mov	sp, r7
 8019a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a76:	4770      	bx	lr

08019a78 <LL_DMA_IsActiveFlag_TC1>:
  * @rmtoll ISR          TCIF1         LL_DMA_IsActiveFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_DMA_IsActiveFlag_TC1(DMA_TypeDef *DMAx)
{
 8019a78:	b480      	push	{r7}
 8019a7a:	b083      	sub	sp, #12
 8019a7c:	af00      	add	r7, sp, #0
 8019a7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(DMAx->ISR, DMA_ISR_TCIF1) == (DMA_ISR_TCIF1)) ? 1UL : 0UL);
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	681b      	ldr	r3, [r3, #0]
 8019a84:	f003 0302 	and.w	r3, r3, #2
 8019a88:	2b02      	cmp	r3, #2
 8019a8a:	d101      	bne.n	8019a90 <LL_DMA_IsActiveFlag_TC1+0x18>
 8019a8c:	2301      	movs	r3, #1
 8019a8e:	e000      	b.n	8019a92 <LL_DMA_IsActiveFlag_TC1+0x1a>
 8019a90:	2300      	movs	r3, #0
}
 8019a92:	4618      	mov	r0, r3
 8019a94:	370c      	adds	r7, #12
 8019a96:	46bd      	mov	sp, r7
 8019a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a9c:	4770      	bx	lr

08019a9e <LL_DMA_ClearFlag_TC1>:
  * @rmtoll IFCR         CTCIF1        LL_DMA_ClearFlag_TC1
  * @param  DMAx DMAx Instance
  * @retval None
  */
__STATIC_INLINE void LL_DMA_ClearFlag_TC1(DMA_TypeDef *DMAx)
{
 8019a9e:	b480      	push	{r7}
 8019aa0:	b083      	sub	sp, #12
 8019aa2:	af00      	add	r7, sp, #0
 8019aa4:	6078      	str	r0, [r7, #4]
  WRITE_REG(DMAx->IFCR, DMA_IFCR_CTCIF1);
 8019aa6:	687b      	ldr	r3, [r7, #4]
 8019aa8:	2202      	movs	r2, #2
 8019aaa:	605a      	str	r2, [r3, #4]
}
 8019aac:	bf00      	nop
 8019aae:	370c      	adds	r7, #12
 8019ab0:	46bd      	mov	sp, r7
 8019ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ab6:	4770      	bx	lr

08019ab8 <LL_DMA_EnableIT_TC>:
  *         @arg @ref LL_DMA_CHANNEL_8 (*)
  *         (*) Not on all G4 devices
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Channel)
{
 8019ab8:	b480      	push	{r7}
 8019aba:	b085      	sub	sp, #20
 8019abc:	af00      	add	r7, sp, #0
 8019abe:	6078      	str	r0, [r7, #4]
 8019ac0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Channel_TypeDef *)((uint32_t)(dma_base_addr + CHANNEL_OFFSET_TAB[Channel])))->CCR, DMA_CCR_TCIE);
 8019ac6:	4a0c      	ldr	r2, [pc, #48]	@ (8019af8 <LL_DMA_EnableIT_TC+0x40>)
 8019ac8:	683b      	ldr	r3, [r7, #0]
 8019aca:	4413      	add	r3, r2
 8019acc:	781b      	ldrb	r3, [r3, #0]
 8019ace:	461a      	mov	r2, r3
 8019ad0:	68fb      	ldr	r3, [r7, #12]
 8019ad2:	4413      	add	r3, r2
 8019ad4:	681b      	ldr	r3, [r3, #0]
 8019ad6:	4908      	ldr	r1, [pc, #32]	@ (8019af8 <LL_DMA_EnableIT_TC+0x40>)
 8019ad8:	683a      	ldr	r2, [r7, #0]
 8019ada:	440a      	add	r2, r1
 8019adc:	7812      	ldrb	r2, [r2, #0]
 8019ade:	4611      	mov	r1, r2
 8019ae0:	68fa      	ldr	r2, [r7, #12]
 8019ae2:	440a      	add	r2, r1
 8019ae4:	f043 0302 	orr.w	r3, r3, #2
 8019ae8:	6013      	str	r3, [r2, #0]
}
 8019aea:	bf00      	nop
 8019aec:	3714      	adds	r7, #20
 8019aee:	46bd      	mov	sp, r7
 8019af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019af4:	4770      	bx	lr
 8019af6:	bf00      	nop
 8019af8:	0801ba24 	.word	0x0801ba24

08019afc <LL_GPIO_SetPinMode>:
{
 8019afc:	b480      	push	{r7}
 8019afe:	b08b      	sub	sp, #44	@ 0x2c
 8019b00:	af00      	add	r7, sp, #0
 8019b02:	60f8      	str	r0, [r7, #12]
 8019b04:	60b9      	str	r1, [r7, #8]
 8019b06:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8019b08:	68fb      	ldr	r3, [r7, #12]
 8019b0a:	681a      	ldr	r2, [r3, #0]
 8019b0c:	68bb      	ldr	r3, [r7, #8]
 8019b0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b10:	697b      	ldr	r3, [r7, #20]
 8019b12:	fa93 f3a3 	rbit	r3, r3
 8019b16:	613b      	str	r3, [r7, #16]
  return result;
 8019b18:	693b      	ldr	r3, [r7, #16]
 8019b1a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019b1c:	69bb      	ldr	r3, [r7, #24]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d101      	bne.n	8019b26 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8019b22:	2320      	movs	r3, #32
 8019b24:	e003      	b.n	8019b2e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8019b26:	69bb      	ldr	r3, [r7, #24]
 8019b28:	fab3 f383 	clz	r3, r3
 8019b2c:	b2db      	uxtb	r3, r3
 8019b2e:	005b      	lsls	r3, r3, #1
 8019b30:	2103      	movs	r1, #3
 8019b32:	fa01 f303 	lsl.w	r3, r1, r3
 8019b36:	43db      	mvns	r3, r3
 8019b38:	401a      	ands	r2, r3
 8019b3a:	68bb      	ldr	r3, [r7, #8]
 8019b3c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019b3e:	6a3b      	ldr	r3, [r7, #32]
 8019b40:	fa93 f3a3 	rbit	r3, r3
 8019b44:	61fb      	str	r3, [r7, #28]
  return result;
 8019b46:	69fb      	ldr	r3, [r7, #28]
 8019b48:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8019b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b4c:	2b00      	cmp	r3, #0
 8019b4e:	d101      	bne.n	8019b54 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8019b50:	2320      	movs	r3, #32
 8019b52:	e003      	b.n	8019b5c <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8019b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b56:	fab3 f383 	clz	r3, r3
 8019b5a:	b2db      	uxtb	r3, r3
 8019b5c:	005b      	lsls	r3, r3, #1
 8019b5e:	6879      	ldr	r1, [r7, #4]
 8019b60:	fa01 f303 	lsl.w	r3, r1, r3
 8019b64:	431a      	orrs	r2, r3
 8019b66:	68fb      	ldr	r3, [r7, #12]
 8019b68:	601a      	str	r2, [r3, #0]
}
 8019b6a:	bf00      	nop
 8019b6c:	372c      	adds	r7, #44	@ 0x2c
 8019b6e:	46bd      	mov	sp, r7
 8019b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019b74:	4770      	bx	lr

08019b76 <LL_GPIO_SetPinOutputType>:
{
 8019b76:	b480      	push	{r7}
 8019b78:	b085      	sub	sp, #20
 8019b7a:	af00      	add	r7, sp, #0
 8019b7c:	60f8      	str	r0, [r7, #12]
 8019b7e:	60b9      	str	r1, [r7, #8]
 8019b80:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8019b82:	68fb      	ldr	r3, [r7, #12]
 8019b84:	685a      	ldr	r2, [r3, #4]
 8019b86:	68bb      	ldr	r3, [r7, #8]
 8019b88:	43db      	mvns	r3, r3
 8019b8a:	401a      	ands	r2, r3
 8019b8c:	68bb      	ldr	r3, [r7, #8]
 8019b8e:	6879      	ldr	r1, [r7, #4]
 8019b90:	fb01 f303 	mul.w	r3, r1, r3
 8019b94:	431a      	orrs	r2, r3
 8019b96:	68fb      	ldr	r3, [r7, #12]
 8019b98:	605a      	str	r2, [r3, #4]
}
 8019b9a:	bf00      	nop
 8019b9c:	3714      	adds	r7, #20
 8019b9e:	46bd      	mov	sp, r7
 8019ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ba4:	4770      	bx	lr

08019ba6 <LL_GPIO_SetPinSpeed>:
{
 8019ba6:	b480      	push	{r7}
 8019ba8:	b08b      	sub	sp, #44	@ 0x2c
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	60f8      	str	r0, [r7, #12]
 8019bae:	60b9      	str	r1, [r7, #8]
 8019bb0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8019bb2:	68fb      	ldr	r3, [r7, #12]
 8019bb4:	689a      	ldr	r2, [r3, #8]
 8019bb6:	68bb      	ldr	r3, [r7, #8]
 8019bb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019bba:	697b      	ldr	r3, [r7, #20]
 8019bbc:	fa93 f3a3 	rbit	r3, r3
 8019bc0:	613b      	str	r3, [r7, #16]
  return result;
 8019bc2:	693b      	ldr	r3, [r7, #16]
 8019bc4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019bc6:	69bb      	ldr	r3, [r7, #24]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8019bcc:	2320      	movs	r3, #32
 8019bce:	e003      	b.n	8019bd8 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8019bd0:	69bb      	ldr	r3, [r7, #24]
 8019bd2:	fab3 f383 	clz	r3, r3
 8019bd6:	b2db      	uxtb	r3, r3
 8019bd8:	005b      	lsls	r3, r3, #1
 8019bda:	2103      	movs	r1, #3
 8019bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8019be0:	43db      	mvns	r3, r3
 8019be2:	401a      	ands	r2, r3
 8019be4:	68bb      	ldr	r3, [r7, #8]
 8019be6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019be8:	6a3b      	ldr	r3, [r7, #32]
 8019bea:	fa93 f3a3 	rbit	r3, r3
 8019bee:	61fb      	str	r3, [r7, #28]
  return result;
 8019bf0:	69fb      	ldr	r3, [r7, #28]
 8019bf2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8019bf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf6:	2b00      	cmp	r3, #0
 8019bf8:	d101      	bne.n	8019bfe <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8019bfa:	2320      	movs	r3, #32
 8019bfc:	e003      	b.n	8019c06 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8019bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c00:	fab3 f383 	clz	r3, r3
 8019c04:	b2db      	uxtb	r3, r3
 8019c06:	005b      	lsls	r3, r3, #1
 8019c08:	6879      	ldr	r1, [r7, #4]
 8019c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8019c0e:	431a      	orrs	r2, r3
 8019c10:	68fb      	ldr	r3, [r7, #12]
 8019c12:	609a      	str	r2, [r3, #8]
}
 8019c14:	bf00      	nop
 8019c16:	372c      	adds	r7, #44	@ 0x2c
 8019c18:	46bd      	mov	sp, r7
 8019c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c1e:	4770      	bx	lr

08019c20 <LL_GPIO_SetPinPull>:
{
 8019c20:	b480      	push	{r7}
 8019c22:	b08b      	sub	sp, #44	@ 0x2c
 8019c24:	af00      	add	r7, sp, #0
 8019c26:	60f8      	str	r0, [r7, #12]
 8019c28:	60b9      	str	r1, [r7, #8]
 8019c2a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	68da      	ldr	r2, [r3, #12]
 8019c30:	68bb      	ldr	r3, [r7, #8]
 8019c32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c34:	697b      	ldr	r3, [r7, #20]
 8019c36:	fa93 f3a3 	rbit	r3, r3
 8019c3a:	613b      	str	r3, [r7, #16]
  return result;
 8019c3c:	693b      	ldr	r3, [r7, #16]
 8019c3e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019c40:	69bb      	ldr	r3, [r7, #24]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d101      	bne.n	8019c4a <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8019c46:	2320      	movs	r3, #32
 8019c48:	e003      	b.n	8019c52 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8019c4a:	69bb      	ldr	r3, [r7, #24]
 8019c4c:	fab3 f383 	clz	r3, r3
 8019c50:	b2db      	uxtb	r3, r3
 8019c52:	005b      	lsls	r3, r3, #1
 8019c54:	2103      	movs	r1, #3
 8019c56:	fa01 f303 	lsl.w	r3, r1, r3
 8019c5a:	43db      	mvns	r3, r3
 8019c5c:	401a      	ands	r2, r3
 8019c5e:	68bb      	ldr	r3, [r7, #8]
 8019c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019c62:	6a3b      	ldr	r3, [r7, #32]
 8019c64:	fa93 f3a3 	rbit	r3, r3
 8019c68:	61fb      	str	r3, [r7, #28]
  return result;
 8019c6a:	69fb      	ldr	r3, [r7, #28]
 8019c6c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8019c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c70:	2b00      	cmp	r3, #0
 8019c72:	d101      	bne.n	8019c78 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8019c74:	2320      	movs	r3, #32
 8019c76:	e003      	b.n	8019c80 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8019c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c7a:	fab3 f383 	clz	r3, r3
 8019c7e:	b2db      	uxtb	r3, r3
 8019c80:	005b      	lsls	r3, r3, #1
 8019c82:	6879      	ldr	r1, [r7, #4]
 8019c84:	fa01 f303 	lsl.w	r3, r1, r3
 8019c88:	431a      	orrs	r2, r3
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	60da      	str	r2, [r3, #12]
}
 8019c8e:	bf00      	nop
 8019c90:	372c      	adds	r7, #44	@ 0x2c
 8019c92:	46bd      	mov	sp, r7
 8019c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019c98:	4770      	bx	lr

08019c9a <LL_GPIO_SetAFPin_0_7>:
{
 8019c9a:	b480      	push	{r7}
 8019c9c:	b08b      	sub	sp, #44	@ 0x2c
 8019c9e:	af00      	add	r7, sp, #0
 8019ca0:	60f8      	str	r0, [r7, #12]
 8019ca2:	60b9      	str	r1, [r7, #8]
 8019ca4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8019ca6:	68fb      	ldr	r3, [r7, #12]
 8019ca8:	6a1a      	ldr	r2, [r3, #32]
 8019caa:	68bb      	ldr	r3, [r7, #8]
 8019cac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019cae:	697b      	ldr	r3, [r7, #20]
 8019cb0:	fa93 f3a3 	rbit	r3, r3
 8019cb4:	613b      	str	r3, [r7, #16]
  return result;
 8019cb6:	693b      	ldr	r3, [r7, #16]
 8019cb8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8019cba:	69bb      	ldr	r3, [r7, #24]
 8019cbc:	2b00      	cmp	r3, #0
 8019cbe:	d101      	bne.n	8019cc4 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8019cc0:	2320      	movs	r3, #32
 8019cc2:	e003      	b.n	8019ccc <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8019cc4:	69bb      	ldr	r3, [r7, #24]
 8019cc6:	fab3 f383 	clz	r3, r3
 8019cca:	b2db      	uxtb	r3, r3
 8019ccc:	009b      	lsls	r3, r3, #2
 8019cce:	210f      	movs	r1, #15
 8019cd0:	fa01 f303 	lsl.w	r3, r1, r3
 8019cd4:	43db      	mvns	r3, r3
 8019cd6:	401a      	ands	r2, r3
 8019cd8:	68bb      	ldr	r3, [r7, #8]
 8019cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8019cdc:	6a3b      	ldr	r3, [r7, #32]
 8019cde:	fa93 f3a3 	rbit	r3, r3
 8019ce2:	61fb      	str	r3, [r7, #28]
  return result;
 8019ce4:	69fb      	ldr	r3, [r7, #28]
 8019ce6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8019ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cea:	2b00      	cmp	r3, #0
 8019cec:	d101      	bne.n	8019cf2 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8019cee:	2320      	movs	r3, #32
 8019cf0:	e003      	b.n	8019cfa <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8019cf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019cf4:	fab3 f383 	clz	r3, r3
 8019cf8:	b2db      	uxtb	r3, r3
 8019cfa:	009b      	lsls	r3, r3, #2
 8019cfc:	6879      	ldr	r1, [r7, #4]
 8019cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8019d02:	431a      	orrs	r2, r3
 8019d04:	68fb      	ldr	r3, [r7, #12]
 8019d06:	621a      	str	r2, [r3, #32]
}
 8019d08:	bf00      	nop
 8019d0a:	372c      	adds	r7, #44	@ 0x2c
 8019d0c:	46bd      	mov	sp, r7
 8019d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d12:	4770      	bx	lr

08019d14 <LL_LPUART_Enable>:
{
 8019d14:	b480      	push	{r7}
 8019d16:	b083      	sub	sp, #12
 8019d18:	af00      	add	r7, sp, #0
 8019d1a:	6078      	str	r0, [r7, #4]
  SET_BIT(LPUARTx->CR1, USART_CR1_UE);
 8019d1c:	687b      	ldr	r3, [r7, #4]
 8019d1e:	681b      	ldr	r3, [r3, #0]
 8019d20:	f043 0201 	orr.w	r2, r3, #1
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	601a      	str	r2, [r3, #0]
}
 8019d28:	bf00      	nop
 8019d2a:	370c      	adds	r7, #12
 8019d2c:	46bd      	mov	sp, r7
 8019d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d32:	4770      	bx	lr

08019d34 <LL_LPUART_Disable>:
{
 8019d34:	b480      	push	{r7}
 8019d36:	b083      	sub	sp, #12
 8019d38:	af00      	add	r7, sp, #0
 8019d3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(LPUARTx->CR1, USART_CR1_UE);
 8019d3c:	687b      	ldr	r3, [r7, #4]
 8019d3e:	681b      	ldr	r3, [r3, #0]
 8019d40:	f023 0201 	bic.w	r2, r3, #1
 8019d44:	687b      	ldr	r3, [r7, #4]
 8019d46:	601a      	str	r2, [r3, #0]
}
 8019d48:	bf00      	nop
 8019d4a:	370c      	adds	r7, #12
 8019d4c:	46bd      	mov	sp, r7
 8019d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d52:	4770      	bx	lr

08019d54 <LL_LPUART_EnableDirectionRx>:
{
 8019d54:	b480      	push	{r7}
 8019d56:	b089      	sub	sp, #36	@ 0x24
 8019d58:	af00      	add	r7, sp, #0
 8019d5a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RE);
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019d60:	68fb      	ldr	r3, [r7, #12]
 8019d62:	e853 3f00 	ldrex	r3, [r3]
 8019d66:	60bb      	str	r3, [r7, #8]
   return(result);
 8019d68:	68bb      	ldr	r3, [r7, #8]
 8019d6a:	f043 0304 	orr.w	r3, r3, #4
 8019d6e:	61fb      	str	r3, [r7, #28]
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	69fa      	ldr	r2, [r7, #28]
 8019d74:	61ba      	str	r2, [r7, #24]
 8019d76:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019d78:	6979      	ldr	r1, [r7, #20]
 8019d7a:	69ba      	ldr	r2, [r7, #24]
 8019d7c:	e841 2300 	strex	r3, r2, [r1]
 8019d80:	613b      	str	r3, [r7, #16]
   return(result);
 8019d82:	693b      	ldr	r3, [r7, #16]
 8019d84:	2b00      	cmp	r3, #0
 8019d86:	d1e9      	bne.n	8019d5c <LL_LPUART_EnableDirectionRx+0x8>
}
 8019d88:	bf00      	nop
 8019d8a:	bf00      	nop
 8019d8c:	3724      	adds	r7, #36	@ 0x24
 8019d8e:	46bd      	mov	sp, r7
 8019d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019d94:	4770      	bx	lr

08019d96 <LL_LPUART_IsActiveFlag_TEACK>:
{
 8019d96:	b480      	push	{r7}
 8019d98:	b083      	sub	sp, #12
 8019d9a:	af00      	add	r7, sp, #0
 8019d9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	69db      	ldr	r3, [r3, #28]
 8019da2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8019da6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019daa:	d101      	bne.n	8019db0 <LL_LPUART_IsActiveFlag_TEACK+0x1a>
 8019dac:	2301      	movs	r3, #1
 8019dae:	e000      	b.n	8019db2 <LL_LPUART_IsActiveFlag_TEACK+0x1c>
 8019db0:	2300      	movs	r3, #0
}
 8019db2:	4618      	mov	r0, r3
 8019db4:	370c      	adds	r7, #12
 8019db6:	46bd      	mov	sp, r7
 8019db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dbc:	4770      	bx	lr

08019dbe <LL_LPUART_ClearFlag_PE>:
  * @rmtoll ICR          PECF          LL_LPUART_ClearFlag_PE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_PE(USART_TypeDef *LPUARTx)
{
 8019dbe:	b480      	push	{r7}
 8019dc0:	b083      	sub	sp, #12
 8019dc2:	af00      	add	r7, sp, #0
 8019dc4:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_PECF);
 8019dc6:	687b      	ldr	r3, [r7, #4]
 8019dc8:	2201      	movs	r2, #1
 8019dca:	621a      	str	r2, [r3, #32]
}
 8019dcc:	bf00      	nop
 8019dce:	370c      	adds	r7, #12
 8019dd0:	46bd      	mov	sp, r7
 8019dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019dd6:	4770      	bx	lr

08019dd8 <LL_LPUART_ClearFlag_FE>:
  * @rmtoll ICR          FECF          LL_LPUART_ClearFlag_FE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_FE(USART_TypeDef *LPUARTx)
{
 8019dd8:	b480      	push	{r7}
 8019dda:	b083      	sub	sp, #12
 8019ddc:	af00      	add	r7, sp, #0
 8019dde:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_FECF);
 8019de0:	687b      	ldr	r3, [r7, #4]
 8019de2:	2202      	movs	r2, #2
 8019de4:	621a      	str	r2, [r3, #32]
}
 8019de6:	bf00      	nop
 8019de8:	370c      	adds	r7, #12
 8019dea:	46bd      	mov	sp, r7
 8019dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019df0:	4770      	bx	lr

08019df2 <LL_LPUART_ClearFlag_NE>:
  * @rmtoll ICR          NECF          LL_LPUART_ClearFlag_NE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_NE(USART_TypeDef *LPUARTx)
{
 8019df2:	b480      	push	{r7}
 8019df4:	b083      	sub	sp, #12
 8019df6:	af00      	add	r7, sp, #0
 8019df8:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_NECF);
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	2204      	movs	r2, #4
 8019dfe:	621a      	str	r2, [r3, #32]
}
 8019e00:	bf00      	nop
 8019e02:	370c      	adds	r7, #12
 8019e04:	46bd      	mov	sp, r7
 8019e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e0a:	4770      	bx	lr

08019e0c <LL_LPUART_ClearFlag_ORE>:
  * @rmtoll ICR          ORECF         LL_LPUART_ClearFlag_ORE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_ORE(USART_TypeDef *LPUARTx)
{
 8019e0c:	b480      	push	{r7}
 8019e0e:	b083      	sub	sp, #12
 8019e10:	af00      	add	r7, sp, #0
 8019e12:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_ORECF);
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	2208      	movs	r2, #8
 8019e18:	621a      	str	r2, [r3, #32]
}
 8019e1a:	bf00      	nop
 8019e1c:	370c      	adds	r7, #12
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e24:	4770      	bx	lr

08019e26 <LL_LPUART_ClearFlag_TC>:
  * @rmtoll ICR          TCCF          LL_LPUART_ClearFlag_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_ClearFlag_TC(USART_TypeDef *LPUARTx)
{
 8019e26:	b480      	push	{r7}
 8019e28:	b083      	sub	sp, #12
 8019e2a:	af00      	add	r7, sp, #0
 8019e2c:	6078      	str	r0, [r7, #4]
  WRITE_REG(LPUARTx->ICR, USART_ICR_TCCF);
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	2240      	movs	r2, #64	@ 0x40
 8019e32:	621a      	str	r2, [r3, #32]
}
 8019e34:	bf00      	nop
 8019e36:	370c      	adds	r7, #12
 8019e38:	46bd      	mov	sp, r7
 8019e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e3e:	4770      	bx	lr

08019e40 <LL_LPUART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_EnableIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_RXNE_RXFNE(USART_TypeDef *LPUARTx)
{
 8019e40:	b480      	push	{r7}
 8019e42:	b089      	sub	sp, #36	@ 0x24
 8019e44:	af00      	add	r7, sp, #0
 8019e46:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8019e48:	687b      	ldr	r3, [r7, #4]
 8019e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e4c:	68fb      	ldr	r3, [r7, #12]
 8019e4e:	e853 3f00 	ldrex	r3, [r3]
 8019e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	f043 0320 	orr.w	r3, r3, #32
 8019e5a:	61fb      	str	r3, [r7, #28]
 8019e5c:	687b      	ldr	r3, [r7, #4]
 8019e5e:	69fa      	ldr	r2, [r7, #28]
 8019e60:	61ba      	str	r2, [r7, #24]
 8019e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019e64:	6979      	ldr	r1, [r7, #20]
 8019e66:	69ba      	ldr	r2, [r7, #24]
 8019e68:	e841 2300 	strex	r3, r2, [r1]
 8019e6c:	613b      	str	r3, [r7, #16]
   return(result);
 8019e6e:	693b      	ldr	r3, [r7, #16]
 8019e70:	2b00      	cmp	r3, #0
 8019e72:	d1e9      	bne.n	8019e48 <LL_LPUART_EnableIT_RXNE_RXFNE+0x8>
}
 8019e74:	bf00      	nop
 8019e76:	bf00      	nop
 8019e78:	3724      	adds	r7, #36	@ 0x24
 8019e7a:	46bd      	mov	sp, r7
 8019e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019e80:	4770      	bx	lr

08019e82 <LL_LPUART_EnableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_EnableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_TC(USART_TypeDef *LPUARTx)
{
 8019e82:	b480      	push	{r7}
 8019e84:	b089      	sub	sp, #36	@ 0x24
 8019e86:	af00      	add	r7, sp, #0
 8019e88:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8019e8a:	687b      	ldr	r3, [r7, #4]
 8019e8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019e8e:	68fb      	ldr	r3, [r7, #12]
 8019e90:	e853 3f00 	ldrex	r3, [r3]
 8019e94:	60bb      	str	r3, [r7, #8]
   return(result);
 8019e96:	68bb      	ldr	r3, [r7, #8]
 8019e98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8019e9c:	61fb      	str	r3, [r7, #28]
 8019e9e:	687b      	ldr	r3, [r7, #4]
 8019ea0:	69fa      	ldr	r2, [r7, #28]
 8019ea2:	61ba      	str	r2, [r7, #24]
 8019ea4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019ea6:	6979      	ldr	r1, [r7, #20]
 8019ea8:	69ba      	ldr	r2, [r7, #24]
 8019eaa:	e841 2300 	strex	r3, r2, [r1]
 8019eae:	613b      	str	r3, [r7, #16]
   return(result);
 8019eb0:	693b      	ldr	r3, [r7, #16]
 8019eb2:	2b00      	cmp	r3, #0
 8019eb4:	d1e9      	bne.n	8019e8a <LL_LPUART_EnableIT_TC+0x8>
}
 8019eb6:	bf00      	nop
 8019eb8:	bf00      	nop
 8019eba:	3724      	adds	r7, #36	@ 0x24
 8019ebc:	46bd      	mov	sp, r7
 8019ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ec2:	4770      	bx	lr

08019ec4 <LL_LPUART_EnableIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_EnableIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableIT_ERROR(USART_TypeDef *LPUARTx)
{
 8019ec4:	b480      	push	{r7}
 8019ec6:	b089      	sub	sp, #36	@ 0x24
 8019ec8:	af00      	add	r7, sp, #0
 8019eca:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_EIE);
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	3308      	adds	r3, #8
 8019ed0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ed2:	68fb      	ldr	r3, [r7, #12]
 8019ed4:	e853 3f00 	ldrex	r3, [r3]
 8019ed8:	60bb      	str	r3, [r7, #8]
   return(result);
 8019eda:	68bb      	ldr	r3, [r7, #8]
 8019edc:	f043 0301 	orr.w	r3, r3, #1
 8019ee0:	61fb      	str	r3, [r7, #28]
 8019ee2:	687b      	ldr	r3, [r7, #4]
 8019ee4:	3308      	adds	r3, #8
 8019ee6:	69fa      	ldr	r2, [r7, #28]
 8019ee8:	61ba      	str	r2, [r7, #24]
 8019eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019eec:	6979      	ldr	r1, [r7, #20]
 8019eee:	69ba      	ldr	r2, [r7, #24]
 8019ef0:	e841 2300 	strex	r3, r2, [r1]
 8019ef4:	613b      	str	r3, [r7, #16]
   return(result);
 8019ef6:	693b      	ldr	r3, [r7, #16]
 8019ef8:	2b00      	cmp	r3, #0
 8019efa:	d1e7      	bne.n	8019ecc <LL_LPUART_EnableIT_ERROR+0x8>
}
 8019efc:	bf00      	nop
 8019efe:	bf00      	nop
 8019f00:	3724      	adds	r7, #36	@ 0x24
 8019f02:	46bd      	mov	sp, r7
 8019f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f08:	4770      	bx	lr

08019f0a <LL_LPUART_DisableIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_DisableIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_DisableIT_TC(USART_TypeDef *LPUARTx)
{
 8019f0a:	b480      	push	{r7}
 8019f0c:	b089      	sub	sp, #36	@ 0x24
 8019f0e:	af00      	add	r7, sp, #0
 8019f10:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(LPUARTx->CR1, USART_CR1_TCIE);
 8019f12:	687b      	ldr	r3, [r7, #4]
 8019f14:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f16:	68fb      	ldr	r3, [r7, #12]
 8019f18:	e853 3f00 	ldrex	r3, [r3]
 8019f1c:	60bb      	str	r3, [r7, #8]
   return(result);
 8019f1e:	68bb      	ldr	r3, [r7, #8]
 8019f20:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8019f24:	61fb      	str	r3, [r7, #28]
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	69fa      	ldr	r2, [r7, #28]
 8019f2a:	61ba      	str	r2, [r7, #24]
 8019f2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f2e:	6979      	ldr	r1, [r7, #20]
 8019f30:	69ba      	ldr	r2, [r7, #24]
 8019f32:	e841 2300 	strex	r3, r2, [r1]
 8019f36:	613b      	str	r3, [r7, #16]
   return(result);
 8019f38:	693b      	ldr	r3, [r7, #16]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d1e9      	bne.n	8019f12 <LL_LPUART_DisableIT_TC+0x8>
}
 8019f3e:	bf00      	nop
 8019f40:	bf00      	nop
 8019f42:	3724      	adds	r7, #36	@ 0x24
 8019f44:	46bd      	mov	sp, r7
 8019f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f4a:	4770      	bx	lr

08019f4c <LL_LPUART_IsEnabledIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_LPUART_IsEnabledIT_RXNE_RXFNE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_RXNE_RXFNE(const USART_TypeDef *LPUARTx)
{
 8019f4c:	b480      	push	{r7}
 8019f4e:	b083      	sub	sp, #12
 8019f50:	af00      	add	r7, sp, #0
 8019f52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_RXNEIE_RXFNEIE) == (USART_CR1_RXNEIE_RXFNEIE)) ? 1UL : 0UL);
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	681b      	ldr	r3, [r3, #0]
 8019f58:	f003 0320 	and.w	r3, r3, #32
 8019f5c:	2b20      	cmp	r3, #32
 8019f5e:	d101      	bne.n	8019f64 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x18>
 8019f60:	2301      	movs	r3, #1
 8019f62:	e000      	b.n	8019f66 <LL_LPUART_IsEnabledIT_RXNE_RXFNE+0x1a>
 8019f64:	2300      	movs	r3, #0
}
 8019f66:	4618      	mov	r0, r3
 8019f68:	370c      	adds	r7, #12
 8019f6a:	46bd      	mov	sp, r7
 8019f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f70:	4770      	bx	lr

08019f72 <LL_LPUART_IsEnabledIT_TC>:
  * @rmtoll CR1          TCIE          LL_LPUART_IsEnabledIT_TC
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_TC(const USART_TypeDef *LPUARTx)
{
 8019f72:	b480      	push	{r7}
 8019f74:	b083      	sub	sp, #12
 8019f76:	af00      	add	r7, sp, #0
 8019f78:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_TCIE) == (USART_CR1_TCIE)) ? 1UL : 0UL);
 8019f7a:	687b      	ldr	r3, [r7, #4]
 8019f7c:	681b      	ldr	r3, [r3, #0]
 8019f7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019f82:	2b40      	cmp	r3, #64	@ 0x40
 8019f84:	d101      	bne.n	8019f8a <LL_LPUART_IsEnabledIT_TC+0x18>
 8019f86:	2301      	movs	r3, #1
 8019f88:	e000      	b.n	8019f8c <LL_LPUART_IsEnabledIT_TC+0x1a>
 8019f8a:	2300      	movs	r3, #0
}
 8019f8c:	4618      	mov	r0, r3
 8019f8e:	370c      	adds	r7, #12
 8019f90:	46bd      	mov	sp, r7
 8019f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019f96:	4770      	bx	lr

08019f98 <LL_LPUART_IsEnabledIT_PE>:
  * @rmtoll CR1          PEIE          LL_LPUART_IsEnabledIT_PE
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_PE(const USART_TypeDef *LPUARTx)
{
 8019f98:	b480      	push	{r7}
 8019f9a:	b083      	sub	sp, #12
 8019f9c:	af00      	add	r7, sp, #0
 8019f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR1, USART_CR1_PEIE) == (USART_CR1_PEIE)) ? 1UL : 0UL);
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019fa8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019fac:	d101      	bne.n	8019fb2 <LL_LPUART_IsEnabledIT_PE+0x1a>
 8019fae:	2301      	movs	r3, #1
 8019fb0:	e000      	b.n	8019fb4 <LL_LPUART_IsEnabledIT_PE+0x1c>
 8019fb2:	2300      	movs	r3, #0
}
 8019fb4:	4618      	mov	r0, r3
 8019fb6:	370c      	adds	r7, #12
 8019fb8:	46bd      	mov	sp, r7
 8019fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fbe:	4770      	bx	lr

08019fc0 <LL_LPUART_IsEnabledIT_ERROR>:
  * @rmtoll CR3          EIE           LL_LPUART_IsEnabledIT_ERROR
  * @param  LPUARTx LPUART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_LPUART_IsEnabledIT_ERROR(const USART_TypeDef *LPUARTx)
{
 8019fc0:	b480      	push	{r7}
 8019fc2:	b083      	sub	sp, #12
 8019fc4:	af00      	add	r7, sp, #0
 8019fc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(LPUARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE)) ? 1UL : 0UL);
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	689b      	ldr	r3, [r3, #8]
 8019fcc:	f003 0301 	and.w	r3, r3, #1
 8019fd0:	2b01      	cmp	r3, #1
 8019fd2:	d101      	bne.n	8019fd8 <LL_LPUART_IsEnabledIT_ERROR+0x18>
 8019fd4:	2301      	movs	r3, #1
 8019fd6:	e000      	b.n	8019fda <LL_LPUART_IsEnabledIT_ERROR+0x1a>
 8019fd8:	2300      	movs	r3, #0
}
 8019fda:	4618      	mov	r0, r3
 8019fdc:	370c      	adds	r7, #12
 8019fde:	46bd      	mov	sp, r7
 8019fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019fe4:	4770      	bx	lr

08019fe6 <LL_LPUART_EnableDMAReq_TX>:
  * @rmtoll CR3          DMAT          LL_LPUART_EnableDMAReq_TX
  * @param  LPUARTx LPUART Instance
  * @retval None
  */
__STATIC_INLINE void LL_LPUART_EnableDMAReq_TX(USART_TypeDef *LPUARTx)
{
 8019fe6:	b480      	push	{r7}
 8019fe8:	b089      	sub	sp, #36	@ 0x24
 8019fea:	af00      	add	r7, sp, #0
 8019fec:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(LPUARTx->CR3, USART_CR3_DMAT);
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	3308      	adds	r3, #8
 8019ff2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019ff4:	68fb      	ldr	r3, [r7, #12]
 8019ff6:	e853 3f00 	ldrex	r3, [r3]
 8019ffa:	60bb      	str	r3, [r7, #8]
   return(result);
 8019ffc:	68bb      	ldr	r3, [r7, #8]
 8019ffe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a002:	61fb      	str	r3, [r7, #28]
 801a004:	687b      	ldr	r3, [r7, #4]
 801a006:	3308      	adds	r3, #8
 801a008:	69fa      	ldr	r2, [r7, #28]
 801a00a:	61ba      	str	r2, [r7, #24]
 801a00c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a00e:	6979      	ldr	r1, [r7, #20]
 801a010:	69ba      	ldr	r2, [r7, #24]
 801a012:	e841 2300 	strex	r3, r2, [r1]
 801a016:	613b      	str	r3, [r7, #16]
   return(result);
 801a018:	693b      	ldr	r3, [r7, #16]
 801a01a:	2b00      	cmp	r3, #0
 801a01c:	d1e7      	bne.n	8019fee <LL_LPUART_EnableDMAReq_TX+0x8>
}
 801a01e:	bf00      	nop
 801a020:	bf00      	nop
 801a022:	3724      	adds	r7, #36	@ 0x24
 801a024:	46bd      	mov	sp, r7
 801a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a02a:	4770      	bx	lr

0801a02c <LL_LPUART_DMA_GetRegAddr>:
  *         @arg @ref LL_LPUART_DMA_REG_DATA_TRANSMIT
  *         @arg @ref LL_LPUART_DMA_REG_DATA_RECEIVE
  * @retval Address of data register
  */
__STATIC_INLINE uint32_t LL_LPUART_DMA_GetRegAddr(const USART_TypeDef *LPUARTx, uint32_t Direction)
{
 801a02c:	b480      	push	{r7}
 801a02e:	b085      	sub	sp, #20
 801a030:	af00      	add	r7, sp, #0
 801a032:	6078      	str	r0, [r7, #4]
 801a034:	6039      	str	r1, [r7, #0]
  uint32_t data_reg_addr;

  if (Direction == LL_LPUART_DMA_REG_DATA_TRANSMIT)
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	2b00      	cmp	r3, #0
 801a03a:	d103      	bne.n	801a044 <LL_LPUART_DMA_GetRegAddr+0x18>
  {
    /* return address of TDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->TDR);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	3328      	adds	r3, #40	@ 0x28
 801a040:	60fb      	str	r3, [r7, #12]
 801a042:	e002      	b.n	801a04a <LL_LPUART_DMA_GetRegAddr+0x1e>
  }
  else
  {
    /* return address of RDR register */
    data_reg_addr = (uint32_t) &(LPUARTx->RDR);
 801a044:	687b      	ldr	r3, [r7, #4]
 801a046:	3324      	adds	r3, #36	@ 0x24
 801a048:	60fb      	str	r3, [r7, #12]
  }

  return data_reg_addr;
 801a04a:	68fb      	ldr	r3, [r7, #12]
}
 801a04c:	4618      	mov	r0, r3
 801a04e:	3714      	adds	r7, #20
 801a050:	46bd      	mov	sp, r7
 801a052:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a056:	4770      	bx	lr

0801a058 <LL_LPUART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_LPUART_ReceiveData8
  * @param  LPUARTx LPUART Instance
  * @retval Time Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_LPUART_ReceiveData8(const USART_TypeDef *LPUARTx)
{
 801a058:	b480      	push	{r7}
 801a05a:	b083      	sub	sp, #12
 801a05c:	af00      	add	r7, sp, #0
 801a05e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(LPUARTx->RDR, USART_RDR_RDR) & 0xFFU);
 801a060:	687b      	ldr	r3, [r7, #4]
 801a062:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a064:	b2db      	uxtb	r3, r3
}
 801a066:	4618      	mov	r0, r3
 801a068:	370c      	adds	r7, #12
 801a06a:	46bd      	mov	sp, r7
 801a06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a070:	4770      	bx	lr
	...

0801a074 <HW_TRACER_EMB_Init>:
  * @param  callbackTX
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_Init(void)
{
 801a074:	b580      	push	{r7, lr}
 801a076:	b090      	sub	sp, #64	@ 0x40
 801a078:	af00      	add	r7, sp, #0
  /* Enable the peripheral clock of GPIO Port */
  TRACER_EMB_TX_GPIO_ENABLE_CLOCK();
 801a07a:	2001      	movs	r0, #1
 801a07c:	f7ff fba4 	bl	80197c8 <LL_AHB2_GRP1_EnableClock>
  TRACER_EMB_RX_GPIO_ENABLE_CLOCK();
 801a080:	2001      	movs	r0, #1
 801a082:	f7ff fba1 	bl	80197c8 <LL_AHB2_GRP1_EnableClock>

  /* Configure Tx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_TX_AF_FUNCTION(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, TRACER_EMB_TX_AF);
 801a086:	220c      	movs	r2, #12
 801a088:	2104      	movs	r1, #4
 801a08a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a08e:	f7ff fe04 	bl	8019c9a <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_MODE_ALTERNATE);
 801a092:	2202      	movs	r2, #2
 801a094:	2104      	movs	r1, #4
 801a096:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a09a:	f7ff fd2f 	bl	8019afc <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801a09e:	2202      	movs	r2, #2
 801a0a0:	2104      	movs	r1, #4
 801a0a2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0a6:	f7ff fd7e 	bl	8019ba6 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a0aa:	2200      	movs	r2, #0
 801a0ac:	2104      	movs	r1, #4
 801a0ae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0b2:	f7ff fd60 	bl	8019b76 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_TX_GPIO, TRACER_EMB_TX_PIN, LL_GPIO_PULL_UP);
 801a0b6:	2201      	movs	r2, #1
 801a0b8:	2104      	movs	r1, #4
 801a0ba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0be:	f7ff fdaf 	bl	8019c20 <LL_GPIO_SetPinPull>

  /* Configure Rx Pin as : Alternate function, High Speed, Push pull, Pull up */
  TRACER_EMB_RX_AF_FUNCTION(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, TRACER_EMB_RX_AF);
 801a0c2:	220c      	movs	r2, #12
 801a0c4:	2108      	movs	r1, #8
 801a0c6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0ca:	f7ff fde6 	bl	8019c9a <LL_GPIO_SetAFPin_0_7>
  LL_GPIO_SetPinMode(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_MODE_ALTERNATE);
 801a0ce:	2202      	movs	r2, #2
 801a0d0:	2108      	movs	r1, #8
 801a0d2:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0d6:	f7ff fd11 	bl	8019afc <LL_GPIO_SetPinMode>
  LL_GPIO_SetPinSpeed(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_SPEED_FREQ_HIGH);
 801a0da:	2202      	movs	r2, #2
 801a0dc:	2108      	movs	r1, #8
 801a0de:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0e2:	f7ff fd60 	bl	8019ba6 <LL_GPIO_SetPinSpeed>
  LL_GPIO_SetPinOutputType(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_OUTPUT_PUSHPULL);
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	2108      	movs	r1, #8
 801a0ea:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0ee:	f7ff fd42 	bl	8019b76 <LL_GPIO_SetPinOutputType>
  LL_GPIO_SetPinPull(TRACER_EMB_RX_GPIO, TRACER_EMB_RX_PIN, LL_GPIO_PULL_UP);
 801a0f2:	2201      	movs	r2, #1
 801a0f4:	2108      	movs	r1, #8
 801a0f6:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801a0fa:	f7ff fd91 	bl	8019c20 <LL_GPIO_SetPinPull>

  /* Enable the peripheral clock for USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a0fe:	2001      	movs	r0, #1
 801a100:	f7ff fb7a 	bl	80197f8 <LL_APB1_GRP2_EnableClock>
  {
    /* Configure USART */
    LL_LPUART_InitTypeDef lpuart_initstruct;

    /* Disable USART prior modifying configuration registers */
    LL_LPUART_Disable(TRACER_EMB_USART_INSTANCE);
 801a104:	482a      	ldr	r0, [pc, #168]	@ (801a1b0 <HW_TRACER_EMB_Init+0x13c>)
 801a106:	f7ff fe15 	bl	8019d34 <LL_LPUART_Disable>
    /*  - Parity              : LL_USART_PARITY_NONE            */
    /*  - TransferDirection   : LL_USART_DIRECTION_TX           */
    /*  - HardwareFlowControl : LL_USART_HWCONTROL_NONE         */
    /*  - OverSampling        : LL_USART_OVERSAMPLING_16        */
#if defined(USART_PRESC_PRESCALER)
    lpuart_initstruct.PrescalerValue      = LL_USART_PRESCALER_DIV1;
 801a10a:	2300      	movs	r3, #0
 801a10c:	623b      	str	r3, [r7, #32]
#endif /* USART_PRESC_PRESCALER */
    lpuart_initstruct.BaudRate            = TRACER_EMB_BAUDRATE;
 801a10e:	f44f 2361 	mov.w	r3, #921600	@ 0xe1000
 801a112:	627b      	str	r3, [r7, #36]	@ 0x24
    lpuart_initstruct.DataWidth           = LL_USART_DATAWIDTH_8B;
 801a114:	2300      	movs	r3, #0
 801a116:	62bb      	str	r3, [r7, #40]	@ 0x28
    lpuart_initstruct.StopBits            = LL_USART_STOPBITS_1;
 801a118:	2300      	movs	r3, #0
 801a11a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    lpuart_initstruct.Parity              = LL_USART_PARITY_NONE;
 801a11c:	2300      	movs	r3, #0
 801a11e:	633b      	str	r3, [r7, #48]	@ 0x30
    lpuart_initstruct.TransferDirection   = LL_USART_DIRECTION_TX;
 801a120:	2308      	movs	r3, #8
 801a122:	637b      	str	r3, [r7, #52]	@ 0x34
    lpuart_initstruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 801a124:	2300      	movs	r3, #0
 801a126:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Initialize USART instance according to parameters defined in initialization structure */
    LL_LPUART_Init(TRACER_EMB_USART_INSTANCE, &lpuart_initstruct);
 801a128:	f107 0320 	add.w	r3, r7, #32
 801a12c:	4619      	mov	r1, r3
 801a12e:	4820      	ldr	r0, [pc, #128]	@ (801a1b0 <HW_TRACER_EMB_Init+0x13c>)
 801a130:	f7f4 f838 	bl	800e1a4 <LL_LPUART_Init>

    LL_LPUART_Enable(TRACER_EMB_USART_INSTANCE);
 801a134:	481e      	ldr	r0, [pc, #120]	@ (801a1b0 <HW_TRACER_EMB_Init+0x13c>)
 801a136:	f7ff fded 	bl	8019d14 <LL_LPUART_Enable>

    uint32_t _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a13a:	481d      	ldr	r0, [pc, #116]	@ (801a1b0 <HW_TRACER_EMB_Init+0x13c>)
 801a13c:	f7ff fe2b 	bl	8019d96 <LL_LPUART_IsActiveFlag_TEACK>
 801a140:	63f8      	str	r0, [r7, #60]	@ 0x3c
    /* Polling USART initialisation */
    while (_temp1 == 0U)
 801a142:	e003      	b.n	801a14c <HW_TRACER_EMB_Init+0xd8>
    {
      _temp1 = LL_LPUART_IsActiveFlag_TEACK(TRACER_EMB_USART_INSTANCE);
 801a144:	481a      	ldr	r0, [pc, #104]	@ (801a1b0 <HW_TRACER_EMB_Init+0x13c>)
 801a146:	f7ff fe26 	bl	8019d96 <LL_LPUART_IsActiveFlag_TEACK>
 801a14a:	63f8      	str	r0, [r7, #60]	@ 0x3c
    while (_temp1 == 0U)
 801a14c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a14e:	2b00      	cmp	r3, #0
 801a150:	d0f8      	beq.n	801a144 <HW_TRACER_EMB_Init+0xd0>
  }
#endif /* TRACER_EMB_IS_INSTANCE_LPUART_TYPE */

#if TRACER_EMB_DMA_MODE == 1UL
  /* Configure TX DMA */
  TRACER_EMB_ENABLE_CLK_DMA();
 801a152:	2004      	movs	r0, #4
 801a154:	f7ff fb20 	bl	8019798 <LL_AHB1_GRP1_EnableClock>
 801a158:	2001      	movs	r0, #1
 801a15a:	f7ff fb1d 	bl	8019798 <LL_AHB1_GRP1_EnableClock>
                        LL_DMA_PERIPH_NOINCREMENT         |
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);
#else
  LL_DMA_ConfigTransfer(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a15e:	f242 0290 	movw	r2, #8336	@ 0x2090
 801a162:	2100      	movs	r1, #0
 801a164:	4813      	ldr	r0, [pc, #76]	@ (801a1b4 <HW_TRACER_EMB_Init+0x140>)
 801a166:	f7ff fbb7 	bl	80198d8 <LL_DMA_ConfigTransfer>
                        LL_DMA_MEMORY_INCREMENT           |
                        LL_DMA_PDATAALIGN_BYTE            |
                        LL_DMA_MDATAALIGN_BYTE);

#if defined(DMAMUX_CxCR_DMAREQ_ID)
  LL_DMA_SetPeriphRequest(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, TRACER_EMB_TX_DMA_REQUEST);
 801a16a:	2223      	movs	r2, #35	@ 0x23
 801a16c:	2100      	movs	r1, #0
 801a16e:	4811      	ldr	r0, [pc, #68]	@ (801a1b4 <HW_TRACER_EMB_Init+0x140>)
 801a170:	f7ff fc58 	bl	8019a24 <LL_DMA_SetPeriphRequest>
#endif /* GPDMA1 */

#if defined(DMA_SxCR_CHSEL)
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_EnableIT_TC(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a174:	2100      	movs	r1, #0
 801a176:	480f      	ldr	r0, [pc, #60]	@ (801a1b4 <HW_TRACER_EMB_Init+0x140>)
 801a178:	f7ff fc9e 	bl	8019ab8 <LL_DMA_EnableIT_TC>
#if TRACER_EMB_DMA_MODE == 1UL
#ifdef TRACER_EMB_TX_DMA_PRIORITY
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, TRACER_EMB_TX_DMA_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_TX_DMA_IRQ, 0);
 801a17c:	2100      	movs	r1, #0
 801a17e:	200b      	movs	r0, #11
 801a180:	f7ff fae0 	bl	8019744 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_TX_DMA_IRQ);
 801a184:	200b      	movs	r0, #11
 801a186:	f7ff fabf 	bl	8019708 <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_DMA_MODE == 1 */
#ifdef TRACER_EMB_TX_IRQ_PRIORITY
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, TRACER_EMB_TX_IRQ_PRIORITY);
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
#else
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801a18a:	2103      	movs	r1, #3
 801a18c:	205b      	movs	r0, #91	@ 0x5b
 801a18e:	f7ff fad9 	bl	8019744 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a192:	205b      	movs	r0, #91	@ 0x5b
 801a194:	f7ff fab8 	bl	8019708 <__NVIC_EnableIRQ>
#endif /* TRACER_EMB_TX_IRQ_PRIORITY */

  /* Disable the UART */
  if (fptr_rx == NULL)
 801a198:	4b07      	ldr	r3, [pc, #28]	@ (801a1b8 <HW_TRACER_EMB_Init+0x144>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d103      	bne.n	801a1a8 <HW_TRACER_EMB_Init+0x134>
  {
    TRACER_EMB_DISABLE_CLK_USART();
 801a1a0:	2001      	movs	r0, #1
 801a1a2:	f7ff fb41 	bl	8019828 <LL_APB1_GRP2_DisableClock>
  }
  return;
 801a1a6:	bf00      	nop
 801a1a8:	bf00      	nop
}
 801a1aa:	3740      	adds	r7, #64	@ 0x40
 801a1ac:	46bd      	mov	sp, r7
 801a1ae:	bd80      	pop	{r7, pc}
 801a1b0:	40008000 	.word	0x40008000
 801a1b4:	40020000 	.word	0x40020000
 801a1b8:	20002f70 	.word	0x20002f70

0801a1bc <HW_TRACER_EMB_RegisterRxCallback>:
  * @brief  Allow to update the RX callback
  * @param  callbackRX
  * @retval none
  */
void HW_TRACER_EMB_RegisterRxCallback(void (*callbackRX)(uint8_t, uint8_t))
{
 801a1bc:	b580      	push	{r7, lr}
 801a1be:	b082      	sub	sp, #8
 801a1c0:	af00      	add	r7, sp, #0
 801a1c2:	6078      	str	r0, [r7, #4]
  fptr_rx = callbackRX;
 801a1c4:	4a04      	ldr	r2, [pc, #16]	@ (801a1d8 <HW_TRACER_EMB_RegisterRxCallback+0x1c>)
 801a1c6:	687b      	ldr	r3, [r7, #4]
 801a1c8:	6013      	str	r3, [r2, #0]
  TRACER_EMB_ENABLE_CLK_USART();
 801a1ca:	2001      	movs	r0, #1
 801a1cc:	f7ff fb14 	bl	80197f8 <LL_APB1_GRP2_EnableClock>
}
 801a1d0:	bf00      	nop
 801a1d2:	3708      	adds	r7, #8
 801a1d4:	46bd      	mov	sp, r7
 801a1d6:	bd80      	pop	{r7, pc}
 801a1d8:	20002f70 	.word	0x20002f70

0801a1dc <HW_TRACER_EMB_StartRX>:
/**
  * @brief  Start RX reception only when OSKernel have been started
  * @retval none
  */
void HW_TRACER_EMB_StartRX(void)
{
 801a1dc:	b580      	push	{r7, lr}
 801a1de:	af00      	add	r7, sp, #0
  /* Enable USART IT for RX */
  TRACER_EMB_ENABLE_IT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a1e0:	4808      	ldr	r0, [pc, #32]	@ (801a204 <HW_TRACER_EMB_StartRX+0x28>)
 801a1e2:	f7ff fe2d 	bl	8019e40 <LL_LPUART_EnableIT_RXNE_RXFNE>
  TRACER_EMB_ENABLE_IT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a1e6:	4807      	ldr	r0, [pc, #28]	@ (801a204 <HW_TRACER_EMB_StartRX+0x28>)
 801a1e8:	f7ff fe6c 	bl	8019ec4 <LL_LPUART_EnableIT_ERROR>

  /* Enable RX/TX */
  TRACER_EMB_ENABLEDIRECTIONRX(TRACER_EMB_USART_INSTANCE);
 801a1ec:	4805      	ldr	r0, [pc, #20]	@ (801a204 <HW_TRACER_EMB_StartRX+0x28>)
 801a1ee:	f7ff fdb1 	bl	8019d54 <LL_LPUART_EnableDirectionRx>

  /* Configure the interrupt for RX */
  NVIC_SetPriority(TRACER_EMB_USART_IRQ, 3);
 801a1f2:	2103      	movs	r1, #3
 801a1f4:	205b      	movs	r0, #91	@ 0x5b
 801a1f6:	f7ff faa5 	bl	8019744 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TRACER_EMB_USART_IRQ);
 801a1fa:	205b      	movs	r0, #91	@ 0x5b
 801a1fc:	f7ff fa84 	bl	8019708 <__NVIC_EnableIRQ>
}
 801a200:	bf00      	nop
 801a202:	bd80      	pop	{r7, pc}
 801a204:	40008000 	.word	0x40008000

0801a208 <HW_TRACER_EMB_IRQHandlerDMA>:
/**
  * @brief  Function to handle reception in DMA mode
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerDMA(void)
{
 801a208:	b580      	push	{r7, lr}
 801a20a:	af00      	add	r7, sp, #0
  if (TRACER_EMB_TX_DMA_ACTIVE_FLAG(TRACER_EMB_DMA_INSTANCE) == 1UL)
 801a20c:	4806      	ldr	r0, [pc, #24]	@ (801a228 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801a20e:	f7ff fc33 	bl	8019a78 <LL_DMA_IsActiveFlag_TC1>
 801a212:	4603      	mov	r3, r0
 801a214:	2b01      	cmp	r3, #1
 801a216:	d105      	bne.n	801a224 <HW_TRACER_EMB_IRQHandlerDMA+0x1c>
  {
    TRACER_EMB_ENABLE_IT_TC(TRACER_EMB_USART_INSTANCE);
 801a218:	4804      	ldr	r0, [pc, #16]	@ (801a22c <HW_TRACER_EMB_IRQHandlerDMA+0x24>)
 801a21a:	f7ff fe32 	bl	8019e82 <LL_LPUART_EnableIT_TC>
    TRACER_EMB_TX_DMA_CLEAR_FLAG(TRACER_EMB_DMA_INSTANCE);
 801a21e:	4802      	ldr	r0, [pc, #8]	@ (801a228 <HW_TRACER_EMB_IRQHandlerDMA+0x20>)
 801a220:	f7ff fc3d 	bl	8019a9e <LL_DMA_ClearFlag_TC1>
  }
}
 801a224:	bf00      	nop
 801a226:	bd80      	pop	{r7, pc}
 801a228:	40020000 	.word	0x40020000
 801a22c:	40008000 	.word	0x40008000

0801a230 <HW_TRACER_EMB_IRQHandlerUSART>:
/**
  * @brief  USART/LPUART IRQ Handler
  * @retval none
  */
void HW_TRACER_EMB_IRQHandlerUSART(void)
{
 801a230:	b580      	push	{r7, lr}
 801a232:	b086      	sub	sp, #24
 801a234:	af00      	add	r7, sp, #0
  uint32_t _temp1;
  uint32_t  _temp2;
  uint32_t _isrflags;
  uint32_t _errorflags;
  uint8_t _error = 0U;
 801a236:	2300      	movs	r3, #0
 801a238:	75fb      	strb	r3, [r7, #23]

  /* Load ISR in local variable */
#if defined(USART_ISR_TC)
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, ISR);
 801a23a:	4b54      	ldr	r3, [pc, #336]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a23c:	69db      	ldr	r3, [r3, #28]
 801a23e:	613b      	str	r3, [r7, #16]
#else
  _isrflags = TRACER_EMB_READREG(TRACER_EMB_USART_INSTANCE, SR);
#endif  /* USART_ISR_TC */

  /* Ready to read received char if any */
  _temp1 = TRACER_EMB_ISENABLEDIT_RXNE(TRACER_EMB_USART_INSTANCE);
 801a240:	4852      	ldr	r0, [pc, #328]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a242:	f7ff fe83 	bl	8019f4c <LL_LPUART_IsEnabledIT_RXNE_RXFNE>
 801a246:	60f8      	str	r0, [r7, #12]

  /* If Reception is ongoing */
  if (_temp1 == 1UL)
 801a248:	68fb      	ldr	r3, [r7, #12]
 801a24a:	2b01      	cmp	r3, #1
 801a24c:	d178      	bne.n	801a340 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
  {
    /* Reception is active : check if new byte is received */
    __IO uint32_t received_char;

    _errorflags = ((_isrflags) & (TRACER_EMB_FLAG_PE | TRACER_EMB_FLAG_FE | TRACER_EMB_FLAG_NE | TRACER_EMB_FLAG_ORE));
 801a24e:	693b      	ldr	r3, [r7, #16]
 801a250:	f003 030f 	and.w	r3, r3, #15
 801a254:	60bb      	str	r3, [r7, #8]

    /* Check if RXNE flag is set : new byte is stored in DR */
    if (((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a256:	693b      	ldr	r3, [r7, #16]
 801a258:	f003 0320 	and.w	r3, r3, #32
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d014      	beq.n	801a28a <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
        && (_errorflags == 0UL))
 801a260:	68bb      	ldr	r3, [r7, #8]
 801a262:	2b00      	cmp	r3, #0
 801a264:	d111      	bne.n	801a28a <HW_TRACER_EMB_IRQHandlerUSART+0x5a>
    {
      /* Read Received character. RXNE flag is cleared by reading of RDR register */
      received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a266:	4849      	ldr	r0, [pc, #292]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a268:	f7ff fef6 	bl	801a058 <LL_LPUART_ReceiveData8>
 801a26c:	4603      	mov	r3, r0
 801a26e:	603b      	str	r3, [r7, #0]

      if (fptr_rx != NULL)
 801a270:	4b47      	ldr	r3, [pc, #284]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a272:	681b      	ldr	r3, [r3, #0]
 801a274:	2b00      	cmp	r3, #0
 801a276:	f000 8083 	beq.w	801a380 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
      {
        fptr_rx(received_char, 0U);
 801a27a:	4b45      	ldr	r3, [pc, #276]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a27c:	681b      	ldr	r3, [r3, #0]
 801a27e:	683a      	ldr	r2, [r7, #0]
 801a280:	b2d2      	uxtb	r2, r2
 801a282:	2100      	movs	r1, #0
 801a284:	4610      	mov	r0, r2
 801a286:	4798      	blx	r3
      }
      return;
 801a288:	e07a      	b.n	801a380 <HW_TRACER_EMB_IRQHandlerUSART+0x150>
    }
    else if (_errorflags != 0UL)
 801a28a:	68bb      	ldr	r3, [r7, #8]
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	d057      	beq.n	801a340 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
    {
      /* Error has been detected */

      /* Check if RXNE flag is set : new byte is stored in DR */
      if ((TRACER_EMB_FLAG_RXNE) == ((_isrflags) & (TRACER_EMB_FLAG_RXNE)))
 801a290:	693b      	ldr	r3, [r7, #16]
 801a292:	f003 0320 	and.w	r3, r3, #32
 801a296:	2b00      	cmp	r3, #0
 801a298:	d010      	beq.n	801a2bc <HW_TRACER_EMB_IRQHandlerUSART+0x8c>
      {
        /* Read Received character. RXNE flag is cleared by reading of RDR register */
        received_char = TRACER_EMB_RECEIVE_DATA8(TRACER_EMB_USART_INSTANCE);
 801a29a:	483c      	ldr	r0, [pc, #240]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a29c:	f7ff fedc 	bl	801a058 <LL_LPUART_ReceiveData8>
 801a2a0:	4603      	mov	r3, r0
 801a2a2:	603b      	str	r3, [r7, #0]

        if (fptr_rx != NULL)
 801a2a4:	4b3a      	ldr	r3, [pc, #232]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a2a6:	681b      	ldr	r3, [r3, #0]
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d06b      	beq.n	801a384 <HW_TRACER_EMB_IRQHandlerUSART+0x154>
        {
          fptr_rx(received_char, 0U);
 801a2ac:	4b38      	ldr	r3, [pc, #224]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	683a      	ldr	r2, [r7, #0]
 801a2b2:	b2d2      	uxtb	r2, r2
 801a2b4:	2100      	movs	r1, #0
 801a2b6:	4610      	mov	r0, r2
 801a2b8:	4798      	blx	r3
        }
        return;
 801a2ba:	e063      	b.n	801a384 <HW_TRACER_EMB_IRQHandlerUSART+0x154>
      }

      /* Parity error    */
      _temp2 = TRACER_EMB_ISENABLEDIT_PE(TRACER_EMB_USART_INSTANCE);
 801a2bc:	4833      	ldr	r0, [pc, #204]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2be:	f7ff fe6b 	bl	8019f98 <LL_LPUART_IsEnabledIT_PE>
 801a2c2:	6078      	str	r0, [r7, #4]
      if ((_temp2 == 1U)
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	2b01      	cmp	r3, #1
 801a2c8:	d109      	bne.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0xae>
          && (TRACER_EMB_FLAG_PE == ((_errorflags) & (TRACER_EMB_FLAG_PE))))
 801a2ca:	68bb      	ldr	r3, [r7, #8]
 801a2cc:	f003 0301 	and.w	r3, r3, #1
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	d004      	beq.n	801a2de <HW_TRACER_EMB_IRQHandlerUSART+0xae>
      {
        /* Flags clearing */
        TRACER_EMB_CLEARFLAG_PE(TRACER_EMB_USART_INSTANCE);
 801a2d4:	482d      	ldr	r0, [pc, #180]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2d6:	f7ff fd72 	bl	8019dbe <LL_LPUART_ClearFlag_PE>
        _error = 1U;
 801a2da:	2301      	movs	r3, #1
 801a2dc:	75fb      	strb	r3, [r7, #23]
      }

      /* Generic Errors*/
      _temp2 = TRACER_EMB_ISENABLEDIT_ERROR(TRACER_EMB_USART_INSTANCE);
 801a2de:	482b      	ldr	r0, [pc, #172]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2e0:	f7ff fe6e 	bl	8019fc0 <LL_LPUART_IsEnabledIT_ERROR>
 801a2e4:	6078      	str	r0, [r7, #4]
      if (_temp2 == 1U)
 801a2e6:	687b      	ldr	r3, [r7, #4]
 801a2e8:	2b01      	cmp	r3, #1
 801a2ea:	d11d      	bne.n	801a328 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
      {
        /* Framing error   */
        if (TRACER_EMB_FLAG_FE == ((_errorflags) & (TRACER_EMB_FLAG_FE)))
 801a2ec:	68bb      	ldr	r3, [r7, #8]
 801a2ee:	f003 0302 	and.w	r3, r3, #2
 801a2f2:	2b00      	cmp	r3, #0
 801a2f4:	d004      	beq.n	801a300 <HW_TRACER_EMB_IRQHandlerUSART+0xd0>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_FE(TRACER_EMB_USART_INSTANCE);
 801a2f6:	4825      	ldr	r0, [pc, #148]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a2f8:	f7ff fd6e 	bl	8019dd8 <LL_LPUART_ClearFlag_FE>
          _error = 1U;
 801a2fc:	2301      	movs	r3, #1
 801a2fe:	75fb      	strb	r3, [r7, #23]
        }

        /* Overrun error   */
        if (TRACER_EMB_FLAG_ORE == ((_errorflags) & (TRACER_EMB_FLAG_ORE)))
 801a300:	68bb      	ldr	r3, [r7, #8]
 801a302:	f003 0308 	and.w	r3, r3, #8
 801a306:	2b00      	cmp	r3, #0
 801a308:	d004      	beq.n	801a314 <HW_TRACER_EMB_IRQHandlerUSART+0xe4>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_ORE(TRACER_EMB_USART_INSTANCE);
 801a30a:	4820      	ldr	r0, [pc, #128]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a30c:	f7ff fd7e 	bl	8019e0c <LL_LPUART_ClearFlag_ORE>
          _error = 1U;
 801a310:	2301      	movs	r3, #1
 801a312:	75fb      	strb	r3, [r7, #23]
        }

        /* Noise detection */
        if (TRACER_EMB_FLAG_NE == ((_errorflags) & (TRACER_EMB_FLAG_NE)))
 801a314:	68bb      	ldr	r3, [r7, #8]
 801a316:	f003 0304 	and.w	r3, r3, #4
 801a31a:	2b00      	cmp	r3, #0
 801a31c:	d004      	beq.n	801a328 <HW_TRACER_EMB_IRQHandlerUSART+0xf8>
        {
          /* Flags clearing */
          TRACER_EMB_CLEARFLAG_NE(TRACER_EMB_USART_INSTANCE);
 801a31e:	481b      	ldr	r0, [pc, #108]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a320:	f7ff fd67 	bl	8019df2 <LL_LPUART_ClearFlag_NE>
          _error = 1U;
 801a324:	2301      	movs	r3, #1
 801a326:	75fb      	strb	r3, [r7, #23]
        }
      }

      if ((_error == 1U) && (fptr_rx != NULL))
 801a328:	7dfb      	ldrb	r3, [r7, #23]
 801a32a:	2b01      	cmp	r3, #1
 801a32c:	d108      	bne.n	801a340 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
 801a32e:	4b18      	ldr	r3, [pc, #96]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a330:	681b      	ldr	r3, [r3, #0]
 801a332:	2b00      	cmp	r3, #0
 801a334:	d004      	beq.n	801a340 <HW_TRACER_EMB_IRQHandlerUSART+0x110>
      {
        fptr_rx(1U, 1U);  /* 1 indicate a reception error */
 801a336:	4b16      	ldr	r3, [pc, #88]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a338:	681b      	ldr	r3, [r3, #0]
 801a33a:	2101      	movs	r1, #1
 801a33c:	2001      	movs	r0, #1
 801a33e:	4798      	blx	r3
  }
#endif /* TRACER_EMB_IT_MODE == 1 */

#if  (TRACER_EMB_DMA_MODE == 1UL)
  /* Ready to handle TC interrupt */
  _temp2 = TRACER_EMB_ISENABLEDIT_TC(TRACER_EMB_USART_INSTANCE);
 801a340:	4812      	ldr	r0, [pc, #72]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a342:	f7ff fe16 	bl	8019f72 <LL_LPUART_IsEnabledIT_TC>
 801a346:	6078      	str	r0, [r7, #4]
  if (((TRACER_EMB_FLAG_TC) == ((_isrflags) & (TRACER_EMB_FLAG_TC))) && (_temp2 == 1UL))
 801a348:	693b      	ldr	r3, [r7, #16]
 801a34a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801a34e:	2b00      	cmp	r3, #0
 801a350:	d019      	beq.n	801a386 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
 801a352:	687b      	ldr	r3, [r7, #4]
 801a354:	2b01      	cmp	r3, #1
 801a356:	d116      	bne.n	801a386 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
  {
    TRACER_EMB_DISABLEIT_TC(TRACER_EMB_USART_INSTANCE);
 801a358:	480c      	ldr	r0, [pc, #48]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a35a:	f7ff fdd6 	bl	8019f0a <LL_LPUART_DisableIT_TC>
    TRACER_EMB_CLEARFLAG_TC(TRACER_EMB_USART_INSTANCE);
 801a35e:	480b      	ldr	r0, [pc, #44]	@ (801a38c <HW_TRACER_EMB_IRQHandlerUSART+0x15c>)
 801a360:	f7ff fd61 	bl	8019e26 <LL_LPUART_ClearFlag_TC>
#if defined(DMA_SxCR_CHSEL)
    TRACER_EMB_DISABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
    TRACER_EMB_DISABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a364:	2100      	movs	r1, #0
 801a366:	480b      	ldr	r0, [pc, #44]	@ (801a394 <HW_TRACER_EMB_IRQHandlerUSART+0x164>)
 801a368:	f7ff fa94 	bl	8019894 <LL_DMA_DisableChannel>
#endif /* DMA_SxCR_CHSEL */
    if (fptr_rx == NULL)
 801a36c:	4b08      	ldr	r3, [pc, #32]	@ (801a390 <HW_TRACER_EMB_IRQHandlerUSART+0x160>)
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	2b00      	cmp	r3, #0
 801a372:	d102      	bne.n	801a37a <HW_TRACER_EMB_IRQHandlerUSART+0x14a>
    {
      TRACER_EMB_DISABLE_CLK_USART();
 801a374:	2001      	movs	r0, #1
 801a376:	f7ff fa57 	bl	8019828 <LL_APB1_GRP2_DisableClock>
    }
    /* call the callback */
    TRACER_EMB_CALLBACK_TX();
 801a37a:	f7ff f871 	bl	8019460 <TRACER_EMB_CALLBACK_TX>
 801a37e:	e002      	b.n	801a386 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
      return;
 801a380:	bf00      	nop
 801a382:	e000      	b.n	801a386 <HW_TRACER_EMB_IRQHandlerUSART+0x156>
        return;
 801a384:	bf00      	nop
  }
#endif /* TRACER_EMB_DMA_MODE == 1 */

}
 801a386:	3718      	adds	r7, #24
 801a388:	46bd      	mov	sp, r7
 801a38a:	bd80      	pop	{r7, pc}
 801a38c:	40008000 	.word	0x40008000
 801a390:	20002f70 	.word	0x20002f70
 801a394:	40020000 	.word	0x40020000

0801a398 <HW_TRACER_EMB_SendData>:
  * @param data pointer
  * @param data size
  * @retval none
  */
void HW_TRACER_EMB_SendData(const uint8_t *pData, uint32_t Size)
{
 801a398:	b5b0      	push	{r4, r5, r7, lr}
 801a39a:	b084      	sub	sp, #16
 801a39c:	af02      	add	r7, sp, #8
 801a39e:	6078      	str	r0, [r7, #4]
 801a3a0:	6039      	str	r1, [r7, #0]
  /* enable the USART */
  TRACER_EMB_ENABLE_CLK_USART();
 801a3a2:	2001      	movs	r0, #1
 801a3a4:	f7ff fa28 	bl	80197f8 <LL_APB1_GRP2_EnableClock>
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLESTREAM(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_STREAM);
#else
  LL_DMA_ConfigAddresses(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL,
 801a3a8:	687c      	ldr	r4, [r7, #4]
 801a3aa:	2100      	movs	r1, #0
 801a3ac:	480f      	ldr	r0, [pc, #60]	@ (801a3ec <HW_TRACER_EMB_SendData+0x54>)
 801a3ae:	f7ff fe3d 	bl	801a02c <LL_LPUART_DMA_GetRegAddr>
 801a3b2:	4605      	mov	r5, r0
 801a3b4:	2100      	movs	r1, #0
 801a3b6:	480e      	ldr	r0, [pc, #56]	@ (801a3f0 <HW_TRACER_EMB_SendData+0x58>)
 801a3b8:	f7ff fab6 	bl	8019928 <LL_DMA_GetDataTransferDirection>
 801a3bc:	4603      	mov	r3, r0
 801a3be:	9300      	str	r3, [sp, #0]
 801a3c0:	462b      	mov	r3, r5
 801a3c2:	4622      	mov	r2, r4
 801a3c4:	2100      	movs	r1, #0
 801a3c6:	480a      	ldr	r0, [pc, #40]	@ (801a3f0 <HW_TRACER_EMB_SendData+0x58>)
 801a3c8:	f7ff faee 	bl	80199a8 <LL_DMA_ConfigAddresses>
                         (uint32_t)pData,
                         TRACER_EMB_DMA_GETREGADDR(TRACER_EMB_USART_INSTANCE, LL_USART_DMA_REG_DATA_TRANSMIT),
                         LL_DMA_GetDataTransferDirection(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL));
  LL_DMA_SetDataLength(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL, Size);
 801a3cc:	683a      	ldr	r2, [r7, #0]
 801a3ce:	2100      	movs	r1, #0
 801a3d0:	4807      	ldr	r0, [pc, #28]	@ (801a3f0 <HW_TRACER_EMB_SendData+0x58>)
 801a3d2:	f7ff fac3 	bl	801995c <LL_DMA_SetDataLength>

  /* Enable DMA TX Interrupt */
  TRACER_EMB_ENABLEDMAREQ_TX(TRACER_EMB_USART_INSTANCE);
 801a3d6:	4805      	ldr	r0, [pc, #20]	@ (801a3ec <HW_TRACER_EMB_SendData+0x54>)
 801a3d8:	f7ff fe05 	bl	8019fe6 <LL_LPUART_EnableDMAReq_TX>

  /* Enable DMA Channel Tx */
  TRACER_EMB_ENABLECHANNEL(TRACER_EMB_DMA_INSTANCE, TRACER_EMB_TX_DMA_CHANNEL);
 801a3dc:	2100      	movs	r1, #0
 801a3de:	4804      	ldr	r0, [pc, #16]	@ (801a3f0 <HW_TRACER_EMB_SendData+0x58>)
 801a3e0:	f7ff fa36 	bl	8019850 <LL_DMA_EnableChannel>
  txSize = Size;

  /* Enable the TXEIE */
  TRACER_EMB_ENABLE_IT_TXE(TRACER_EMB_USART_INSTANCE);
#endif /* TRACER_EMB_IT_MODE == 1 */
}
 801a3e4:	bf00      	nop
 801a3e6:	3708      	adds	r7, #8
 801a3e8:	46bd      	mov	sp, r7
 801a3ea:	bdb0      	pop	{r4, r5, r7, pc}
 801a3ec:	40008000 	.word	0x40008000
 801a3f0:	40020000 	.word	0x40020000

0801a3f4 <malloc>:
 801a3f4:	4b02      	ldr	r3, [pc, #8]	@ (801a400 <malloc+0xc>)
 801a3f6:	4601      	mov	r1, r0
 801a3f8:	6818      	ldr	r0, [r3, #0]
 801a3fa:	f000 b825 	b.w	801a448 <_malloc_r>
 801a3fe:	bf00      	nop
 801a400:	20000144 	.word	0x20000144

0801a404 <sbrk_aligned>:
 801a404:	b570      	push	{r4, r5, r6, lr}
 801a406:	4e0f      	ldr	r6, [pc, #60]	@ (801a444 <sbrk_aligned+0x40>)
 801a408:	460c      	mov	r4, r1
 801a40a:	6831      	ldr	r1, [r6, #0]
 801a40c:	4605      	mov	r5, r0
 801a40e:	b911      	cbnz	r1, 801a416 <sbrk_aligned+0x12>
 801a410:	f000 f902 	bl	801a618 <_sbrk_r>
 801a414:	6030      	str	r0, [r6, #0]
 801a416:	4621      	mov	r1, r4
 801a418:	4628      	mov	r0, r5
 801a41a:	f000 f8fd 	bl	801a618 <_sbrk_r>
 801a41e:	1c43      	adds	r3, r0, #1
 801a420:	d103      	bne.n	801a42a <sbrk_aligned+0x26>
 801a422:	f04f 34ff 	mov.w	r4, #4294967295
 801a426:	4620      	mov	r0, r4
 801a428:	bd70      	pop	{r4, r5, r6, pc}
 801a42a:	1cc4      	adds	r4, r0, #3
 801a42c:	f024 0403 	bic.w	r4, r4, #3
 801a430:	42a0      	cmp	r0, r4
 801a432:	d0f8      	beq.n	801a426 <sbrk_aligned+0x22>
 801a434:	1a21      	subs	r1, r4, r0
 801a436:	4628      	mov	r0, r5
 801a438:	f000 f8ee 	bl	801a618 <_sbrk_r>
 801a43c:	3001      	adds	r0, #1
 801a43e:	d1f2      	bne.n	801a426 <sbrk_aligned+0x22>
 801a440:	e7ef      	b.n	801a422 <sbrk_aligned+0x1e>
 801a442:	bf00      	nop
 801a444:	20002f74 	.word	0x20002f74

0801a448 <_malloc_r>:
 801a448:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801a44c:	1ccd      	adds	r5, r1, #3
 801a44e:	f025 0503 	bic.w	r5, r5, #3
 801a452:	3508      	adds	r5, #8
 801a454:	2d0c      	cmp	r5, #12
 801a456:	bf38      	it	cc
 801a458:	250c      	movcc	r5, #12
 801a45a:	2d00      	cmp	r5, #0
 801a45c:	4606      	mov	r6, r0
 801a45e:	db01      	blt.n	801a464 <_malloc_r+0x1c>
 801a460:	42a9      	cmp	r1, r5
 801a462:	d904      	bls.n	801a46e <_malloc_r+0x26>
 801a464:	230c      	movs	r3, #12
 801a466:	6033      	str	r3, [r6, #0]
 801a468:	2000      	movs	r0, #0
 801a46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a46e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801a544 <_malloc_r+0xfc>
 801a472:	f000 f869 	bl	801a548 <__malloc_lock>
 801a476:	f8d8 3000 	ldr.w	r3, [r8]
 801a47a:	461c      	mov	r4, r3
 801a47c:	bb44      	cbnz	r4, 801a4d0 <_malloc_r+0x88>
 801a47e:	4629      	mov	r1, r5
 801a480:	4630      	mov	r0, r6
 801a482:	f7ff ffbf 	bl	801a404 <sbrk_aligned>
 801a486:	1c43      	adds	r3, r0, #1
 801a488:	4604      	mov	r4, r0
 801a48a:	d158      	bne.n	801a53e <_malloc_r+0xf6>
 801a48c:	f8d8 4000 	ldr.w	r4, [r8]
 801a490:	4627      	mov	r7, r4
 801a492:	2f00      	cmp	r7, #0
 801a494:	d143      	bne.n	801a51e <_malloc_r+0xd6>
 801a496:	2c00      	cmp	r4, #0
 801a498:	d04b      	beq.n	801a532 <_malloc_r+0xea>
 801a49a:	6823      	ldr	r3, [r4, #0]
 801a49c:	4639      	mov	r1, r7
 801a49e:	4630      	mov	r0, r6
 801a4a0:	eb04 0903 	add.w	r9, r4, r3
 801a4a4:	f000 f8b8 	bl	801a618 <_sbrk_r>
 801a4a8:	4581      	cmp	r9, r0
 801a4aa:	d142      	bne.n	801a532 <_malloc_r+0xea>
 801a4ac:	6821      	ldr	r1, [r4, #0]
 801a4ae:	1a6d      	subs	r5, r5, r1
 801a4b0:	4629      	mov	r1, r5
 801a4b2:	4630      	mov	r0, r6
 801a4b4:	f7ff ffa6 	bl	801a404 <sbrk_aligned>
 801a4b8:	3001      	adds	r0, #1
 801a4ba:	d03a      	beq.n	801a532 <_malloc_r+0xea>
 801a4bc:	6823      	ldr	r3, [r4, #0]
 801a4be:	442b      	add	r3, r5
 801a4c0:	6023      	str	r3, [r4, #0]
 801a4c2:	f8d8 3000 	ldr.w	r3, [r8]
 801a4c6:	685a      	ldr	r2, [r3, #4]
 801a4c8:	bb62      	cbnz	r2, 801a524 <_malloc_r+0xdc>
 801a4ca:	f8c8 7000 	str.w	r7, [r8]
 801a4ce:	e00f      	b.n	801a4f0 <_malloc_r+0xa8>
 801a4d0:	6822      	ldr	r2, [r4, #0]
 801a4d2:	1b52      	subs	r2, r2, r5
 801a4d4:	d420      	bmi.n	801a518 <_malloc_r+0xd0>
 801a4d6:	2a0b      	cmp	r2, #11
 801a4d8:	d917      	bls.n	801a50a <_malloc_r+0xc2>
 801a4da:	1961      	adds	r1, r4, r5
 801a4dc:	42a3      	cmp	r3, r4
 801a4de:	6025      	str	r5, [r4, #0]
 801a4e0:	bf18      	it	ne
 801a4e2:	6059      	strne	r1, [r3, #4]
 801a4e4:	6863      	ldr	r3, [r4, #4]
 801a4e6:	bf08      	it	eq
 801a4e8:	f8c8 1000 	streq.w	r1, [r8]
 801a4ec:	5162      	str	r2, [r4, r5]
 801a4ee:	604b      	str	r3, [r1, #4]
 801a4f0:	4630      	mov	r0, r6
 801a4f2:	f000 f82f 	bl	801a554 <__malloc_unlock>
 801a4f6:	f104 000b 	add.w	r0, r4, #11
 801a4fa:	1d23      	adds	r3, r4, #4
 801a4fc:	f020 0007 	bic.w	r0, r0, #7
 801a500:	1ac2      	subs	r2, r0, r3
 801a502:	bf1c      	itt	ne
 801a504:	1a1b      	subne	r3, r3, r0
 801a506:	50a3      	strne	r3, [r4, r2]
 801a508:	e7af      	b.n	801a46a <_malloc_r+0x22>
 801a50a:	6862      	ldr	r2, [r4, #4]
 801a50c:	42a3      	cmp	r3, r4
 801a50e:	bf0c      	ite	eq
 801a510:	f8c8 2000 	streq.w	r2, [r8]
 801a514:	605a      	strne	r2, [r3, #4]
 801a516:	e7eb      	b.n	801a4f0 <_malloc_r+0xa8>
 801a518:	4623      	mov	r3, r4
 801a51a:	6864      	ldr	r4, [r4, #4]
 801a51c:	e7ae      	b.n	801a47c <_malloc_r+0x34>
 801a51e:	463c      	mov	r4, r7
 801a520:	687f      	ldr	r7, [r7, #4]
 801a522:	e7b6      	b.n	801a492 <_malloc_r+0x4a>
 801a524:	461a      	mov	r2, r3
 801a526:	685b      	ldr	r3, [r3, #4]
 801a528:	42a3      	cmp	r3, r4
 801a52a:	d1fb      	bne.n	801a524 <_malloc_r+0xdc>
 801a52c:	2300      	movs	r3, #0
 801a52e:	6053      	str	r3, [r2, #4]
 801a530:	e7de      	b.n	801a4f0 <_malloc_r+0xa8>
 801a532:	230c      	movs	r3, #12
 801a534:	6033      	str	r3, [r6, #0]
 801a536:	4630      	mov	r0, r6
 801a538:	f000 f80c 	bl	801a554 <__malloc_unlock>
 801a53c:	e794      	b.n	801a468 <_malloc_r+0x20>
 801a53e:	6005      	str	r5, [r0, #0]
 801a540:	e7d6      	b.n	801a4f0 <_malloc_r+0xa8>
 801a542:	bf00      	nop
 801a544:	20002f78 	.word	0x20002f78

0801a548 <__malloc_lock>:
 801a548:	4801      	ldr	r0, [pc, #4]	@ (801a550 <__malloc_lock+0x8>)
 801a54a:	f000 b89f 	b.w	801a68c <__retarget_lock_acquire_recursive>
 801a54e:	bf00      	nop
 801a550:	200030b8 	.word	0x200030b8

0801a554 <__malloc_unlock>:
 801a554:	4801      	ldr	r0, [pc, #4]	@ (801a55c <__malloc_unlock+0x8>)
 801a556:	f000 b89a 	b.w	801a68e <__retarget_lock_release_recursive>
 801a55a:	bf00      	nop
 801a55c:	200030b8 	.word	0x200030b8

0801a560 <sniprintf>:
 801a560:	b40c      	push	{r2, r3}
 801a562:	b530      	push	{r4, r5, lr}
 801a564:	4b17      	ldr	r3, [pc, #92]	@ (801a5c4 <sniprintf+0x64>)
 801a566:	1e0c      	subs	r4, r1, #0
 801a568:	681d      	ldr	r5, [r3, #0]
 801a56a:	b09d      	sub	sp, #116	@ 0x74
 801a56c:	da08      	bge.n	801a580 <sniprintf+0x20>
 801a56e:	238b      	movs	r3, #139	@ 0x8b
 801a570:	602b      	str	r3, [r5, #0]
 801a572:	f04f 30ff 	mov.w	r0, #4294967295
 801a576:	b01d      	add	sp, #116	@ 0x74
 801a578:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801a57c:	b002      	add	sp, #8
 801a57e:	4770      	bx	lr
 801a580:	f44f 7302 	mov.w	r3, #520	@ 0x208
 801a584:	f8ad 3014 	strh.w	r3, [sp, #20]
 801a588:	bf14      	ite	ne
 801a58a:	f104 33ff 	addne.w	r3, r4, #4294967295
 801a58e:	4623      	moveq	r3, r4
 801a590:	9304      	str	r3, [sp, #16]
 801a592:	9307      	str	r3, [sp, #28]
 801a594:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 801a598:	9002      	str	r0, [sp, #8]
 801a59a:	9006      	str	r0, [sp, #24]
 801a59c:	f8ad 3016 	strh.w	r3, [sp, #22]
 801a5a0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a5a2:	ab21      	add	r3, sp, #132	@ 0x84
 801a5a4:	a902      	add	r1, sp, #8
 801a5a6:	4628      	mov	r0, r5
 801a5a8:	9301      	str	r3, [sp, #4]
 801a5aa:	f000 f92b 	bl	801a804 <_svfiprintf_r>
 801a5ae:	1c43      	adds	r3, r0, #1
 801a5b0:	bfbc      	itt	lt
 801a5b2:	238b      	movlt	r3, #139	@ 0x8b
 801a5b4:	602b      	strlt	r3, [r5, #0]
 801a5b6:	2c00      	cmp	r4, #0
 801a5b8:	d0dd      	beq.n	801a576 <sniprintf+0x16>
 801a5ba:	9b02      	ldr	r3, [sp, #8]
 801a5bc:	2200      	movs	r2, #0
 801a5be:	701a      	strb	r2, [r3, #0]
 801a5c0:	e7d9      	b.n	801a576 <sniprintf+0x16>
 801a5c2:	bf00      	nop
 801a5c4:	20000144 	.word	0x20000144

0801a5c8 <siprintf>:
 801a5c8:	b40e      	push	{r1, r2, r3}
 801a5ca:	b500      	push	{lr}
 801a5cc:	b09c      	sub	sp, #112	@ 0x70
 801a5ce:	ab1d      	add	r3, sp, #116	@ 0x74
 801a5d0:	9002      	str	r0, [sp, #8]
 801a5d2:	9006      	str	r0, [sp, #24]
 801a5d4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801a5d8:	4809      	ldr	r0, [pc, #36]	@ (801a600 <siprintf+0x38>)
 801a5da:	9107      	str	r1, [sp, #28]
 801a5dc:	9104      	str	r1, [sp, #16]
 801a5de:	4909      	ldr	r1, [pc, #36]	@ (801a604 <siprintf+0x3c>)
 801a5e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a5e4:	9105      	str	r1, [sp, #20]
 801a5e6:	6800      	ldr	r0, [r0, #0]
 801a5e8:	9301      	str	r3, [sp, #4]
 801a5ea:	a902      	add	r1, sp, #8
 801a5ec:	f000 f90a 	bl	801a804 <_svfiprintf_r>
 801a5f0:	9b02      	ldr	r3, [sp, #8]
 801a5f2:	2200      	movs	r2, #0
 801a5f4:	701a      	strb	r2, [r3, #0]
 801a5f6:	b01c      	add	sp, #112	@ 0x70
 801a5f8:	f85d eb04 	ldr.w	lr, [sp], #4
 801a5fc:	b003      	add	sp, #12
 801a5fe:	4770      	bx	lr
 801a600:	20000144 	.word	0x20000144
 801a604:	ffff0208 	.word	0xffff0208

0801a608 <memset>:
 801a608:	4402      	add	r2, r0
 801a60a:	4603      	mov	r3, r0
 801a60c:	4293      	cmp	r3, r2
 801a60e:	d100      	bne.n	801a612 <memset+0xa>
 801a610:	4770      	bx	lr
 801a612:	f803 1b01 	strb.w	r1, [r3], #1
 801a616:	e7f9      	b.n	801a60c <memset+0x4>

0801a618 <_sbrk_r>:
 801a618:	b538      	push	{r3, r4, r5, lr}
 801a61a:	4d06      	ldr	r5, [pc, #24]	@ (801a634 <_sbrk_r+0x1c>)
 801a61c:	2300      	movs	r3, #0
 801a61e:	4604      	mov	r4, r0
 801a620:	4608      	mov	r0, r1
 801a622:	602b      	str	r3, [r5, #0]
 801a624:	f7ec fc6a 	bl	8006efc <_sbrk>
 801a628:	1c43      	adds	r3, r0, #1
 801a62a:	d102      	bne.n	801a632 <_sbrk_r+0x1a>
 801a62c:	682b      	ldr	r3, [r5, #0]
 801a62e:	b103      	cbz	r3, 801a632 <_sbrk_r+0x1a>
 801a630:	6023      	str	r3, [r4, #0]
 801a632:	bd38      	pop	{r3, r4, r5, pc}
 801a634:	200030b4 	.word	0x200030b4

0801a638 <__errno>:
 801a638:	4b01      	ldr	r3, [pc, #4]	@ (801a640 <__errno+0x8>)
 801a63a:	6818      	ldr	r0, [r3, #0]
 801a63c:	4770      	bx	lr
 801a63e:	bf00      	nop
 801a640:	20000144 	.word	0x20000144

0801a644 <__libc_init_array>:
 801a644:	b570      	push	{r4, r5, r6, lr}
 801a646:	4d0d      	ldr	r5, [pc, #52]	@ (801a67c <__libc_init_array+0x38>)
 801a648:	4c0d      	ldr	r4, [pc, #52]	@ (801a680 <__libc_init_array+0x3c>)
 801a64a:	1b64      	subs	r4, r4, r5
 801a64c:	10a4      	asrs	r4, r4, #2
 801a64e:	2600      	movs	r6, #0
 801a650:	42a6      	cmp	r6, r4
 801a652:	d109      	bne.n	801a668 <__libc_init_array+0x24>
 801a654:	4d0b      	ldr	r5, [pc, #44]	@ (801a684 <__libc_init_array+0x40>)
 801a656:	4c0c      	ldr	r4, [pc, #48]	@ (801a688 <__libc_init_array+0x44>)
 801a658:	f000 fbae 	bl	801adb8 <_init>
 801a65c:	1b64      	subs	r4, r4, r5
 801a65e:	10a4      	asrs	r4, r4, #2
 801a660:	2600      	movs	r6, #0
 801a662:	42a6      	cmp	r6, r4
 801a664:	d105      	bne.n	801a672 <__libc_init_array+0x2e>
 801a666:	bd70      	pop	{r4, r5, r6, pc}
 801a668:	f855 3b04 	ldr.w	r3, [r5], #4
 801a66c:	4798      	blx	r3
 801a66e:	3601      	adds	r6, #1
 801a670:	e7ee      	b.n	801a650 <__libc_init_array+0xc>
 801a672:	f855 3b04 	ldr.w	r3, [r5], #4
 801a676:	4798      	blx	r3
 801a678:	3601      	adds	r6, #1
 801a67a:	e7f2      	b.n	801a662 <__libc_init_array+0x1e>
 801a67c:	0801ba68 	.word	0x0801ba68
 801a680:	0801ba68 	.word	0x0801ba68
 801a684:	0801ba68 	.word	0x0801ba68
 801a688:	0801ba6c 	.word	0x0801ba6c

0801a68c <__retarget_lock_acquire_recursive>:
 801a68c:	4770      	bx	lr

0801a68e <__retarget_lock_release_recursive>:
 801a68e:	4770      	bx	lr

0801a690 <__aeabi_memcpy>:
 801a690:	f000 b803 	b.w	801a69a <memcpy>

0801a694 <__aeabi_memclr>:
 801a694:	2200      	movs	r2, #0
 801a696:	f7eb b9d6 	b.w	8005a46 <__aeabi_memset>

0801a69a <memcpy>:
 801a69a:	440a      	add	r2, r1
 801a69c:	4291      	cmp	r1, r2
 801a69e:	f100 33ff 	add.w	r3, r0, #4294967295
 801a6a2:	d100      	bne.n	801a6a6 <memcpy+0xc>
 801a6a4:	4770      	bx	lr
 801a6a6:	b510      	push	{r4, lr}
 801a6a8:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a6ac:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a6b0:	4291      	cmp	r1, r2
 801a6b2:	d1f9      	bne.n	801a6a8 <memcpy+0xe>
 801a6b4:	bd10      	pop	{r4, pc}
	...

0801a6b8 <_free_r>:
 801a6b8:	b538      	push	{r3, r4, r5, lr}
 801a6ba:	4605      	mov	r5, r0
 801a6bc:	2900      	cmp	r1, #0
 801a6be:	d041      	beq.n	801a744 <_free_r+0x8c>
 801a6c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801a6c4:	1f0c      	subs	r4, r1, #4
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	bfb8      	it	lt
 801a6ca:	18e4      	addlt	r4, r4, r3
 801a6cc:	f7ff ff3c 	bl	801a548 <__malloc_lock>
 801a6d0:	4a1d      	ldr	r2, [pc, #116]	@ (801a748 <_free_r+0x90>)
 801a6d2:	6813      	ldr	r3, [r2, #0]
 801a6d4:	b933      	cbnz	r3, 801a6e4 <_free_r+0x2c>
 801a6d6:	6063      	str	r3, [r4, #4]
 801a6d8:	6014      	str	r4, [r2, #0]
 801a6da:	4628      	mov	r0, r5
 801a6dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a6e0:	f7ff bf38 	b.w	801a554 <__malloc_unlock>
 801a6e4:	42a3      	cmp	r3, r4
 801a6e6:	d908      	bls.n	801a6fa <_free_r+0x42>
 801a6e8:	6820      	ldr	r0, [r4, #0]
 801a6ea:	1821      	adds	r1, r4, r0
 801a6ec:	428b      	cmp	r3, r1
 801a6ee:	bf01      	itttt	eq
 801a6f0:	6819      	ldreq	r1, [r3, #0]
 801a6f2:	685b      	ldreq	r3, [r3, #4]
 801a6f4:	1809      	addeq	r1, r1, r0
 801a6f6:	6021      	streq	r1, [r4, #0]
 801a6f8:	e7ed      	b.n	801a6d6 <_free_r+0x1e>
 801a6fa:	461a      	mov	r2, r3
 801a6fc:	685b      	ldr	r3, [r3, #4]
 801a6fe:	b10b      	cbz	r3, 801a704 <_free_r+0x4c>
 801a700:	42a3      	cmp	r3, r4
 801a702:	d9fa      	bls.n	801a6fa <_free_r+0x42>
 801a704:	6811      	ldr	r1, [r2, #0]
 801a706:	1850      	adds	r0, r2, r1
 801a708:	42a0      	cmp	r0, r4
 801a70a:	d10b      	bne.n	801a724 <_free_r+0x6c>
 801a70c:	6820      	ldr	r0, [r4, #0]
 801a70e:	4401      	add	r1, r0
 801a710:	1850      	adds	r0, r2, r1
 801a712:	4283      	cmp	r3, r0
 801a714:	6011      	str	r1, [r2, #0]
 801a716:	d1e0      	bne.n	801a6da <_free_r+0x22>
 801a718:	6818      	ldr	r0, [r3, #0]
 801a71a:	685b      	ldr	r3, [r3, #4]
 801a71c:	6053      	str	r3, [r2, #4]
 801a71e:	4408      	add	r0, r1
 801a720:	6010      	str	r0, [r2, #0]
 801a722:	e7da      	b.n	801a6da <_free_r+0x22>
 801a724:	d902      	bls.n	801a72c <_free_r+0x74>
 801a726:	230c      	movs	r3, #12
 801a728:	602b      	str	r3, [r5, #0]
 801a72a:	e7d6      	b.n	801a6da <_free_r+0x22>
 801a72c:	6820      	ldr	r0, [r4, #0]
 801a72e:	1821      	adds	r1, r4, r0
 801a730:	428b      	cmp	r3, r1
 801a732:	bf04      	itt	eq
 801a734:	6819      	ldreq	r1, [r3, #0]
 801a736:	685b      	ldreq	r3, [r3, #4]
 801a738:	6063      	str	r3, [r4, #4]
 801a73a:	bf04      	itt	eq
 801a73c:	1809      	addeq	r1, r1, r0
 801a73e:	6021      	streq	r1, [r4, #0]
 801a740:	6054      	str	r4, [r2, #4]
 801a742:	e7ca      	b.n	801a6da <_free_r+0x22>
 801a744:	bd38      	pop	{r3, r4, r5, pc}
 801a746:	bf00      	nop
 801a748:	20002f78 	.word	0x20002f78

0801a74c <__ssputs_r>:
 801a74c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a750:	688e      	ldr	r6, [r1, #8]
 801a752:	461f      	mov	r7, r3
 801a754:	42be      	cmp	r6, r7
 801a756:	680b      	ldr	r3, [r1, #0]
 801a758:	4682      	mov	sl, r0
 801a75a:	460c      	mov	r4, r1
 801a75c:	4690      	mov	r8, r2
 801a75e:	d82d      	bhi.n	801a7bc <__ssputs_r+0x70>
 801a760:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a764:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801a768:	d026      	beq.n	801a7b8 <__ssputs_r+0x6c>
 801a76a:	6965      	ldr	r5, [r4, #20]
 801a76c:	6909      	ldr	r1, [r1, #16]
 801a76e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a772:	eba3 0901 	sub.w	r9, r3, r1
 801a776:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801a77a:	1c7b      	adds	r3, r7, #1
 801a77c:	444b      	add	r3, r9
 801a77e:	106d      	asrs	r5, r5, #1
 801a780:	429d      	cmp	r5, r3
 801a782:	bf38      	it	cc
 801a784:	461d      	movcc	r5, r3
 801a786:	0553      	lsls	r3, r2, #21
 801a788:	d527      	bpl.n	801a7da <__ssputs_r+0x8e>
 801a78a:	4629      	mov	r1, r5
 801a78c:	f7ff fe5c 	bl	801a448 <_malloc_r>
 801a790:	4606      	mov	r6, r0
 801a792:	b360      	cbz	r0, 801a7ee <__ssputs_r+0xa2>
 801a794:	6921      	ldr	r1, [r4, #16]
 801a796:	464a      	mov	r2, r9
 801a798:	f7ff ff7f 	bl	801a69a <memcpy>
 801a79c:	89a3      	ldrh	r3, [r4, #12]
 801a79e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801a7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a7a6:	81a3      	strh	r3, [r4, #12]
 801a7a8:	6126      	str	r6, [r4, #16]
 801a7aa:	6165      	str	r5, [r4, #20]
 801a7ac:	444e      	add	r6, r9
 801a7ae:	eba5 0509 	sub.w	r5, r5, r9
 801a7b2:	6026      	str	r6, [r4, #0]
 801a7b4:	60a5      	str	r5, [r4, #8]
 801a7b6:	463e      	mov	r6, r7
 801a7b8:	42be      	cmp	r6, r7
 801a7ba:	d900      	bls.n	801a7be <__ssputs_r+0x72>
 801a7bc:	463e      	mov	r6, r7
 801a7be:	6820      	ldr	r0, [r4, #0]
 801a7c0:	4632      	mov	r2, r6
 801a7c2:	4641      	mov	r1, r8
 801a7c4:	f000 faa8 	bl	801ad18 <memmove>
 801a7c8:	68a3      	ldr	r3, [r4, #8]
 801a7ca:	1b9b      	subs	r3, r3, r6
 801a7cc:	60a3      	str	r3, [r4, #8]
 801a7ce:	6823      	ldr	r3, [r4, #0]
 801a7d0:	4433      	add	r3, r6
 801a7d2:	6023      	str	r3, [r4, #0]
 801a7d4:	2000      	movs	r0, #0
 801a7d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7da:	462a      	mov	r2, r5
 801a7dc:	f000 fab6 	bl	801ad4c <_realloc_r>
 801a7e0:	4606      	mov	r6, r0
 801a7e2:	2800      	cmp	r0, #0
 801a7e4:	d1e0      	bne.n	801a7a8 <__ssputs_r+0x5c>
 801a7e6:	6921      	ldr	r1, [r4, #16]
 801a7e8:	4650      	mov	r0, sl
 801a7ea:	f7ff ff65 	bl	801a6b8 <_free_r>
 801a7ee:	230c      	movs	r3, #12
 801a7f0:	f8ca 3000 	str.w	r3, [sl]
 801a7f4:	89a3      	ldrh	r3, [r4, #12]
 801a7f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a7fa:	81a3      	strh	r3, [r4, #12]
 801a7fc:	f04f 30ff 	mov.w	r0, #4294967295
 801a800:	e7e9      	b.n	801a7d6 <__ssputs_r+0x8a>
	...

0801a804 <_svfiprintf_r>:
 801a804:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a808:	4698      	mov	r8, r3
 801a80a:	898b      	ldrh	r3, [r1, #12]
 801a80c:	061b      	lsls	r3, r3, #24
 801a80e:	b09d      	sub	sp, #116	@ 0x74
 801a810:	4607      	mov	r7, r0
 801a812:	460d      	mov	r5, r1
 801a814:	4614      	mov	r4, r2
 801a816:	d510      	bpl.n	801a83a <_svfiprintf_r+0x36>
 801a818:	690b      	ldr	r3, [r1, #16]
 801a81a:	b973      	cbnz	r3, 801a83a <_svfiprintf_r+0x36>
 801a81c:	2140      	movs	r1, #64	@ 0x40
 801a81e:	f7ff fe13 	bl	801a448 <_malloc_r>
 801a822:	6028      	str	r0, [r5, #0]
 801a824:	6128      	str	r0, [r5, #16]
 801a826:	b930      	cbnz	r0, 801a836 <_svfiprintf_r+0x32>
 801a828:	230c      	movs	r3, #12
 801a82a:	603b      	str	r3, [r7, #0]
 801a82c:	f04f 30ff 	mov.w	r0, #4294967295
 801a830:	b01d      	add	sp, #116	@ 0x74
 801a832:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a836:	2340      	movs	r3, #64	@ 0x40
 801a838:	616b      	str	r3, [r5, #20]
 801a83a:	2300      	movs	r3, #0
 801a83c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a83e:	2320      	movs	r3, #32
 801a840:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801a844:	f8cd 800c 	str.w	r8, [sp, #12]
 801a848:	2330      	movs	r3, #48	@ 0x30
 801a84a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801a9e8 <_svfiprintf_r+0x1e4>
 801a84e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801a852:	f04f 0901 	mov.w	r9, #1
 801a856:	4623      	mov	r3, r4
 801a858:	469a      	mov	sl, r3
 801a85a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a85e:	b10a      	cbz	r2, 801a864 <_svfiprintf_r+0x60>
 801a860:	2a25      	cmp	r2, #37	@ 0x25
 801a862:	d1f9      	bne.n	801a858 <_svfiprintf_r+0x54>
 801a864:	ebba 0b04 	subs.w	fp, sl, r4
 801a868:	d00b      	beq.n	801a882 <_svfiprintf_r+0x7e>
 801a86a:	465b      	mov	r3, fp
 801a86c:	4622      	mov	r2, r4
 801a86e:	4629      	mov	r1, r5
 801a870:	4638      	mov	r0, r7
 801a872:	f7ff ff6b 	bl	801a74c <__ssputs_r>
 801a876:	3001      	adds	r0, #1
 801a878:	f000 80a7 	beq.w	801a9ca <_svfiprintf_r+0x1c6>
 801a87c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a87e:	445a      	add	r2, fp
 801a880:	9209      	str	r2, [sp, #36]	@ 0x24
 801a882:	f89a 3000 	ldrb.w	r3, [sl]
 801a886:	2b00      	cmp	r3, #0
 801a888:	f000 809f 	beq.w	801a9ca <_svfiprintf_r+0x1c6>
 801a88c:	2300      	movs	r3, #0
 801a88e:	f04f 32ff 	mov.w	r2, #4294967295
 801a892:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a896:	f10a 0a01 	add.w	sl, sl, #1
 801a89a:	9304      	str	r3, [sp, #16]
 801a89c:	9307      	str	r3, [sp, #28]
 801a89e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801a8a2:	931a      	str	r3, [sp, #104]	@ 0x68
 801a8a4:	4654      	mov	r4, sl
 801a8a6:	2205      	movs	r2, #5
 801a8a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a8ac:	484e      	ldr	r0, [pc, #312]	@ (801a9e8 <_svfiprintf_r+0x1e4>)
 801a8ae:	f7eb f91f 	bl	8005af0 <memchr>
 801a8b2:	9a04      	ldr	r2, [sp, #16]
 801a8b4:	b9d8      	cbnz	r0, 801a8ee <_svfiprintf_r+0xea>
 801a8b6:	06d0      	lsls	r0, r2, #27
 801a8b8:	bf44      	itt	mi
 801a8ba:	2320      	movmi	r3, #32
 801a8bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a8c0:	0711      	lsls	r1, r2, #28
 801a8c2:	bf44      	itt	mi
 801a8c4:	232b      	movmi	r3, #43	@ 0x2b
 801a8c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801a8ca:	f89a 3000 	ldrb.w	r3, [sl]
 801a8ce:	2b2a      	cmp	r3, #42	@ 0x2a
 801a8d0:	d015      	beq.n	801a8fe <_svfiprintf_r+0xfa>
 801a8d2:	9a07      	ldr	r2, [sp, #28]
 801a8d4:	4654      	mov	r4, sl
 801a8d6:	2000      	movs	r0, #0
 801a8d8:	f04f 0c0a 	mov.w	ip, #10
 801a8dc:	4621      	mov	r1, r4
 801a8de:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a8e2:	3b30      	subs	r3, #48	@ 0x30
 801a8e4:	2b09      	cmp	r3, #9
 801a8e6:	d94b      	bls.n	801a980 <_svfiprintf_r+0x17c>
 801a8e8:	b1b0      	cbz	r0, 801a918 <_svfiprintf_r+0x114>
 801a8ea:	9207      	str	r2, [sp, #28]
 801a8ec:	e014      	b.n	801a918 <_svfiprintf_r+0x114>
 801a8ee:	eba0 0308 	sub.w	r3, r0, r8
 801a8f2:	fa09 f303 	lsl.w	r3, r9, r3
 801a8f6:	4313      	orrs	r3, r2
 801a8f8:	9304      	str	r3, [sp, #16]
 801a8fa:	46a2      	mov	sl, r4
 801a8fc:	e7d2      	b.n	801a8a4 <_svfiprintf_r+0xa0>
 801a8fe:	9b03      	ldr	r3, [sp, #12]
 801a900:	1d19      	adds	r1, r3, #4
 801a902:	681b      	ldr	r3, [r3, #0]
 801a904:	9103      	str	r1, [sp, #12]
 801a906:	2b00      	cmp	r3, #0
 801a908:	bfbb      	ittet	lt
 801a90a:	425b      	neglt	r3, r3
 801a90c:	f042 0202 	orrlt.w	r2, r2, #2
 801a910:	9307      	strge	r3, [sp, #28]
 801a912:	9307      	strlt	r3, [sp, #28]
 801a914:	bfb8      	it	lt
 801a916:	9204      	strlt	r2, [sp, #16]
 801a918:	7823      	ldrb	r3, [r4, #0]
 801a91a:	2b2e      	cmp	r3, #46	@ 0x2e
 801a91c:	d10a      	bne.n	801a934 <_svfiprintf_r+0x130>
 801a91e:	7863      	ldrb	r3, [r4, #1]
 801a920:	2b2a      	cmp	r3, #42	@ 0x2a
 801a922:	d132      	bne.n	801a98a <_svfiprintf_r+0x186>
 801a924:	9b03      	ldr	r3, [sp, #12]
 801a926:	1d1a      	adds	r2, r3, #4
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	9203      	str	r2, [sp, #12]
 801a92c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801a930:	3402      	adds	r4, #2
 801a932:	9305      	str	r3, [sp, #20]
 801a934:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801a9f8 <_svfiprintf_r+0x1f4>
 801a938:	7821      	ldrb	r1, [r4, #0]
 801a93a:	2203      	movs	r2, #3
 801a93c:	4650      	mov	r0, sl
 801a93e:	f7eb f8d7 	bl	8005af0 <memchr>
 801a942:	b138      	cbz	r0, 801a954 <_svfiprintf_r+0x150>
 801a944:	9b04      	ldr	r3, [sp, #16]
 801a946:	eba0 000a 	sub.w	r0, r0, sl
 801a94a:	2240      	movs	r2, #64	@ 0x40
 801a94c:	4082      	lsls	r2, r0
 801a94e:	4313      	orrs	r3, r2
 801a950:	3401      	adds	r4, #1
 801a952:	9304      	str	r3, [sp, #16]
 801a954:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a958:	4824      	ldr	r0, [pc, #144]	@ (801a9ec <_svfiprintf_r+0x1e8>)
 801a95a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801a95e:	2206      	movs	r2, #6
 801a960:	f7eb f8c6 	bl	8005af0 <memchr>
 801a964:	2800      	cmp	r0, #0
 801a966:	d036      	beq.n	801a9d6 <_svfiprintf_r+0x1d2>
 801a968:	4b21      	ldr	r3, [pc, #132]	@ (801a9f0 <_svfiprintf_r+0x1ec>)
 801a96a:	bb1b      	cbnz	r3, 801a9b4 <_svfiprintf_r+0x1b0>
 801a96c:	9b03      	ldr	r3, [sp, #12]
 801a96e:	3307      	adds	r3, #7
 801a970:	f023 0307 	bic.w	r3, r3, #7
 801a974:	3308      	adds	r3, #8
 801a976:	9303      	str	r3, [sp, #12]
 801a978:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a97a:	4433      	add	r3, r6
 801a97c:	9309      	str	r3, [sp, #36]	@ 0x24
 801a97e:	e76a      	b.n	801a856 <_svfiprintf_r+0x52>
 801a980:	fb0c 3202 	mla	r2, ip, r2, r3
 801a984:	460c      	mov	r4, r1
 801a986:	2001      	movs	r0, #1
 801a988:	e7a8      	b.n	801a8dc <_svfiprintf_r+0xd8>
 801a98a:	2300      	movs	r3, #0
 801a98c:	3401      	adds	r4, #1
 801a98e:	9305      	str	r3, [sp, #20]
 801a990:	4619      	mov	r1, r3
 801a992:	f04f 0c0a 	mov.w	ip, #10
 801a996:	4620      	mov	r0, r4
 801a998:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a99c:	3a30      	subs	r2, #48	@ 0x30
 801a99e:	2a09      	cmp	r2, #9
 801a9a0:	d903      	bls.n	801a9aa <_svfiprintf_r+0x1a6>
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d0c6      	beq.n	801a934 <_svfiprintf_r+0x130>
 801a9a6:	9105      	str	r1, [sp, #20]
 801a9a8:	e7c4      	b.n	801a934 <_svfiprintf_r+0x130>
 801a9aa:	fb0c 2101 	mla	r1, ip, r1, r2
 801a9ae:	4604      	mov	r4, r0
 801a9b0:	2301      	movs	r3, #1
 801a9b2:	e7f0      	b.n	801a996 <_svfiprintf_r+0x192>
 801a9b4:	ab03      	add	r3, sp, #12
 801a9b6:	9300      	str	r3, [sp, #0]
 801a9b8:	462a      	mov	r2, r5
 801a9ba:	4b0e      	ldr	r3, [pc, #56]	@ (801a9f4 <_svfiprintf_r+0x1f0>)
 801a9bc:	a904      	add	r1, sp, #16
 801a9be:	4638      	mov	r0, r7
 801a9c0:	f3af 8000 	nop.w
 801a9c4:	1c42      	adds	r2, r0, #1
 801a9c6:	4606      	mov	r6, r0
 801a9c8:	d1d6      	bne.n	801a978 <_svfiprintf_r+0x174>
 801a9ca:	89ab      	ldrh	r3, [r5, #12]
 801a9cc:	065b      	lsls	r3, r3, #25
 801a9ce:	f53f af2d 	bmi.w	801a82c <_svfiprintf_r+0x28>
 801a9d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a9d4:	e72c      	b.n	801a830 <_svfiprintf_r+0x2c>
 801a9d6:	ab03      	add	r3, sp, #12
 801a9d8:	9300      	str	r3, [sp, #0]
 801a9da:	462a      	mov	r2, r5
 801a9dc:	4b05      	ldr	r3, [pc, #20]	@ (801a9f4 <_svfiprintf_r+0x1f0>)
 801a9de:	a904      	add	r1, sp, #16
 801a9e0:	4638      	mov	r0, r7
 801a9e2:	f000 f879 	bl	801aad8 <_printf_i>
 801a9e6:	e7ed      	b.n	801a9c4 <_svfiprintf_r+0x1c0>
 801a9e8:	0801ba2a 	.word	0x0801ba2a
 801a9ec:	0801ba34 	.word	0x0801ba34
 801a9f0:	00000000 	.word	0x00000000
 801a9f4:	0801a74d 	.word	0x0801a74d
 801a9f8:	0801ba30 	.word	0x0801ba30

0801a9fc <_printf_common>:
 801a9fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801aa00:	4616      	mov	r6, r2
 801aa02:	4698      	mov	r8, r3
 801aa04:	688a      	ldr	r2, [r1, #8]
 801aa06:	690b      	ldr	r3, [r1, #16]
 801aa08:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801aa0c:	4293      	cmp	r3, r2
 801aa0e:	bfb8      	it	lt
 801aa10:	4613      	movlt	r3, r2
 801aa12:	6033      	str	r3, [r6, #0]
 801aa14:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801aa18:	4607      	mov	r7, r0
 801aa1a:	460c      	mov	r4, r1
 801aa1c:	b10a      	cbz	r2, 801aa22 <_printf_common+0x26>
 801aa1e:	3301      	adds	r3, #1
 801aa20:	6033      	str	r3, [r6, #0]
 801aa22:	6823      	ldr	r3, [r4, #0]
 801aa24:	0699      	lsls	r1, r3, #26
 801aa26:	bf42      	ittt	mi
 801aa28:	6833      	ldrmi	r3, [r6, #0]
 801aa2a:	3302      	addmi	r3, #2
 801aa2c:	6033      	strmi	r3, [r6, #0]
 801aa2e:	6825      	ldr	r5, [r4, #0]
 801aa30:	f015 0506 	ands.w	r5, r5, #6
 801aa34:	d106      	bne.n	801aa44 <_printf_common+0x48>
 801aa36:	f104 0a19 	add.w	sl, r4, #25
 801aa3a:	68e3      	ldr	r3, [r4, #12]
 801aa3c:	6832      	ldr	r2, [r6, #0]
 801aa3e:	1a9b      	subs	r3, r3, r2
 801aa40:	42ab      	cmp	r3, r5
 801aa42:	dc26      	bgt.n	801aa92 <_printf_common+0x96>
 801aa44:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801aa48:	6822      	ldr	r2, [r4, #0]
 801aa4a:	3b00      	subs	r3, #0
 801aa4c:	bf18      	it	ne
 801aa4e:	2301      	movne	r3, #1
 801aa50:	0692      	lsls	r2, r2, #26
 801aa52:	d42b      	bmi.n	801aaac <_printf_common+0xb0>
 801aa54:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801aa58:	4641      	mov	r1, r8
 801aa5a:	4638      	mov	r0, r7
 801aa5c:	47c8      	blx	r9
 801aa5e:	3001      	adds	r0, #1
 801aa60:	d01e      	beq.n	801aaa0 <_printf_common+0xa4>
 801aa62:	6823      	ldr	r3, [r4, #0]
 801aa64:	6922      	ldr	r2, [r4, #16]
 801aa66:	f003 0306 	and.w	r3, r3, #6
 801aa6a:	2b04      	cmp	r3, #4
 801aa6c:	bf02      	ittt	eq
 801aa6e:	68e5      	ldreq	r5, [r4, #12]
 801aa70:	6833      	ldreq	r3, [r6, #0]
 801aa72:	1aed      	subeq	r5, r5, r3
 801aa74:	68a3      	ldr	r3, [r4, #8]
 801aa76:	bf0c      	ite	eq
 801aa78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801aa7c:	2500      	movne	r5, #0
 801aa7e:	4293      	cmp	r3, r2
 801aa80:	bfc4      	itt	gt
 801aa82:	1a9b      	subgt	r3, r3, r2
 801aa84:	18ed      	addgt	r5, r5, r3
 801aa86:	2600      	movs	r6, #0
 801aa88:	341a      	adds	r4, #26
 801aa8a:	42b5      	cmp	r5, r6
 801aa8c:	d11a      	bne.n	801aac4 <_printf_common+0xc8>
 801aa8e:	2000      	movs	r0, #0
 801aa90:	e008      	b.n	801aaa4 <_printf_common+0xa8>
 801aa92:	2301      	movs	r3, #1
 801aa94:	4652      	mov	r2, sl
 801aa96:	4641      	mov	r1, r8
 801aa98:	4638      	mov	r0, r7
 801aa9a:	47c8      	blx	r9
 801aa9c:	3001      	adds	r0, #1
 801aa9e:	d103      	bne.n	801aaa8 <_printf_common+0xac>
 801aaa0:	f04f 30ff 	mov.w	r0, #4294967295
 801aaa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aaa8:	3501      	adds	r5, #1
 801aaaa:	e7c6      	b.n	801aa3a <_printf_common+0x3e>
 801aaac:	18e1      	adds	r1, r4, r3
 801aaae:	1c5a      	adds	r2, r3, #1
 801aab0:	2030      	movs	r0, #48	@ 0x30
 801aab2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801aab6:	4422      	add	r2, r4
 801aab8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801aabc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801aac0:	3302      	adds	r3, #2
 801aac2:	e7c7      	b.n	801aa54 <_printf_common+0x58>
 801aac4:	2301      	movs	r3, #1
 801aac6:	4622      	mov	r2, r4
 801aac8:	4641      	mov	r1, r8
 801aaca:	4638      	mov	r0, r7
 801aacc:	47c8      	blx	r9
 801aace:	3001      	adds	r0, #1
 801aad0:	d0e6      	beq.n	801aaa0 <_printf_common+0xa4>
 801aad2:	3601      	adds	r6, #1
 801aad4:	e7d9      	b.n	801aa8a <_printf_common+0x8e>
	...

0801aad8 <_printf_i>:
 801aad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aadc:	7e0f      	ldrb	r7, [r1, #24]
 801aade:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801aae0:	2f78      	cmp	r7, #120	@ 0x78
 801aae2:	4691      	mov	r9, r2
 801aae4:	4680      	mov	r8, r0
 801aae6:	460c      	mov	r4, r1
 801aae8:	469a      	mov	sl, r3
 801aaea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801aaee:	d807      	bhi.n	801ab00 <_printf_i+0x28>
 801aaf0:	2f62      	cmp	r7, #98	@ 0x62
 801aaf2:	d80a      	bhi.n	801ab0a <_printf_i+0x32>
 801aaf4:	2f00      	cmp	r7, #0
 801aaf6:	f000 80d2 	beq.w	801ac9e <_printf_i+0x1c6>
 801aafa:	2f58      	cmp	r7, #88	@ 0x58
 801aafc:	f000 80b9 	beq.w	801ac72 <_printf_i+0x19a>
 801ab00:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab04:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801ab08:	e03a      	b.n	801ab80 <_printf_i+0xa8>
 801ab0a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801ab0e:	2b15      	cmp	r3, #21
 801ab10:	d8f6      	bhi.n	801ab00 <_printf_i+0x28>
 801ab12:	a101      	add	r1, pc, #4	@ (adr r1, 801ab18 <_printf_i+0x40>)
 801ab14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801ab18:	0801ab71 	.word	0x0801ab71
 801ab1c:	0801ab85 	.word	0x0801ab85
 801ab20:	0801ab01 	.word	0x0801ab01
 801ab24:	0801ab01 	.word	0x0801ab01
 801ab28:	0801ab01 	.word	0x0801ab01
 801ab2c:	0801ab01 	.word	0x0801ab01
 801ab30:	0801ab85 	.word	0x0801ab85
 801ab34:	0801ab01 	.word	0x0801ab01
 801ab38:	0801ab01 	.word	0x0801ab01
 801ab3c:	0801ab01 	.word	0x0801ab01
 801ab40:	0801ab01 	.word	0x0801ab01
 801ab44:	0801ac85 	.word	0x0801ac85
 801ab48:	0801abaf 	.word	0x0801abaf
 801ab4c:	0801ac3f 	.word	0x0801ac3f
 801ab50:	0801ab01 	.word	0x0801ab01
 801ab54:	0801ab01 	.word	0x0801ab01
 801ab58:	0801aca7 	.word	0x0801aca7
 801ab5c:	0801ab01 	.word	0x0801ab01
 801ab60:	0801abaf 	.word	0x0801abaf
 801ab64:	0801ab01 	.word	0x0801ab01
 801ab68:	0801ab01 	.word	0x0801ab01
 801ab6c:	0801ac47 	.word	0x0801ac47
 801ab70:	6833      	ldr	r3, [r6, #0]
 801ab72:	1d1a      	adds	r2, r3, #4
 801ab74:	681b      	ldr	r3, [r3, #0]
 801ab76:	6032      	str	r2, [r6, #0]
 801ab78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801ab7c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801ab80:	2301      	movs	r3, #1
 801ab82:	e09d      	b.n	801acc0 <_printf_i+0x1e8>
 801ab84:	6833      	ldr	r3, [r6, #0]
 801ab86:	6820      	ldr	r0, [r4, #0]
 801ab88:	1d19      	adds	r1, r3, #4
 801ab8a:	6031      	str	r1, [r6, #0]
 801ab8c:	0606      	lsls	r6, r0, #24
 801ab8e:	d501      	bpl.n	801ab94 <_printf_i+0xbc>
 801ab90:	681d      	ldr	r5, [r3, #0]
 801ab92:	e003      	b.n	801ab9c <_printf_i+0xc4>
 801ab94:	0645      	lsls	r5, r0, #25
 801ab96:	d5fb      	bpl.n	801ab90 <_printf_i+0xb8>
 801ab98:	f9b3 5000 	ldrsh.w	r5, [r3]
 801ab9c:	2d00      	cmp	r5, #0
 801ab9e:	da03      	bge.n	801aba8 <_printf_i+0xd0>
 801aba0:	232d      	movs	r3, #45	@ 0x2d
 801aba2:	426d      	negs	r5, r5
 801aba4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801aba8:	4859      	ldr	r0, [pc, #356]	@ (801ad10 <_printf_i+0x238>)
 801abaa:	230a      	movs	r3, #10
 801abac:	e011      	b.n	801abd2 <_printf_i+0xfa>
 801abae:	6821      	ldr	r1, [r4, #0]
 801abb0:	6833      	ldr	r3, [r6, #0]
 801abb2:	0608      	lsls	r0, r1, #24
 801abb4:	f853 5b04 	ldr.w	r5, [r3], #4
 801abb8:	d402      	bmi.n	801abc0 <_printf_i+0xe8>
 801abba:	0649      	lsls	r1, r1, #25
 801abbc:	bf48      	it	mi
 801abbe:	b2ad      	uxthmi	r5, r5
 801abc0:	2f6f      	cmp	r7, #111	@ 0x6f
 801abc2:	4853      	ldr	r0, [pc, #332]	@ (801ad10 <_printf_i+0x238>)
 801abc4:	6033      	str	r3, [r6, #0]
 801abc6:	bf14      	ite	ne
 801abc8:	230a      	movne	r3, #10
 801abca:	2308      	moveq	r3, #8
 801abcc:	2100      	movs	r1, #0
 801abce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801abd2:	6866      	ldr	r6, [r4, #4]
 801abd4:	60a6      	str	r6, [r4, #8]
 801abd6:	2e00      	cmp	r6, #0
 801abd8:	bfa2      	ittt	ge
 801abda:	6821      	ldrge	r1, [r4, #0]
 801abdc:	f021 0104 	bicge.w	r1, r1, #4
 801abe0:	6021      	strge	r1, [r4, #0]
 801abe2:	b90d      	cbnz	r5, 801abe8 <_printf_i+0x110>
 801abe4:	2e00      	cmp	r6, #0
 801abe6:	d04b      	beq.n	801ac80 <_printf_i+0x1a8>
 801abe8:	4616      	mov	r6, r2
 801abea:	fbb5 f1f3 	udiv	r1, r5, r3
 801abee:	fb03 5711 	mls	r7, r3, r1, r5
 801abf2:	5dc7      	ldrb	r7, [r0, r7]
 801abf4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801abf8:	462f      	mov	r7, r5
 801abfa:	42bb      	cmp	r3, r7
 801abfc:	460d      	mov	r5, r1
 801abfe:	d9f4      	bls.n	801abea <_printf_i+0x112>
 801ac00:	2b08      	cmp	r3, #8
 801ac02:	d10b      	bne.n	801ac1c <_printf_i+0x144>
 801ac04:	6823      	ldr	r3, [r4, #0]
 801ac06:	07df      	lsls	r7, r3, #31
 801ac08:	d508      	bpl.n	801ac1c <_printf_i+0x144>
 801ac0a:	6923      	ldr	r3, [r4, #16]
 801ac0c:	6861      	ldr	r1, [r4, #4]
 801ac0e:	4299      	cmp	r1, r3
 801ac10:	bfde      	ittt	le
 801ac12:	2330      	movle	r3, #48	@ 0x30
 801ac14:	f806 3c01 	strble.w	r3, [r6, #-1]
 801ac18:	f106 36ff 	addle.w	r6, r6, #4294967295
 801ac1c:	1b92      	subs	r2, r2, r6
 801ac1e:	6122      	str	r2, [r4, #16]
 801ac20:	f8cd a000 	str.w	sl, [sp]
 801ac24:	464b      	mov	r3, r9
 801ac26:	aa03      	add	r2, sp, #12
 801ac28:	4621      	mov	r1, r4
 801ac2a:	4640      	mov	r0, r8
 801ac2c:	f7ff fee6 	bl	801a9fc <_printf_common>
 801ac30:	3001      	adds	r0, #1
 801ac32:	d14a      	bne.n	801acca <_printf_i+0x1f2>
 801ac34:	f04f 30ff 	mov.w	r0, #4294967295
 801ac38:	b004      	add	sp, #16
 801ac3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	f043 0320 	orr.w	r3, r3, #32
 801ac44:	6023      	str	r3, [r4, #0]
 801ac46:	4833      	ldr	r0, [pc, #204]	@ (801ad14 <_printf_i+0x23c>)
 801ac48:	2778      	movs	r7, #120	@ 0x78
 801ac4a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801ac4e:	6823      	ldr	r3, [r4, #0]
 801ac50:	6831      	ldr	r1, [r6, #0]
 801ac52:	061f      	lsls	r7, r3, #24
 801ac54:	f851 5b04 	ldr.w	r5, [r1], #4
 801ac58:	d402      	bmi.n	801ac60 <_printf_i+0x188>
 801ac5a:	065f      	lsls	r7, r3, #25
 801ac5c:	bf48      	it	mi
 801ac5e:	b2ad      	uxthmi	r5, r5
 801ac60:	6031      	str	r1, [r6, #0]
 801ac62:	07d9      	lsls	r1, r3, #31
 801ac64:	bf44      	itt	mi
 801ac66:	f043 0320 	orrmi.w	r3, r3, #32
 801ac6a:	6023      	strmi	r3, [r4, #0]
 801ac6c:	b11d      	cbz	r5, 801ac76 <_printf_i+0x19e>
 801ac6e:	2310      	movs	r3, #16
 801ac70:	e7ac      	b.n	801abcc <_printf_i+0xf4>
 801ac72:	4827      	ldr	r0, [pc, #156]	@ (801ad10 <_printf_i+0x238>)
 801ac74:	e7e9      	b.n	801ac4a <_printf_i+0x172>
 801ac76:	6823      	ldr	r3, [r4, #0]
 801ac78:	f023 0320 	bic.w	r3, r3, #32
 801ac7c:	6023      	str	r3, [r4, #0]
 801ac7e:	e7f6      	b.n	801ac6e <_printf_i+0x196>
 801ac80:	4616      	mov	r6, r2
 801ac82:	e7bd      	b.n	801ac00 <_printf_i+0x128>
 801ac84:	6833      	ldr	r3, [r6, #0]
 801ac86:	6825      	ldr	r5, [r4, #0]
 801ac88:	6961      	ldr	r1, [r4, #20]
 801ac8a:	1d18      	adds	r0, r3, #4
 801ac8c:	6030      	str	r0, [r6, #0]
 801ac8e:	062e      	lsls	r6, r5, #24
 801ac90:	681b      	ldr	r3, [r3, #0]
 801ac92:	d501      	bpl.n	801ac98 <_printf_i+0x1c0>
 801ac94:	6019      	str	r1, [r3, #0]
 801ac96:	e002      	b.n	801ac9e <_printf_i+0x1c6>
 801ac98:	0668      	lsls	r0, r5, #25
 801ac9a:	d5fb      	bpl.n	801ac94 <_printf_i+0x1bc>
 801ac9c:	8019      	strh	r1, [r3, #0]
 801ac9e:	2300      	movs	r3, #0
 801aca0:	6123      	str	r3, [r4, #16]
 801aca2:	4616      	mov	r6, r2
 801aca4:	e7bc      	b.n	801ac20 <_printf_i+0x148>
 801aca6:	6833      	ldr	r3, [r6, #0]
 801aca8:	1d1a      	adds	r2, r3, #4
 801acaa:	6032      	str	r2, [r6, #0]
 801acac:	681e      	ldr	r6, [r3, #0]
 801acae:	6862      	ldr	r2, [r4, #4]
 801acb0:	2100      	movs	r1, #0
 801acb2:	4630      	mov	r0, r6
 801acb4:	f7ea ff1c 	bl	8005af0 <memchr>
 801acb8:	b108      	cbz	r0, 801acbe <_printf_i+0x1e6>
 801acba:	1b80      	subs	r0, r0, r6
 801acbc:	6060      	str	r0, [r4, #4]
 801acbe:	6863      	ldr	r3, [r4, #4]
 801acc0:	6123      	str	r3, [r4, #16]
 801acc2:	2300      	movs	r3, #0
 801acc4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801acc8:	e7aa      	b.n	801ac20 <_printf_i+0x148>
 801acca:	6923      	ldr	r3, [r4, #16]
 801accc:	4632      	mov	r2, r6
 801acce:	4649      	mov	r1, r9
 801acd0:	4640      	mov	r0, r8
 801acd2:	47d0      	blx	sl
 801acd4:	3001      	adds	r0, #1
 801acd6:	d0ad      	beq.n	801ac34 <_printf_i+0x15c>
 801acd8:	6823      	ldr	r3, [r4, #0]
 801acda:	079b      	lsls	r3, r3, #30
 801acdc:	d413      	bmi.n	801ad06 <_printf_i+0x22e>
 801acde:	68e0      	ldr	r0, [r4, #12]
 801ace0:	9b03      	ldr	r3, [sp, #12]
 801ace2:	4298      	cmp	r0, r3
 801ace4:	bfb8      	it	lt
 801ace6:	4618      	movlt	r0, r3
 801ace8:	e7a6      	b.n	801ac38 <_printf_i+0x160>
 801acea:	2301      	movs	r3, #1
 801acec:	4632      	mov	r2, r6
 801acee:	4649      	mov	r1, r9
 801acf0:	4640      	mov	r0, r8
 801acf2:	47d0      	blx	sl
 801acf4:	3001      	adds	r0, #1
 801acf6:	d09d      	beq.n	801ac34 <_printf_i+0x15c>
 801acf8:	3501      	adds	r5, #1
 801acfa:	68e3      	ldr	r3, [r4, #12]
 801acfc:	9903      	ldr	r1, [sp, #12]
 801acfe:	1a5b      	subs	r3, r3, r1
 801ad00:	42ab      	cmp	r3, r5
 801ad02:	dcf2      	bgt.n	801acea <_printf_i+0x212>
 801ad04:	e7eb      	b.n	801acde <_printf_i+0x206>
 801ad06:	2500      	movs	r5, #0
 801ad08:	f104 0619 	add.w	r6, r4, #25
 801ad0c:	e7f5      	b.n	801acfa <_printf_i+0x222>
 801ad0e:	bf00      	nop
 801ad10:	0801ba3b 	.word	0x0801ba3b
 801ad14:	0801ba4c 	.word	0x0801ba4c

0801ad18 <memmove>:
 801ad18:	4288      	cmp	r0, r1
 801ad1a:	b510      	push	{r4, lr}
 801ad1c:	eb01 0402 	add.w	r4, r1, r2
 801ad20:	d902      	bls.n	801ad28 <memmove+0x10>
 801ad22:	4284      	cmp	r4, r0
 801ad24:	4623      	mov	r3, r4
 801ad26:	d807      	bhi.n	801ad38 <memmove+0x20>
 801ad28:	1e43      	subs	r3, r0, #1
 801ad2a:	42a1      	cmp	r1, r4
 801ad2c:	d008      	beq.n	801ad40 <memmove+0x28>
 801ad2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ad32:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ad36:	e7f8      	b.n	801ad2a <memmove+0x12>
 801ad38:	4402      	add	r2, r0
 801ad3a:	4601      	mov	r1, r0
 801ad3c:	428a      	cmp	r2, r1
 801ad3e:	d100      	bne.n	801ad42 <memmove+0x2a>
 801ad40:	bd10      	pop	{r4, pc}
 801ad42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ad46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ad4a:	e7f7      	b.n	801ad3c <memmove+0x24>

0801ad4c <_realloc_r>:
 801ad4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ad50:	4680      	mov	r8, r0
 801ad52:	4615      	mov	r5, r2
 801ad54:	460c      	mov	r4, r1
 801ad56:	b921      	cbnz	r1, 801ad62 <_realloc_r+0x16>
 801ad58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ad5c:	4611      	mov	r1, r2
 801ad5e:	f7ff bb73 	b.w	801a448 <_malloc_r>
 801ad62:	b92a      	cbnz	r2, 801ad70 <_realloc_r+0x24>
 801ad64:	f7ff fca8 	bl	801a6b8 <_free_r>
 801ad68:	2400      	movs	r4, #0
 801ad6a:	4620      	mov	r0, r4
 801ad6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ad70:	f000 f81a 	bl	801ada8 <_malloc_usable_size_r>
 801ad74:	4285      	cmp	r5, r0
 801ad76:	4606      	mov	r6, r0
 801ad78:	d802      	bhi.n	801ad80 <_realloc_r+0x34>
 801ad7a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 801ad7e:	d8f4      	bhi.n	801ad6a <_realloc_r+0x1e>
 801ad80:	4629      	mov	r1, r5
 801ad82:	4640      	mov	r0, r8
 801ad84:	f7ff fb60 	bl	801a448 <_malloc_r>
 801ad88:	4607      	mov	r7, r0
 801ad8a:	2800      	cmp	r0, #0
 801ad8c:	d0ec      	beq.n	801ad68 <_realloc_r+0x1c>
 801ad8e:	42b5      	cmp	r5, r6
 801ad90:	462a      	mov	r2, r5
 801ad92:	4621      	mov	r1, r4
 801ad94:	bf28      	it	cs
 801ad96:	4632      	movcs	r2, r6
 801ad98:	f7ff fc7f 	bl	801a69a <memcpy>
 801ad9c:	4621      	mov	r1, r4
 801ad9e:	4640      	mov	r0, r8
 801ada0:	f7ff fc8a 	bl	801a6b8 <_free_r>
 801ada4:	463c      	mov	r4, r7
 801ada6:	e7e0      	b.n	801ad6a <_realloc_r+0x1e>

0801ada8 <_malloc_usable_size_r>:
 801ada8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801adac:	1f18      	subs	r0, r3, #4
 801adae:	2b00      	cmp	r3, #0
 801adb0:	bfbc      	itt	lt
 801adb2:	580b      	ldrlt	r3, [r1, r0]
 801adb4:	18c0      	addlt	r0, r0, r3
 801adb6:	4770      	bx	lr

0801adb8 <_init>:
 801adb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adba:	bf00      	nop
 801adbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adbe:	bc08      	pop	{r3}
 801adc0:	469e      	mov	lr, r3
 801adc2:	4770      	bx	lr

0801adc4 <_fini>:
 801adc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801adc6:	bf00      	nop
 801adc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801adca:	bc08      	pop	{r3}
 801adcc:	469e      	mov	lr, r3
 801adce:	4770      	bx	lr
